<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
  <head>
    </head>
  <body>
    <h1><MadCap:concept term="Cloud;Appliance;Software"/>Event Messaging Overview</h1>
    <p>This section discusses how event messages move through <MadCap:conditionalText MadCap:conditions="SAP.SapHideFromOutput"><MadCap:variable name="Product-Names.pubsub_brand_only"/> event brokers</MadCap:conditionalText><MadCap:conditionalText MadCap:conditions="SAP.SapOnlyOutput"><MadCap:variable name="Product-Names.broker_cloud_short"/>s</MadCap:conditionalText>. For more general information about messaging in <MadCap:conditionalText MadCap:conditions="SAP.SapHideFromOutput">the <MadCap:variable name="Product-Names.pubsub_brand_only"/> Platform</MadCap:conditionalText><MadCap:variable name="Product-Names.cloud_product_firstuse" MadCap:conditions="SAP.SapOnlyOutput"/>, see <MadCap:xref href="../Get-Started/what-is-messaging.htm">What Is Messaging?</MadCap:xref></p>
    <h2>Topics</h2>
    <p>Topics are central to how <MadCap:variable name="Product-Names.pubsub_brand_only" MadCap:conditions="SAP.SapHideFromOutput"/><MadCap:variable name="Product-Names.cloud_product_short" MadCap:conditions="SAP.SapOnlyOutput"/> event brokers move events from publishers to subscribers. For more general information about <MadCap:variable name="Product-Names.pubsub_brand_only" MadCap:conditions="SAP.SapHideFromOutput"/><MadCap:variable name="Product-Names.cloud_product_short" MadCap:conditions="SAP.SapOnlyOutput"/> topics, see <MadCap:xref href="../Get-Started/what-are-topics.htm">Understanding Topics</MadCap:xref>.</p>
    <p>In <MadCap:variable name="Product-Names.pubsub_brand_only" MadCap:conditions="SAP.SapHideFromOutput"/><MadCap:variable name="Product-Names.cloud_product_short" MadCap:conditions="SAP.SapOnlyOutput"/>, topics follow a hierarchical structure consisting of multiple levels, each of which provides contextual details about the event. This structure both describes the event and effectively routes events across an event-driven system and ensures consumer applications have the flexibility to selectively consume only the events they want.</p>
    <p>To learn about best practices for constructing your topic architecture, see <MadCap:xref href="Topic-Architecture-Best-Practices.htm">Topic Architecture Best Practices</MadCap:xref>.</p>
    <p>For information about general topic syntax, see <MadCap:xref href="SMF-Topics.htm">Solace Message Format Topics</MadCap:xref>.</p>
    <p>You can use wildcards in topic subscriptions to refine the information received by message consumers. For more information, see <MadCap:xref href="Wildcard-Charaters-Topic-Subs.htm">Wildcard Characters in Topic Subscriptions</MadCap:xref>.</p>
    <p><MadCap:variable name="Product-Names.pubsub_brand_only" MadCap:conditions="SAP.SapHideFromOutput"/><MadCap:variable name="Product-Names.cloud_product_short_initialcase" MadCap:conditions="SAP.SapOnlyOutput"/> event brokers also have a number of reserved or special topics that are used to configure a range of capabilities such as queue routing, message promotion and demotion, and disaster recovery. For more information, see <MadCap:xref href="Reserved-Topics.htm">Reserved Topics</MadCap:xref>. </p>
    <h2>Direct and Guaranteed Messaging</h2>
    <p><MadCap:variable name="Product-Names.pubsub_brand_only" MadCap:conditions="SAP.SapHideFromOutput"/><MadCap:variable name="Product-Names.cloud_product_short_initialcase" MadCap:conditions="SAP.SapOnlyOutput"/> event brokers support both Direct messaging and Guaranteed messaging.</p>
    <p>
		Direct messaging is meant for use with high-rate or very low-latency message messaging applications that can tolerate occasional message loss. Producers can publish messages to a topic and, when the messages are received by the event broker, they can be delivered efficiently to a large number of clients with matching topic subscriptions. Direct messaging has the following characteristics:</p>
    <ul>
      <li>Clients subscribe to topics directly.</li>
      <li>Messages are not retained for a client when that client is not connected to an event broker.</li>
      <li>Messages can be discarded when congestion or system failures are encountered.</li>
      <li>Messages are not acknowledged upon delivery.</li>
    </ul>
    <p>For more information, see <MadCap:xref href="Direct-Msg/Direct-Messages.htm" target="_blank">Direct Messages</MadCap:xref>.</p>
    <p> Guaranteed messaging is most appropriate for messaging applications that require persistent storage of the messages they send or intend to receive. Guaranteed messaging has the following characteristics:</p>
    <ul>
      <li>Topic subscriptions are associated with an endpoint (queue or topic endpoint) on the event broker rather than consuming clients.</li>
      <li>Messages can't be lost once they are acknowledged by the event broker.</li>
      <li>When messages are delivered to a durable endpoint, they are retained until they are consumed by a client.</li>
      <li>Delivery to a client is acknowledged.</li>
    </ul>
    <p>For more information, see <MadCap:xref href="Guaranteed-Msg/Guaranteed-Messages.htm" target="_blank">Guaranteed Messages</MadCap:xref>.</p>
    <h2><a name="Persiste"/>Persistence and Durability</h2>
    <p>Although the terms <i>persistent</i> and <i>durable</i> are related, the concept of persistence applies to event messages, and durability applies to endpoints.</p>
    <p>Persistence refers to the quality-of-service (QoS) of event messages. Event messages are considered persistent if they are placed onto non-volatile storage media after they arrive on the event broker. Persistent messages are also known as Guaranteed messages. The event broker's data plane stores a message if the message arrives with the <code>Persistent Delivery Mode</code> set to <code>Persistent</code>, or if a queue or durable topic endpoint has subscribed to a topic where messages are persisted regardless of the <code>Persistent Delivery Mode</code> flag setting in the message. Messages flagged as <code>Persistent</code> result in an acknowledgment message being sent back to the producer after the message is stored. </p>
    <p>If an event message is sent with <code>Persistent Delivery Mode</code> set to <code>Direct</code>, the message is only placed onto the non-volatile storage media if the message topic is subscribed to by a queue or a durable topic endpoint. </p>
    <p>In some cases a message may have a <code>Persistent Delivery Mode</code> of <code>Non-Persistent</code> if it is published using JMS APIs or it is promoted from a Direct message. For more information, see <MadCap:xref href="Guaranteed-Msg/Topic-Matching-and-Delivery-Modes.htm">Topic Matching and Message Delivery Modes</MadCap:xref>.</p>
    <h4>Durability</h4>
    <p><MadCap:xref href="Guaranteed-Msg/Endpoints.htm#Endpoint_Durability">Endpoint Durability</MadCap:xref> is a characteristic of a <MadCap:variable name="Product-Names.pubsub_brand_only"/> queue or topic endpoint. Durable endpoints operate whether or not consumers are active. For example, queue messages are still available if an event broker fails or there is a high availability (HA) or disaster recovery (DR) failover. Messages are considered to be persistent in a general sense if they are associated with a durable queue because they remain on the event broker regardless of the life span of particular client session or event broker restart.</p>
    <p>Temporary queues aren't considered to be durable. Messages sent to temporary queues are persisted to storage, but they're deleted if the active temporary queue consumer unbinds or disconnects. Therefore, the endpoint is not durable beyond the life of the consumer.</p>
    <p>To learn more about durable and non-durable queues, see <MadCap:xref href="../Get-Started/topic-endpoints-queues.htm">Topic Endpoints and Queues</MadCap:xref>.</p>
    <h2>Messaging Patterns</h2>
    <p><MadCap:variable name="Product-Names.pubsub_brand_only" MadCap:conditions="SAP.SapHideFromOutput"/><MadCap:variable name="Product-Names.cloud_product_short_initialcase" MadCap:conditions="SAP.SapOnlyOutput"/> supports a array of messaging patterns to suit a wide variety of needs. Commonly used patterns include:</p>
    <ul>
      <li>
        <MadCap:xref href="#Publish-Subscribe">Publish-Subscribe Exchange Pattern</MadCap:xref>
      </li>
      <li>
        <MadCap:xref href="#Request-Reply">Request-Reply Exchange Pattern</MadCap:xref>
      </li>
      <li>
        <MadCap:xref href="#Competing_Consumer">Competing Consumer Scaling Pattern</MadCap:xref>
      </li>
      <li>
        <MadCap:xref href="#High_Availability">Consumer High Availability</MadCap:xref>
      </li>
      <li>
        <MadCap:xref href="#Partioning">Partioning</MadCap:xref>
      </li>
    </ul>
    <h3><a name="Publish-Subscribe"/>Publish-Subscribe Exchange Pattern</h3>
    <p>With publish-subscribe messaging, messages sent by the producer (publisher) can be processed multiple times by different consumers (subscribers).   A published event can be delivered to multiple consumers based on the topic subscriptions they have defined. Each consumer receives its own copy of the message for processing.</p>
    <p>
      <img src="../Resources/Images/Getting-Started/pub-sub-high-level.png" alt="Diagram illustrating the concepts described in the surrounding text"/>
    </p>
    <h3><a name="Request-Reply"/>Request-Reply Exchange Pattern</h3>
    <p>With request-reply messaging, applications achieve two-way communication using separate point-to-point channels: one for requests, and another for replies. In a request-reply pattern, the applications are both producers and consumers.</p>
    <p>
      <img src="../Resources/Images/Getting-Started/request-reply.png" alt="diagram illustrating the concepts described in the surrounding text"/>
    </p>
    <h3><a name="Competing_Consumer"/>Competing Consumer Scaling Pattern</h3>
    <p>Competing consumers is a scalability pattern in event-driven architecture that involves distributing the workload of processing events among multiple instances of the same application to improve throughput and reduce processing time. In this mode, the queue has a non-exclusive access type, which facilitates the delivery of messages to all bound consumer flows in a round-robin fashion. This pattern is commonly used when message order is not important and you need to scale consumers to keep up with the message throughput.</p>
    <p>
      <img src="../Resources/Images/Animated/competing-consumer.gif" alt="Animation showing scaling using competing consumers."/>
    </p>
    <h3><a name="High_Availability"/>Consumer High Availability</h3>
    <p>When you implement a high availability (HA) consumer scaling pattern, you have multiple instances of the same consumer application available to process events. One instance of the consumer  is chosen to be active and receives all events, while the other instances are on standby. If the active instance crashes or goes down, the broker automatically elects another instance to activate and starts sending all events to the new consumer. This pattern ensures that event processing continues as long as you have one instance connected and processing. This pattern is also sometimes referred to as Primary / Secondary or Primary / Secondary / Tertiary depending on how many levels of redundancy are required.</p>
    <p>
      <img src="../Resources/Images/Animated/ha-consumer.gif" alt="Diagram illustrating the concepts described in the surrounding text."/>
    </p>
    <p>To implement this pattern, the queue has the exclusive access type. This access type allows multiple consumers to connect, but the event broker delivers events to only one of them. If the active consumer disconnects, the next consumer to receive events is randomly selected from the waiting pool of consumers. This pattern is commonly used when all messages in a queue must be processed in order.</p>
    <h3><a name="Partioning"/>Partioning</h3>
    <p>Partitioning is a design pattern in event-driven architecture that helps to improve scalability while also maintaining message order where it’s required. You effectively split up a stream of events into partitions, which can then be processed in parallel. Order is maintained by partition instead of across the entire event stream. This pattern is common when you need to scale your consumers, but you also care about message order.</p>
    <p>In <MadCap:variable name="Product-Names.pubsub_brand_only" MadCap:conditions="SAP.SapHideFromOutput"/><MadCap:variable name="Product-Names.cloud_product_short" MadCap:conditions="SAP.SapOnlyOutput"/>, this pattern is implemented using partitioned queues. Partitioned queues are a type of non-exclusive queue that delivers to many consumers at once to enable scaling. Partitioned queues use a partition key to split ingress events into partitions. All events within a partition are always delivered to the same consumer, thus enabling scalability while maintaining the message order. For more information, see <MadCap:xref href="Guaranteed-Msg/Queues.htm#partitioned-queues" target="_blank">Partitioned Queues</MadCap:xref>.</p>
  </body>
</html>
