<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
  <head>
    <link href="../Resources/TableStyles/Table_Num.css" rel="stylesheet" MadCap:stylesheetType="table"/>
  </head>
  <body>
    <h1>Configuring Multiple Linux Shell Users</h1>
    <p>In addition to the built-in root user and default support user accounts, you can create extra sysadmins, who have root user like privileges, and extra support accounts. These additional accounts introduce more flexibility into appliance operations, and allow for the implementation of  operational protocols similar to these:</p>
    <ul>
      <li>Emergency sysadmin accounts and passwords can be kept in a secure location in case the operational root password is ever lost. For example, this allows for recovery if a trusted employee leaves your organization, or if a password management system breaks or fails and leaves accounts inaccessible.</li>
      <li>Corporate security policies can be implemented that forbid shared usernames and require each sysadmin to have a unique username.</li>
      <li>Certain users can be provided access to a subset of Linux tools so they can examine appliance log files, but not be able to delete or modify files they are not supposed to.</li>
    </ul>
    <p>Linux shell user accounts fall into three groups (in addition to the standard root and default support user) that you can create and configure:</p>
    <ul>
      <li><b>Sysadmin:</b> These are root-like users who can run all commands in the appliance’s shell with root privileges without entering the root password by using <code>sudo</code>. In other words, any appliance configuration procedure in these documents that notes you need root access, or be the root user, to perform can also be performed by a Sysadmin user.
           </li>
      <li><b>Support:</b> These creatable support users have the same privileges as the default support user. They are allowed to execute a limited set of appliance shell commands and scripts.
            </li>
      <li><b>Restricted:</b> These users have read access to appliance logs, read/write access to files in their own home directory, and read access to files owned by other users as long as the files’ owners allow it. They can execute shell commands that don’t need root access.
</li>
    </ul>
    <p class="Note">While there's no limit on the number of new user accounts you can create, <MadCap:variable name="Variables.CompanyName"/> supports a maximum of two sysadmin group users and a combined total of 100 users in support or restricted groups.</p>
    <p>The following table lists the characteristics of each of the three shell user groups. It presents the permissions, limits on associated home directory quota, and allowable shell commands.</p>
    <p>
      <b>Linux Shell User Group Properties</b>
    </p>
    <table style="width: 100%;mc-table-style: url('../Resources/TableStyles/Table_Num.css');" class="TableStyle-Table_Num" cellspacing="0">
      <col class="TableStyle-Table_Num-Column-Column1"/>
      <col class="TableStyle-Table_Num-Column-Column1"/>
      <col class="TableStyle-Table_Num-Column-Column1"/>
      <col class="TableStyle-Table_Num-Column-Column1"/>
      <thead>
        <tr class="TableStyle-Table_Num-Head-Header1">
          <th class="TableStyle-Table_Num-HeadE-Column1-Header1" style="text-align: center;">Shell User Group</th>
          <th class="TableStyle-Table_Num-HeadE-Column1-Header1">Permissions</th>
          <th class="TableStyle-Table_Num-HeadE-Column1-Header1" style="text-align: center;">Home Directory Size Quota</th>
          <th class="TableStyle-Table_Num-HeadD-Column1-Header1" style="text-align: center;">Allowable Shell Commands </th>
        </tr>
      </thead>
      <tbody>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">Sysadmin</td>
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">Same permissions as the root user.</td>
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">Limited by disk size</td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">All commands can be <code>sudo</code> without entering the root password</td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">Support</td>
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p>Same permissions as the default support user.</p>
            <p>Allowed to execute all the host commands shown in the <code>Allowable Shell Commands</code> column and scripts in <code>/usr/sw/loads/currentload/supported</code> directory.</p>
          </td>
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">Recommended: 100 MB per support user</td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Code">
&gt; fdisk
</p>
            <p class="Code">&gt; fsck</p>
            <p class="Code">
&gt; gather-diagnostics</p>
            <p class="Code">&gt; hwclock</p>
            <p class="Code">
&gt; ipmitool</p>
            <p class="Code">	&gt; mdadm</p>
            <p class="Code">&gt; 
mkfs
</p>
            <p class="Code">&gt; provision-lun-for-ad
</p>
            <p class="Code">&gt; reboot
</p>
            <p class="Code">&gt; rpm-install</p>
            <p class="Code">
&gt; run-adb-post
</p>
            <p class="Code">&gt; run-hba-post</p>
            <p class="Code">
&gt; run-nab-post
</p>
            <p class="Code">&gt; run-platform-post
</p>
            <p class="Code">	&gt; run-trb-post
</p>
            <p class="Code">&gt; show-adb-cap-status
</p>
            <p class="Code">&gt; show-hardware
</p>
            <p class="Code">&gt; show-hardware-detail
</p>
            <p class="Code">&gt; show-hardware-post
</p>
            <p class="Code">&gt; show-power-supply-status
</p>
            <p class="Code">&gt; show-respawn-history
</p>
            <p class="Code">&gt; smartctl</p>
            <p class="Code">
&gt; soldebug</p>
            <p class="Code">&gt; soldisktest</p>
            <p class="Code">&gt; vmstat
</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyB-Column1-Body1">Restricted</td>
          <td class="TableStyle-Table_Num-BodyB-Column1-Body1">
            <p>Read access to Solace logs.</p>
            <p>Read and write access to their home directory.</p>
            <p>Read access to files owned by other users if allowed by the files' owners.</p>
            <p>Allowed to execute some standard Linux commands that don't need root access. 
</p>
          </td>
          <td class="TableStyle-Table_Num-BodyB-Column1-Body1">Recommended: 100 MB per restricted user</td>
          <td class="TableStyle-Table_Num-BodyA-Column1-Body1">None</td>
        </tr>
      </tbody>
    </table>
    <p>There are also some general characteristics that apply to all shell users:</p>
    <ul>
      <li>All shell users can change their own passwords.</li>
      <li>All shell users survive system upgrades.</li>
      <li>All shell users are included in database backups and restores; however, their associated home directories are not backed up or restored,</li>
      <li>All shell users and their associated home directories are removed when the <code>reload default-config</code> command is run (note that the built-in root and default support user accounts are unaffected).</li>
      <li>All shell users can be individually assigned disk quota. </li>
    </ul>
    <MadCap:snippetBlock src="../Resources/Snippets/Admin/appliance-only-users.flsnp"/>
    <h2 class="with-rule"><a name="Config_Sysadmin_Direct"/>Creating Linux Shell Users</h2>
    <p>In this section we'll show you how to create Sysadmin, Support and Restricted user accounts.</p>
    <p>As a root or sysadmin user, perform the following steps in the appliance's Linux shell, to create and configure a new shell user: </p>
    <ol>
      <li>Create a new user by executing the <code>luseradd</code> command with <code>USER_TYPE</code> set to either <code>sysadmin</code>, <code>support</code> or <code>restricted</code>, depending on the group member you're creating.</li>
      <p class="Code">$ sudo luseradd -g &lt;USER_TYPE&gt; &lt;username&gt;</p>
      <li>Configure an initial password with the <code>passwd</code> command. You'll be prompted to enter a password for <code>&lt;username&gt;</code>.</li>
      <p class="Code">$ sudo passwd &lt;username&gt;</p>
      <li>A recommended security practice is to force the user to change their password upon first login by setting their password expiry information to immediate. This is done with the <code>chage -d 0</code> command.</li>
      <p class="Code">$ sudo chage -d 0 &lt;username&gt;</p>
      <li>Set the user's disk quota if you're configuring either a <code>support</code> or <code>restricted</code> shell user. In this example, the recommended 100 MB has been set. You don't need to set a quota for a <code>sysadmin</code> user because their quota is limited only by the system's disk size.</li>
      <p class="Code">$ sudo setquota -u &lt;username&gt; 100000 100000 50000 50000 /usr/sw</p>
    </ol>
    <h3>Adding SSH Keys to User Accounts</h3>
    <p>You can provide an additional layer of security by installing an ssh key on the user's account. These steps show you how to do that. </p>
    <ol>
      <li>Create a public/private key pair on the client machine that will be used to connect to the appliance. A passphrase can be used, but note that the passphrase must be entered every time the key is used.</li>
      <p class="Code">$ ssh-keygen -t rsa</p>
      <li>Log into the appliance and create a hidden ssh directory in the new user's home directory.</li>
      <p class="Code">$ mkdir /usr/sw/home/&lt;username&gt;/.ssh</p>
      <li>Send the file <code>id_rsa.pub</code> to the appliance. As an example, <code>scp</code> will be used.</li>
      <p class="Code">$ scp id_rsa.pub &lt;destination&gt;</p>
      <li>Install the public key in the <code>authorized_keys</code> list.</li>
      <p class="Code">$ cat id_rsa.pub &gt;&gt; /usr/sw/home/&lt;username&gt;/.ssh/authorized_keys</p>
      <li>For further security, disable password authentication for the new user account once ssh key login has been configured.</li>
      <p>Once password authentication is disabled, the only way to login is with ssh keys, and it won't be possible to log in to this user account from the Solace CLI to the Linux shell with the CLI command <code>shell</code>. Therefore, ensure there is at least one sysadmin user that can be logged in directly without an ssh key in case of Solace PubSub+ failure.</p>
      <p>Execute the following command to disable password authentication: </p>
      <p class="Code">$ sudo passwd -l &lt;username&gt;</p>
    </ol>
    <h2 class="with-rule"><a name="Config_Sysadmin_2step"/>Creating Enhanced Security Sysadmin Users</h2>
    <p>For enhanced security, sysadmin users can be configured so that they must use a 2-step login process:</p>
    <ul>
      <li>first, they log in as a support user, and</li>
      <li> then they can log in to their sysadmin account. </li>
    </ul>
    <p>To configure a new sysadmin user that requires this 2-step login process, do the following steps in the appliance's Linux shell as root or a sysadmin user.</p>
    <ol>
      <li>Create a new sysadmin user by executing the <code>luseradd</code> command.</li>
      <p class="Code">$ sudo luseradd -g sysadmin &lt;username&gt;</p>
      <li>Create a new support user by executing the <code>luseradd</code> command with the <code>support</code> parameter.</li>
      <p class="Code">$ sudo luseradd -g support &lt;username&gt;_support</p>
      <li>Configure initial passwords for both the sysadmin and support accounts.  You'll be prompted to enter passwords for <code>&lt;username&gt;</code> and <code>&lt;username&gt;_support</code>.</li>
      <p class="Code">$ sudo passwd &lt;username&gt;</p>
      <p class="Code">$ sudo passwd &lt;username&gt;_support</p>
      <li>Force the user to change the passwords upon first login by setting the password expiry information to immediate.</li>
      <p class="Code">$ sudo chage -d 0 &lt;username&gt;</p>
      <p class="Code">$ sudo chage -d 0 &lt;username&gt;_support</p>
      <li>Allocate a disk quota for the support user. In this example, 100 MB is the desired value.</li>
      <p class="Code">$ sudo setquota -u &lt;username&gt;_support 100000 100000 50000 50000 /usr/sw</p>
      <li>Disable direct shell login for the sysadmin account.</li>
      <p class="Code">$ sudo chsh -s /sbin/solace-nologin &lt;username&gt;</p>
      <li>To login to the newly created sysadmin account, first login as to the associated support user account you just created and then run the following command:</li>
      <p class="Code">$ su -s /bin/bash &lt;username&gt;</p>
    </ol>
    <h3>Adding SSH Keys to Support Users' Accounts</h3>
    <p>Execute the following steps to provide an additional level of security by installing an ssh key on the support account.</p>
    <ol>
      <li>Create a public/private key pair on the client machine that will be used to connect to the appliance. A passphrase can be used, but note that the passphrase must be entered every time the key is used.</li>
      <p class="Code">$ ssh-keygen -t rsa</p>
      <li>Log into the appliance and create a hidden ssh directory in the new support user's home directory.</li>
      <p class="Code">$ mkdir /usr/sw/home/&lt;username&gt;_support/.ssh</p>
      <li>Send the file <code>id_rsa.pub</code> to the appliance.
                <p>In this example, we'll use <code>scp</code>.</p><p class="Code">$ scp id_rsa.pub &lt;destination&gt;</p></li>
      <li>Install the public key in the support user's <code>authorized_keys</code> list.</li>
      <p class="Code">$ cat id_rsa.pub &gt;&gt; /usr/sw/home/&lt;username&gt;_support/.ssh/authorized_keys</p>
      <li>Once ssh key login has been setup, you can choose to disable password authentication for the new support user account if additional security is required.</li>
      <p>Once password authentication is disabled, the only way to login is with ssh keys, and it won't be possible to log in to this user account from the Solace CLI to the Linux shell with the CLI command <code>shell</code>. Therefore, you should ensure there is at least one sysadmin user that can be logged in directly without an ssh key in case of Solace PubSub+ failure.</p>
      <p>Execute the following command to disable password authentication:</p>
      <p class="Code">$ sudo passwd -l &lt;username&gt;_support</p>
    </ol>
    <h2 class="with-rule"><a name="Manage_Accounts"/>Managing Linux Shell User Accounts</h2>
    <p>As either root or a sysadmin user, you can change a user's password, delete a user, and change their disk space quotas.</p>
    <h3>Changing User Passwords</h3>
    <p>To change a user's password, use the <code>passwd</code> command:</p>
    <p class="Code">$ sudo passwd &lt;username&gt;</p>
    <h3>Changing User Disk Space Quotas</h3>
    <p>To change a user's allocated disk quota, use the <code>setquota</code> command:</p>
    <p class="Code">$ sudo setquota -u &lt;username&gt; &lt;soft limit in KB&gt; &lt;hard limit in KB&gt; 50000 50000 /usr/sw</p>
    <h3>Deleting Users</h3>
    <p>To delete a user and its associated home directory, use the <code>luserdel</code> command:</p>
    <p class="Code">$ sudo luserdel -rG &lt;username&gt;</p>
    <p><b>Note</b>: The Solace CLI command <code>reload default-config</code> will delete all the shell users you've created (except for the built-in root and support user), and it will also revert everything else to the appliance's default configuration.</p>
    <h2 class="with-rule"><a name="Access_Shell"/>Accessing the Linux Shell Through Solace CLI</h2>
    <p>Shell users can access an appliance's Linux shell through the Solace CLI, as long as password authentication has not been disabled for them.</p>
    <p>To access the Linux shell through the Solace CLI, perform the following steps:</p>
    <ol>
      <li>In the Solace CLI, enter the following command: </li>
      <p class="Code">solace# shell &lt;reason&gt;</p>
      <p><u>Where</u>:</p>
      <p><code>reason</code> is a short phrase explaining why you're accessing your Solace PubSub+ shell account. For example:</p>
      <p class="Code">solace# shell Troubleshooting_in_Linux_shell</p>
      <li>When prompted, enter your Linux shell username.</li>
      <p class="Code">login as: &lt;username&gt;</p>
      <li>When prompted, enter your password.
                <p><u>Example</u>:</p><p class="Code">Password: myPWD</p><p>Once you're connected, you'll see a prompt similar to the following: </p><p class="Code">[username@solace24]$</p></li>
    </ol>
  </body>
</html>
