<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
  <head>
    </head>
  <body>
    <h1><MadCap:concept term="Cloud"/>Understanding Event Meshes and <MadCap:variable name="Product-Names.mesh_manager"/></h1>
    <p>With <MadCap:conditionalText MadCap:conditions="SAP.SapHideFromOutput"><MadCap:variable name="Product-Names.cloud_product_long"/></MadCap:conditionalText><MadCap:conditionalText MadCap:conditions="SAP.SapOnlyOutput"><MadCap:variable name="Product-Names.cloud_product_firstuse"/></MadCap:conditionalText>, modern enterprises can now embrace event-driven architecture (EDA) as part of their digital transformation. EDA is software pattern where decoupled applications can asynchronously publish and subscribe to events; these events are managed by  <MadCap:variable name="Product-Names.broker_cloud_short"/>s. In a good EDA, you want decoupled applications to publish events to any <MadCap:variable name="Product-Names.broker_cloud_short"/> and are assured that subscribing applications  receive those events in reliable and seamless fashion. As a result, every event-driven enterprise needs a central-nervous system to quickly, reliably, and securely move events in real-time from where they are occurring to where they need to go. An <i>event mesh</i> provides this capability. </p>
    <p>
      <b>What's an <i style="font-weight: bold;">event mesh</i>?</b>
    </p>
    <p>An event mesh is a configurable and dynamic infrastructure layer for distributing events among decoupled applications,
cloud services, and devices. <MadCap:variable name="Product-Names.mesh_manager"/> builds an event mesh by connecting <MadCap:variable name="Product-Names.broker_cloud_short"/>s.</p>
    <p>An event mesh permits you to:</p>
    <ul>
      <li>build a software architecture that ensures that event messages are securely and reliably received by subscribing applications using  <MadCap:variable name="Product-Names.broker_cloud_short"/>s that are deployed and connected</li>
      <li>share information between distributed, decoupled applications, which means that a publishing application can send events  and another subscribing application to consume those events without knowing about each other</li>
      <li> to connect and easily scale hybrid - or multi-cloud event meshes that span multiple data centers; an event mesh ensures that events are exchanged between distributed, decoupled applications in real-time no matter where they are connected in a reliable manner</li>
    </ul>
    <p> To help expand your understanding, let's consider this scenario to see how an event mesh works. Imagine that you have multiple applications connected to <MadCap:variable name="Product-Names.broker_cloud_short"/>s in different geographic regions of the world that want to exchange events. Potentially, those applications are distributed in separate clouds or data centers. If those applications connect to the same <MadCap:variable name="Product-Names.broker_cloud_short"/>, events are exchanged seamlessly without the applications knowing about each other. However, those <MadCap:variable name="Product-Names.broker_cloud_short"/>s in this case aren't meshed together.  </p>
    <p>Consider this example where <b>Subscriber A</b> is connected to <b>My-Second-Service</b> (an <MadCap:variable name="Product-Names.broker_cloud_short"/>), but it is interested in events from both <b>Publisher D</b>, and <b>Publisher E</b>.</p>
    <ul>
      <li> Because the publishing applications are connected to different <MadCap:variable name="Product-Names.broker_cloud_short"/>s, <b>Subscriber A</b> only receives subscribed events from the publisher connected to <b>My-Second-Service</b>.</li>
      <li> If <b>Subscriber A</b> wanted to receive events sent by <b>Publisher E</b>, it must be connected to <b>My-First-Service</b> as well.</li>
    </ul>
    <p>As you can see in the following illustration below that though <b>Subscriber A</b> is interested in events (<MadCap:conditionalText MadCap:conditions="SAP.SapHideFromOutput">green</MadCap:conditionalText><MadCap:conditionalText MadCap:conditions="SAP.SapOnlyOutput">blue</MadCap:conditionalText> boxes) from <b>Publisher D</b>  and <b>Publisher E</b> (orange triangles). <b>Subscriber A</b>  receives the events from <b>Subscriber D</b>  (indicated by the green check box), but the event from <b>Publisher E</b> never arrives to <b>Subscriber A</b>. In this scenario,  for a subscribing application to receive  topics from a publisher, it must be connected to the same  <MadCap:variable name="Product-Names.broker_cloud_short"/>.</p>
    <p>
      <img src="../../Resources/Images/Animated/Event-Mesh/no-event-mesh-problem.gif" title="Animation that shows when event broker services aren't connected via an event mesh.  Only events from Publisher D are received by Subscriber A, BUT events from Publisher E are not." alt="Animation that shows when event broker services aren't connected via an event mesh. Only events from Publisher D are received by Subscriber A, BUT events from Publisher E are not."/>
    </p>
    <p>In comparison to the illustration below, if the applications were connected to <MadCap:variable name="Product-Names.broker_cloud_short"/>s that were configured as an <b>event mesh</b>, <b>Subscriber A</b> could connect to one <MadCap:variable name="Product-Names.broker_cloud_short"/>, and can receive all subscribed events from the publishing applications that are connected to any <MadCap:variable name="Product-Names.broker_cloud_short"/>. In this configuration, the <MadCap:variable name="Product-Names.broker_cloud_short"/>s are configured as an event mesh (line between the event broker services). As a result, subscribed events from both <b>Publisher D</b> and <b>Publisher E</b> are received by <b>Subscriber A</b> in a seamless manner.</p>
    <p>
      <img src="../../Resources/Images/Animated/Event-Mesh/event-mesh-solution.gif" title="Animation that shows when event broker services are connected via an event mesh. Events from both Publisher D and Publisher E are now received by Subscriber A." alt="Animation that shows when event broker services are connected via an event mesh. Events from both Publisher D and Publisher E are now received by Subscriber A."/>
    </p>
    <p>As you can see in this simple scenario, an event mesh is useful and invaluable to ensure that distributed applications receive events no matter where they are connected. An event mesh takes care of ensuring that the correct events are routed to the <MadCap:variable name="Product-Names.broker_cloud_short"/>s so that they are received by the subscribing applications interested in those events.</p>
    <p>For more information about how event meshes work  <MadCap:variable name="Product-Names.cloud_product_short"/>, see  <MadCap:xref href="#details-of-mesh">Diving into an Event Mesh</MadCap:xref> and  <MadCap:xref href="#considerations-working-with-event-meshes">Considerations for Working with Event Meshes</MadCap:xref>.</p>
    <p>When you're ready to start using <MadCap:variable name="Product-Names.mesh_manager"/> to create event meshes, see the following sections:</p>
    <ul>
      <li>
        <MadCap:xref href="ght_event_mesh.htm">Creating an Event Mesh</MadCap:xref>
      </li>
      <li>
        <MadCap:xref href="modify_mesh.htm">Modifying an Event Mesh</MadCap:xref>
      </li>
      <li>
        <MadCap:xref href="run_health_check.htm">Running Event Mesh Health Checks</MadCap:xref>
      </li>
      <li>
        <MadCap:xref href="view_mesh_information.htm">Viewing Information and Details of an Event Mesh</MadCap:xref>
      </li>
    </ul>
    <h2><a name="details-of-mesh"/>Diving into an Event Mesh</h2>
    <p>Architecturally, an event mesh is a logical layer that runs on your network to  enhance its capabilities to allow distributed applications, microservices, and IoT devices to communicate via the publish/subscribe (pub/sub) communication pattern. This allows for decoupled, dynamic communication in real-time. </p>
    <p>At the core of an event mesh is Dynamic Message Routing (DMR) technology. To better understand how event meshes work you should familiarize yourself with  DMR terminology and concepts. For more information, see <MadCap:xref href="../../Features/DMR/DMR-Overview.htm">DMR Overview</MadCap:xref> and <MadCap:xref href="../../Features/DMR/DMR-Terminology.htm">DMR Terminology</MadCap:xref>:</p>
    <ul>
      <li> To create an event mesh using <MadCap:variable name="Product-Names.mesh_manager"/>, you can connect one DMR cluster to another DMR cluster. <MadCap:variable name="Product-Names.mesh_manager"/> creates a <u>full</u> mesh using <a href="../../Features/DMR/DMR-Overview.htm" class="link-internal">Dynamic Message Routing (DMR)</a>. A full-mesh means that there are <i>DMR external links</i> that span between each  DMR cluster in the event mesh. This permits for multi-site scaling. For more information, see <MadCap:xref href="../../Features/DMR/DMR-Overview.htm#multi-site-scaling">Multi-Site Scaling</MadCap:xref>.</li>
      <li>A DMR cluster can contain one or more <MadCap:variable name="Product-Names.broker_cloud_short"/>s. By default, each <MadCap:variable name="Product-Names.broker_cloud_short"/> you create in <MadCap:variable name="Product-Names.cloud_product_short"/> is its own DMR cluster, but optionally you can configure multiple <MadCap:variable name="Product-Names.broker_cloud_short"/>s to be part of the same DMR cluster by setting the cluster name. For more information, see <MadCap:xref href="../create-service.htm#configure-dmr-cluster">Setting the Cluster Name</MadCap:xref>.</li>
      <li>Within a DMR cluster, each <MadCap:variable name="Product-Names.broker_cloud_short"/> is referred to as a <i>node</i>. If you have multiple <MadCap:variable name="Product-Names.broker_cloud_short"/>s in a DMR cluster, the nodes are connected together via <i>DMR internal links</i> - which is useful for horizontal scaling and best used for <MadCap:variable name="Product-Names.broker_cloud_short"/>s in the same geographical regions. These nodes are interconnected in a full mesh (where each node is connected all other nodes in the cluster). Currently, internal DMR links are configured with the help of <MadCap:variable name="Variables.CompanyName"/> and aren't yet configured in <MadCap:variable name="Product-Names.mesh_manager"/>.  For more information about horizontal scaling, see <MadCap:xref href="../../Features/DMR/DMR-Overview.htm#horizontal-scaling">Horizontal Scaling</MadCap:xref>.</li>
      <li>In a DMR cluster, one  <MadCap:variable name="Product-Names.broker_cloud_short"/> (or node), is the  <code>gateway node</code> that connects to other gateway nodes in other DMR clusters. These connections are referred to as <i>external DMR links</i>, which is what <MadCap:variable name="Product-Names.mesh_manager"/> automatically configures for you. </li>
      <li>External DMR links take care of propagating events between DMR clusters, while internal links within the DMR cluster take care of propagating messages between the nodes. For more information, see <MadCap:xref href="../../Features/DMR/DMR-Subscription-Mgmt.htm">DMR Subscription Propagation and Data Forwarding</MadCap:xref>.</li>
    </ul>
    <p>After an event mesh is created, it takes care of routing events from  publishing applications (publishers)  to subscribing applications (consumers) connected to other <MadCap:variable name="Product-Names.broker_cloud_short"/>s in each of the DMR clusters. Whenever a publishing application sends events (or data) to an <MadCap:variable name="Product-Names.broker_cloud_short"/>, the subscribing applications receive the events based on the matching  subscriptions as long as the publishing and subscribing applications are connected to any  <MadCap:variable name="Product-Names.broker_cloud_short"/> on the same event mesh - in other words, they don't need to be the same <MadCap:variable name="Product-Names.broker_cloud_short"/>. Furthermore, only events (or topics) that are subscribed to are sent to other nodes in the event mesh. </p>
    <p>In the following illustration, we have four <MadCap:variable name="Product-Names.broker_cloud_short"/>s, where each is in its own DMR cluster - or a one node DMR cluster. For simplicity, we'll refer to the <MadCap:variable name="Product-Names.broker_cloud_short"/> names. The single node in the cluster also acts as the gateway node to connect to other DMR clusters. In the example below, the event mesh is a  mix of cloud providers including an on-premises Kubernetes deployment and it is configured as a full-mesh.</p>
    <p>The event mesh supports the following event- driven architecture:<br/></p>
    <ul>
      <li><b>Subscriber A</b> is subscribed to  events from <b>Publisher C</b> and <b>Publisher E</b> and connected to <b>My-Second-Service</b>.<ul><li>Because <b>Publisher C</b> is connected to the same <MadCap:variable name="Product-Names.broker_cloud_short"/> as <b>Subscriber A</b>, events are automatically available to <b>Subscriber A</b>.</li><li>Because <b>Subscriber A</b> is only connected to <b>My-Second-Service</b>, the event mesh ensures that events from <b>Publisher E</b> ( which is connected to <b>My-First-Service</b>) are propagated to <b>My-Second-Service</b>. </li></ul></li>
      <li><b>Subscriber A</b> is not subscribed for events  from <b>Publisher D</b>, therefore no events from <b>My-Fourth-Service</b> are routed to <b>My-Second-Service</b>.</li>
      <li><b>Subscriber B</b> is subscribed to events from <b>Publisher C</b>, <b>D</b>, and <b>E</b>, but because none of those publishers are connected to the same <MadCap:variable name="Product-Names.broker_cloud_short"/>, the event mesh ensures that the events that are sent from <b>My-First-Service</b>, <b>My-Second-Service</b> and <b>My-Fourth-Service</b> to <b>My-Third-Service</b> so that the events are received.</li>
    </ul>
    <p>
      <img src="../../Resources/Images/Animated/Event-Mesh/full-mesh-animation.gif" alt="Brief video illustrating the completion of the surrounding steps."/>
    </p>
    <p>Note that if there was no event mesh (no connections between the <MadCap:variable name="Product-Names.broker_cloud_short"/>s ), then Subscriber A could not get any subscribed events from Publisher C and Subscriber B would not receive subscribed events from Publisher C, E, or D because they are connected to different <MadCap:variable name="Product-Names.broker_cloud_short"/>s. </p>
    <p>Event meshes support geographically distributed use cases. If you have <MadCap:variable name="Product-Names.broker_cloud_short"/>s in London, UK and New York, USA, an event mesh would be an easy way to bridge data between to ensure events that are published are received by subscribers no matter where they are connected. For example, when an application in London subscribes to events, that data would automatically start to flow across the event mesh (WAN). Because data is only sent when it's requested or subscribed to, the event mesh uses bandwidth efficiantly. No matter how many consumers in London  request the data, that data is sent between event broker services only once.</p>
    <p>You can interconnect on-premises and different cloud vendors which gives you a uniform data fabric without having to rely on cloud native services like Google Pub/Sub, or SQS or SNS and AWS. This allows you flexibility to write applications that are agnostic to whether they are on-premises or off-premises.</p>
    <h2><a name="considerations-working-with-event-meshes"/>Considerations for Working with Event Meshes <MadCap:conditionalText MadCap:conditions="SAP.SapHideFromOutput">in <MadCap:variable name="Product-Names.cloud_product_short"/></MadCap:conditionalText></h2>
    <p>The following are considerations when you create an event mesh using <MadCap:variable name="Product-Names.mesh_manager"/> in <MadCap:variable name="Product-Names.cloud_product_short"/>:</p>
    <ul>
      <li>
        <p>You require the following roles assigned to your user account, depending on the tasks you need to do:</p>
        <ul>
          <li>To view and run Health Checks on an event mesh, your user profile requires the <MadCap:variable name="Product-Names.cm_viewer" style="font-weight: bold;"/> role</li>
          <li>To view and run Health Checks, and to create, modify, or delete an event mesh, you require the <MadCap:variable name="Product-Names.cm_editor" style="font-weight: bold;"/> role</li>
          <li>To create, modify, or delete <MadCap:variable name="Product-Names.broker_cloud_short"/>s as part of modifying or creating event meshes, you also require the <MadCap:variable name="Product-Names.cm_editor" style="font-weight: bold;"/> role</li>
        </ul>
        <p>If you require a role assigned to you, contact your <MadCap:variable name="Product-Names.cloud_product_short"/> administrator. For more information about the roles, see <MadCap:xref href="../cloud-user-management.htm#Roles">Roles and Permissions</MadCap:xref>.</p>
      </li>
      <li>
        <p><MadCap:variable name="Product-Names.mesh_manager"/> always creates a full-mesh of DMR external links between the <MadCap:variable name="Product-Names.broker_cloud_short"/>s in your event mesh. If, at any time, there are less than two <MadCap:variable name="Product-Names.broker_cloud_short"/> in an event mesh, the event mesh is deleted.</p>
      </li>
      <li>
        <p>An <MadCap:variable name="Product-Names.broker_cloud_short"/> can be part of only one event mesh. Any <MadCap:variable name="Product-Names.broker_cloud_short"/>s that are part of an event mesh must be Enterprise services; the use of <MadCap:conditionalText MadCap:conditions="SAP.SapHideFromOutput">Developer</MadCap:conditionalText><MadCap:conditionalText MadCap:conditions="SAP.SapOnlyOutput">Standard</MadCap:conditionalText> services in an event mesh is not supported in production, but can be used  for testing purposes. <MadCap:variable name="Product-Names.broker_cloud_short_intitalcap"/>s within an event mesh can be mix of broker versions that are supported. If you are using DMR clusters, each node in the DMR cluster can belong to only one mesh. For example, you cannot have one <MadCap:variable name="Product-Names.broker_cloud_short"/> in the DMR cluster belong to one event mesh and a different <MadCap:variable name="Product-Names.broker_cloud_short"/> in the DMR cluster belong to another event mesh.<MadCap:conditionalText MadCap:conditions="SAP.SAPTempHide"> For best practices for configuring event meshes, see <MadCap:xref href="../../Features/DMR/DMR-Best-Practices.htm">DMR Best Practices.</MadCap:xref></MadCap:conditionalText></p>
      </li>
      <li>
        <p>Topic subscriptions are securely propagated only to <MadCap:variable name="Product-Names.broker_cloud_short"/> that have subscribers (consumers) that are interested in the topic to minimize network traffic. </p>
      </li>
      <li>You can  connect one <MadCap:variable name="Product-Names.broker_cloud_short"/> that has a private endpoint (private IP addresses) to another <MadCap:variable name="Product-Names.broker_cloud_short"/> that is configured with public endpoint (public Internet) provided that the initiator is the service with the private endpoint. </li>
      <li><a name="reviewme"/>You can also connect two <MadCap:variable name="Product-Names.broker_cloud_short"/>s using private endpoints (private IP addresses) if the regions have IP connectivity with each other. How you connect the <MadCap:variable name="Product-Names.broker_cloud_short"/>s depends on the deployment type:<ul><li>For <MadCap:variable name="Product-Names.dedicated_region"/> regions, see <MadCap:xref href="../Deployment-Considerations/dedicated-networking-options.htm" target="_blank" alt="link to Networking Options for Dedicated Region Deployments">Networking Options for [%=Product-Names.dedicated_region%] Deployments</MadCap:xref> for connectivity options. </li><li>For <MadCap:variable name="Product-Names.customer-controlled_region"/> regions, you can do this using any configurations you require, as it is ultimately the responsibility of your organization to configure and maintain the infrastructure. </li></ul></li>
      <li>
        <p>In <MadCap:variable name="Product-Names.mesh_manager"/>, <MadCap:variable name="Product-Names.broker_cloud_short"/>s manually configured using the <MadCap:variable name="Product-Names.pubsubmanager_long"/> (legacy mechanism) are not visible in  <MadCap:variable name="Product-Names.mesh_manager"/> unless you scan for them.  To see them, you must discover the event meshes. </p>
        <p>The use of <MadCap:variable name="Product-Names.pubsubmanager_long"/> is for non-typical use cases to configure other type of meshes or advanced settings. This requires in-depth knowledge of the <MadCap:variable name="Product-Names.broker_sw_short"/>s. <MadCap:variable name="Variables.CompanyName"/> doesn't recommend that you use <MadCap:variable name="Product-Names.pubsubmanager_long"/> to modify event meshes created using <MadCap:variable name="Product-Names.mesh_manager"/>. If you require advanced configuration, <a href="../../get-support.htm" class="link-internal">contact <MadCap:variable name="Variables.CompanyName"/></a>.</p>
        <p>For more information, see <MadCap:xref href="view_mesh_information.htm#scan-for-new-mesh">Discover New Event Meshes</MadCap:xref>.</p>
      </li>
    </ul>
    <h2><a name="understand-health-check"/>Understanding Event Mesh Health</h2>
    <p>In <MadCap:variable name="Product-Names.mesh_manager"/>, you can validate the health of an event mesh using the <a href="run_health_check.htm" class="link-internal">Event Mesh Health Check</a>. The status of the event mesh is most useful for people who are administering connectivity between multiple <MadCap:variable name="Product-Names.broker_cloud_short"/>s, because these are often located in different geographical regions. For a Health Check to run, the operational status of a link must be <code>Up</code>. The Health Check uses a customized, secure probe to check the integrity of the links in an event mesh. The probe is an enhanced <i>ping</i> that performs an in-band validation and integrity test to verify that test events and messaging can be exchanged between <MadCap:variable name="Product-Names.broker_cloud_short"/>s; if the operational status of a link isn't <code>up</code>, the Health Check cannot run. </p>
    <p>A Health Check validates the following in an event mesh using one secure Solace Message Format (SMF) connection on each <MadCap:variable name="Product-Names.broker_cloud_short"/>:</p>
    <ul>
      <li><b>Link status</b>—To validate connectivity, Health Check pings each direction of the link between two <MadCap:variable name="Product-Names.broker_cloud_short"/>s, and records the time of the probe. </li>
      <li><b>Event status</b>—To verify that topics can be subscribed and published to,  Health Check uses the Request-Reply pattern and a  reserved topic called <code>#insights/pinger/ping</code>. It creates (and later deletes) a temporary client username called  <code>mesh-validation-<i>&lt;session-id&gt;</i></code>, where <code><i>&lt;session-id&gt;</i></code> is a string value representing the Health Check session.</li>
      <li><b>Connectivity to the Management Port</b>—Connectivity between the <MadCap:variable name="Product-Names.cloud_agent_short"/> and each endpoint that has the Management port enabled is validated.</li>
    </ul>
    <p>An event mesh is considered unhealthy (or invalid) when at least one link is down or doesn't pass a Health Check. This can occur for a number of reasons that include:</p>
    <ul>
      <li>at the time, there were no SMF connections available for the test to runs</li>
      <li>the  tests between mesh nodes  in either direction failed; tests for both directions must pass for a link to be considered healthys</li>
      <li>connectivity between the management port and the <MadCap:variable name="Product-Names.cloud_agent_short"/> could not be established</li>
    </ul>
    <p>After a Health Check completes, you can see the  status when you view the details of the event mesh. For more information, see <MadCap:xref href="view_mesh_information.htm">Viewing Information and Details of an Event Mesh</MadCap:xref>.</p>
    <p>For information about how to run a Health Check on an event mesh, see <MadCap:xref href="run_health_check.htm">Using Health Checks on an Event Mesh</MadCap:xref>.</p>
  </body>
</html>
