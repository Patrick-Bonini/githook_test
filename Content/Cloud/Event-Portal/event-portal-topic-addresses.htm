<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:conditions="Default.ContentProductLink">
  <head>
    </head>
  <body>
    <h1><MadCap:concept term="Cloud"/>Topic Addresses</h1>
    <p>In an event-driven architecture (EDA), topics are a means of classifying the information contained in the payload or each event instance. Events are published to a topic and consumers can subscribe to topics to attract all events for that topic from every publisher. When you create an event in  <MadCap:variable name="Product-Names.ep_designer"/>, you define a topic address for each event. The topic address is a set of topic levels. Each level in the topic address can have a literal value or can have a variable value that is later substituted for a concrete value that is specific to the event instance. At run time, when an application publishes instances of an event, the topic address is used to construct the topic for each instance. For more information, about how topics work, see <MadCap:xref href="../../Get-Started/what-are-topics.htm"> Understanding Topics</MadCap:xref>.</p>
    <h2><a name="Topic_Hierarchy"/>Topic Hierarchy</h2>
    <p>Before you start defining topic addresses, it's  best practice to define the overall topic hierarchy or taxonomy for your EDA. A good topic hierarchy classifies the topics of events published and consumed within an event mesh. Each topic for an event is expressed as one or more topic levels.</p>
    <p>Hierarchical addressing is also used in URLs. When you go to a page on a website, the URL is a hierarchical address with the form:</p>
    <p>
      <code>application://sub-domain.domain/root-directory/sub-directory/page</code>
    </p>
    <p>For example:</p>
    <p>
      <code>https://solace.com/use-cases/industries/retail/</code>
    </p>
    <p>The scale of the Internet would not work without the hierarchical addressing used by devolved and dynamic global  DNS and web servers, which divide up the task of serving portions of the entire domain to end users.</p>
    <p>For more information, see <MadCap:xref href="../../Messaging/Topic-Architecture-Best-Practices.htm">Topic Architecture Best Practices</MadCap:xref>.</p>
    <h2 class="with-rule"><a name="Defining_Topic_Addresses"/>Defining Topic Addresses for Events</h2>
    <p>A topic address is expressed as a series of hierarchical topic address levels. Each topic address level can be a literal value or variable. A variable is a placeholder that is substituted with a concrete value by publishing applications at runtime. A variable topic address level can be an enumeration with a defined value set (bounded), or it can be unbounded.</p>
    <p>The topic addresses for events published to Solace event brokers  use a forward slash <code>/</code> as a delimiter to separate levels.  Kafka brokers don't natively support topic hierarchies; however, to support organizing your EDA, you can use topic hierarchies if you specify a character to act as a delimiter to represent level divisions in your Kafka topics.</p>
    <h3>Topic Domains</h3>
    <p>Each application domain can have one or more topic domains. The topic domain can include one or more topic address levels. It's best practice for each application domain to have unique topic domains. The topic domains should represent the top levels of your topic hierarchy for events within the application domain. You can require new events to use topic addresses that starts with one of the a topic domains of the application domain .</p>
    <h3>Using Variables in Topic Domains and Topic Addresses</h3>
    <p>When you add a topic domain to an application domain or a topic address to an event, each  level can be specified by a literal value or by a variable.  A variable is a placeholder that is replaced with a concrete value by the publishing application at runtime. You can use a literal value when you want a topic address level to be the same for all instances of an event. You must use a variable when you want the topic level to classify an event by a value specific to the event instance. For example, if an event is generated when someone scans a barcode, a variable for the location of the scanner could be one level of the topic address. When a barcode is scanned and an application generates an event instance, the variable in the topic address is replaced with the actual location of the scanner in the topic of the event instance. Other applications can then subscribe only to event instances for scanners in that location and you can track events related to specific locations. </p>
    <p>Variables can be unbounded or you can limit a variable to a list of options using enumerations.  Enumerations are a type of topic address level variable that define a bounded list of acceptable values. If you use an enumeration for a  variable, only values that are part of the enumeration can replace the variable in the topic at runtime. For example, if an event instance could occur in any of six possible locations and you want the topic to include the location, you could create an enumeration that includes the six options. For more information, see <MadCap:xref href="event-portal-designer-enums.htm">Enumerations</MadCap:xref>.</p>
    <h3>Defining Kafka Topic Addresses</h3>
    <p> When defining Kafka topic addresses or subscriptions, be aware of the following:</p>
    <ul>
      <li>
        <p>Kafka topic addresses don't support enumerations.</p>
      </li>
      <li>
        <p>Kafka topic subscriptions don't support wildcards.</p>
      </li>
      <li>
        <p>Kafka brokers don't recognize level delimiters in topics. If you want to include Kafka events in your EDA, you can specify a delimiter that <MadCap:variable name="Product-Names.eventportal_product_short"/> recognizes in Kafka topics.   All Kafka topic addresses in your organization's account must use the same delimiter. For more information, see <MadCap:xref href="event-portal-designer-tool.htm#kafka_delimiter">Setting the Kafka Delimiter</MadCap:xref>.</p>
      </li>
    </ul>
    <h3>Topic Address Syntax</h3>
    <p>Topic addresses have a few syntax rules and best practices. Some rules are enforced in <MadCap:variable name="Product-Names.ep_designer"/>.</p>
    <ul>
      <li>
        <p>Topic addresses can't exceed 128 levels.</p>
      </li>
      <li>
        <p>Topic addresses can't include empty levels. All delimiters must have text or a variable between them.</p>
      </li>
      <li>
        <p>Topic addresses can't exceed 255 characters.</p>
      </li>
      <li>
        <p>Topic address level variables must start with a letter or underscore and must contain only alphanumeric, hyphen, and underscore characters.</p>
      </li>
      <li>
        <p>For Solace topic addresses, don't use /, *, &gt;, or ! within a topic address level. These characters have special meaning.<MadCap:conditionalText MadCap:conditions="SAP.SapHideFromOutput"> For more information about topic syntax, refer to <MadCap:xref href="../../Messaging/SMF-Topics.htm">SMF Topics</MadCap:xref>.</MadCap:conditionalText></p>
      </li>
    </ul>
    <h2 class="with-rule"><a name="Topic_Subscriptions"/>Topic Subscriptions</h2>
    <p>A topic subscription is a string that consumers use to attract the events published to a topic on an event mesh. Unlike topic addresses,  topic subscriptions can contain wildcards to match with multiple topics. The <code>*</code> and <code>&gt;</code> characters can be used as wildcards in topic subscriptions.</p>
    <ul>
      <li>
        <code>*</code>
      </li>
      <p>When <code>*</code> appears by itself at a level within a topic subscription it indicates a wildcard match at that level. For example, <code>animals/*/cats</code> matches the topics <code>animals/domestic/cats</code> and <code>animals/wild/cats</code>.</p>
      <li>
        <code>&gt;</code>
      </li>
      <p>The <code>&gt;</code> character is used at the last level of  a subscription to indicate a “one or more” wildcard match for any topics. For example, <code>animals/domestic/&gt;</code> doesn't match the topic <code>animals/domestic</code>, but it does match <code>animals/domestic/cats</code>, <code>animals/domestic/dogs</code>, and <code>animals/domestic/dogs/beagles/long-eared</code>.</p>
    </ul>
  </body>
</html>
