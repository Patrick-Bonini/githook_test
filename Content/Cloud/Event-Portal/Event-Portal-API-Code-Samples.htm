<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:conditions="Default.NotForPDF" MadCap:searchable="False">
  <head>
    <meta name="robots" content="noindex, nofollow"/>
    <style>
			img { 
			mc-thumbnail-max-height: auto;mc-thumbnail-max-width: 500px;mc-thumbnail: popup; padding-top: 10px;
			padding-bottom: 10px;
			}
			
			.image-inline{
			mc-thumbnail-max-height: none;mc-thumbnail-max-width: none;mc-thumbnail:none;
			}
		
		</style>
  </head>
  <body>
    <h1><MadCap:concept term="Cloud"/><MadCap:variable name="Product-Names.eventportal_product_short"/> API Code Samples</h1>
    <p>You can use the <MadCap:variable name="Product-Names.eventportal_product_short"/> APIs to retrieve, search,
            and create different <MadCap:variable name="Product-Names.eventportal_product_short"/> objects. On this page, we walk you through some of the common tasks you can perform using the API. The goal of these API code samples is to help you learn the basics to get started with <MadCap:variable name="Product-Names.eventportal_product_short"/> REST API quickly. Once you understand the basics, you can refer to the <a href="http://openapi.solace.cloud/" target="_blank" class="link-offsite"><MadCap:variable name="Product-Names.eventportal_product_short"/> Open API Spec</a> to review other REST API endpoints.</p>
    <p>REST API for <MadCap:variable name="Product-Names.eventapiproduct_long"/> (EAP) is currently not available through the above mentioned URL. To get an EAP's AsyncAPI document, see <MadCap:xref href="#EAP-AsynAPI-Document">Retrieve an EAP's AsyncAPI Document (Partner Developers)</MadCap:xref>.</p>
    <h2 class="with-rule">Prerequisites</h2>
    <p>To get started, you will need:</p>
    <ul>
      <li>A <MadCap:xref href="Event-Portal-REST-API.htm"><MadCap:variable name="Product-Names.eventportal_product_short"/> REST API</MadCap:xref> account. If you don't have an account yet, go ahead and <a href="[%=Manifest-Products-Links.CloudConsoleNewAccount%]" class="link-offsite" target="_blank">create a free trial account</a>. </li>
      <li>A REST client of your choice. In this tutorial, we will use Postman (6.1.3 or greater). Postman is a good choice if you want a visual REST API development tool. </li>
      <li>An API token with <MadCap:variable name="Product-Names.eventportal_product_short"/> permissions. For more information, see <MadCap:xref href="../ght_api_tokens.htm#Create">Creating an API Token</MadCap:xref>.</li>
    </ul>
    <p>Once the token is generated, you must authorize a REST request from your REST client to <MadCap:variable name="Product-Names.eventportal_product_short"/>.</p>
    <h2 class="with-rule"><a name="Authorize_REST_requests_from_Postman"/>Authorize REST requests from Postman to <MadCap:variable name="Product-Names.eventportal_product_short"/></h2>
    <p>To authorize REST requests from Postman to <MadCap:conditionalText MadCap:conditions="SAP.SapHideFromOutput"><MadCap:variable name="Product-Names.cloud_product_long"/></MadCap:conditionalText><MadCap:conditionalText MadCap:conditions="SAP.SapOnlyOutput"><MadCap:variable name="Product-Names.cloud_product_firstuse_initialcase"/></MadCap:conditionalText> , you must set the Postman <code>apiToken</code> to an API token with <MadCap:variable name="Product-Names.eventportal_product_short"/> permissions. For <MadCap:variable name="Product-Names.eventapiproduct_long"/> authorization, refer to <MadCap:xref href="#Authoriz">Authorize REST requests from Postman to [%=Product-Names.cloud_product_short%] for [%=Product-Names.eventapiproduct_long%]</MadCap:xref>.</p>
    <ol>
      <li>Download the <MadCap:variable name="Product-Names.eventportal_product_short"/> API collections and environment, and import them into Postman. <a class="btn btn-primary" href="Event-Portal-API-Collections.zip" role="button">Download</a></li>
      <li>Once both the files are imported, set the Environment to <b><MadCap:variable name="Product-Names.eventportal_product_short"/> API</b>.
				<p><div class="thumbnail-container"><img class="solacethumbnail" src="../../Resources/Images/Cloud/restapi/userApi_4.png" alt="Screenshot showing the settings described in the surrounding steps."/></div></p></li>
      <li>Edit the <MadCap:variable name="Product-Names.eventportal_product_short"/> API environment by clicking the <b>Environment quick look (eye icon)</b> → <b>Edit</b>.</li>
      <li>Paste the token in the <b>Current Value</b> field of the <code>apiToken</code> key.
				<p><div class="thumbnail-container"><img class="solacethumbnail" src="../../Resources/Images/Cloud/restapi/userApi_5.png" alt="Screenshot showing the settings described in the surrounding steps."/></div></p></li>
      <li>Click <b>Update</b>.</li>
    </ol>
    <p>We now have a token, and Postman is set up to use it. Let's take a look at some of the common <MadCap:variable name="Product-Names.eventportal_product_short"/> tasks you can perform using <MadCap:variable name="Product-Names.eventportal_product_short"/> REST APIs.</p>
    <h3><a name="Authoriz"/>Authorize REST requests from Postman to <MadCap:variable name="Product-Names.eventapiproduct_long"/></h3>
    <p>To authorize REST requests from Postman to <MadCap:variable name="Product-Names.eventapiproduct_long"/>, include your <b>API Products AsyncAPI Read</b> <a href="#Create" class="link-internal">security token</a> as an HTTP header:<code> Authorization: Bearer &lt;API token goes here&gt;</code>. </p>
    <p>For more information, refer to <MadCap:xref href="#Retrieve3">Retrieve an EAP's AsyncAPI Document (Partner Developers).</MadCap:xref></p>
    <h2 class="with-rule"><a name="Retrieve-all"/>Retrieving Information for All Instances of an Object</h2>
    <p>You can call the REST endpoints to retrieve information of all instances of a specific object type. In the examples below, we will show you how to retrieve information of all instances for a specific object.</p>
    <ol>
      <li>In the Postman, navigate to <b>Collections</b> → <b><MadCap:variable name="Product-Names.eventportal_product_short"/> API</b> → <b>Get Objects</b> folder.</li>
      <li>From the available options—<b>Get Schemas</b>, <b>Get Events</b>, <b>Get Application</b>, or <b>Get Application Domain</b>—select the request for which you want to retrieve the information.	In this example, we select <b>Get Schemas</b> to retrieve information of all instances of a schema. <p><div class="thumbnail-container"><img class="solacethumbnail" src="../../Resources/Images/Cloud/retrieve-schema-api.png" alt="Screenshot showing the settings described in the surrounding steps."/></div></p></li>
      <li>Click <b>Send</b>. You will see the information of all instances of an object (Schemas in this example) in the bottom panel.				<p><div class="thumbnail-container"><img class="solacethumbnail" src="../../Resources/Images/Cloud/retrieve-schema-api2.png" alt="Screenshot showing the settings described in the surrounding steps."/></div></p></li>
    </ol>
    <h2 class="with-rule"><a name="Retrievie-specific"/>Retrieving Information for a Specific Instance of an Object</h2>
    <p>To fetch the details of a specific <MadCap:variable name="Product-Names.eventportal_product_short"/> object, you can pass in its ID to the relevant API or provide its Name as a query parameter.</p>
    <h3>Using the Object Name To Retrieve Information</h3>
    <ol>
      <li>In the Postman, navigate to <b>Collections</b> → <b><MadCap:variable name="Product-Names.eventportal_product_short"/> API</b> → <b>Get Object By Name</b> folder. </li>
      <li>From the available options — <b>Get Schema</b>, <b>Get Event</b>, <b>Get Application</b>, <b>Get Application Domain</b>, <b>Get Tag</b> — select an object for which you want retrieve the information. In this example, we select <b>Get Schema</b>.<p><div class="thumbnail-container"><img class="solacethumbnail" src="../../Resources/Images/Cloud/get-schema-name.png" alt="Screenshot showing the settings described in the surrounding steps."/></div></p></li>
      <li>In the request URL, change the name to the name of the object you want. <p><div class="thumbnail-container"><img class="solacethumbnail" src="../../Resources/Images/Cloud/get-schema-name1.png" alt="Screenshot showing the settings described in the surrounding steps."/></div></p></li>
      <li>Click <b>Send</b>. You should see the details of the specified object in the bottom panel. <p><div class="thumbnail-container"><img class="solacethumbnail" src="../../Resources/Images/Cloud/get-schema-name2.png" alt="Screenshot showing the settings described in the surrounding steps."/></div></p></li>
      <li>In the information shown in the bottom panel, one of the fields is the ID of the specified object. In the example, the ID is saved as the current <code>schemaId</code> value of the environment. You can check by comparing the value in the bottom panel with that of the <MadCap:variable name="Product-Names.eventportal_product_short"/> API environment. To do so, click the <b>Environment quick look (eye icon )</b>, you will see the <MadCap:variable name="Product-Names.eventportal_product_short"/> API environment’s values. <p><div class="thumbnail-container"><img class="solacethumbnail" src="../../Resources/Images/Cloud/get-schema-name3.png" alt="Screenshot showing the settings described in the surrounding steps."/></div></p><p>If you can cannot find the ID in the bottom panel, you most likely entered the name of the object incorrectly, or entered the name of a object that does not exist.</p></li>
    </ol>
    <h3>Using Object ID To Retrieve Information</h3>
    <ol>
      <li>In the Postman, navigate to <b>Collections</b> → <b><MadCap:variable name="Product-Names.eventportal_product_short"/> API</b> → <b>Get Object By Id</b> folder.</li>
      <li> From the available options—<b>Get Schema</b>, <b>Get Event</b>, <b>Get Application</b>, <b>Get Application Domain</b>, <b>Get Tag</b> — select an object for which you want retrieve the information. In this example, we will select Get Schema. <p><div class="thumbnail-container"><img class="solacethumbnail" src="../../Resources/Images/Cloud/get-schema-id.png" alt="Screenshot showing the settings described in the surrounding steps."/></div></p></li>
      <li>In the request URL, change the ID to the ID of the desired object. <p><div class="thumbnail-container"><img class="solacethumbnail" src="../../Resources/Images/Cloud/get-schema-id1.png" alt="Screenshot showing the settings described in the surrounding steps."/></div></p></li>
      <li>Click <b>Send</b>. You will see the details of the specified object in the bottom panel.<p><div class="thumbnail-container"><img class="solacethumbnail" src="../../Resources/Images/Cloud/get-schema-id2.png" alt="Screenshot showing the settings described in the surrounding steps."/></div></p></li>
    </ol>
    <h2 class="with-rule"><a name="Creating"/>Creating an Instance of an Object</h2>
    <p> In this example, we will walk you through the steps to create an instance of an object using the <MadCap:variable name="Product-Names.eventportal_product_short"/> API.</p>
    <ol>
      <li>In the Postman, navigate to <b>Collections</b> → <b><MadCap:variable name="Product-Names.eventportal_product_short"/> API</b> → <b>Create Objects</b> folder.</li>
      <li> From the available options — <b>Create Schema</b>, <b>Create Event</b>, <b>Create Application</b>, <b>Create Application Domain</b>, or <b>Create Tag</b> —select the request you want to create. In this example, we select <b>Create Event</b> to create an event instance. <p><div class="thumbnail-container"><img class="solacethumbnail" src="../../Resources/Images/Cloud/create-instance-schema.png" alt="Screenshot showing the settings described in the surrounding steps."/></div></p></li>
      <li>In the request body, modify the fields to contain the information you want in your new instance. You can find more information about the modifiable fields in the <a href="http://openapi.solace.cloud/" target="_blank" class="link-offsite"><MadCap:variable name="Product-Names.eventportal_product_short"/> Open API Spec</a>. <p><div class="thumbnail-container"><img class="solacethumbnail" src="../../Resources/Images/Cloud/create-instance-schema1.png" alt="Screenshot showing the settings described in the surrounding steps."/></div></p></li>
      <li>Click <b>Send</b>. You will see the details of the created instance in the bottom panel. You can also verify that the instance was created by performing a REST call using the created instance’s Name or ID. <p><div class="thumbnail-container"><img class="solacethumbnail" src="../../Resources/Images/Cloud/create-instance-schema2.png" alt="Screenshot showing the settings described in the surrounding steps."/></div></p></li>
      <li>If you are creating an application domain, you will notice the following:<ol style="list-style-type: lower-alpha;"><li> You will see the status of your request to be 202 Accepted, with no details of the created application domain in the bottom panel.<p><div class="thumbnail-container"><img class="solacethumbnail" src="../../Resources/Images/Cloud/create-instance-application-domain2.png" alt="Screenshot showing the settings described in the surrounding steps."/></div></p></li><li> You can confirm that the application domain was created by performing a REST call using the created application domain’s name or ID. To find the newly created application domain’s ID, navigate to the <b>Headers</b> → <b>Key</b> → <b>Location</b> in the bottom panel. Take a look at the value give to the Key Location; the combination of letters and numbers after the final <code>/</code> is your newly created application domain’s ID. <p><div class="thumbnail-container"><img class="solacethumbnail" src="../../Resources/Images/Cloud/create-instance-application-domain3.png" alt="Screenshot showing the settings described in the surrounding steps."/></div></p></li></ol></li>
    </ol>
    <h2 class="with-rule"><a name="Deleting"/>Deleting an Instance of an Object</h2>
    <p>In this example, we will walk you through the steps to delete an instance of an object using the <MadCap:variable name="Product-Names.eventportal_product_short"/> API.</p>
    <ol>
      <li>In the Postman, navigate to <b>Collections</b> → <b><MadCap:variable name="Product-Names.eventportal_product_short"/> API</b> → <b>Delete Objects</b> folder.</li>
      <li> From the available options — <b>Delete Schema</b>, <b>Delete Event</b>, <b>Delete Application</b>, <b>Delete Application Domain</b>, or <b>Delete Tag</b> — select the request you want to delete. In this example, we select <b>Delete Schema</b> to delete a schema instance. <p><div class="thumbnail-container"><img class="solacethumbnail" src="../../Resources/Images/Cloud/delete-instance-object.png" alt="Screenshot showing the settings described in the surrounding steps."/></div></p></li>
      <li>In the request URL, the ID of the instance of an object you are deleting is required. If you already have the ID, you can add it to the request URL. For example, you can replace the <code>{{schemaId}}</code> with the schema’s ID. Alternatively, you can find the ID of the desired object by performing the following REST call, and the ID will be automatically set as the <MadCap:variable name="Product-Names.eventportal_product_short"/> API's environment variable.
					<p><div class="thumbnail-container"><img class="solacethumbnail" src="../../Resources/Images/Cloud/delete-instance-object1.png" alt="Screenshot showing the settings described in the surrounding steps."/></div></p></li>
      <li>You should see the Status of your request be 204 No Content, with no details of the deleted schema in the bottom panel. To confirm that the schema was deleted, performing a REST call to get all schemas; the schema that you wanted to delete will no longer be listed.<p><div class="thumbnail-container"><img class="solacethumbnail" src="../../Resources/Images/Cloud/delete-instance-object2.png" alt="Screenshot showing the settings described in the surrounding steps."/></div></p></li>
    </ol>
    <h2 class="with-rule"><a name="Updating"/>Updating an Instance of an Object</h2>
    <p>In this example, we will show you how to update an instance of an object using the <b><MadCap:variable name="Product-Names.eventportal_product_short"/></b> API</p>
    <ol>
      <li>In the Postman, navigate to <b>Collections</b> → <b><MadCap:variable name="Product-Names.eventportal_product_short"/> API</b> → <b>Update Objects</b> folder.</li>
      <li>From the available options— <b>Update Schema</b>, <b>Update Event</b>, <b>Update Application</b>, <b>Update Application Domain</b>, or <b>Update Tag</b> —select the request you want to update. In this example, we update a schema instance by selecting <b>Update Schema</b>.<p><div class="thumbnail-container"><img class="solacethumbnail" src="../../Resources/Images/Cloud/update-instance-object.png" alt="Screenshot showing the settings described in the surrounding steps."/></div></p></li>
      <li>In the request URL, the ID of the instance of an object you are deleting is required. If you already have the ID, you can add it to the request URL. For example, you can replace the <code>{{schemaId}}</code> with the schema’s ID. Alternatively, you can find the ID of the desired object by performing the following REST call, and the ID will be automatically set as the <MadCap:variable name="Product-Names.eventportal_product_short"/> API's environment variable.<p><div class="thumbnail-container"><img class="solacethumbnail" src="../../Resources/Images/Cloud/update-instance-object1.png" alt="Screenshot showing the settings described in the surrounding steps."/></div></p></li>
      <li>In the request body, only include the fields that you want to be updated in your schema.<p><div class="thumbnail-container"><img class="solacethumbnail" src="../../Resources/Images/Cloud/update-instance-object2.png" alt="Screenshot showing the settings described in the surrounding steps."/></div></p></li>
      <li>Click <b>Send</b>. You should see the details of the updated schema in the bottom panel.<p><div class="thumbnail-container"><img class="solacethumbnail" src="../../Resources/Images/Cloud/update-instance-object3.png" alt="Screenshot showing the settings described in the surrounding steps."/></div></p></li>
    </ol>
    <h2 class="with-rule"><a name="Specify"/>Specifying Events that an Application is Publishing / Subscribing to</h2>
    <p>In this tutorial, we  walk you through the steps to specify events to which an application is publishing or subscribing.</p>
    <h3>Events Published</h3>
    <ol>
      <li>In the Postman, navigate to <b>Collections</b> → <b><MadCap:variable name="Product-Names.eventportal_product_short"/> API</b> → <b>Manage Application Events</b> folder.</li>
      <li>Select the request <b>Set Produced Events</b>.<p><div class="thumbnail-container"><img class="solacethumbnail" src="../../Resources/Images/Cloud/specify-events-published.png" alt="Screenshot showing the settings described in the surrounding steps."/></div></p></li>
      <li>In the request URL, you will need to add the ID of the application you will be publishing to. If you already have the ID of the application, you can replace the<code> {{appId}}</code> with the application’s ID. Otherwise, you can find the ID of the desired application by performing the following REST call and it will be automatically set as <MadCap:variable name="Product-Names.eventportal_product_short"/> API <code>{{appId}}</code> environment variable. <p><div class="thumbnail-container"><img class="solacethumbnail" src="../../Resources/Images/Cloud/specify-events-published1.png" alt="Screenshot showing the settings described in the surrounding steps."/></div></p></li>
      <li>In the request body, modify the list of <code>producedEventIds</code> to contain the event IDs you want your application to publish to. You can find the ID of a desired event by performing the following REST call.<p><div class="thumbnail-container"><img class="solacethumbnail" src="../../Resources/Images/Cloud/specify-events-published2.png" alt="Screenshot showing the settings described in the surrounding steps."/></div></p></li>
      <li>Click <b>Send</b>. You should see the IDs of the <code>producedEventIds</code> in the bottom panel. You can confirm that the application is publishing to the specified IDs by performing a REST call using the application’s Name or ID. <p><div class="thumbnail-container"><img class="solacethumbnail" src="../../Resources/Images/Cloud/specify-events-published3.png" alt="Screenshot showing the settings described in the surrounding steps."/></div></p></li>
    </ol>
    <h3>Events Subscribed</h3>
    <ol>
      <li>In the Postman, navigate to <b>Collections</b> → <b><MadCap:variable name="Product-Names.eventportal_product_short"/> API</b> → <b>Manage Application Events</b> folder. </li>
      <li>Select the request <b>Set Consumed Events</b>. <p><div class="thumbnail-container"><img class="solacethumbnail" src="../../Resources/Images/Cloud/specify-events-subscribed.png" alt="Screenshot showing the settings described in the surrounding steps."/></div></p></li>
      <li>In the request URL, the ID of the application you will be subscribing to is required. If you already have the id of the application, you can replace the <code>{{appId}}</code> with the application’s ID. Otherwise, you can find the ID of the desired application by performing the following REST call and it will automatically be set as the <MadCap:variable name="Product-Names.eventportal_product_short"/> API <code>{{appId}}</code> environment variable. <p><div class="thumbnail-container"><img class="solacethumbnail" src="../../Resources/Images/Cloud/specify-events-subscribed1.png" alt="Screenshot showing the settings described in the surrounding steps."/></div></p></li>
      <li>In the request body, modify the list of <code>consumedEventIds</code> to contain the event IDs you want your application to subscribe to. You can find the ID of a desired event by performing the following REST call. <p><div class="thumbnail-container"><img class="solacethumbnail" src="../../Resources/Images/Cloud/specify-events-subscribed2.png" alt="Screenshot showing the settings described in the surrounding steps."/></div></p></li>
      <li>Click <b>Send</b>. You should see the IDs of the <code>consumedEventId</code>s in the bottom panel. You can also confirm that the application is subscribing to the specified ids by performing a REST call using the application’s Name or ID. <p><div class="thumbnail-container"><img class="solacethumbnail" src="../../Resources/Images/Cloud/specify-events-subscribed3.png" alt="Screenshot showing the settings described in the surrounding steps."/></div></p></li>
    </ol>
    <h2 class="with-rule"><a name="Configur"/>Configuring an Event's Payload Schema</h2>
    <ol>
      <li>In the Postman, navigate to <b>Collections</b> → <b><MadCap:variable name="Product-Names.eventportal_product_short"/> API</b> → <b>Update Objects</b>.</li>
      <li>Select the request <b>Update Schema of Event</b>. <p><div class="thumbnail-container"><img class="solacethumbnail" src="../../Resources/Images/Cloud/configure-event-payload-schema.png" alt="Screenshot showing the settings described in the surrounding steps."/></div></p></li>
      <li>In the request URL, the ID of the event you will be linking the schema to is required. If you already have the ID of the event, you can replace the <code>{{eventId}}</code> with the event’s ID. Alternatively, you can find the ID of the desired event by performing the following REST call and it will be automatically set as the <MadCap:variable name="Product-Names.eventportal_product_short"/> API <code>{{eventId}}</code> environment variable. <p><div class="thumbnail-container"><img class="solacethumbnail" src="../../Resources/Images/Cloud/configure-event-payload-schema1.png" alt="Screenshot showing the settings described in the surrounding steps."/></div></p></li>
      <li>In the request body, modify the <code>schemaId </code>to contain the schema ID you want your event to be linked to. You can find the ID of the desired schema by performing the following REST call. <p><div class="thumbnail-container"><img class="solacethumbnail" src="../../Resources/Images/Cloud/configure-event-payload-schema2.png" alt="Screenshot showing the settings described in the surrounding steps."/></div></p></li>
      <li>Click <b>Send</b>. You should see the ID of the <code>schemaId</code> in the bottom panel. You can also confirm that the event contains the specified schema by performing a REST call using the event’s name or ID. <p><div class="thumbnail-container"><img class="solacethumbnail" src="../../Resources/Images/Cloud/configure-event-payload-schema3.png" alt="Screenshot showing the settings described in the surrounding steps."/></div></p></li>
    </ol>
    <h2 class="with-rule"><a name="Adding_an_owner"/>Adding an Owner to an Object</h2>
    <p>For all <MadCap:variable name="Product-Names.eventportal_product_short"/> objects, the owner cannot be assigned when creating the object. Instead, the owner can only be modified after the object has been created. The following example walks you through the steps to add an owner to an object:</p>
    <ol>
      <li>In the Postman, navigate to <b>Collections</b> → <b><MadCap:variable name="Product-Names.eventportal_product_short"/> API</b> → <b>Add Owner To Object</b>.</li>
      <li>From the available options—Set Schema Owner, Set Event Owner, Set Application Owner, Set Application Domain Owner—select the desired request. In this example, we will select the request Set Schema Owner. <p><div class="thumbnail-container"><img class="solacethumbnail" src="../../Resources/Images/Cloud/schema-owner.png" alt="Screenshot showing the settings described in the surrounding steps."/></div></p></li>
      <li>
        <p>To add an owner to an object, you must add the ID of the object in the request URL. If you already have the ID, you can add it to the request URL. For example, if you are adding an owner to a schema, you can replace the <code>{{schemaId}}</code> in the request URL with the ID of the schema. Alternatively, you can find the ID of the desired object by performing the following REST call, and the ID will be automatically set as the <MadCap:variable name="Product-Names.eventportal_product_short"/> API's environment variable.</p>
        <p>
          <div class="thumbnail-container">
            <img class="solacethumbnail" src="../../Resources/Images/Cloud/schema-owner1.png" alt="Screenshot showing the settings described in the surrounding steps."/>
          </div>
        </p>
      </li>
      <li>In the request body, modify the list of <code>ownerIds</code> to the owner IDs you want your object to have as its owners. <p><div class="thumbnail-container"><img class="solacethumbnail" src="../../Resources/Images/Cloud/schema-owner2.png" alt="Screenshot showing the settings described in the surrounding steps."/></div></p></li>
      <li>Click <b>Send</b>. You will see list of owner IDs for the requested object in the bottom panel. <p><div class="thumbnail-container"><img class="solacethumbnail" src="../../Resources/Images/Cloud/schema-owner3.png" alt="Screenshot showing the settings described in the surrounding steps."/></div></p></li>
    </ol>
    <h2 class="with-rule"><a name="Adding_a_tag"/>Adding a Tag to an Object</h2>
    <p>You can add a tag to a schema, event, or an application. In the following example, we will show you how to add a tag to an object using the <MadCap:variable name="Product-Names.eventportal_product_short"/> REST API</p>
    <ol>
      <li>In the Postman, navigate to <b>Collections</b> → <b><MadCap:variable name="Product-Names.eventportal_product_short"/> API</b> → <b>Add Tag To Object</b></li>
      <li> From the available options—Set Schema Tag, Set Event Tag, and Set Application Tag—select the desired request. In this example, we will select the <b>Set Application Tag</b>. <p><div class="thumbnail-container"><img class="solacethumbnail" src="../../Resources/Images/Cloud/set-application-tag.png" alt="Screenshot showing the settings described in the surrounding steps."/></div></p></li>
      <li>To add a tag to an object, you must add the ID of the object you will be adding the tags to in the request URL. If you already have the ID of the object, you can add it to the request URL.  For example, if you are adding an tag to an application, you can replace the <code>{{appId}}</code> in the request URL with the ID of the application. Alternatively, you can find the ID of the desired object by performing the following REST call, and the ID will be automatically set as the <MadCap:variable name="Product-Names.eventportal_product_short"/> API's environment variable.
                <p><div class="thumbnail-container"><img class="solacethumbnail" src="../../Resources/Images/Cloud/set-application-tag1.png" alt="Screenshot showing the settings described in the surrounding steps."/></div></p></li>
      <li>In the request body, modify the list of <code>tagIds</code> to contain the tag IDs you want your object to have. <p><div class="thumbnail-container"><img class="solacethumbnail" src="../../Resources/Images/Cloud/set-application-tag2.png" alt="Screenshot showing the settings described in the surrounding steps."/></div></p></li>
      <li>Click <b>Send</b>. You should see the IDs of the <code>tagIds</code> in the bottom panel. <p><div class="thumbnail-container"><img class="solacethumbnail" src="../../Resources/Images/Cloud/set-application-tag3.png" alt="Screenshot showing the settings described in the surrounding steps."/></div></p></li>
    </ol>
    <h2 class="with-rule"><a name="EAP-AsynAPI-Document"/>Retrieve an EAP's AsyncAPI Document </h2>
    <p>To retrieve the AsyncAPI document, your will need to generate the <b>API Products AsyncAPI Read</b> <a href="#Create" class="link-internal">security token</a> and share it with your partner developers requiring access to the EAP's AsyncAPI document. Your partner developers will need the security token to authorize REST requests from their REST Client to <MadCap:variable name="Product-Names.eventportal_product_short"/>. You can generate the token in the  <MadCap:variable name="Product-Names.cloud_product_short"/> console. </p>
    <p class="Note">The EAP must be marked as <b>Released</b> in the console for it to be accessible through these public REST APIs.</p>
    <p>After an EAP is released, your partner developers can retrieve it's AsyncAPI document using a GET call to one of the following endpoints:</p>
    <ul>
      <li>
        <code>/api/v0/eventPortal/apiProducts/{productId}/asyncApi.json</code>
      </li>
      <li>
        <code>/api/v0/eventPortal/apiProducts/{productId}/asyncApi.yaml</code>
      </li>
    </ul>
    <p>In the example below, a POST call to <code> /api/v0/eventPortal/apiProducts/{productId}/asyncApi.yaml</code> retrieves the EAP's AsyncAPI document in YAML format. A successful response returns <code>200 OK</code> with the AsycnAPI details in the payload. </p>
    <p> A similar call can be made to retrieve the EAP’s AsyncAPI in JSON format using a POST call to <code>/api/v0/eventPortal/apiProducts/{productId}/asyncApi.json</code>.</p>
    <p>The following Postman screenshot illustrates an AsyncAPI document retrieved in YAML format.</p>
    <p>
      <div class="thumbnail-container">
        <img class="solacethumbnail" src="../../Resources/Images/Event-Portal/rest-eap-partner-retrieve-asyncapi.png" alt="Screenshot showing the settings described in the surrounding steps."/>
      </div>
    </p>
    <p>Note that if a Kafka Key is a primitive type, the name of primitive type will be displayed in the payload; otherwise, it will be a reference (<code>$ref</code>) to the schema in schema section. </p>
  </body>
</html>
