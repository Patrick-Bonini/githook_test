<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
  <head/>
  <body>
    <h1>TCP Settings</h1>
    <p>This section shows you how to configure the TCP settings used for client‑to‑event broker and event broker-to-event broker connections.</p>
    <h2 class="with-rule"><a name="Config-TCP-Keepalive"/>Configuring TCP Keepalive Settings</h2>
    <p>The TCP Keepalive facility is used to keep TCP connections alive on Solace PubSub+ event brokers. The timers for the TCP Keepalive facility can be configured for client-to-event broker connections and event broker-to-event broker neighbor connections.</p>
    <h3>Configuring TCP Keepalives for Client-to-Event Broker Connections</h3>
    <p>To configure the TCP Keepalive for client-to-event broker connections, enter the following CONFIG commands.</p>
    <p class="Code">solace# configure<br/>solace(configure)# client-profile &lt;name&gt; message-vpn &lt;name&gt;<br/>solace(configure/client-profile)# tcp keepalive<br/>solace(configure/client-profile/tcp/keepalive)#</p>
    <p><u>Where</u>:</p>
    <p><code>&lt;name</code>&gt; is the name of the client profile. A client profile name can contain up to 32 alphanumeric characters (case-sensitive). The “_” character is also permitted.</p>
    <p><code>&lt;vpn-name&gt;</code> is the name of an existing Message VPN the client profile belongs to.</p>
    <p>The CLI is now in the TCP Keepalive configuration mode, where you can make the following configurations for the TCP Keepalive facility timers for client-to-event broker connections:</p>
    <ul>
      <li><code>solace(configure/client-profile/tcp/keepalive)# count &lt;num&gt;</code>—sets the maximum number of keepalive probes (from 2 to 5 ) TCP should send before dropping the connection. The default value is 5.</li>
      <li><code>solace(configure/client-profile/tcp/keepalive)# idle &lt;seconds&gt;</code>—sets  the time (from 3 to 120 seconds) a connection must remain idle before TCP begins sending keepalive probes. The default value is 3.</li>
      <li><code>solace(configure/client-profile/tcp/keepalive)# interval &lt;seconds&gt;</code>—sets the time (from 1 to 30 seconds) to set as the interval between individual keepalive probes. The default value is 1.</li>
    </ul>
    <p>The no version of these commands, <code>no</code>, resets the values back to the defaults.</p>
    <h3>Configuring TCP Keepalives for Event Broker-to-Event Broker Connections</h3>
    <p>To configure the TCP Keepalive for event broker-to-event broker neighbor connections, enter the following commands on each neighbor event broker:</p>
    <p class="Code">solace# configure<br/>solace(configure)# routing<br/>solace(configure/routing)# cspf neighbor &lt;physical-router-name&gt;<br/>solace(configure/routing/cspf/neighbor)# tcp keepalive<br/>solace(...e/routing/cspf/neighbor/tcp/keepalive)#</p>
    <p>The CLI is now in the TCP Keepalive configuration mode, where you can make the following configurations for the TCP Keepalive facility timers for event broker-to-event broker connections:</p>
    <ul>
      <li><code>solace(configure/client-profile/tcp/keepalive)# count &lt;num&gt;</code>—sets the maximum number of keepalive probes (from 2 to 5 ) TCP should send before dropping the connection. The default value is 5.</li>
      <li><code>solace(configure/client-profile/tcp/keepalive)# idle &lt;seconds&gt;</code>—sets  the time (from 3 to 120 seconds) a connection must remain idle before TCP begins sending keepalive probes. The default value is 3.</li>
      <li><code>solace(configure/client-profile/tcp/keepalive)# interval &lt;seconds&gt;</code>—sets the time (from 1 to 30 seconds) to set as the interval between individual keepalive probes. The default value is 1.</li>
    </ul>
    <p>The no version of these commands, <code>no</code>, resets the values back to the defaults.</p>
    <h2 class="with-rule"><a name="Initial-Con-Window"/>Configuring TCP Initial Congestion Window Size</h2>
    <p>The TCP initial congestion window size is used when starting up a TCP connection or on recovery from idle (that is, no traffic). It is the number of segments TCP sends before waiting for an acknowledgment from the peer. Larger values of initial window allows a connection to come up to speed more quickly. For further details, refer to RFC 2581.</p>
    <div class="Caution">
      <p class="Tbl_Body">Changing the TCP initial congestion window size from its default of 2 results in non-compliance with RFC 2581. Further, care must be taken for if this parameter value is set too high, it may cause congestion in the network. Always <a href="../get-support.htm" class="link-internal">contact Solace</a> for technical support before you attempt to change this TCP parameter on Solace PubSub+ event brokers.</p>
    </div>
    <p>The TCP initial congestion window size facility can be configured for both client‑to‑event broker connections and event broker‑to‑event broker neighbor connections.</p>
    <h3>Configuring TCP Initial Congestion Window Sizes for Event Broker-to-Client Connections</h3>
    <p>To configure the initial congestion window size for the event broker to use when sending data to a client, enter the following CONFIG commands.</p>
    <p class="Code">solace(configure)# client-profile &lt;name&gt; message-vpn &lt;vpn-name&gt;<br/>solace(configure/client-profile)# tcp initial-cwnd &lt;num-mss&gt;</p>
    <p><u>Where</u>:</p>
    <p><code>&lt;name</code>&gt; is the name of the client profile. A client profile name can contain up to 32 alphanumeric characters (case-sensitive). The “_” character is also permitted. If the profile does not already exist, it is created.</p>
    <p><code>&lt;vpn-name&gt;</code> is the name of the Message VPN the client profile belongs to. It must already exist.</p>
    <p><code>&lt;num-mss&gt;</code> is an integer specifying the size of the TCP initial congestion window measured in number of TCP maximum segment size (MSS). Valid values are 2 through 7826. The default value is 2. </p>
    <p>The no version of this command, <code>no tcp initial-cwnd</code>, resets the size of the TCP initial congestion window back to the default value.</p>
    <h3>Configuring TCP Initial Congestion Window Sizes for Event Broker-to-Event Broker Connections</h3>
    <p>To configure the initial congestion window size for an event broker to use when sending data to the neighbor event broker, you must use the <code>tcp initial-cwnd</code> command.</p>
    <p><u>Example</u>:</p>
    <p class="Code">solace(configure)# routing<br/>solace(configure/routing)# cspf neighbor &lt;physical-router-name&gt; <br/>solace(configure/routing/cspf/neighbor)# tcp initial-cwnd &lt;num-mss&gt;</p>
    <p><u>Where</u>:</p>
    <p><code>&lt;num-mss&gt;</code> is an integer specifying the size of the TCP initial congestion window measured in number of TCP maximum segment size (MSS). Valid values are 2 through 7826. The default value is 2.</p>
    <p>The no version of this command, <code>no tcp initial-cwnd</code>, resets the size of the TCP initial congestion window back to the default value.</p>
    <h2 class="with-rule"><a name="Config-max-wdw"/>Configuring TCP Max Window Sizes</h2>
    <p>The TCP maximum window size should be set to equal at least the bandwidth‑delay product of the link between the TCP peers.</p>
    <p>If the maximum window size is set to less than the bandwidth-delay product, then the TCP connection operates below its maximum potential throughput. If the maximum window is set to less than about twice the bandwidth-delay product, then occasional packet loss causes the TCP connection to operate below its maximum potential throughput as it handles the missing acknowledgments and retransmissions.</p>
    <p>Alternately, if the TCP maximum window size is set too large, in the presence of a high offered load, TCP gradually increases its congestion window size until either:</p>
    <ul>
      <li>the congestion window size reaches the maximum window size</li>
      <li>packet loss occurs in the network</li>
    </ul>
    <p>Initially, when the TCP congestion window size is small, the physical bandwidth‑delay of the network acts as a memory buffer for packets in flight. But as the congestion window crosses the bandwidth-delay product, the buffering of in-flight packets moves to queues in various switches, event brokers, and other equipment throughout the network. As the TCP congestion window continues to increase in size, these various equipment queues overflow, causing packet loss and TCP backoff.</p>
    <p>The TCP maximum window size can be configured for both client‑to‑event broker connections and event broker‑to‑event broker neighbor connections.</p>
    <h3>Configuring TCP Max Window Size for Client-to-Event Broker Connections</h3>
    <p>To configure a maximum window size for data that clients send to and receive from the event broker, enter the following CONFIG commands: </p>
    <p class="Code">solace(configure)# client-profile &lt;name&gt; message-vpn &lt;vpn-name&gt;<br/>solace(configure/client-profile)# tcp max-wnd &lt;num-kilo-bytes&gt;</p>
    <p><u>Where</u>:</p>
    <p><code>&lt;name</code>&gt; is the name of the client profile. A client profile name can contain up to 32 alphanumeric characters (case-sensitive). The “_” character is also permitted. If the profile does not already exist, it is created.</p>
    <p><code>&lt;vpn-name&gt;</code> is the name of an existing Message VPN that the client profile belongs to.</p>
    <p><code>&lt;num-kilo-bytes&gt;</code> is an integer specifying the size of the TCP maximum window measured in number of kilobytes (KB). Valid values are 32 through 65536. The default value is 256.</p>
    <p>The no version of this command, <code>no tcp max-wnd</code>, resets the size of the TCP maximum window back to the default value.</p>
    <p class="Note" MadCap:autonum="&lt;b&gt;Note:  &lt;/b&gt;">Configuration changes are applied to all existing client connections.&gt;
        </p>
    <h3>Configuring TCP Max Window Sizes for Event Broker-to-Event Broker Neighbor Connections</h3>
    <p>To configure a maximum window size for data that the neighbor event broker sent to and received from the event broker, enter the following CONFIG commands:</p>
    <p class="Code">solace(configure)# routing<br/>solace(configure/routing)# cspf neighbor &lt;physical-router-name&gt; <br/>solace(configure/routing/cspf/neighbor)# tcp max-wnd &lt;num-kilo-bytes&gt;</p>
    <p><u>Where</u>:</p>
    <p><code>&lt;num-kilo-bytes&gt;</code> is an integer specifying the size of the maximum TCP window size in KB. Valid values are 32 through 65536. The default value is 2048. </p>
    <p>The no version of this command, <code>no tcp max-wnd</code>, resets the size of the TCP maximum window back to the default value.</p>
    <h2 class="with-rule"><a name="Configuring_tcp_settings_max_mss"/>Configuring TCP MSS</h2>
    <p>You can configure the TCP maximum segment size (MSS) used for  client‑to‑event broker and event broker-to-event broker connections.</p>
    <h3>Configuring TCP  MSS for Client-to-Event Broker Connections</h3>
    <p>To configure the TCP MSS for data that the event broker sends to clients, enter the following CONFIG commands:</p>
    <p class="Code">solace# configure<br/>solace(configure)# client-profile &lt;name&gt; message-vpn &lt;name&gt;<br/>solace(configure/client-profile)# tcp mss &lt;byte-count&gt; </p>
    <p><u>Where</u>:</p>
    <p><code>&lt;byte-count&gt;</code> is the size of the maximum segment size in bytes (256 through 1460). The default value is 1460.</p>
    <p>The no version of this command, <code>no mss</code>, resets the TCP maximum segment size back to default. Changing this value during event broker operation takes effect immediately on all existing and new TCP connections.</p>
    <h3>Configuring TCP  MSS for Event Broker-to-Event Broker Connections</h3>
    <p>To configure the TCP MSS for a neighbor event broker,  enter the following CONFIG commands:</p>
    <p class="Code">solace(configure)# routing<br/>solace(configure/routing)# cspf neighbor &lt;physical-router-name&gt;<br/>solace(configure/routing/cspf/neighbor)# mss &lt;byte-count&gt;</p>
    <p><u>Where</u>:</p>
    <p><code>&lt;byte-count&gt;</code> is the size of the maximum segment size in bytes (256 through 1460). The default value is 1460.</p>
    <p>The no version of this command, <code>no mss</code>, resets the TCP maximum segment size back to default. Changing this value during event broker operation takes effect immediately on all existing and new TCP connections.</p>
  </body>
</html>
