<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
  <head>
    </head>
  <body>
    <h1>Connecting to Azure Event Hubs or Azure Service Bus Using REST</h1>
    <p>Two of the most widely used messaging services in the Azure Cloud platform are Azure Event Hubs and Azure Service Bus.  Architects and developers take advantage of these messaging services to scale and extend their applications into more advanced cloud services in Azure, such as machine learning, real-time data analytics and data science.</p>
    <p><a href="https://azure.microsoft.com/en-ca/services/event-hubs/" target="_blank" class="link-offsite">Azure Event Hubs</a> is a fully managed, real-time data ingestion service; it is often used to stream millions of events from multiple sources and build multiple data pipelines.</p>
    <p><a href="https://azure.microsoft.com/en-us/services/service-bus/" target="_blank" class="link-offsite">Azure Service Bus</a> is a highly reliable cloud messaging service that connects applications with services. It offers asynchronous operations between server and clients, as well as other messaging capabilities such as pub/sub with queues and topics.</p>
    <p>Azure Event Hubs is more suitable with requirements to ingest massive volume of data, where Azure Service Bus is more suitable for enterprise messaging needs.</p>
    <p>In the 9.8.0 release of the PubSub+ event broker, within a REST delivery point (RDP) an Azure administrator can now set up a service account to establish OAuth authentication between Azure and the PubSub+ broker, designating proper application registrations and permissions.</p>
    <p>The OAuth client authentication flow enables PubSub+ event brokers to get an access token from the authorization server using primary credentials (client id and client secret) so that there are no redirects or refresh tokens.  These credentials are usually associated with an application rather than a person, making it more suitable and secured for governance on permission.</p>
    <p>Refer to <MadCap:xref href="Managing-RDPs.htm#oauth-client-auth-scheme">OAuth Client Authentication</MadCap:xref> for more information.</p>
    <h3 class="with-rule">Goals</h3>
    <p>The goal of this tutorial is to demonstrate how to set up an OAuth 2.0 client authentication in PubSub+ event broker to send messages to Azure Event Hubs from a remote connection. This tutorial will show you how to:</p>
    <ul>
      <li>Configure the event broker to set up RDPs with OAuth client authentication to Azure Event Hubs or Service Bus</li>
      <li>Send messages to  Azure Event Hubs using the <b>Try Me!</b> functionality built into the PubSub+ Broker Manager</li>
      <li>Review messages sent into Event Hubs under blob storage</li>
    </ul>
    <h3 class="with-rule">Prerequisites</h3>
    <ul>
      <li>Solace PubSub+ Event Broker 9.8.0 or higher</li>
      <li>Access to PubSub+ Broker Manager (refer to <MadCap:xref href="../Admin/Broker-Manager/PubSub-Manager-Overview.htm">[%=Product-Names.pubsubmanager_long%]</MadCap:xref>)</li>
    </ul>
    <h2 class="with-rule">Connecting to Azure Event Hubs</h2>
    <p>In the 9.8.0 release of the PubSub+ event broker, new REST Connector wizard can help you set up and configure integrations to various cloud platforms and their services. </p>
    <p>This example shows how to  set up OAuth client authentication with Microsoft Azure. </p>
    <ol>
      <li>Log into the PubSub+ Broker Manager.</li>
      <li>Launch the connector <b>Click-to-Connect Wizard</b> (refer to <MadCap:xref href="../Admin/Broker-Manager/Cloud-Connector-Click-to-Connect.htm">Creating a REST Connector with Click-to-Connect</MadCap:xref>).</li>
      <li>
        <p>Click <b>Microsoft Azure</b>.</p>
        <div class="thumbnail-container">
          <img class="solacethumbnail" src="../Resources/Images/C2C-Examples/RDP_New_Connector.png" alt=""/>
        </div>
      </li>
      <li>
        <p>Click <b>Azure Event Hubs</b> then click <b>Authenticate</b>.</p>
        <div class="thumbnail-container">
          <img class="solacethumbnail" src="../Resources/Images/C2C-Examples/RDP_New_Connector_Azure.png" alt=""/>
        </div>
      </li>
      <li>
        <p>Provide a name for the connector and enter the <b>Client ID</b> and <b>Client Secret</b> provided by Azure.</p>
        <div class="thumbnail-container">
          <img class="solacethumbnail" src="../Resources/Images/C2C-Examples/RDP_to_Event_Hubs_example4.png" alt=""/>
        </div>
        <p class="Tip">You can get the client ID  from the Azure console in the <b>Overview</b> section. The client ID is the application ID which an Azure Event Hub has registered. </p>
        <div class="thumbnail-container">
          <img class="solacethumbnail" src="../Resources/Images/C2C-Examples/RDP_to_Event_Hubs_example5.png" alt=""/>
        </div>
        <p class="Tip">Client secrets are located in the   <b>Certificates &amp; secrets</b> section,  however, you may need to obtain this from your  Azure Administrator because it is only available when the application is created.</p>
      </li>
      <li>
        <p>Once the authentication has been established, enter the <b>Azure Namespace Host</b> , <b>Event Hubs Instance</b> name, and configure the client profile accordingly.</p>
        <div class="thumbnail-container">
          <img class="solacethumbnail" src="../Resources/Images/C2C-Examples/RDP_to_Event_Hubs_example6.png" alt=""/>
        </div>
        <p class="Tip">The Azure Namespace Host is the Host name of the Event Hubs Namespace.</p>
        <div class="thumbnail-container">
          <img class="solacethumbnail" src="../Resources/Images/C2C-Examples/RDP_to_Event_Hubs_example7.png" alt=""/>
        </div>
        <p class="Tip">You can get the  Event Hubs instance name from the Azure console home screen, in this example, <code>solace-test</code> is the Event Hubs instance name.</p>
      </li>
      <p>
        <img class="img-border" src="../Resources/Images/C2C-Examples/RDP_to_Event_Hubs_example8.png" alt=""/>
      </p>
      <li>
        <p>Choose the queue subscription.  This example uses <code>default</code>.</p>
        <div class="thumbnail-container">
          <img class="solacethumbnail" src="../Resources/Images/C2C-Examples/RDP_to_Event_Hubs_example9.png" alt=""/>
        </div>
      </li>
      <li>
        <p>Click <b>Create and Enable Connector</b> to finalize the connector creation.</p>
        <div class="thumbnail-container">
          <img class="solacethumbnail" src="../Resources/Images/C2C-Examples/RDP_to_Event_Hubs_example10.png" alt=""/>
        </div>
      </li>
    </ol>
    <h2 class="with-rule">Connecting to Azure Service Bus</h2>
    <p>To connect to Azure Service Bus, you can follow many of the same steps you used to connect to Event Hubs, except that you need to use the application and its client ID and secrets for the application setup for Azure Service Bus.</p>
    <ol>
      <li>Log into the PubSub+ Broker Manager.</li>
      <li>Launch the connector <b>Click-to-Connect Wizard</b> (refer to <MadCap:xref href="../Admin/Broker-Manager/Cloud-Connector-Click-to-Connect.htm">Creating a REST Connector with Click-to-Connect</MadCap:xref>).</li>
      <li>Click <b>Microsoft Azure</b>.</li>
      <li>Click <b>Azure Service Bus</b> then click <b>Authenticate</b>.</li>
      <li>
        <p>Provide a name for the connector and enter the <b>Client ID</b> and <b>Client Secret</b> provided by Azure.</p>
        <p class="Tip">You can get the client ID  from the Azure console in the <b>Overview</b> section. The client ID is the application ID which an Azure Service Bus has registered. </p>
        <div class="thumbnail-container">
          <img class="solacethumbnail" src="../Resources/Images/C2C-Examples/RDP_to_Event_Hubs_example11.png" alt=""/>
        </div>
        <p class="Tip">You must obtain the client secret from your Azure Administrator because it is only available when the application is created.</p>
      </li>
      <li>
        <p>Once the authentication has been established, enter the <b>Azure Namespace Host</b>, <b>Service Bus Entity</b>, and  configure the client profile accordingly.</p>
        <p>
          <div class="thumbnail-container">
            <img class="solacethumbnail" src="../Resources/Images/C2C-Examples/RDP_to_Event_Hubs_example14.png" alt=""/>
          </div>
        </p>
        <p class="Tip">For the Azure Namespace Host, use the Service Bus Namespace Host name.</p>
        <div class="thumbnail-container">
          <img class="solacethumbnail" src="../Resources/Images/C2C-Examples/RDP_to_Event_Hubs_example12.png" alt=""/>
        </div>
        <p class="Tip">For the Service Bus Entity, use the queue name that you have configured for this Service Bus.</p>
        <div class="thumbnail-container">
          <img class="solacethumbnail" src="../Resources/Images/C2C-Examples/RDP_to_Event_Hubs_example13.png" alt=""/>
        </div>
      </li>
      <li>
        <p>Choose the queue subscription.</p>
      </li>
      <li>
        <p>Click <b>Create and Enable Connector</b> to finalize the connector creation.</p>
        <p>
          <div class="thumbnail-container">
            <img class="solacethumbnail" src="../Resources/Images/C2C-Examples/RDP_to_Event_Hubs_example15.png" alt=""/>
          </div>
        </p>
      </li>
    </ol>
    <h2 class="with-rule">Setting Up Azure Event Hubs Blob Storage </h2>
    <p>After configuring a connection to your Azure Event Hubs instance, you can set up a blob storage  to receive the message.  In addition, you can use a Python script to read back what is written into the storage.</p>
    <ol>
      <li>
        <p>Set up a container for your Azure Event Hubs.</p>
        <div class="thumbnail-container">
          <img class="solacethumbnail" src="../Resources/Images/C2C-Examples/RDP_to_Event_Hubs_example16.png" alt=""/>
        </div>
      </li>
      <li>
        <p>Use the PubSub+ Broker Manager <b>Try Me!</b> application to send a message to the default subscription.</p>
        <div class="thumbnail-container">
          <img class="solacethumbnail" src="../Resources/Images/C2C-Examples/RDP_to_Event_Hubs_example17.png" alt=""/>
        </div>
      </li>
      <li>
        <p>Use a Python script to read back what was written into the blob storage.</p>
        <div class="thumbnail-container">
          <img class="solacethumbnail" src="../Resources/Images/C2C-Examples/RDP_to_Event_Hubs_example18.png" alt=""/>
        </div>
      </li>
    </ol>
  </body>
</html>
