<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
  <head/>
  <body>
    <h1>Microgateway Request Handling</h1>
    <p>When a Microgateway receives an incoming REST request, the HTTP method and path portion of the request is encoded as the topic of an internal message, making it easy to deliver the message through the Solace PubSub+ event broker. </p>
    <p>For example, </p>
    <p>
      <code>GET http://www.mystore.com/storefront/order</code>
    </p>
    <p>is encoded as the following Solace message topic:</p>
    <p>
      <code>GET/storefront/order</code>
    </p>
    <p>This encoding enables the following functionality on the event broker:</p>
    <ul>
      <li>
        <MadCap:xref href="#Request_Authorization">Request Method Authorization</MadCap:xref>
      </li>
      <li>
        <MadCap:xref href="#Request_Load_Balancing">Request Load Balancing to Consumers</MadCap:xref>
      </li>
      <li>
        <MadCap:xref href="#Request_Prioritization">Request Prioritization</MadCap:xref>
      </li>
      <li>
        <MadCap:xref href="#Request_Burst_Handling">Request Burst Absorption and Buffering</MadCap:xref>
      </li>
    </ul>
    <h2 class="with-rule"><a name="Request_Authorization"/>Request Method Authorization</h2>
    <p>The URI to internal topic encoding allows you to use an ACL to control which methods a REST client is able to access. For more information, refer to <MadCap:xref href="../Security/ACL-Overview.htm">ACL Overview</MadCap:xref>.</p>
    <h2 class="with-rule"><a name="Request_Load_Balancing"/>Request Load Balancing to Consumers</h2>
    <p>Solace event brokers are capable of efficiently load balancing incoming REST requests to a number of remote consumers (refer to <MadCap:xref href="../API/REST/REST-Consumers.htm#_Toc433874664">REST Consumer Connection Selection</MadCap:xref>); however, the URI to topic encoding provided by the Microgateway also enables you to calibrate the load balancing functionality by request method. </p>
    <p>In applications where a specific method (for example, POST) is more expensive to process than others, you can allocate more microservice instances to the handling of that method. </p>
    <p class="GraphicCaption">HTTP Method Load Balancing Example</p>
    <p>
      <img src="../Resources/Images/Microgateways/microgateway_topic_encoding1.PNG" alt=""/>
    </p>
    <h2><a name="Request_Prioritization"/>Request Prioritization</h2>
    <p>You can use the URI to topic encoding provided by the event broker to deliver different request methods to different queues, which can then result in prioritized processing of certain types of operations (POST) over others (GET). Under real time overload, this results in better application response to the most important user requests.</p>
    <p>For an example describing how to set up prioritized processing, refer to <MadCap:xref href="Microgateway-Traffic-Mgmt-Example.htm">Traffic Management to Microservices Configuration Example</MadCap:xref>.</p>
    <h2 class="with-rule"><a name="Request_Burst_Handling"/>Request Burst Absorption and Buffering</h2>
    <p>Because Solace Microgateways use queues to receive, store, and deliver REST requests to remote microservices, they provide inherent absorption and buffering against surges of client requests.</p>
  </body>
</html>
