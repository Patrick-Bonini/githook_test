<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
  <head/>
  <body>
    <h1>Microgateway Use Cases</h1>
    <p>The following sections describe several scenarios which are enabled through the Microgateway feature.</p>
    <h2 class="with-rule"><a name="Traffic_Management"/>Traffic Management to Microservices</h2>
    <p>In this case, a REST client makes a HTTP request  into the Solace PubSub+ event broker. The event broker authenticates the client using either basic authentication or a TLS client certificate. Once the client is authenticated, the method and path portions of the URI are encoded into a topic, and evaluated against the client’s publisher ACL rules to determine whether the client is authorized to access that URI using the method requested by the client. Once the client is authorized, the request is routed to the destination or destinations that are subscribed to that topic. Typically, the message is then placed on a queue serviced by a REST delivery point (RDP) for delivery to the remote microservice. The microservice processes the request and generates the appropriate response. The response from the microservice is then returned through the event broker to the REST client.</p>
    <p class="GraphicCaption">Standard Microgateway Deployment</p>
    <p>
      <img src="../Resources/Images/Microgateways/microgateway_traffic_management.PNG" alt=""/>
    </p>
    <p>For an example describing how to configure a standard Microgateway deployment that provides traffic management to microservices, refer to <MadCap:xref href="Microgateway-Traffic-Mgmt-Example.htm">Traffic Management to Microservices Configuration Example</MadCap:xref>.</p>
    <h2 class="with-rule"><a name="Eavesdropping-Apps"/>Integration with Eavesdropping Applications</h2>
    <p>Using a Solace PubSub+ event broker to transport the HTTP requests and responses allows other services  or event listeners to also receive the messages without any changes to the REST client or REST service providers. This allows you to introduce response time analytics, data capture for testing using real data, fault analysis and so on without recoding the client applications. </p>
    <p>In order for the additional listeners to receive requests and responses, you need only add subscriptions to the same topics the service providers are subscribed to, and a  subscription that corresponds with the reply-to topic generated by the event broker.</p>
    <p class="GraphicCaption">Microgateway Integrated with an Eavesdropping Application</p>
    <p>
      <img src="../Resources/Images/Microgateways/microgateway_eavesdropping.PNG" alt=""/>
    </p>
    <p>For an example describing how to add an eavesdropping application to an existing Microgateway deployment, refer to <MadCap:xref href="Microgateway-Eavesdropping-App-Example.htm">Eavesdropping Application Configuration Example</MadCap:xref>.</p>
    <h2 class="with-rule"><a name="Multi-Protocol_Delivery"/>Multi-Protocol Message Delivery</h2>
    <p>The Microgateway feature also makes it possible for non-HTTP clients such as JMS or JEE applications to act as service providers. This is because the topic derived from the URI can route the message to a queue or endpoint which is serviced by any type of client using  our <MadCap:xref href="../API/Messaging-APIs/Solace-APIs-Overview.htm">Solace Messaging APIs</MadCap:xref> or <MadCap:xref href="../API/Open-APIs-Protocols.htm">Open APIs &amp; Protocols</MadCap:xref>. The HTTP header is made available to clients that are using these APIs as a single text block, in other words, the header options are not parsed out into individual name-value pairs.</p>
    <p class="GraphicCaption">Microgateway with a Connection to a Service Provider Using JMS</p>
    <p>
      <img src="../Resources/Images/Microgateways/microgateway_multi_protocol.PNG" alt=""/>
    </p>
    <div class="Note">MQTT clients cannot be used as service providers in this solution because there is no mechanism in MQTT for getting metadata, such as the reply-topic and the HTTP header properties, to the MQTT client.</div>
    <h2 class="with-rule"><a name="Hybrid_Architecture"/>Hybrid Event-Driven Architecture</h2>
    <p>Because Solace PubSub+ event brokers support publish/subscribe architectures, you can use a Microgateway  to build a hybrid request/reply and pub/sub event-driven architecture. The result  is much more flexible and scalable than a traditional request/reply architecture. </p>
    <p>The following diagram provides an example of a hybrid event-driven architecture. In this example, a front end mobile application and multiple back end microservices (including a real-time analytics application) are all connected to the Solace message bus. Both request/reply and pub/sub delivery methods are used depending on the objective of each microservice.</p>
    <p class="GraphicCaption">Hybrid Request/Reply and Pub/Sub Event-Driven Architecture </p>
    <p>
      <img src="../Resources/Images/Microgateways/microgateway_hybrid_architecture1.PNG" style="max-width: 750px;" alt=""/>
    </p>
    <h2 class="with-rule"><a name="Migratin"/>Migrating from a Request/Reply Architecture to an Event-Driven Architecture</h2>
    <p>You can add a Microgateway into an existing request/reply environment to assist with a migration to an event-driven architecture.</p>
    <p>Under a traditional request/reply architecture, adding a new event-driven service means taxing every existing microservice to support at least two message exchange patterns (events and request/reply). Using a Solace Microgateway, you can scale your architecture without having to interfere with existing services. In addition, you can have both environments in operation until you are ready to remove the older services.</p>
    <p>The following diagrams show an existing request/reply architecture evolving to an event-driven architecture as a new application is added using a Solace Microgateway.</p>
    <p class="GraphicCaption">Migrating from a Request/Reply Architecture to an Event-Driven Architecture using a Microgateway—Phase 1</p>
    <p>
      <img src="../Resources/Images/Microgateways/microgateway_migration1.PNG" alt=""/>
    </p>
    <p class="GraphicCaption">Migrating from a Request/Reply Architecture to an Event-Driven Architecture using a Microgateway—Phase 2</p>
    <p>
      <img src="../Resources/Images/Microgateways/microgateway_migration2.PNG" alt=""/>
    </p>
    <p class="GraphicCaption">Migrating from a Request/Reply Architecture to an Event-Driven Architecture using a Microgateway—Phase 3</p>
    <p>
      <img src="../Resources/Images/Microgateways/microgateway_migration3.PNG" alt=""/>
    </p>
    <p>For an example demonstrating how to add an event-driven application to an existing request/reply endpoint, refer to <MadCap:xref href="Microgateway-Migrating-Microservices-Example.htm">Migrating to Event Driven Architecture Configuration Example</MadCap:xref>.</p>
  </body>
</html>
