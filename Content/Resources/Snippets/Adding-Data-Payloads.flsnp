<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head>
        <link href="../TableStyles/Table_Num.css" rel="stylesheet" MadCap:stylesheetType="table" />
    </head>
    <body>
        <h1><a name="Adding_data_payloads"></a>Adding Data Payloads</h1>
        <p>You can add the following types of payloads to a message:</p>
        <ul>
            <li>XML content—XML data can be added to the XML content part of a message.</li>
            <li>Binary content—Binary data can be added to a message as a binary attachment. A message can only contain a single attachment. <p>When this attachment is sent through the event broker, it is not processed, transformed, or considered in subscription matching or filtering operations. This provides an efficient means for sending data that does not require processing by the platform before it reaches receiving applications.</p><p>Structured data can also be added as a payload in the binary attachment (refer to <MadCap:xref href="../../API/API-Developer-Guide/Using-Structured-Data.htm">Using Structured Data</MadCap:xref>).</p></li>
        </ul>
        <ul>
            <li>User Property Map—Structured data can be added to user-defined message header fields.		</li>
            <li>User Data—Up to 36 bytes of application&#8209;specific binary data, known as user data, can be added to the User Data message header field.</li>
        </ul>
        <p class="Note">The maximum total size permitted for a published Direct message is 64 MiB (67,108,864 bytes). This is an event broker-imposed limit, and it takes into consideration the message header field data, XML metadata, XML payload, and any attachments.</p>
        <table style="mc-table-style: url('../../Resources/TableStyles/Table_Num.css');" class="TableStyle-Table_Num" cellspacing="0">
            <caption valign="top" style="padding-bottom: 3pt;">
                <p class="TblCaption">To Add Data Payloads to a Message</p>
            </caption>
            <col class="TableStyle-Table_Num-Column-Column1">
            </col>
            <col class="TableStyle-Table_Num-Column-Column1">
            </col>
            <col class="TableStyle-Table_Num-Column-Column1">
            </col>
            <thead>
                <tr class="TableStyle-Table_Num-Head-Header1">
                    <th class="TableStyle-Table_Num-HeadE-Column1-Header1"> <MadCap:variable name="Product-Names.pubsub_brand_only" />&#160;Messaging API</th>
                    <th class="TableStyle-Table_Num-HeadE-Column1-Header1">Data Type To Add</th>
                    <th class="TableStyle-Table_Num-HeadD-Column1-Header1">Set Through</th>
                </tr>
            </thead>
            <tbody>
                <tr class="TableStyle-Table_Num-Body-Body1">
                    <td rowspan="3" class="TableStyle-Table_Num-BodyH-Column1-Body1">
                        <p class="Tbl_Body">JCSMP</p>
                    </td>
                    <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
                        <p class="Tbl_Body">XML Data </p>
                    </td>
                    <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
                        <ul>
                            <li><code>setXMLContent(...)</code>
                                <p>Sets the XML data payload content for an <code>XMLContentMessage</code>.</p>
                            </li>
                        </ul>
                        <ul>
                            <li><code>writeBytes(...)</code>
                                <p>Sets the XML data payload content for an unstructured XML message.</p>
                            </li>
                        </ul>
                    </td>
                </tr>
                <tr class="TableStyle-Table_Num-Body-Body1">
                    <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
                        <p class="Tbl_Body">Binary Data</p>
                    </td>
                    <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
                        <p class="Tbl_Bullet"><code>writeAttachment(...)</code>
                        </p>
                        <p class="Note">You can also use the structured <code>BytesMessage</code> message class to create a message that contains a data payload in the binary attachment.</p>
                    </td>
                </tr>
                <tr class="TableStyle-Table_Num-Body-Body1">
                    <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
                        <p class="Tbl_Body">User Data</p>
                    </td>
                    <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
                        <p class="Tbl_Bullet"><code>setUserData(...)</code>
                        </p>
                        <p class="Note"><code>MessageProducer</code> does not validate the values of user data.</p>
                    </td>
                </tr>
                <tr class="TableStyle-Table_Num-Body-Body1">
                    <td rowspan="3" class="TableStyle-Table_Num-BodyE-Column1-Body1">
                        <p class="Tbl_Body">Java RTO</p>
                    </td>
                    <td class="TableStyle-Table_Num-BodyE-Column1-Body1">
                        <p class="Tbl_Body">XML Data</p>
                    </td>
                    <td class="TableStyle-Table_Num-BodyD-Column1-Body1">
                        <p class="Tbl_Body">Not applicable</p>
                    </td>
                </tr>
                <tr class="TableStyle-Table_Num-Body-Body1">
                    <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
                        <p class="Tbl_Body">Binary Data</p>
                    </td>
                    <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
                        <p class="Tbl_BodyCode">MessageHandle.setBinaryAttachment(...)</p>
                    </td>
                </tr>
                <tr class="TableStyle-Table_Num-Body-Body1">
                    <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
                        <p class="Tbl_Body">User Data</p>
                    </td>
                    <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
                        <p class="Tbl_BodyCode">MessageHandle.setUserData(...)</p>
                    </td>
                </tr>
                <tr class="TableStyle-Table_Num-Body-Body1">
                    <td rowspan="3" class="TableStyle-Table_Num-BodyH-Column1-Body1">
                        <p class="Tbl_Body">C</p>
                    </td>
                    <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
                        <p class="Tbl_Body">XML Data </p>
                    </td>
                    <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
                        <ul>
                            <li><code>solClient_msg_setXml(...)</code>
                                <p>Copies content from a given pointer and size into the XML message part. This uses memory allocated from heap storage.</p>
                            </li>
                        </ul>
                        <ul>
                            <li><code>solClient_msg_setXmlPtr(...)</code>
                                <p>Sets the contents of the XML message part to a given pointer and size. This references data that already exists in the application; no memory copies are involved.</p>
                            </li>
                        </ul>
                    </td>
                </tr>
                <tr class="TableStyle-Table_Num-Body-Body1">
                    <td class="TableStyle-Table_Num-BodyE-Column1-Body1">
                        <p class="Tbl_Body">Binary Data</p>
                    </td>
                    <td class="TableStyle-Table_Num-BodyD-Column1-Body1">
                        <ul>
                            <li><code>solClient_msg_setBinaryAttachment(...)</code>
                                <p>Copies content from a given pointer and size into the binary attachment message part. This uses memory allocated from heap storage.</p>
                            </li>
                        </ul>
                        <ul>
                            <li><code>solClient_msg_setBinaryAttachmentPtr(...)</code>
                                <p>Set the contents of the binary attachment message part to a given pointer and size. This references data that already exists in the application; no memory copies are involved.</p>
                            </li>
                        </ul>
                        <p class="Note">You can also add structured data to the payload in the binary attachment; refer to <MadCap:xref href="../../API/API-Developer-Guide/Using-Structured-Data.htm">Using Structured Data</MadCap:xref>.</p>
                    </td>
                </tr>
                <tr class="TableStyle-Table_Num-Body-Body1">
                    <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
                        <p class="Tbl_Body">User Data</p>
                    </td>
                    <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
                        <ul>
                            <li><code>solClient_msg_setUserData(...)</code>
                                <p>Copies content from a given pointer and size into the User Data message part. This uses memory allocated from heap storage.</p>
                            </li>
                        </ul>
                        <ul>
                            <li><code>solClient_msg_setUserDataPtr(...)</code>
                                <p>Sets the contents of the User Data message part to a given pointer and size. This references data that already exists in the application; no memory copies are involved.</p>
                            </li>
                        </ul>
                    </td>
                </tr>
                <tr class="TableStyle-Table_Num-Body-Body1">
                    <td rowspan="3" class="TableStyle-Table_Num-BodyH-Column1-Body1">
                        <p class="Tbl_Body">.NET</p>
                    </td>
                    <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
                        <p class="Tbl_Body">XML Data </p>
                    </td>
                    <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
                        <p class="Tbl_BodyCode">IMessage.XmlContent</p>
                    </td>
                </tr>
                <tr class="TableStyle-Table_Num-Body-Body1">
                    <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
                        <p class="Tbl_Body">Binary Data</p>
                    </td>
                    <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
                        <p class="Tbl_BodyCode">IMessage.BinaryAttachment</p>
                    </td>
                </tr>
                <tr class="TableStyle-Table_Num-Body-Body1">
                    <td class="TableStyle-Table_Num-BodyE-Column1-Body1">
                        <p class="Tbl_Body">User Data</p>
                    </td>
                    <td class="TableStyle-Table_Num-BodyD-Column1-Body1">
                        <p class="Tbl_BodyCode">IMessage.UserData </p>
                    </td>
                </tr>
                <tr class="TableStyle-Table_Num-Body-Body1">
                    <td class="TableStyle-Table_Num-BodyH-Column1-Body1" rowspan="3">
                        <p>JavaScript and Node.js</p>
                    </td>
                    <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
                        <p class="Tbl_Body">XML&#160;Data</p>
                    </td>
                    <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
                        <p class="Tbl_BodyCode">solace.Message.setXmlContent(...)</p>
                    </td>
                </tr>
                <tr class="TableStyle-Table_Num-Body-Body1">
                    <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
                        <p class="Tbl_Body">Binary Data</p>
                    </td>
                    <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
                        <ul>
                            <li>
                                <p class="Tbl_BodyCode">solace.Message.setBinaryAttachment(...)</p>
                            </li>
                            <li>
                                <p class="Tbl_BodyCode">solace.Message.setSdtContainer(...)</p>
To transport SDT&#160;container payload in the binary.</li>
                        </ul>
                    </td>
                </tr>
                <tr class="TableStyle-Table_Num-Body-Body1">
                    <td class="TableStyle-Table_Num-BodyB-Column1-Body1">
                        <p class="Tbl_Body">User Data</p>
                    </td>
                    <td class="TableStyle-Table_Num-BodyA-Column1-Body1">
                        <p class="Tbl_BodyCode">solace.Message.setUserData(...)</p>
                    </td>
                </tr>
            </tbody>
        </table>
        <p style="font-weight: bold;">Related Samples</p>
        <ul>
            <li>For an example of how to add a binary data payload to a message, refer to <code>DirectPubSub</code> for the JCSMP, Java RTO, C, and .NET APIs, and the <code>TopicPublisher</code> sample for the JavaScript and Node.js APIs.</li>
            <li>For an example of how to add SDT payloads to a message, refer to the <code>SDTPubSubMsgIndep</code> or <code>SDTPubSubMsgDep</code> samples for the JCSMP, Java RTO, C, and .NET APIs, and the <code>BasicRequestor</code> and <code>BasicReplier</code> samples for the JavaScript and Node.js APIs.<ul><li>In the <code>SDTPubSubMsgIndep</code> sample, SDT containers are created using application memory (allowed by the JCSMP, C, and .NET APIs). </li><li>In the <code>SDTPubSubMsgDep</code> sample, SDT containers are created using API-controlled memory (allowed only by the C and .NET APIs).</li></ul><p>For more information on creating SDT containers with application memory or API-controlled memory, refer to <MadCap:xref href="../../API/API-Developer-Guide/Using-Structured-Data.htm">Using Structured Data</MadCap:xref>.</p></li>
        </ul>
    </body>
</html>