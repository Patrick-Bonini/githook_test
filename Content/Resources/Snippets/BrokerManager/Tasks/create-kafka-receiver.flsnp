<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
  <head>
    <link href="../../../TableStyles/Table_Num.css" rel="stylesheet" MadCap:stylesheetType="table"/>
  </head>
  <body>
    <p>A Kafka receiver enables the accumulation  of Kafka events and their conversion to SMF messages. When you create a Kafka receiver, the event broker automatically creates a  client for each Kafka receiver that publishes messages received from the Kafka topics to the Solace message bus. The client name is <code>#kafka/rx/&lt;rx-name&gt;</code>, and the client username is <code>#kafka/rx/&lt;rx-name&gt;</code>. The client username uses the <code>#kafka</code> client profile and <code>#acl-profile</code> ACL profile.</p>
    <p>If no other Kafka receivers or senders exist on the <MadCap:conditionalText MadCap:conditions="SAP.SapHideFromOutput">Message VPN</MadCap:conditionalText><MadCap:variable name="Product-Names.broker_cloud_short" MadCap:conditions="SAP.SapOnlyOutput"/>, the event broker also creates a single client-profile, named <code>#kafka</code>, This profile is required by the Kafka senders and receivers. This profile is created when you create the first Kafka sender or receiver and removed if you delete all of the Kafka senders and receivers.</p>
    <p>To create a Kafka receiver, perform these steps:</p>
    <ol>
      <MadCap:snippetBlock src="../open-broker-manager.flsnp">
            </MadCap:snippetBlock>
      <li>In the  navigation bar, click <b>Bridges</b>.</li>
      <li>Select the <b>Kafka Bridges</b> tab.</li>
      <li>Select the <b>Kafka Receivers</b> tab.</li>
      <li>Click <b>+ Kafka Receiver</b>.</li>
      <li>Enter a <b>Name</b> for the receiver and click <b>Create</b>.</li>
      <li>Set the following options for the receiver:<p><table style="width: 100%;mc-table-style: url('../../../TableStyles/Table_Num.css');margin-left: auto;margin-right: auto;" class="TableStyle-Table_Num" cellspacing="0"><col class="TableStyle-Table_Num-Column-Column1"/><col class="TableStyle-Table_Num-Column-Column1"/><thead><tr class="TableStyle-Table_Num-Head-Header1"><th class="TableStyle-Table_Num-HeadE-Column1-Header1">Option</th><th class="TableStyle-Table_Num-HeadD-Column1-Header1">Description</th></tr></thead><tbody><tr class="TableStyle-Table_Num-Body-Body1"><td class="TableStyle-Table_Num-BodyH-Column1-Body1"><p>Enabled</p></td><td class="TableStyle-Table_Num-BodyG-Column1-Body1"><p>Specifies whether the Kafka receiver is enabled.</p></td></tr><tr class="TableStyle-Table_Num-Body-Body1"><td class="TableStyle-Table_Num-BodyH-Column1-Body1"><p>Bootstrap Address List</p></td><td class="TableStyle-Table_Num-BodyG-Column1-Body1"><p>Specifies the fully qualified domain name (FQDN) or IP address and optional port of one Kafka broker in a Kafka cluster where the Kafka receiver can fetch the state of the entire cluster. The bootstrap addresses must resolve to an appropriately configured and compatible listener port on the Kafka broker for the selected authentication scheme. If you do not provide a port, the default port is 9092. </p><p>You can configure a comma-separated list of addresses for the Kafka receiver to try in the event that an attempt to connect to the first address  fails.</p><p>Specify IPv4 addresses in the dotted decimal notation form, <code>nnn.nnn.nnn.nnn</code>.  You must enclose IPv6  addresses in square brackets. Specify the port as a numeric value from 0 to 65535.</p><p>For example, a correctly formatted IPv4 address is: <code>192.168.100.1:9092</code>. The same address in IPv6 format is <code>[::ffff:c0a8:6401]:9092</code>. The address corresponds to the <code>bootstrap.servers</code> Kafka consumer API parameter. </p></td></tr><tr class="TableStyle-Table_Num-Body-Body1"><td class="TableStyle-Table_Num-BodyH-Column1-Body1"><p>Authentication Scheme</p></td><td class="TableStyle-Table_Num-BodyG-Column1-Body1"><p>Specifies the authentication scheme that the Kafka receiver uses to establish a connection to the remote Kafka cluster. The options are:</p><ul><li><b>None</b>—no authentication required. This option may be useful for anonymous connections or when a Kafka receiver does not require authentication.</li><li><b>Basic</b>—log in with a specified username and password. Credentials can be transmitted using plain-text or encrypted with SSL.</li><li><b>Scram</b>—log in with Salted Challenge Response Authentication (SCRAM). You must specify a username, password, and the SCRAM hash.</li><li><b>Client Certificate</b>—log in with a client certificate to validate the receiver's identity. You must specify the PEM formatted content for the client certificate and the password for the certificate. The specified client certificate can also be used to identify the Kafka receiver with other authentication schemes.</li><li><b>Kerberos</b>—log in with the Kerberos mechanism. You must specify the service name of the remote Kafka broker, the user principal name of the Kafka receiver, and the keytab file for the Kafka receiver. </li><li><b>OAuth Client</b>—log in with OAuth 2.0 client credentials. You must specify the OAuth client ID, and token endpoint URL. You can also specify the OAuth scope.</li></ul></td></tr><tr class="TableStyle-Table_Num-Body-Body1"><td class="TableStyle-Table_Num-BodyB-Column1-Body1"><p>Encryption Enabled</p></td><td class="TableStyle-Table_Num-BodyA-Column1-Body1"><p>Specifies whether TLS encryption is enabled for the Kafka Receiver. The bootstrap addresses must resolve to PLAINTEXT or SASL_PLAINTEXT listener ports when encryption is disabled, and SSL or SASL_SSL listener ports when encryption is enabled.</p><MadCap:snippetBlock src="../KafkaReceiverEncryption.flsnp"/></td></tr></tbody></table></p></li>
      <li style="font-weight: normal;">(Optional) Click <b>Show Advanced Settings</b> and set any of the following options for the receiver:
                <p><table style="width: 100%;mc-table-style: url('../../../TableStyles/Table_Num.css');margin-left: auto;margin-right: auto;" class="TableStyle-Table_Num" cellspacing="0"><col class="TableStyle-Table_Num-Column-Column1"/><col class="TableStyle-Table_Num-Column-Column1"/><thead><tr class="TableStyle-Table_Num-Head-Header1"><th class="TableStyle-Table_Num-HeadE-Column1-Header1">Option</th><th class="TableStyle-Table_Num-HeadD-Column1-Header1">Description</th></tr></thead><tbody><tr class="TableStyle-Table_Num-Body-Body1"><td class="TableStyle-Table_Num-BodyH-Column1-Body1"><p>Delay</p></td><td class="TableStyle-Table_Num-BodyG-Column1-Body1"><p>Specifies the delay in milliseconds to wait before accumulating a batch of messages from the Kafka cluster.</p><p>This setting corresponds to the <code>fetch.wait.max.ms</code> Kafka consumer API parameter. </p></td></tr><tr class="TableStyle-Table_Num-Body-Body1"><td class="TableStyle-Table_Num-BodyH-Column1-Body1"><p>Max Size</p></td><td class="TableStyle-Table_Num-BodyG-Column1-Body1"><p>Specifies the maximum size of a message batch, in bytes.</p><p>This setting corresponds to the <code>fetch.min.bytes</code> Kafka consumer API parameter. </p></td></tr><tr class="TableStyle-Table_Num-Body-Body1"><td class="TableStyle-Table_Num-BodyH-Column1-Body1"><p>Group ID</p></td><td class="TableStyle-Table_Num-BodyG-Column1-Body1"><p>Specifies the Kafka consumer group ID for the receiver.</p><p>Consumer groups allow Kafka consumers to work together and process Kafka events from a topic in parallel. Each consumer in the same group is assigned a different subset of partitions from a Kafka topic or set of topics. Depending on your deployment, you may want to specify certain details of the consumer group a Kafka receiver belongs to.</p><p>This setting corresponds to the <code>group.id</code> Kafka consumer API parameter. </p></td></tr><tr class="TableStyle-Table_Num-Body-Body1"><td class="TableStyle-Table_Num-BodyE-Column1-Body1"><p>Keepalive Interval</p></td><td class="TableStyle-Table_Num-BodyD-Column1-Body1"><p>Specifies the time, in milliseconds, between sending keepalive messages to the members of the consumer group.
</p><p>This setting corresponds to the <code>heartbeat.interval.ms</code> Kafka consumer API parameter.</p></td></tr><tr class="TableStyle-Table_Num-Body-Body1"><td class="TableStyle-Table_Num-BodyH-Column1-Body1"><p>Keepalive Timeout</p></td><td class="TableStyle-Table_Num-BodyG-Column1-Body1"><p>Specifies the time, in milliseconds, until unresponsive consumer group members are removed, which triggers <MadCap:xref href="../../../../Messaging/Guaranteed-Msg/Partition-Rebalancing.htm" target="_blank">Partition Rebalancing</MadCap:xref> across other members of the group.
</p><p>This setting corresponds to the <code>session.timeout.ms</code> Kafka consumer API parameter.</p></td></tr><tr class="TableStyle-Table_Num-Body-Body1"><td class="TableStyle-Table_Num-BodyH-Column1-Body1">Membership Type</td><td class="TableStyle-Table_Num-BodyG-Column1-Body1"><p>Specifies the membership type of the Kafka consumer group for the receiver. The options are:</p><ul><li><b>Dynamic</b>—specifies dynamic group membership. This option corresponds to an empty value for the Kafka consumer API parameter <code>group.instance.id</code> is empty. </li><li><b>Static</b>—specifies static group membership. Static members can leave and rejoin the group (within the Keepalive Timeout period)) without prompting rebalancing.

This option corresponds to  a string value of <code>&lt;broker-name&gt;/&lt;vpn-name&gt;/&lt;receiver-name&gt;</code>, where <code>&lt;broker-name&gt;</code> event broker name, <code>&lt;vpn-name&gt;</code> is the Message VPN name, and <code>&lt;receiver-name&gt;</code> is the Kafka receiver name,  for the Kafka consumer API parameter <code>group.instance.id</code>.</li></ul></td></tr><tr class="TableStyle-Table_Num-Body-Body1"><td class="TableStyle-Table_Num-BodyH-Column1-Body1"><p>Partition Scheme List</p></td><td class="TableStyle-Table_Num-BodyG-Column1-Body1"><p>Specifies an ordered, comma-separated list of schemes for partition assignment of the consumer group for this receiver. Both  eager ("range.roundrobin") and cooperative ("cooperative-sticky") schemes are supported. The elected group leader chooses the first common strategy provided by all members of the group. Do not mix eager and cooperative schemes. For more information on these schemes, see the documentation for your Kafka implementation.</p><p>
This setting corresponds to the <code>partition.assignment.strategy</code> Kafka consumer API parameter..</p></td></tr><tr class="TableStyle-Table_Num-Body-Body1"><td class="TableStyle-Table_Num-BodyE-Column1-Body1"><p>Topic Exclude List</p></td><td class="TableStyle-Table_Num-BodyD-Column1-Body1">Specifies a comma-separated list of Kafka topics to ignore. You must specify topics as regular expressions, including POSIX.2 regular expressions. Each regular expression must start with the ^ character, otherwise it will be interpreted as a literal topic name.</td></tr><tr class="TableStyle-Table_Num-Body-Body1"><td class="TableStyle-Table_Num-BodyB-Column1-Body1"><p>Topic Refresh Interval</p></td><td class="TableStyle-Table_Num-BodyA-Column1-Body1"><p>Specifies the time, in milliseconds, between refreshes of topic metadata from the Kafka cluster. This setting corresponds to the <code>topic.metadata.refresh.interval.ms</code> Kafka consumer API parameter. </p></td></tr></tbody></table></p></li>
      <li>Click <b>Apply</b>.</li>
    </ol>
  </body>
</html>
