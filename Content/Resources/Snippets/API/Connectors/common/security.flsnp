<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
  <body>
    <h2>Securing Endpoints</h2>
    <h3><a name="securiing-exposed"/>Exposed Management Web Endpoints</h3>
    <p>By default, this connector only enables the <code>health</code> and <code>leaderelection</code> management endpoints. For the <code>health</code> endpoint, only the root status is returned by default (without health details).</p>
    <p>To enable other management endpoints, see <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/actuator.html#actuator.endpoints" class="link-offsite">Spring Actuator Endpoints</a>.</p>
    <h3><a name="authenication-authorization"/>Authentication &amp; Authorization</h3>
    <p>For this release, the connector only supports basic HTTP authentication.</p>
    <p>By default, no users are created unless the operator configures them in their configuration file. The configuration parameters that are responsible for security are:</p>
    <pre xml:space="preserve">
solace:
  connector:
    security:
      enabled: true
      users:
      - name: user1
        password: pass
      - name: admin1
        password: admin
        roles:
        - admin
</pre>
    <p>In the above example, we have created two users:</p>
    <ul>
      <li>
        <p><b>user1</b> has access to perform GET (Read) requests.</p>
      </li>
      <li>
        <p><b>admin1</b> has access to perform GET and POST (Read &amp; Write) requests.</p>
      </li>
    </ul>
    <p>To fully disable security and permit anyone to access the connectorâ€™s web endpoints, configure the  <code>solace.connector.security.enabled</code> parameter to <code>false</code>.</p>
    <div class="Caution">
      <p>While these properties can be defined in an <code>application.yml</code> file, we recommend that you use environment variables to set secret values.</p>
    </div>
    <p>The following example shows you  how to define users using environment variables:</p>
    <pre xml:space="preserve">
# Create user with no role (i.e. read-only)
SOLACE_CONNECTOR_SECURITY_USERS_0_NAME=user1
SOLACE_CONNECTOR_SECURITY_USERS_0_PASSWORD=pass
# Create user with admin role
SOLACE_CONNECTOR_SECURITY_USERS_1_NAME=admin1
SOLACE_CONNECTOR_SECURITY_USERS_1_PASSWORD=admin
SOLACE_CONNECTOR_SECURITY_USERS_1_ROLES_0=admin
</pre>
    <p>In the above example, we have created 2 users:</p>
    <ul>
      <li>
        <p><b>user1</b> has access to perform GET (Read) requests.</p>
      </li>
      <li>
        <p><b>admin1</b> has access to perform GET and POST (Read &amp; Write) requests.</p>
      </li>
    </ul>
    <div class="Note">
      <p><a name="security-note"/><code>solace.connector.security.users</code> is a list. When users are defined in multiple sources (different <code>application.yml</code> files, environment variables, and so on), overriding works by replacing the entire list. In other words, you must pick one place to define all your users, whether in a  <b>single</b> application properties file or as environment variables. For more information, see <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/features.html#features.external-config.typesafe-configuration-properties.merging-complex-types" class="link-offsite">Spring Boot - Merging Complex Types</a>.       </p>
    </div>
    <h3><a name="TLS"/>TLS</h3>
    <p>Transport Layer Security (TLS) is disabled by default.</p>
    <p>To configure TLS, see <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/howto.html#howto.webserver.configure-ssl" class="link-offsite">Spring Boot - Configure SSL</a> and <a href="https://www.baeldung.com/spring-tls-setup" class="link-offsite">TLS Setup in Spring</a>.</p>
  </body>
</html>
