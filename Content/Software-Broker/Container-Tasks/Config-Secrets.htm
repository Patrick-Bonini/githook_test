<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
  <head>
    <meta name="description" content="For Solace PubSub+ software event brokers, a secrets directory is created in the host environment, which is then mounted as a volume in the container consuming the secret..."/>
    <meta name="keyword" content="secrets"/>
    <meta name="author" content="Solace Corporation"/>
  </head>
  <body>
    <h1><MadCap:concept term="Software"/>Configuring Secrets</h1>
    <p>A secret is a mechanism for transferring sensitive data to a host so that it can be made it available inside a container running on that host. In production environments, creating and populating the secrets location are typically done by an automation tool. Secrets are created in the controller application and then shared with the hosts that need them when the containers are deployed. For example, a tool such as Kubernetes would transfer the secret to a temporary filesystem on the host (so that the secret is never written to disk) and then mount that location in the container.</p>
    <p>You use <a href="../Configuration-Keys-Reference.htm" class="link-internal">configuration keys</a> to specify information such as the path for the secret; on startup, the software event broker reads the secret and sets the configuration accordingly.</p>
    <p>In this section, we show you how to:</p>
    <ul>
      <li>create a secrets directory and place a server certificate and the file containing the username password in it </li>
      <li>create a software event broker container using the secret configurations</li>
    </ul>
    <div class="Note">
      <p>The example below creates a container with a UID of 0 (that is, the root user). For a non-zero UID, do the following in addition to the steps listed:</p>
      <ul>
        <li>Specify the UID for the container by adding the <code>--user</code> parameter to the <code>create</code> command in Step 3.</li>
        <li>Use the <code>chown</code> command on the Linux host to change the owner of the  container's secrets directory to same user that created the container, for example:<p><code> chown --recursive &lt;container uid&gt;:&lt;container gid&gt; /&lt;local-pathname&gt;/secrets
</code></p></li>
        <li>Use the <code>chmod 500</code> command on the Linux host to grant read and execute permission to the secrets directory, and to restrict permission to other users in the group associated with the directory.<p><code>chmod --recursive 500 /&lt;local-pathname&gt;/secrets</code></p></li>
      </ul>
    </div>
    <h2 class="with-rule"><a name="create-directory"/>Step 1: Create a Secrets Directory</h2>
    <p>Create a secrets directory in the host.</p>
    <p>For example:</p>
    <pre class="Code" xml:space="preserve">$ mkdir -p &lt;local-pathname&gt;/secrets
</pre>
    <p>Where:</p>
    <p><code>&lt;local-pathname&gt;</code> is the path where the secrets directory will be located in the host.</p>
    <h2 class="with-rule"><a name="add-files"/>Step 2: Place Files in the Secrets Directory</h2>
    <p>Place the server certificate and file containing the username password in the secrets directory.</p>
    <p>For example:</p>
    <pre class="Code" xml:space="preserve">$scp &lt;username&gt;@&lt;host&gt;:&lt;remote-pathname&gt;/&lt;certificate-file&gt; &lt;local-pathname&gt;/secrets/
$scp &lt;username&gt;@&lt;host&gt;:&lt;remote-pathname&gt;/&lt;password-file&gt; &lt;local-pathname&gt;/secrets/</pre>
    <p>Where:</p>
    <ul>
      <li><code>&lt;username&gt;</code> is the username, if a username is required, to access the remote certificate file.</li>
      <li><code>&lt;host&gt;</code> is the address of the server where the remote certificate file is stored.</li>
      <li><code>&lt;remote-pathname&gt;</code> is the path to the location of the secrets directory from the server root directory.</li>
      <li><code>&lt;certificate-file&gt;</code> is the filename to use for the server certificate on the event broker.</li>
      <li><code>&lt;password-file&gt;</code> is the file containing the plain-text password for the software event broker username.</li>
    </ul>
    <h2 class="with-rule"><a name="create-container"/>Step 3: Create the Software Event Broker Container</h2>
    <p>Create the software event broker container with secret configurations.</p>
    <p>The following example is suitable for a test deployment. It shows how to configure a secrets directory using a shell script that runs <code>docker create</code>. The options for <code>podman create</code> are very similar.</p>
    <p>For a production deployment, there are use-case dependent factors that impact the settings for creating the container. For more information, see <MadCap:xref href="../Configuration-Keys-Reference.htm">Configuration Keys</MadCap:xref> and <MadCap:xref href="../Config-Key-Scaling-Params.htm">Setting Scaling Parameters Using Configuration Keys</MadCap:xref>.</p>
    <pre class="Code" xml:space="preserve">
&gt;sudo tee /root/docker-create &lt;&lt;-EOF
#!/bin/bash
sudo docker create \
--network=host \
--uts=host \
--shm-size=1g \
--ulimit core=-1 \
--ulimit memlock=-1 \
--ulimit nofile=2448:42192 \
--env 'username_admin_globalaccesslevel=admin' \
--env 'username_admin_passwordfilepath=&lt;password-file&gt;' \
--env 'tls_servercertificate_filepath=&lt;certificate-file&gt;' \
--volume /&lt;local-pathname&gt;/secrets:/run/secrets \
--name=solace solace-app:&lt;version-edition&gt; \
EOF</pre>
    <p>In this example:</p>
    <ul>
      <li> The <code>--volume /&lt;local-pathname&gt;/secrets:/run/secrets</code> option mounts the secrets directory to the specified location inside the container. </li>
      <li>The admin Solace CLI user and the path to the secrets directory containing the username password file are defined at container creation through <code>username_admin_globalaccesslevel</code> and <code>username_admin_passwordfilepath=&lt;password-file&gt;</code> configuration keys. </li>
      <li>The <code>tls_servercertificate_filepath</code> configuration key defines the path to the secrets directory where the server certificate is placed. If the TLS server certificate contained in the file is encrypted, then the path to the file containing the passphrase must be provided through the <code>tls_servercertificate_passphrasefilepath</code> configuration key. For more information, see <MadCap:xref href="Config-SW-Broker-Container-Cfg-Keys.htm">Initializing a Software Event Broker Container</MadCap:xref>.</li>
    </ul>
    <p>In the above <code>docker create</code> command:</p>
    <ul>
      <li><code>solace-app</code> is the repository name.</li>
      <li><code>&lt;version-edition&gt;</code> is the software event broker  version. The version-edition is dependent on the package you have obtained. You can use the <code>docker images</code> command to check the version-edition.</li>
    </ul>
    <p class="Note">
            When reloading a container to the default configuration, the secrets and keys must be present when the reload happens, otherwise the initial configuration previously configured by the secret will not be present in the new initial configuration.
            
        </p>
    <h2 class="with-rule"><a name="verify"/>Step 4: Verify Using Solace CLI</h2>
    <p>Once your container is up and running, verify the software event broker secrets configuration using the Solace CLI:</p>
    <pre class="Code" xml:space="preserve">solace&gt; show ssl server-certificate
Filename:                    servercert.pem
Configured at:               Oct 11 2017 1933:42 UTC</pre>
  </body>
</html>
