<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
  <head>
    <link href="../../Resources/TableStyles/Table_Num.css" rel="stylesheet" MadCap:stylesheetType="table"/>
  </head>
  <body>
    <h1>Rootless Containers</h1>
    <p>Rootless containers are containers that can be created, run, and otherwise managed by unprivileged users (as opposed to the root user). To be considered fully rootless, both the container runtime and the container must be running without root privileges.</p>
    <p>An advantage to using rootless containers is that they can mitigate the risk of  container-breakout vulnerabilities. The best way to prevent privilege-escalation attacks from within a container is to configure your container’s applications to run as unprivileged users. However, running in rootless mode introduces some additional complexity, especially concerning networking. For more details, see <MadCap:xref href="Config-Container-Networking.htm">Container Networking Configuration</MadCap:xref>.</p>
    <h2><a name="user-namespaces"/>User Namespaces</h2>
    <p>Rootless containers make use of a feature of the Linux kernel called <a href="http://man7.org/linux/man-pages/man7/user_namespaces.7.html" target="_blank" class="link-offsite">user namespaces</a>. User namespaces isolate security-related identifiers and attributes, in particular, user IDs (UIDs) and group IDs (GIDs), credentials, the root directory, keys, and capabilities. A process's user and group IDs can be different inside and outside a user namespace. With user namespaces, a range of user and group IDs in the process's user namespace is mapped to a set of user and group IDs in the  parent namespace; this mapping is specified in the <code>/etc/subuid</code> and <code>/etc/subgid</code> files. </p>
    <p>The <code>/etc/subuid</code> file authorizes a user ID to map ranges of userIDs from its namespace into child namespaces; the <code>/etc/subgid</code> provides the same functionality for group IDs. Each line in <code>/etc/subuid</code> and <code>/etc/subgid</code> contains either a user name or group name, respectively, and a range of subordinate IDs that processes in the child namespace are allowed to use. The three fields delimited for each entry are:</p>
    <ul>
      <li>user/group name or ID</li>
      <li>numerical subordinate ID</li>
      <li>numerical subordinate ID count</li>
    </ul>
    <p>For example, this entry shows that for user Maria, the subordinate IDs start at 10001 and have a range of 65536:</p>
    <pre xml:space="preserve">maria:10001:65536</pre>
    <h2><a name="uid-gid-translation"/>User and Group ID Translation</h2>
    <p>Rootless mode executes the processes for the container runtime and containers inside a user namespace. The user ID of the container maps to the user ID of host as follows:</p>
    <pre xml:space="preserve"> &lt;start of subuid range&gt; + &lt;uid inside the container&gt; – 1</pre>
    <p>Similarly, the group ID of the container user maps to:</p>
    <pre xml:space="preserve">&lt;start of subgid range&gt; + &lt;GID inside the container&gt; - 1</pre>
    <p>The exception to this is that the root user (UID=0) maps to the UID that owns the user namespace.</p>
    <p class="Note">You must carefully consider this mapping when you are setting the ownership of the data volume directories.  Podman includes an <code>unshare</code> utility that makes setting the directory ownership less confusing (and does not require the user running the commands to use <code>sudo</code>). For more information, see <MadCap:xref href="Config-Container-Storage.htm">Managing Storage for Container Images</MadCap:xref>.</p>
    <p>For example, suppose Solly has a UID of 1000. His account has a mapping in <code>/etc/subuid</code> of <code>solly:12000:65536</code>. This means that user IDs inside Solly's user namespace can be mapped to a range of 65536 IDs on the host, starting with UID 12000:</p>
    <pre xml:space="preserve">$ cat /etc/subuid
solly:120000:65536</pre>
    <p>Solly is running Podman with this UID mapping. When he launches Bash inside his Podman container, and then examines the current user, he sees the following:</p>
    <pre xml:space="preserve">$ podman run --rm -it ubuntu bash
root@bfda7167e840:/# id    
uid=0(root) gid=0(root) groups=0(root)</pre>
    <p>This shows that Bash is running as the root user (0) inside the user namespace.</p>
    <p>He then examines the <code>uid_map</code> file:</p>
    <pre xml:space="preserve">

root@bfda7167e840:/# cat /proc/self/uid_map 
         0       1000          1
         1     120000      65536</pre>
    <p>This shows that:</p>
    <ul>
      <li> the root user (0) in the user namespace is mapped to Solly's UID (1000) on the host</li>
      <li>user ID 1 in the namespace is mapped to UID 120000 on the host</li>
    </ul>
    <p>The following diagram shows another example where the container runtime is launched by Maria, who has user ID 1600. The  <code>/etc/subuid</code> file contains the following mapping:</p>
    <pre xml:space="preserve">maria:10001:65536</pre>
    <p>This means that processes within Maria's user namespace map to host UIDs starting at 10001. Because the container runtime launches the containers, the container processes also belong to Maria's user namespace.</p>
    <p>
      <img src="../../Resources/Images/SW-Broker-Setup/Container/Rootless-Container-UID-Mapping.png" alt=""/>
    </p>
    <p>In this example:</p>
    <ul>
      <li> the root user (0) in the user namespace is mapped to Maria's UID (1600) on the host</li>
      <li>user ID 1000 in the user namespace is mapped to UID 11000 on the host</li>
    </ul>
    <MadCap:snippetBlock src="../../Resources/Snippets/solace-default-uid-rootless.flsnp"/>
    <h2><a name="resource-limits"/>Resource Limit Configuration</h2>
    <p>The resource constraints that an unprivileged user can impose on a container are limited by the constraints assigned to the user. Any changes in the limits assigned to the unprivileged user must be made by a privileged user.</p>
    <p>For instance, on the WSL2 Ubuntu 20.04 LTS distribution, the default hard limit for the maximum number of concurrent open files for an unprivileged user (and therefore for a container created by an unprivileged user) is  4096. Using this default value means that the number of PubSub+ client connections is constrained to less than the configured maximum (because 4096 is less than the recommended limit for the <MadCap:xref href="../System-Scaling-Parameters.htm#max-client-connections">Maximum Number of Client Connections</MadCap:xref>).</p>
    <p>To allow an unprivileged user to create a container with <code>--ulimit nofile=2448:42192</code>, the root user must modify the <code>nofile</code> hard limit configuration for the user in the <code>/etc/security/limits.conf</code> file.</p>
    <h2><a name="file-ownership"/>Directory and File Ownership</h2>
    <p>A PubSub+ container is designed to work with directories and files that are owned by the container user and the root group.
As described in <MadCap:xref href="../Configuring-Storage.htm">Managing Software Event Broker Storage</MadCap:xref>, the software broker makes use of a <code>storage-group</code> to maintain state information. We recommend that this <code>storage-group</code> be kept in external storage, and mounted to the container as a volume (preferred) or bind mount.</p>
    <p>To ensure that the software broker container has the required permissions to access the <code>storage-group</code>, you must modify the ownership of the persistent storage using the <code>podman unshare</code> command on the host:</p>
    <pre>podman unshare chown &lt;container user's uid&gt;:0 -R &lt;directory&gt;</pre>
    <p>The <code>podman unshare</code> command lets you run a command (<code>chown</code> in this case) in the same user namespace as your containers. Because all rootless containers that are run by a given user run inside the same user namespace, you only need to run <code>podman unshare chown</code> once to allow all of a user's containers to access a directory.</p>
    <p>For example, for a container user with UID 5 and a <code>storage-group</code> mounted as a volume, run <code>chown</code> with <code>podman unshare</code> to change the directory owner within the container's user namespace:</p>
    <pre xml:space="preserve">$ podman unshare chown 5:0 -R /home/ec2-user/.local/share/containers/storage/volumes/solace/_data</pre>
    <p>Now run <code>ls</code> with <code>podman unshare</code> to view the directory owner within the container's user namespace:</p>
    <pre xml:space="preserve">
$ podman unshare ls -laZ /home/ec2-user/.local/share/containers/storage/volumes/solace/_data
drwxrwxrwx. 9 <span style="color: #ff0000;">5 root</span> system_u:object_r:container_file_t:s0 165 Feb 24 14:40 _data</pre>
    <p>Run <code>ls</code> again, this time without <code>podman unshare</code>, to view the directory owner from the perspective of the host namespace:</p>
    <pre xml:space="preserve">
$ ls -laZ /home/ec2-user/.local/share/containers/storage/volumes/solace/_data
drwxrwxrwx. 9 <span style="color: #ff0000;">100004 ec2-user</span> system_u:object_r:container_file_t:s0 165 Feb 24 14:40 _data
</pre>
    <MadCap:snippetBlock src="../../Resources/Snippets/Podman-directory-ownership.flsnp"/>
    <h2><a name="rootful-vs-rootless"/>Rootful Versus Rootless Containers</h2>
    <p>There are four possible variants for running containers with a combination of root and non-root users, as shown in the table below: </p>
    <ul>
      <li>The container runtime is executed as root (left two scenarios) versus non-root (right two scenarios)</li>
      <li>The user inside the container is root (top two scenarios) versus non-root (bottom two scenarios)</li>
    </ul>
    <p> The most secure solution  is the bottom-right scenario, where the container is run as non-root, and the user inside the container is also non-root.</p>
    <p>The examples in the table use Podman to illustrate the four scenarios:</p>
    <table style="width: 100%;mc-table-style: url('../../Resources/TableStyles/Table_Num.css');border-left-style: solid;border-left-width: 1px;border-left-color: #e1e1e1;border-right-style: solid;border-right-width: 1px;border-right-color: #e1e1e1;border-top-style: solid;border-top-width: 1px;border-top-color: #e1e1e1;border-bottom-style: solid;border-bottom-width: 1px;border-bottom-color: #e1e1e1;margin-left: 0;margin-right: auto;" class="TableStyle-Table_Num" cellspacing="0">
      <col class="TableStyle-Table_Num-Column-Column1"/>
      <col class="TableStyle-Table_Num-Column-Column1"/>
      <tbody>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p style="font-weight: bold;font-size: 1.2rem;">Container Runtime Executed as Root</p>
            <p style="font-weight: bold;font-size: 1.2rem;">Processes in Container Executed as Root</p>
            <p>Launch Podman as root, and specify the root user (<code>-u 0</code>) within the container:</p>
            <pre xml:space="preserve">brian@ubuntu:/$ sudo bash
root@ubuntu:/# whoami
&gt; root
root@ubuntu:/# podman run <span style="color: #ff0000;">-u 0</span> ... solace-container</pre>
            <p>Run bash inside the container:</p>
            <pre xml:space="preserve">root@ubuntu:/# podman exec -it solace-container bash</pre>
            <p>Processes run as root inside the container:</p>
            <pre xml:space="preserve"> whoami
&gt; root</pre>
            <pre xml:space="preserve">
ps auxf
&gt; # Notice processes are running as root
</pre>
            <p>The same processes run as root outside the container from the perspective of the host:</p>
            <pre xml:space="preserve">root@ubuntu:/# ps auxf
&gt; # Notice all container processes are running as root
</pre>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p style="font-weight: bold;font-size: 1.2rem;">Container Runtime Executed as Non-Root</p>
            <p style="font-weight: bold;font-size: 1.2rem;">Processes in Container Executed as Root</p>
            <p>Launch Podman as unprivileged user, and specify the root user (<code>-u 0</code>) within the container:</p>
            <pre xml:space="preserve">brian@ubuntu:/$ whoami
&gt; brian (UID 1000)

brian@ubuntu:/$ podman run <span style="color: #ff0000;">-u 0</span> ... solace-container</pre>
            <p>Run bash inside the container:</p>
            <pre xml:space="preserve">brian@ubuntu:/$ podman exec -it solace-container bash</pre>
            <p>Processes run as root inside the container</p>
            <pre xml:space="preserve"> whoami
&gt; root</pre>
            <pre xml:space="preserve"> ps auxf
&gt; # Notice processes are running as root
</pre>
            <p>The same processes run as UID 1000 (brian) outside the container from the perspective of the host (because of user namespace mapping)</p>
            <pre xml:space="preserve">brian@ubuntu:/$ ps auxf
&gt; # Notice all container processes are running as user 1000 (brian)</pre>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyB-Column1-Body1">
            <p style="font-weight: bold;font-size: 1.2rem;">Container Runtime Executed as Root</p>
            <p style="font-weight: bold;font-size: 1.2rem;">Processes in Container Executed as Non-Root</p>
            <p>Launch Podman as root, and do not specify a user within the container:</p>
            <pre xml:space="preserve">brian@ubuntu:/$ sudo bash
root@ubuntu:/# whoami
&gt; root
root@ubuntu:/# podman run ... solace-container</pre>
            <p>Run bash inside the container:</p>
            <pre xml:space="preserve">root@ubuntu:/# podman exec -it solace-container bash</pre>
            <p>When you don't specify a user, container processes run as user 1000001  (the default User ID in a Solace container is 1000001):</p>
            <pre xml:space="preserve">whoami
&gt; 1000001</pre>
            <pre xml:space="preserve">
ps auxf
&gt; # Notice processes are running as user 1000001</pre>
            <p>The same processes run as user 1000001 outside the container from the perspective of the host (no user namespace mapping because the container runtime runs as root):</p>
            <pre xml:space="preserve">root@ubuntu:/# ps auxf
&gt; # Notice all container processes are running as user 1000001</pre>
          </td>
          <td class="TableStyle-Table_Num-BodyA-Column1-Body1">
            <p style="font-weight: bold;font-size: 1.2rem;">Container Runtime Executed as Non-Root</p>
            <p style="font-weight: bold;font-size: 1.2rem;">Processes in Container Executed as Non-Root</p>
            <p>Launch Podman as non-root user, and specify a non-root user within the container:</p>
            <pre xml:space="preserve">brian@ubuntu:/$ whoami
&gt; brian (UID 1000)

brian@ubuntu:/$ podman run <span style="color: #ff0000;">-u 5</span> ... solace-container</pre>
            <p>Run bash inside the container:</p>
            <pre xml:space="preserve">brian@ubuntu:/$ podman exec -it solace-container bash</pre>
            <p>Processes run as user 5 inside the container</p>
            <pre xml:space="preserve">
whoami
&gt; 5</pre>
            <pre xml:space="preserve">
ps auxf
&gt; # Notice processes are running as user 5
</pre>
            <p>The same processes run as UID 100004 outside the container from the perspective of the host (because of user namespace mapping):</p>
            <pre xml:space="preserve">brian@ubuntu:/$ ps auxf
&gt; # Notice all container processes are running as USER 100004</pre>
          </td>
        </tr>
      </tbody>
    </table>
    <h2><a name="rootless-prerequisites"/>Prerequisites for Rootless Containers</h2>
    <p>Rootless mode relies on the resource isolation mechanisms of the host operating system. Therefore, certain configurations must be in place before you attempt to launch a container  in rootless mode. For details about the requirements for Podman, see <a href="https://github.com/containers/podman/blob/main/docs/tutorials/rootless_tutorial.md" target="_blank" class="link-offsite">Basic Setup and Use of Podman in a Rootless environment</a>. Other container engines have similar requirements.</p>
    <p class="Note">In RHEL 8 and other popular Linux distributions, the packages that include Podman also install all of the prerequisites. For example, if you have installed the RHEL 8 <code>container-tools</code> package, you do not need to install any additional packages.</p>
    <h2><a name="next-steps"/>Next Steps</h2>
    <p>For more information about working with rootless containers, see the following:</p>
    <ul>
      <li>
        <a href="https://rootlesscontaine.rs/" target="_blank" class="link-offsite">Rootless Containers</a>
      </li>
      <li>
        <a href="https://developers.redhat.com/blog/2020/09/25/rootless-containers-with-podman-the-basics" target="_blank" class="link-offsite">Rootless containers with Podman: The basics</a>
      </li>
      <li>
        <a href="https://github.com/containers/podman/blob/main/docs/tutorials/rootless_tutorial.md" target="_blank" class="link-offsite">Basic Setup and Use of Podman in a Rootless environment.</a>
      </li>
      <li>
        <a href="https://github.com/containers/podman/blob/main/rootless.md" target="_blank" class="link-offsite">Shortcomings of Rootless Podman</a>
      </li>
    </ul>
  </body>
</html>
