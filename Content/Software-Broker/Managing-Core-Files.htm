<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
  <head/>
  <body>
    <h1><MadCap:concept term="Software"/>Managing Core Files</h1>
    <p>Core files generated by the Solace PubSub+ software event broker are an important tool used by Solace Customer Support to diagnose and debug issues. A core file is the record of process state that is captured by the Linux kernel when the process has been signaled for termination.</p>
    <p>Core files can be very large—on the order of several gigabytes up to the size of the <a href="System-Resource-Requirements.htm#res-req-container" class="link-internal">minimum <code>cgroup</code> limit</a> of the container. You must take special care and consideration when you determine the storage resources to be made available to the event broker for core files.</p>
    <h2 class="with-rule"><a name="Managing"/>Managing Core Files for Container Images</h2>
    <p>Because container images don't include a Linux kernel, you must manually configure your runtime environment to manage any core files that might be generated. To ensure that core files are correctly managed, you must allocate adequate storage for them and decide how they are named and where they are stored.</p>
    <p>You can manage the properties of core files by:</p>
    <ul>
      <li>
        <MadCap:xref href="#set-rlimit-core-file-size">Setting the  Resource Limit for the Size of Core Files</MadCap:xref>
      </li>
      <li>
        <MadCap:xref href="#config-core-file-pattern">Configuring the Core File Pattern</MadCap:xref>
      </li>
    </ul>
    <h3><a name="set-rlimit-core-file-size"/>Setting the  Resource Limit for the Size of Core Files</h3>
    <p>The resource limit (<code>rlimit</code>) for the size of core files must be set high enough to allow the kernel to capture the complete process state. A Linux <code>rlimit</code> applies to a shell process and all its sub-processes, so its value must be set when the container is created. In some container environments, like Docker Desktop for Windows and Mac, the default <code>rlimit</code> for the size of core files is 0. With this configuration, no core files are created.</p>
    <p>For most container runtimes, you can set the <code>rlimit</code> when you create the container by using the <code>ulimit</code> parameter. Where disk space permits, we recommend the core file size<code>rlimit</code> for   event brokers be "unlimited". For example, in Docker Engine and Podman, add the <code>--ulimit core=-1</code> command line parameter when the container is created.</p>
    <h3><a name="config-core-file-pattern"/>Configuring the Core File Pattern</h3>
    <p>Certain <a href="https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html/kernel_administration_guide/working_with_sysctl_and_kernel_tunables#what_is_a_kernel_tunable" target="_blank" class="link-offsite">Linux kernel tunables</a> determine how core files are created on the storage device. In particular, the  <code>kernel.core_pattern</code> parameter typically contains one of the following three values:</p>
    <ul>
      <li> a filename, such as <code>core</code></li>
      <li>an absolute path, such as <code>/tmp/cores</code></li>
      <li> a pattern starting with a pipe symbol (<code>|</code>)</li>
    </ul>
    <h4>When the Core File Pattern is a Filename</h4>
    <p>When the value of <code>kernel.core_pattern</code> is a filename, it is interpreted as a pattern for the core dump process to follow for creating core files in its working directory. For containers, this working directory exists in the mount namespace of the container process.</p>
    <p>The most common core file pattern is <code>core</code>, often with <code>kernel.core_uses_pid</code> set to '1'. In this case, core files are generated in the event broker’s working directory (<code>/usr/sw</code>), which exists in the container's ephemeral (writeable) layer and consumes disk space in the container runtime's backing store. It is not possible to bind-mount the working directory as a volume.</p>
    <p>Because <code>core</code> is the default core file pattern for many versions of RHEL and Ubuntu, the event broker manages these core files, freeing disk space automatically  when the core files are no longer relevant. The broker automatically removes core files that are older than 14 days and those captured by Solace support tools like <code>gather-diagnostics</code>.</p>
    <h4>When the Core File Pattern is an Absolute Path</h4>
    <p>When <code>kernel.core_pattern</code> is an absolute path, the value is interpreted as a pattern for the core dump process to follow for creating core files in its mount namespace. If the defined path is not bind-mounted on the host, core files are written to the container’s ephemeral (writeable) layer, consuming disk space in the backing store of the container runtime ( typically reserved for container images).</p>
    <p class="Note">When an absolute path is specified, the event broker cannot manage core files—it attempts to capture them on a best-effort basis using Solace support tools. Core files are large and can easily exceed the disk space allocated to the runtime’s backing store. Without management, it is possible to corrupt the backing store, causing containers running on multi-tenant hosts to crash and fail to restart. Because of this, we do not recommend this core file pattern.</p>
    <h4>When the Core File Pattern Begins with a Pipe Symbol</h4>
    <p>Since kernel version 2.6.19, Linux supports an alternate syntax for <code>kernel.core_pattern</code> in which the first character is a pipe symbol (<code>|</code>). When this alternate syntax is used, the kernel treats the rest of the pattern as a command to run, which is invoked in the initial namespaces (that is, not within the container’s process or mount namespace). The core dump is written to the standard input of that program instead of to a file. This pattern is common when a core file manager, such as <code>apport</code> or <code>systemd-coredump</code>, is being used.</p>
    <p class="Note">When a core file manager is used, the event broker cannot manage core files or capture them using Solace support tools. Therefore, we do not recommend this core file pattern.</p>
  </body>
</html>
