<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
  <head/>
  <body>
    <h1>Horizontal Scaling Configuration</h1>
    <p>The following sections provides an example of how you can use Dynamic Message Routing (DMR) to scale the capabilities of an individual event broker.</p>
    <p>This example shows you how to create a single cluster with three nodes (where each node can consist of either a single event broker or a High Availability (HA) group). Together, the three nodes increase the connection limits, subscription limits, queue limits, and  bandwidth beyond a single node, without requiring additional subscription management.</p>
    <p class="Note">Before you can enable DMR horizontal scaling, you must ensure that the requirements discussed in the <MadCap:xref href="DMR-Mgmt-Prerequisites.htm">Prerequisites</MadCap:xref> section are met.</p>
    <h2 class="with-rule"><a name="UsingThisExample"/>Using This Example</h2>
    <p>In this example for this configuration, a cluster contains three event brokers (nodes) with internal links configured to connect the nodes.</p>
    <p>The example below show a cluster with nodes that have placeholder names using the notation <code>Broker-&lt;<i>letter</i>&gt;</code>, which represents the router name for that node (where each may be a standalone broker or the primary broker in an HA group). Keep in mind that in the sample commands below, the IP addresses, names of the Message VPN, and the names <code>Cluster-A</code>, <code>Broker-A</code>, <code>Broker-B</code>, and <code>Broker-C</code> are placeholders that you should replace with your own values.</p>
    <h2 class="with-rule"><a name="StepA-Create-Cluster"/>Step 1: Create a Secured Cluster</h2>
    <p>Before you can link your network of nodes together, you must create a cluster to contain the nodes.</p>
    <p>In this example, a single cluster is created for the three participating nodes, and basic authentication
            along with a shared password (<code>myshared_secret123</code>) is used to secure the cluster.</p>
    <p>
      <img src="../../Resources/Images/DMR/DMR-Tasks/horizontal-scale-cluster.PNG" style="height: 450px;" alt=""/>
      <div class="Note">
                The names <code>Broker-A</code>, <code>Broker-B</code>, and <code>Broker-C</code> are the placeholder router names of the event brokers we are linking (where each may be a standalone broker or the primary broker in an HA group) and <code>Cluster-A</code> is the name of the cluster.
            </div>
    </p>
    <p>To create a single secured cluster for all three nodes:</p>
    <ol>
      <li>
        <p>Log in to <code>Broker-A</code> and create a secured cluster:</p>
        <pre class="Code" xml:space="preserve">Broker-A&gt; enable
Broker-A# config
Broker-A(configure)# routing
Broker-A(configure/routing)# dynamic-message-routing
Broker-A(...igure/routing/dynamic-message-routing)# create cluster <code>Cluster-A</code>
Broker-A(...uting/dynamic-message-routing/cluster)# authentication
Broker-A(...essage-routing/cluster/authentication)# basic
Broker-A(...-routing/cluster/authentication/basic)# password <code>myshared_secret123</code>
Broker-A(...-routing/cluster/authentication/basic)# no shutdown
Broker-A(...-routing/cluster/authentication/basic)# exit
Broker-A(...essage-routing/cluster/authentication)# exit
Broker-A(...uting/dynamic-message-routing/cluster)# no shutdown</pre>
      </li>
      <li>
        <p>To add <code>Broker-B</code> to the cluster, log in to <code>Broker-B</code> and create a secured cluster with the same name and password as the cluster on <code>Broker-A</code>:</p>
        <pre class="Code" xml:space="preserve">Broker-B&gt; enable
Broker-B# config
Broker-B(configure)# routing
Broker-B(configure/routing)# dynamic-message-routing
Broker-B(...igure/routing/dynamic-message-routing)# create cluster <code>Cluster-A</code>
Broker-B(...uting/dynamic-message-routing/cluster)# authentication
Broker-B(...essage-routing/cluster/authentication)# basic
Broker-B(...-routing/cluster/authentication/basic)# password <code>myshared_secret123</code>
Broker-B(...-routing/cluster/authentication/basic)# no shutdown
Broker-B(...-routing/cluster/authentication/basic)# exit
Broker-B(...essage-routing/cluster/authentication)# exit
Broker-B(...uting/dynamic-message-routing/cluster)# no shutdown</pre>
      </li>
      <li>
        <p>To add <code>Broker-C</code> to the cluster, log in to <code>Broker-C</code>  and create a secured cluster with the same name and password as the cluster on <code>Broker-A</code>:</p>
        <pre class="Code" xml:space="preserve">Broker-C&gt; enable
Broker-C# config
Broker-C(configure)# routing
Broker-C(configure/routing)# dynamic-message-routing
Broker-C(...igure/routing/dynamic-message-routing)# create cluster <code>Cluster-A</code>
Broker-C(...uting/dynamic-message-routing/cluster)# authentication
Broker-C(...essage-routing/cluster/authentication)# basic
Broker-C(...-routing/cluster/authentication/basic)# password <code>myshared_secret123</code>
Broker-C(...-routing/cluster/authentication/basic)# no shutdown
Broker-C(...-routing/cluster/authentication/basic)# exit
Broker-C(...essage-routing/cluster/authentication)# exit
Broker-C(...uting/dynamic-message-routing/cluster)# no shutdown</pre>
      </li>
    </ol>
    <h2 class="with-rule"><a name="StepB-Create-Links"/>Step 2: Create Cluster Links for Each Node</h2>
    <p>After you create a cluster, you can create a bidirectional link between nodes to establish a control channel. Once a control channel is established, the subscription sets needed by each node can be exchanged with the other. In addition, the subscription sets are dynamically kept up-to-date as local client and queue subscriptions change.</p>
    <p>In this example, a full mesh of cluster links is configured between the three nodes, which is a requirement for horizontal scaling (that is, using internal links). This configuration creates a control channel across the three nodes.</p>
    <p>
      <img src="../../Resources/Images/DMR/DMR-Tasks/horizontal-scale-control.PNG" style="height: 450px;" alt=""/>
    </p>
    <p class="Note">
      <MadCap:snippetText src="../../Resources/Snippets/DMR-link-initiator-no-lexical.flsnp"/>
    </p>
    <p>To create a mesh of cluster links for the three nodes.</p>
    <ol>
      <li>
        <p>Log in to <code>Broker-A</code> and create  links from <code>Broker-A</code> to <code>Broker-B</code> and <code>Broker-C</code>:</p>
        <pre class="Code" xml:space="preserve">Broker-A&gt; enable
Broker-A# config 
Broker-A(configure)# routing dynamic-message-routing
Broker-A(...igure/routing/dynamic-message-routing)# cluster <code>Cluster-A</code>
Broker-A(...uting/dynamic-message-routing/cluster)# create link <code>Broker-B</code>
Broker-A(.../dynamic-message-routing/cluster/link)# span internal
Broker-A(.../dynamic-message-routing/cluster/link)# initiator local
Broker-A(.../dynamic-message-routing/cluster/link)# connect-via <code>192.0.2.2</code>
Broker-A(.../dynamic-message-routing/cluster/link)# transport ssl
Broker-A(.../dynamic-message-routing/cluster/link)# no shutdown
Broker-A(.../dynamic-message-routing/cluster/link)# exit
Broker-A(...uting/dynamic-message-routing/cluster)# create link <code>Broker-C</code>
Broker-A(.../dynamic-message-routing/cluster/link)# span internal
Broker-A(.../dynamic-message-routing/cluster/link)# initiator remote
Broker-A(.../dynamic-message-routing/cluster/link)# transport ssl
Broker-A(.../dynamic-message-routing/cluster/link)# no shutdown</pre>
      </li>
      <li>
        <p>Log into <code>Broker-B</code> and create links from <code>Broker-B</code> to <code>Broker-A</code> and <code>Broker-C</code>:</p>
        <pre class="Code" xml:space="preserve">Broker-B&gt; enable
Broker-B# config 
Broker-B(configure)# routing dynamic-message-routing
Broker-B(...igure/routing/dynamic-message-routing)# cluster <code>Cluster-A</code>
Broker-B(...uting/dynamic-message-routing/cluster)# create link <code>Broker-A</code>
Broker-B(.../dynamic-message-routing/cluster/link)# span internal
Broker-B(.../dynamic-message-routing/cluster/link)# initiator remote
Broker-B(.../dynamic-message-routing/cluster/link)# transport ssl
Broker-B(.../dynamic-message-routing/cluster/link)# no shutdown
Broker-B(.../dynamic-message-routing/cluster/link)# exit
Broker-B(...uting/dynamic-message-routing/cluster)# create link <code>Broker-C</code>
Broker-B(.../dynamic-message-routing/cluster/link)# span internal
Broker-B(.../dynamic-message-routing/cluster/link)# initiator remote
Broker-B(.../dynamic-message-routing/cluster/link)# transport ssl
Broker-B(.../dynamic-message-routing/cluster/link)# no shutdown</pre>
      </li>
      <li>
        <p>Log in to <code>Broker-C</code> and create links from <code>Broker-C</code> to <code>Broker-A</code> and <code>Broker-B</code>:</p>
        <pre class="Code" xml:space="preserve">Broker-C&gt; enable
Broker-C# config 
Broker-C(configure)# routing dynamic-message-routing
Broker-C(...igure/routing/dynamic-message-routing)# cluster <code>Cluster-A</code>
Broker-C(...uting/dynamic-message-routing/cluster)# create link <code>Broker-A</code>
Broker-C(.../dynamic-message-routing/cluster/link)# span internal
Broker-C(.../dynamic-message-routing/cluster/link)# initiator local
Broker-C(.../dynamic-message-routing/cluster/link)# connect-via <code>192.0.2.1</code>
Broker-C(.../dynamic-message-routing/cluster/link)# transport ssl
Broker-C(.../dynamic-message-routing/cluster/link)# no shutdown
Broker-C(.../dynamic-message-routing/cluster/link)# exit
Broker-C(...uting/dynamic-message-routing/cluster)# create link <code>Broker-B</code>
Broker-C(.../dynamic-message-routing/cluster/link)# span internal
Broker-C(.../dynamic-message-routing/cluster/link)# initiator local
Broker-C(.../dynamic-message-routing/cluster/link)# connect-via <code>192.0.2.2</code>
Broker-C(.../dynamic-message-routing/cluster/link)# transport ssl
Broker-C(.../dynamic-message-routing/cluster/link)# no shutdown</pre>
      </li>
    </ol>
    <h2 class="with-rule"><a name="StepC-Verify-Control-Channels"/>Step 3: Verify All Control Channels Are Operational</h2>
    <p>Now that you've configured cluster links to support control channels between nodes, you can check the configuration by verifying that each link is operational.</p>
    <p>To check the configuration, enter the <code>show cluster <i>&lt;cluster-name-pattern&gt;</i> link *</code> command on each participating node, and verify that both the <code>Admin</code> and <code>Operational</code> states are <code>Up</code> for all links. For example, for <code>Cluster-A</code>:</p>
    <pre class="Code" xml:space="preserve">Broker-A&gt; show cluster <code>Cluster-A</code> link *

Cluster Name      : Cluster-A
Node Name         : Broker-A

Link                               Admin Oper  Fail Reason / Uptime
---------------------------------- ----- ----- ----------------------------
#ACTIVE                            Up    Up    0d 0h 3m 35s
Broker-B                           Up    Up    0d 0h 2m 43s
Broker-C                           Up    Up    0d 0h 2m 24s
</pre>
    <h3>Troubleshooting Failures</h3>
    <p>If any links have an <code>Operational</code> state of <code>Down</code>, use the following show commands to gather more information:</p>
    <ul>
      <li>
        <code>show cluster &lt;cluster-name-pattern&gt; detail</code>
      </li>
      <li>
        <code>show cluster &lt;cluster-name-pattern&gt; link &lt;link-name-pattern&gt; detail</code>
      </li>
      <li>
        <code>show cluster &lt;cluster-name-pattern&gt; link &lt;link-name-pattern&gt; channel detail</code>
      </li>
    </ul>
    <p class="Note">To obtain complete information, you may need to issue these commands on both ends of the link.</p>
    <h2 class="with-rule"><a name="StepD-Enable-DMR"/>Step 4: Enable DMR for Each Participating Message VPN</h2>
    <p>After you've configured the necessary cluster links, you can enable DMR for each Message VPN you want to participate in the clustering topology. This configuration establishes data channels between  nodes. After a data channel has been established, application messages are exchanged across nodes, as dictated by the subscription sets maintained over control channels.</p>
    <p>In this example, DMR is enabled for the Message VPN named <code>red</code> on each node, creating a data channel across the three nodes.
		<div class="Note">The names of the Message VPNs in the DMR must be the same for horizontal scaling. In this case, the Message VPN  is named <code>red</code>. The name <code>red</code> is a  placeholder for the Message VPN in the sample commands that you should replace with the name of your own Message VPN. See <MadCap:xref href="../VPN/Configuring-VPNs.htm">Configuring Message VPNs</MadCap:xref> for more information. </div></p>
    <p>
      <img src="../../Resources/Images/DMR/DMR-Tasks/horizontal-scale-data.PNG" style="height: 450px;" alt=""/>
    </p>
    <p>To enable DMR for each participating message VPN:</p>
    <ol>
      <li>
        <p>Log in to <code>Broker-A</code> and enable DMR on Message VPN you want to participate in the clustering topology—in this case the <code>red</code> Message VPN.</p>
        <pre class="Code" xml:space="preserve">
Broker-A&gt; enable
Broker-A# config 
Broker-A(configure)# message-vpn <code>red</code>
Broker-A(configure/message-vpn)# dynamic-message-routing
Broker-A(...e/message-vpn/dynamic-message-routing)# no shutdown
</pre>
      </li>
      <li>
        <p>Log in to <code>Broker-B</code> and enable DMR on the same Message VPNs enabled on <code>Broker-A</code>.</p>
        <pre class="Code" xml:space="preserve">Broker-B&gt; enable
Broker-B# config 
Broker-B(configure)# message-vpn <code>red</code>
Broker-B(configure/message-vpn)# dynamic-message-routing
Broker-B(...e/message-vpn/dynamic-message-routing)# no shutdown</pre>
      </li>
      <li>
        <p>Log in to <code>Broker-C</code> and enable DMR on the same Message VPNs that are enabled on <code>Broker-A</code>.</p>
        <pre class="Code" xml:space="preserve">Broker-C&gt; enable
Broker-C# config 
Broker-C(configure)# message-vpn <code>red</code>
Broker-C(configure/message-vpn)# dynamic-message-routing
Broker-C(...e/message-vpn/dynamic-message-routing)# no shutdown</pre>
      </li>
    </ol>
    <h2 class="with-rule"><a name="StepE-Verify-Data-Channels"/>Step 5: Verify Data Channels Are Operational</h2>
    <p>At this point, you've configured all the necessary components to enable DMR on your network of PubSub+ event brokers. To verify that the DMR configuration is successful and working as intended, publish messages to a topic on one node, and ensure that you can consume the messages from a queue with a matching topic subscription on another node.</p>
    <p>Before you start this step, you must create a queue on <code>Broker-B</code> with a matching subscription of <code>a/b</code>. For information about adding a topic, see <MadCap:xref href="../../Messaging/Guaranteed-Msg/Configuring-Queues.htm#Adding">Adding Topic Subscriptions to Queues.</MadCap:xref></p>
    <p>
      <img src="../../Resources/Images/DMR/DMR-Tasks/horizontal-scale-traffic.PNG" style="height: 450px;" alt=""/>
    </p>
    <p>To verify that the data channels are operational using <MadCap:xref href="../../API/SDKPerf/SDKPerf.htm">SDKPerf</MadCap:xref>:</p>
    <ol>
      <li>
        <p>Publish messages to one node in the cluster.</p>
        <pre class="Code" xml:space="preserve">
<b>sdkperf_c -cip=192.0.2.1:55443 -ptl=a/b -mn=50 -mr=50 -md</b>
...
Waiting for publishing to complete.  Ctrl-c to exit.

Allow clients to finish receiving. Waiting: 2 secs
-----------------------------------------------------
Aggregate Msgs Sent Stats (Total # clients: 1)
<b>Total Messages transmitted                 = 50</b>
Computed publish rate (msg/sec)            = 49.99

-----------------------------------------------------
Aggregate Msgs Recv Stats (Total # clients: 1)
Total Messages received across all clients = 0
Computed receive rate (msg/sec aggregate)  = 0.00
Messages received with discard indication  = 0</pre>
      </li>
      <li>
        <p>Subscribe to a queue with a matching topic subscription on another node in the cluster and verify that the published traffic is received by the subscriber.</p>
        <pre class="Code" xml:space="preserve">
<b>sdkperf_c -cip=192.0.2.2:55443 -sql=Q1</b>
...
Receiving messages.  Ctrl-c to exit.

-----------------------------------------------------
Aggregate Msgs Sent Stats (Total # clients: 1)
Total Messages transmitted                 = 0
Computed publish rate (msg/sec)            = 0.00

-----------------------------------------------------
Aggregate Msgs Recv Stats (Total # clients: 1)
<b>Total Messages received across all clients = 50</b>
Computed receive rate (msg/sec aggregate)  = 14626.11
Messages received with discard indication  = 0</pre>
      </li>
    </ol>
  </body>
</html>
