<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
  <head>
    <title>[%=Heading.Level1%]</title>
  </head>
  <body>
    <h1><a name="top"/>Context Propagation for Distributed Tracing</h1>
    <p>As discussed in the <a href="Distributed-Tracing-Overview.htm" class="link-internal">overview</a>, distributed tracing tracks an event  all the way from the publishing application, between event brokers, and to the receiving application. A distributed trace, or simply a <i>trace</i>, is a record of the path taken by an event message as it propagates through an event mesh. A trace is made up of the <i>spans</i> that are emitted at each point along the journey. An OpenTelemetry backend, such as Jaeger or DataDog, assembles these spans into a trace and provides a visual view of the entire lifespan of an event message.</p>
    <p> Trace <i>context</i> is the metadata  that allows new spans to be created as children of another span in the same trace, or to link to other spans in the trace, regardless of where the other spans are generated. Context <i>propagation</i> is the mechanism by which that metadata is carried by event messages across service and process boundaries.</p>
    <p MadCap:conditions="SAP.SapHideFromOutput">Let's take a look at an example to see how context propagation works. The diagram below shows a simple architecture that includes one event broker and two clients (one that publishes messages, and one that consumes messages). Each process that handles the event message emits a span. These spans are consumed by a receiver, and then assembled together by an OpenTelemetry backend system to form a trace.</p>
    <div class="thumbnail-container" MadCap:conditions="SAP.SapHideFromOutput">
      <img src="../../Resources/Images/Distributed-Tracing/distributed-tracing-context-propagation.png" class="solacethumbnail" alt="Illustration depicting the concepts described in the surrounding text."/>
    </div>
    <p MadCap:conditions="SAP.SapHideFromOutput">Let's examine each step in this simplified example:</p>
    <ol MadCap:conditions="SAP.SapHideFromOutput">
      <li><b>Service A</b> uses telemetry instrumentation to generate context information that can be added to messages.</li>
      <li><b>Service A</b> prepares an event message using a<MadCap:conditionalText MadCap:conditions="SAP.SapOnlyOutput">n</MadCap:conditionalText> <MadCap:variable name="Product-Names.pubsub_brand_only"/> Messaging API, and injects trace context into that message using a<MadCap:conditionalText MadCap:conditions="SAP.SapOnlyOutput">n</MadCap:conditionalText> <MadCap:variable name="Product-Names.pubsub_brand_only"/> OpenTelemetry API Library. <b>Service A</b> might also separately generate OpenTelemetry spans with that same context using an OpenTelemetry API. </li>
      <li>The <MadCap:variable name="Product-Names.pubsub_brand_only"/> Messaging API sends the message to the event broker.</li>
      <li>The <b>event broker</b> receives the message. If the broker has trace filter subscriptions that match the message's topic, it generates one or more spans.  The span(s) are added to one or more trace messages, and the <b>event broker</b> sends the trace message to the telemetry queue.</li>
      <li>If the trace message is successfully enqueued, the <b>event broker</b> updates the event message's trace context with the context of the span. This starts a send span, which is the trace context sent with the message to the next hop (which could be another event broker or a consuming application). In this example, the next hop is the consuming application, <b>Service B</b>.</li>
      <li><b>Service B</b> consumes the event message via a<MadCap:conditionalText MadCap:conditions="SAP.SapOnlyOutput">n</MadCap:conditionalText> <MadCap:variable name="Product-Names.pubsub_brand_only"/> Messaging API, and extracts the trace context using a<MadCap:conditionalText MadCap:conditions="SAP.SapOnlyOutput">n</MadCap:conditionalText> <MadCap:variable name="Product-Names.pubsub_brand_only"/> OpenTelemetry API Library. It then uses this trace context to establish the parent span for the first span that is created upon receive.</li>
      <li>For send spans, the <b>event broker</b> records the time it sent the message to <b>Service B</b> as the start time for the send span. When the message is consumed by <b>Service B</b>, an acknowledgment is sent to the <b>event broker</b>. The <b>event broker</b> receives the acknowledgment, ends the send span, and records the outcome of the delivery attempt to <b>Service B</b>. </li>
      <li>At any time, the <b><MadCap:variable name="Product-Names.opentelemetry_receiver_long"/></b> can connect to the <b>event broker</b> to receive the <MadCap:variable name="Variables.CompanyName"/> trace messages and convert them to standard OpenTelemetry spans. Other receiver modules receive the telemetry spans created by the producer and consumer applications. The <b>OpenTelemetry Collector</b> processes all the spans, which can then be correlated by a backend monitoring tool.</li>
    </ol>
    <p MadCap:conditions="SAP.SapHideFromOutput">At each hop in the event mesh, the event message is updated with the latest context information. This extends the overall trace as the event message moves through the mesh.</p>
    <div class="Note" MadCap:conditions="SAP.SapHideFromOutput">
      <p>Delivery of a send span is not guaranteed.</p>
    </div>
    <h2><a name="context-prop-in-event-broker"/>Context Propagation in the Event Broker</h2>
    <p>Two types of context can be propagated in event messages:</p>
    <ul>
      <li>Span context—Solace APIs and event brokers can interpret and modify trace context within a message as the message is transported. </li>
      <li>Baggage (also known as correlation context)—Baggage is a set of key-value pairs that can be injected into and read from the context. Solace APIs and event brokers never modify baggage; they only read it and include it in trace messages.</li>
    </ul>
    <p>Trace context and baggage are carried in the event message. If an event message is successfully traced (that is, it generates and enqueues a span), the event broker updates the event message's trace context with the context from the span. If, at any point after receiving an event message but before generating a span, the event broker encounters a condition where it cannot trace the event message (for example, the telemetry queue is full), the broker passes the trace context unchanged in the event message to the next hop in the event mesh.</p>
    <p>To handle event messages and generate spans appropriately, the event broker does the following when it receives an event message:</p>
    <ol>
      <li>Performs basic  checks (such as verifying that the message's receive flow is valid, the message is the next expected message on that flow, the message complies with any topic access controls). If any of these tests fail, the message is discarded without tracing.</li>
      <li>Determines whether the event message is to be traced. If the message is to be traced, it sets the <code>sampled</code> flag in the message's trace context. Otherwise, it leaves the <code>sampled</code> flag unchanged.</li>
      <li>Processes the event message.</li>
      <li>Uses the event message's trace context to create a child span.</li>
      <li>Updates the event message's trace context at the same time the event message and trace message are persisted. The event message's trace context isn't updated sooner so that, if the event broker encounters a condition where it cannot trace the event message (for example, the telemetry queue is full), it doesn't generate a trace message—it passes the received trace context unchanged in the event message to the next hop in the event mesh.</li>
    </ol>
    <h2><a name="context-prop-in-apis"/>Context Propagation with <MadCap:variable name="Product-Names.pubsub_brand_only" MadCap:conditions="SAP.SapHideFromOutput"/><MadCap:conditionalText MadCap:conditions="SAP.SapOnlyOutput">Solace</MadCap:conditionalText> Messaging APIs</h2>
    <p>Context propagation with <MadCap:variable name="Product-Names.pubsub_brand_only" MadCap:conditions="SAP.SapHideFromOutput"/><MadCap:conditionalText MadCap:conditions="SAP.SapOnlyOutput">Solace</MadCap:conditionalText> Messaging APIs is supported by the Solace<MadCap:conditionalText MadCap:conditions="SAP.SapHideFromOutput"> PubSub+</MadCap:conditionalText> OpenTelemetry API Libraries. These libraries allow you to inject context into or extract context from <MadCap:variable name="Product-Names.pubsub_brand_only"/> event messages.</p>
    <p>You deploy the <MadCap:variable name="Product-Names.pubsub_brand_only" MadCap:conditions="SAP.SapHideFromOutput"/><MadCap:conditionalText MadCap:conditions="SAP.SapOnlyOutput">Solace</MadCap:conditionalText> OpenTelemetry API Libraries alongside the <MadCap:variable name="Product-Names.pubsub_brand_only" MadCap:conditions="SAP.SapHideFromOutput"/><MadCap:conditionalText MadCap:conditions="SAP.SapOnlyOutput">Solace</MadCap:conditionalText> Messaging API for the programming language you are using to develop your application. These libraries have dependencies on the OpenTelemetry API (which must also be deployed with your application).</p>
    <MadCap:snippetBlock src="../../Resources/Snippets/otel-libraries-w3c-only.flsnp"/>
    <p MadCap:conditions="SAP.SapHideFromOutput">See the following links for information about specific libraries, including where you can get them:</p>
    <ul MadCap:conditions="SAP.SapHideFromOutput">
      <li>For <MadCap:variable name="Product-Names.pubsub_brand_only" MadCap:conditions="SAP.SapHideFromOutput"/><MadCap:conditionalText MadCap:conditions="SAP.SapOnlyOutput">Solace</MadCap:conditionalText> OpenTelemetry Integration for the <MadCap:variable name="Variables.CompanyName"/> JMS API, see <MadCap:xref href="../../API/Solace-JMS-API/Context-Propagation-Distributed-Tracing.htm#Instrumenting-JMS-Distributed-Tracing">Instrumenting JMS for Distributed Tracing</MadCap:xref>.</li>
      <li>For <MadCap:variable name="Product-Names.pubsub_brand_only" MadCap:conditions="SAP.SapHideFromOutput"/><MadCap:conditionalText MadCap:conditions="SAP.SapOnlyOutput">Solace</MadCap:conditionalText> OpenTelemetry Integration for the <MadCap:variable name="Variables.CompanyName"/> JCSMP API, see <MadCap:xref href="../../API/API-Developer-Guide/Context-Propagation-Distributed-Tracing.htm#Instrumenting-JCSMP-Distributed-Tracing">Instrumenting JCSMP for Distributed Tracing</MadCap:xref>.</li>
      <li>For <MadCap:variable name="Product-Names.pubsub_brand_only" MadCap:conditions="SAP.SapHideFromOutput"/><MadCap:conditionalText MadCap:conditions="SAP.SapOnlyOutput">Solace</MadCap:conditionalText> OpenTelemetry Integration for the <MadCap:variable name="Variables.CompanyName"/> .NET API, see <MadCap:xref href="../../API/API-Developer-Guide/Context-Propagation-Distributed-Tracing.htm#Instrumenting-DOTNET-Distributed-Tracing">Instrumenting .NET for Distributed Tracing</MadCap:xref>.</li>
      <li>For <MadCap:variable name="Product-Names.pubsub_brand_only" MadCap:conditions="SAP.SapHideFromOutput"/><MadCap:conditionalText MadCap:conditions="SAP.SapOnlyOutput">Solace</MadCap:conditionalText> OpenTelemetry Integration for the <MadCap:variable name="Variables.CompanyName"/> JavaScript and Node.js APIs, see <MadCap:xref href="../../API/API-Developer-Guide/Context-Propagation-Distributed-Tracing.htm#Instrumenting-JS-NODEJS-Distributed-Tracing">Instrumenting JavaScript and Node.js for Distributed Tracing</MadCap:xref>.</li>
      <li>For <MadCap:variable name="Product-Names.pubsub_brand_only" MadCap:conditions="SAP.SapHideFromOutput"/><MadCap:conditionalText MadCap:conditions="SAP.SapOnlyOutput">Solace</MadCap:conditionalText> OpenTelemetry Integration for the <MadCap:variable name="Variables.CompanyName"/> Go API, see <MadCap:xref href="../../API/API-Developer-Guide-Go/Go-API-Distributed-Tracing.htm#Instrumenting-Go-Distributed-Tracing">Instrumenting Go for Distributed Tracing</MadCap:xref>.</li>
      <li>For <MadCap:variable name="Product-Names.pubsub_brand_only" MadCap:conditions="SAP.SapHideFromOutput"/><MadCap:conditionalText MadCap:conditions="SAP.SapOnlyOutput">Solace</MadCap:conditionalText> OpenTelemetry Integration for the <MadCap:variable name="Variables.CompanyName"/> Python API, see <MadCap:xref href="../../API/API-Developer-Guide-Python/Python-API-Distributed-Tracing.htm#Instrumenting-Python-Distributed-Tracing">Instrumenting Python for Distributed Tracing</MadCap:xref>.</li>
      <li MadCap:conditions="Default.HideFromAllOutput">Note by Rob Tomkins: CSCSMP with context propagation is coming out shortly after this release.</li>
    </ul>
    <h2><a name="visualize-trace-backend"/>Visualizing Trace Information in the Backend</h2>
    <p>Tracing helps you understand the path an event message takes as it travels through distributed systems. A trace is made of one or more spans, with the first span representing the root span. Every root span represents a request from start to finish. As a request moves through a distributed system, it usually generates multiple spans. If a new span is generated by a request it is considered a child span, and the span that generated it is its parent. Child spans provide additional context of the steps that occur during a request.</p>
    <p>OpenTelemetry receivers collect different types of spans, including spans from the OpenTelemetry  APIs and the <MadCap:variable name="Product-Names.pubsub_brand_only" MadCap:conditions="SAP.SapHideFromOutput"/> event broker. The OpenTelemetry Collector collects, processes and exports these spans to a backend, where they are assembled into waterfall visualizations of end-to-end traces. These visualizations show the relationship between a root span and its child spans, and can help you improve and debug your distributed applications. The diagram below shows how spans generated at different points in a distributed system are assembled into an end-to-end trace in an OpenTelemetry backend:</p>
    <div class="thumbnail-container">
      <img src="../../Resources/Images/Distributed-Tracing/distributed-tracing-spans-trace.png" class="solacethumbnail" alt="Illustration depicting the concepts described in the surrounding text."/>
    </div>
    <p>For a detailed explanation of how spans are collected into a trace, see <a href="https://opentelemetry.io/docs/concepts/signals/traces/" class="link-offsite" target="_blank">OpenTelemetry Traces.</a></p>
  </body>
</html>
