<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
  <head>
    <title>[%=Heading.Level1%]</title>
  </head>
  <body>
    <h1>Distributed Tracing <MadCap:conditionalText MadCap:conditions="SAP.SapOnlyOutput"> Overview</MadCap:conditionalText></h1>
    <p>When an organization has applications that consists of tens, hundreds, or thousands of services running across many hosts, and sharing messages over one or more event meshes, it's no longer possible to diagnose problems simply by troubleshooting an error message or looking at a log. In this kind of system, you need a solution that can track an event  all the way from the sending application, between event brokers, and to the receiving application. Distributed tracing provides this ability,  allowing an administrator to trace the lifecycle of an event as it travels through the event mesh. </p>
    <p>When distributed tracing is enabled, the event broker generates special guaranteed messages when certain operations happen. The publisher and subscriber APIs also generate spans when messages are sent and received. OpenTelemetry receivers<MadCap:conditionalText MadCap:conditions="SAP.SapHideFromOutput">, including a purpose-built client (an instance of the <MadCap:xref href="Distributed-Tracing-Receiver.htm">[%=Variables.CompanyName%] OpenTelemetry Receiver</MadCap:xref>),</MadCap:conditionalText> then consume these messages from a particular queue and  convert them to a format that can be received, processed, and viewed using common Open Telemetry backends such as Jaeger and DataDog.</p>
    <p>
      <img src="../../Resources/Images/Distributed-Tracing/distributed-tracing-basics.png" alt="Illustration depicting the concepts described in the surrounding text."/>
    </p>
    <p>The distributed tracing functionality of <MadCap:variable name="Variables.CompanyName"/> <MadCap:conditionalText MadCap:conditions="SAP.SapHideFromOutput">event broker</MadCap:conditionalText><MadCap:variable name="Product-Names.broker_cloud_short" MadCap:conditions="SAP.SapOnlyOutput"/>s complies with the <a href="https://opentelemetry.io/docs/reference/specification/" target="_blank" class="link-offsite">OpenTelemetry specification</a>.</p>
    <h2><a name="tracing-points"/>Which Event Broker Actions are Traced?</h2>
    <p>Spans are generated at the following points:</p>
    <ul>
      <li>event message sent by the event broker to the consumer (Send Span)</li>
      <li>event message acknowledged by the consumer (Send Span)</li>
      <li>event message received by the event broker (Receive Span)</li>
      <li>event message enqueued by the event broker (Receive Span)</li>
    </ul>
    <h2><a name="dist-trace-broker"/>Tracing in the Event Broker</h2>
    <p>The event broker generates spans at certain points in the lifecycle of an event message. A span represents a single operation on the event broker, such as receiving and sending an event message.</p>
    <p>The event broker generates a span when it receives an incoming  event message or sends an outgoing event message. The broker sends <i>trace messages</i>, which contain one or more spans, to the <i>telemetry queue</i>. A client binds to the queue and consumes the trace messages. This client<MadCap:conditionalText MadCap:conditions="SAP.SapHideFromOutput">, referred to as a receiver, is an instance of the <MadCap:xref href="Distributed-Tracing-Receiver.htm">[%=Variables.CompanyName%] OpenTelemetry Receiver</MadCap:xref>, which is a plugin for the Open Telemetry Collector project. The receiver transforms each span in the trace message to a generic internal format for the Open Telemetry Collector. The Collector</MadCap:conditionalText> then converts the internal format into the appropriate format to send to the backend (Jaeger, Splunk, Prometheus, Zipkin, DataDog, DynaTrace, and so on).</p>
    <p MadCap:conditions="SAP.SapHideFromOutput">These components are illustrated in the following diagram:</p>
    <p MadCap:conditions="SAP.SapHideFromOutput">
      <img src="../../Resources/Images/Distributed-Tracing/distributed-tracing-components.png" alt="Illustration depicting the concepts described in the surrounding text."/>
    </p>
    <p>For information about how spans are correlated to produce traces, see <MadCap:xref href="Distributed-Tracing-Context-Propagation.htm">Context Propagation</MadCap:xref>.</p>
    <p MadCap:conditions="SAP.SapHideFromOutput">For details about how to set up the event broker for distributed tracing, see <MadCap:xref href="Distributed-Tracing-Setup-Overview.htm">Configuring Distributed Tracing</MadCap:xref>.</p>
    <p>For details about how to set up <MadCap:variable name="Product-Names.cloud_product_short" MadCap:conditions="SAP.SapHideFromOutput"/><MadCap:variable name="Product-Names.broker_cloud_short"/>s for distributed tracing, see <MadCap:xref href="../../Cloud/enable-dt-for-cloud.htm">Enabling Distributed Tracing for [%=Product-Names.broker_cloud_short_title%]s in [%=Product-Names.cloud_product_short%]</MadCap:xref>.</p>
    <h2 MadCap:conditions="SAP.SapHideFromOutput"><a name="tracing-api"/>Tracing with <MadCap:variable name="Product-Names.pubsub_brand_only" MadCap:conditions="SAP.SapHideFromOutput"/><MadCap:conditionalText MadCap:conditions="SAP.SapOnlyOutput">Solace</MadCap:conditionalText> Messaging APIs</h2>
    <p MadCap:conditions="SAP.SapHideFromOutput">To manipulate trace context in <MadCap:variable name="Product-Names.pubsub_brand_only" MadCap:conditions="SAP.SapHideFromOutput"/><MadCap:conditionalText MadCap:conditions="SAP.SapOnlyOutput">Solace</MadCap:conditionalText> Messaging APIs, you use the Solace <MadCap:conditionalText MadCap:conditions="SAP.SapHideFromOutput"><MadCap:variable name="Product-Names.pubsub_brand_only"/></MadCap:conditionalText> OpenTelemetry API Libraries. These libraries provide special getter and setter methods that allow your applications to inject trace context into or extract trace context from SMF messages. The <MadCap:variable name="Product-Names.pubsub_brand_only" MadCap:conditions="SAP.SapHideFromOutput"/><MadCap:conditionalText MadCap:conditions="SAP.SapOnlyOutput">Solace</MadCap:conditionalText> OpenTelemetry API Libraries also include the OpenTelemetry API, which allows your publisher and subscriber applications to create spans that backend applications use to generate traces.</p>
    <p>For more information, see <MadCap:xref href="Distributed-Tracing-Context-Propagation.htm#context-prop-in-apis">Context Propagation with PubSub+ Messaging APIs.</MadCap:xref></p>
    <h2 MadCap:conditions="SAP.SapHideFromOutput"><a name="receivers"/>Receivers</h2>
    <p MadCap:conditions="SAP.SapHideFromOutput">A <i>receiver</i> is a client that binds to the telemetry queue and consumes trace messages. The Solace OpenTelemetry Receiver, which is a plugin for the <a href="https://github.com/open-telemetry/opentelemetry-collector-contrib" target="_blank" class="link-offsite">OpenTelemetry Collector</a> project, makes it easy for a client to consume trace messages and convert them to a standard format. The Solace Receiver consumes trace messages as Guaranteed Messages from the event broker and produces generic trace spans for the OpenTelemetry Collector.</p>
    <p MadCap:conditions="SAP.SapHideFromOutput">For more information, see <MadCap:xref href="Distributed-Tracing-Receiver.htm">Solace OpenTelemetry Receiver</MadCap:xref>.</p>
    <h2 MadCap:conditions="SAP.SapHideFromOutput"><a name="performance"/>Event Broker Performance</h2>
    <p MadCap:conditions="SAP.SapHideFromOutput">Because distributed tracing causes the event broker to generate additional guaranteed trace messages, there can be an impact on the event broker's performance (throughput of event messages). As more messages pass through the broker, this performance impact becomes more evident. You should take this into account when deciding which messages to trace.</p>
    <p MadCap:conditions="SAP.SapHideFromOutput">The ratio of event brokers (or HA groups) to receivers is flexibleâ€”multiple event brokers can feed a single receiver, and multiple receivers can consume trace messages from a single broker.  However, we recommend that you deploy one receiver per event broker (or HA group) until the performance of your overall architecture is understood.</p>
    <h2 MadCap:conditions="SAP.SapHideFromOutput"><a name="feature-interactions"/>Feature Interactions</h2>
    <dl MadCap:conditions="SAP.SapHideFromOutput">
      <dt>Disaster Recovery (Replication)</dt>
      <dd>
        <p>Standby nodes do not generate trace spans. However, receivers can bind to the telemetry queue on a standby node to allow residual spans to be drained after a VPN switches from active to standby.</p>
      </dd>
      <dt>Transactions</dt>
      <dd>
        <p>Messages published as part of a local transaction do not generate trace messages.</p>
      </dd>
      <dd>
        <p>Messages that succeed in a commit will appear to be enqueued, even if a subsequent message in the local transaction causes the commit to fail. To determine  why a committed message was not delivered, you must search all spans  for the same transaction ID on the same session to find failed messages. If at least one message in the transaction failed,  none of the messages in the transaction were ever eligible for delivery.</p>
      </dd>
      <dt>Ingress Selectors</dt>
      <dd>
        <p>Messages are traced as they are received by the event broker, and they are enqueued before the broker evaluates ingress selectors. If the selector discards a message, there will be no traces indicating this has occurred.</p>
      </dd>
      <dt>Message VPN Bridges</dt>
      <dd>
        <p>Messages received from bridges are traced the same as regular client messages.</p>
      </dd>
      <dt>DMR Links</dt>
      <dd>
        <p>Messages arriving over DMR links are  traced the same as regular client messages.</p>
      </dd>
      <dt>DMQÂ Message Traces</dt>
      <dd>
        <p>Messages that are admin-copied or moved to a DMQÂ get a new  Replication Group Message ID. When send spans are generated for these messages, the parent span will be the original message's receive, and there will be no span generated that records the message's new Replication Group Message ID.</p>
      </dd>
      <dt>Partitioned Queues</dt>
      <dd>
        <p>Messages are traced through partitioned queues, and the partition within the partitioned queue traversed by the message is identified. </p>
      </dd>
    </dl>
    <h2 MadCap:conditions="SAP.SapHideFromOutput"><a name="product-key"/>Product Key</h2>
    <p MadCap:conditions="SAP.SapHideFromOutput">A product key is required to use distributed tracing in production or for long-term use. <a href="../../get-support.htm" class="link-internal">Contact <MadCap:variable name="Variables.CompanyName"/></a> to obtain a product key. To install a key on your event brokers, see <MadCap:xref href="../../Admin/Product-Key.htm#prod_key_locking2">Entering Product Keys to Unlock Services</MadCap:xref>.</p>
    <h2 MadCap:conditions="SAP.SapHideFromOutput"><a name="demo-mode"/>Demo Mode</h2>
    <p MadCap:conditions="SAP.SapHideFromOutput">You can try distributed tracing in demo mode (without a product key) for seven days by setting up a <a href="Distributed-Tracing-Setup-Overview.htm" class="link-internal">telemetry profile</a> and enabling distributed tracing on that profile.</p>
    <div class="Note" MadCap:conditions="SAP.SapHideFromOutput">
      <p>Demo mode is not for production or  long term use.</p>
      <p>Solace does not provide support for distributed tracing in demo mode. Support for distributed tracing requires that a product key is installed on the event broker.</p>
    </div>
    <p MadCap:conditions="SAP.SapHideFromOutput">For details about demo mode, including the terms of use, see <a href="https://solace.com/dt-demo-mode" target="_blank" class="link-offsite">https://solace.com/dt-demo-mode</a>.</p>
    <h4 MadCap:conditions="SAP.SapHideFromOutput">Restarting Your Event Broker</h4>
    <p MadCap:conditions="SAP.SapHideFromOutput">If you need more time, you can extend your demo by restarting your event broker.</p>
    <p MadCap:conditions="SAP.SapHideFromOutput">To restart your event broker, enter the following commands in the CLI:</p>
    <pre xml:space="preserve" MadCap:conditions="SAP.SapHideFromOutput">solace&gt; enable
solace# reload</pre>
    <p MadCap:conditions="SAP.SapHideFromOutput">On the software event broker, the <code>reload</code> command stops the container. In machine images, the container automatically restarts. For container images, you may need to manually restart the container, depending on the restart policy of your container runtime.</p>
    <h2 MadCap:conditions="SAP.SapHideFromOutput">Try Distributed Tracing</h2>
    <p MadCap:conditions="SAP.SapHideFromOutput">Click below to try a Codelab and see distributed tracing in action.</p>
    <p MadCap:conditions="SAP.SapHideFromOutput">
      <a class="btn btn-lg btn-success mr-2 mt-2" role="button" href="https://codelabs.solace.dev/codelabs/dt-otel/index.html" target="blank">Try it Now!</a>
    </p>
  </body>
</html>
