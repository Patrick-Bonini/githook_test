<?xml version="1.0" encoding="utf-8"?>
<html>
  <head>
    <title>[%=Heading.Level1%]</title>
  </head>
  <body>
    <h1>Distributed Tracing Best Practices</h1>
    <p>To optimize your distributed tracing experience with  your <MadCap:conditionalText xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:conditions="SAP.SapHideFromOutput"><MadCap:variable name="Product-Names.pubsub_brand_only"/> event broker and</MadCap:conditionalText> <MadCap:variable xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" name="Product-Names.pubsub_brand_only"/> <MadCap:variable xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" name="Product-Names.broker_cloud_short"/>, use the recommendations and best practices in the following areas:</p>
    <ul>
      <li>
        <MadCap:xref xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" href="#traceability">Traceability</MadCap:xref>
      </li>
      <li>
        <MadCap:xref xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" href="#performance">Performance</MadCap:xref>
      </li>
      <li>
        <MadCap:xref xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" href="#operational-enhancement">Operational Enhancement</MadCap:xref>
      </li>
    </ul>
    <h2 class="with-rule"><a name="traceability"/>Traceability</h2>
    <p>The core value of distributed tracing is the ability to trace your messages of interest along the data path (for troubleshooting, debugging, data lineage, proof of delivery, and other use cases), and analyze this tracing data with the help of an observability tool of your choice. </p>
    <h3><a name="accessing-trace-messages-in-backends"/>Accessing Trace Messages in Backends</h3>
    <p>You can view or search for traced messages or spans for traced messages in your backend application to: </p>
    <ul>
      <li>
        <p> learn about its delivery status, delivery time, or other delivery details</p>
      </li>
      <li>
        <p>debug if there are any errors with the message delivery</p>
      </li>
    </ul>
    <p class="Note">Ensure that you publish messages with user properties to make searching for them easier in the backend application. For example, if your application is an online store, <code>order number</code> or <code>customer ID</code> might be useful pieces of data for the publisher to insert into the user properties.</p>
    <p>Viewing and searching for trace messages is different based on the backend application that you're using. See the current documentation for your backend application for more information.</p>
    <p>For an example of how to configure tracing using Jaeger, see <a href="https://codelabs.solace.dev/codelabs/dt-otel/?index=..%2F..index#0" class="link-offsite" target="_blank">Code Lab for Solace Distributed Tracing and Context Propagation</a>. This code lab shows you how to perform context propagation using auto instrumentation and visualize it in the Jaegar UI.  In the Jaegar UI , you can:</p>
    <ul>
      <li>
        <p>select your event broker to view the <MadCap:conditionalText xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:conditions="SAP.SapHideFromOutput">Solace</MadCap:conditionalText> trace messages, with the option to see more details as needed. For more information, see <a href="https://codelabs.solace.dev/codelabs/dt-otel/?index=..%2F..index#11" class="link-offsite" target="_blank">Viewing Trace Messages in the Jaeger UI</a>.</p>
      </li>
      <li>
        <p>use the <code>Tags</code> field to search for a message with a specific user property (key-value pair). For more information, see <a href="https://codelabs.solace.dev/codelabs/dt-otel/?index=..%2F..index#12" class="link-offsite" target="_blank">Searching for Trace Messages in the Jaeger UI</a>.</p>
      </li>
    </ul>
    <p>To interpret the trace messages in your backend trace logs, see  <MadCap:xref xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" href="Distributed-Tracing-OTEL-Span-Fields.htm" target="_blank">Distributed Tracing OpenTelemetry Span Fields</MadCap:xref>.</p>
    <h2 class="with-rule"><a name="performance"/>Performance</h2>
    <p>When you enable distributed tracing for events in <MadCap:variable xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" name="Product-Names.pubsub_brand_only"/>, it generates additional trace messages. This section describes how to optimize tracing  with  receive and send spans and manage your data path variables, and provides general performance guidelines.</p>
    <h3><a name="optimizing-tracing-with-receive-and-send-spans"/>Optimizing Tracing with Receive and Send Spans</h3>
    <p>Receive spans and send spans are generated by the event broker as a byproduct of message tracing. The event broker generates: </p>
    <ul>
      <li>
        <p>a receive span each time it receives and persists a message from a publisher on a topic that is being traced.</p>
      </li>
      <li>
        <p>a send span each time there's an attempt to deliver a message to a consumer. </p>
      </li>
    </ul>
    <p>Receive and send spans are then transported from the event broker to the OpenTelemetry Collector.</p>
    <p>Each receive span generates one trace message. This tracing can affect CPU usage and can impact disk space or network bandwidth on an event broker that is operating close to its limits. Send spans can also impact broker performance, but they are grouped into a larger trace message (one send span is generated each time the event broker attempts to deliver a message to a consumer), which reduces the overall number of messages generated by the event broker and helps limit the impact on the event broker's performance.</p>
    <p>To optimize tracing with receive and send spans, consider the following: </p>
    <ul>
      <li>
        <p>Minimize the number of receive and send spans generated by the event broker. When enabling distributed tracing, enable it on a few topics at a time to measure and manage its impact on performance.</p>
      </li>
      <li>
        <p>When sending messages that include a trace context to the event broker, modify the publishing application to reduce the size of the propagated context. To implement this recommendation, you can manage the baggage and trace state  (which are optional and potentially large pieces of the trace context), and reduce the amount of user property data in the published messages.</p>
      </li>
    </ul>
    <p xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" class="Note" MadCap:conditions="SAP.SapHideFromOutput">Distributed tracing has a minimal impact on latency (10-20% for appliances, and less than 10% for <MadCap:variable name="Product-Names.broker_sw_short"/>s).   
</p>
    <h3><a name="managing-your-data-path"/>Managing Your Data Path</h3>
    <p>Some aspects in your architecture can have an impact on your data path performance when enabling distributed tracing. You can use the following considerations to improve performance and manage your architecture:</p>
    <ul>
      <li>
        <p>Message size impacts performance. Distributed tracing has a relatively low impact on the maximum number of messages per second that you can publish to an event broker if your average published message size is 10 KB or larger, but has a considerable impact if your average published message size is 1 KB or smaller.</p>
      </li>
      <li>
        <p>The performance impact is less when message fanout is low. For example, 1:1 ratio is low fanout and means that one published message is sent to one consumer, which is less expensive to trace. Performance impact becomes substantially greater for higher message fanout. For example, 1:50 ratio is high fanout and means that one published message is sent to 50 consumers. This high ratio negatively impacts the performance of the event broker because of the generation of additional send spans as a result of the additional message deliveries.</p>
      </li>
      <li>
        <p>Significantly higher tracing (and guaranteed messaging) performance  could be achieved by disabling mate-link encryption for high availability (HA). However, this is not generally recommended for production deployments.</p>
      </li>
    </ul>
    <p class="Note">If your event broker is running at under 50% the maximum guaranteed messaging rate, and your steady-state disk usage is under 50% of <code>max-spool-usage</code>, it is generally safe to enable distributed tracing, particularly if you follow the recommendations in <MadCap:xref xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" href="#optimizing-tracing-with-receive-and-send-spans">Optimizing Tracing with Receive and Send Spans</MadCap:xref>. If your event broker is running much closer to its maximum messaging capacity, you must be more cautious about the topics on which you enable disabled tracing, and should contact <MadCap:variable xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" name="Variables.CompanyName"/> to evaluate your use case and the potential performance impact. </p>
    <h3><a name="performance-guidelines"/>General Performance Guidelines</h3>
    <p>The following best practices help you maximize your benefit from using distributed tracing while having the least impact on your data path performance.</p>
    <ul>
      <li>
        <p>Only enable tracing on the message VPNs where it’s needed​.
	</p>
      </li>
      <li>
        <p>Use trace filters to control which events are traced​.
</p>
      </li>
      <li>
        <p>Deploy multiple OpenTelemetry Collectors to service the distributed tracing's non-exclusive queue (A single event broker is likely able to generate spans at a higher rate than a single Collector can consume at). </p>
      </li>
      <li>
        <p>Choose and architect your backend to handle the volume of trace messages generated by the event broker.</p>
      </li>
      <li>
        <p>If you're using tracing for debugging or troubleshooting, or using it intermittently, pre-configure trace filters with the topics of interest, where each trace filter contains all topics for a particular tracing use case. Only enable specific trace filters as required. 
	</p>
      </li>
    </ul>
    <p class="Note">	Tracing message delivery may not be guaranteed by the OpenTelemetry Collector or the tracing backends.</p>
    <h2 class="with-rule"><a name="operational-enhancement"/>Operational Enhancement</h2>
    <p> To keep your distributed tracing infrastructure in good health, we recommend the following best practices: </p>
    <ul>
      <li>
        <p>As your use of distributed tracing increases (and the number of trace spans increase), the amount of data stored in your backend storage increases. To help you manage these new requirements: </p>
        <ul>
          <li>
            <p>Manage your storage usage using strategies that align with your organization's internal storage and retention policies. For example, your retention policy may require that you periodically remove unwanted data to reduce retention charges from your observability or storage vendors.</p>
          </li>
        </ul>
        <ul>
          <li>
            <p>Monitor the metrics (see <a href="https://opentelemetry.io/docs/concepts/signals/metrics/" class="link-offsite" target="_blank">OpenTelemetry Metrics</a> and <MadCap:xref xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" href="Distributed-Tracing-Receiver.htm#health-monitoring"><a href="Distributed-Tracing-Receiver.htm#health-monitoring" class="link-internal">Solace Receiver's Health Monitoring</a></MadCap:xref>) or logs (see <a href="https://opentelemetry.io/docs/specs/otel/logs/" class="link-offsite" target="_blank">OpenTelemetry Logging</a>) that are necessary for optimal performance. See <MadCap:xref xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" href="#performance">Performance</MadCap:xref> for more information.</p>
          </li>
        </ul>
      </li>
      <li>
        <p>Perform regular maintenance and manage your storage scaling solutions as you require. For example, you can use automation tools, logging analysis, and so on to identify and address bottlenecks and changes in performance. </p>
      </li>
      <li>
        <p>New tracing event broker features may require new versions of the OpenTelemetry Collector. See <MadCap:xref xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" href="Distributed-Tracing-Receiver-Versions.htm" target="_blank">Distributed Tracing Version Compatibility</MadCap:xref> before you upgrade your event broker, and to ensure that your <MadCap:variable xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" name="Product-Names.pubsub_brand_only"/> event broker,  OpenTelemetry Collector, and <MadCap:variable xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" name="Manifest-Products-APIs.PubSub-GenericAll-Messaging-API"/> versions are compatible. </p>
      </li>
    </ul>
  </body>
</html>
