<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
  <head>
    <title>SDKPerf Command Line Options</title>
    <link href="../../Resources/TableStyles/Table_Num.css" rel="stylesheet" MadCap:stylesheetType="table"/>
  </head>
  <body>
    <h1>Command Line Options for SDKPerf</h1>
    <p>For a complete list of command line options, enter   <code>–hm</code> (help more) at the command prompt when you start SDKPerf.</p>
    <h2 class="with-rule"><a name="Common-Options"/>Common Options</h2>
    <p>The following are the more commonly used command line options:</p>
    <table style="mc-table-style: url('../../Resources/TableStyles/Table_Num.css');" class="TableStyle-Table_Num" cellspacing="0">
      <col class="TableStyle-Table_Num-Column-Column1"/>
      <col class="TableStyle-Table_Num-Column-Column1" style="width: 30%;"/>
      <col class="TableStyle-Table_Num-Column-Column1"/>
      <thead>
        <tr class="TableStyle-Table_Num-Head-Header1">
          <th class="TableStyle-Table_Num-HeadE-Column1-Header1">CLI Option</th>
          <th class="TableStyle-Table_Num-HeadE-Column1-Header1">Description</th>
          <th class="TableStyle-Table_Num-HeadD-Column1-Header1">Example</th>
        </tr>
      </thead>
      <tbody>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1" colspan="3">
            <b>Connection Options</b>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <code>-cip=host</code>
          </td>
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">Host (often <code>IP:port</code>) of the <MadCap:variable name="Product-Names.pubsub_brand_only"/> event broker</td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <code>-cip=192.168.1.100</code>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <code>-cu=user[@vpn]</code>
          </td>
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">Client username and Message VPN name</td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <code>-cu=user01@vpn01</code>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyE-Column1-Body1">
            <code>-cp=string</code>
          </td>
          <td class="TableStyle-Table_Num-BodyE-Column1-Body1">Client password</td>
          <td class="TableStyle-Table_Num-BodyD-Column1-Body1">
            <code>-cp=secret</code>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <code>-cc=int</code>
          </td>
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">Number of client connections</td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <code>-cc=1</code>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <code>-z=int</code>
          </td>
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">Enables compression and specifies compression level</td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <code>-z=1</code>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td colspan="3" class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <b>Subscription Options</b>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyE-Column1-Body1">
            <code>-sql=list</code>
          </td>
          <td class="TableStyle-Table_Num-BodyE-Column1-Body1">List of queue names from which clients will receive messages</td>
          <td class="TableStyle-Table_Num-BodyD-Column1-Body1">
            <code>-sql=Q/1,Q/2</code>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <code>-stl=list</code>
          </td>
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">List of topics that are applied as subscriptions (or mapped onto queues if used with <code>–sql</code>)</td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <code>-stl=T/a/b,T/c/d</code>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <code>-tqe=int</code>
          </td>
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">Number of temporary queue endpoints to create per client.</td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <code>-tqe=1</code>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td colspan="3" class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <b>Publishing Options</b>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyE-Column1-Body1">
            <code>-pql=list</code>
          </td>
          <td class="TableStyle-Table_Num-BodyE-Column1-Body1">List of queue names to which messages will be published</td>
          <td class="TableStyle-Table_Num-BodyD-Column1-Body1">
            <code>-pql=Q/1,Q/2</code>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <code>-ptl=list</code>
          </td>
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">List of topics to which messages will be published</td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <code>-ptl=T/a/b,T/c/d</code>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <code>-mt=string</code>
          </td>
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p>Message type for published messages: {persistent | nonpersistent | direct }</p>
            <p>Default:<code>direct</code></p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <code>-mt=persistent</code>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <code>-mn=int</code>
          </td>
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">Total number of messages to publish</td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <code>-mn=10000</code>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyE-Column1-Body1">
            <code>-mr=int</code>
          </td>
          <td class="TableStyle-Table_Num-BodyE-Column1-Body1">Publishing rate in messages per second</td>
          <td class="TableStyle-Table_Num-BodyD-Column1-Body1">
            <code>-mr=100</code>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <code>-msa=list</code>
          </td>
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">List of sizes in bytes for auto-generated binary attachment payloads</td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <code>-msa=100,200,500</code>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td colspan="3" class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <b>General Options</b>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <code>-q</code>
          </td>
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">Enable quiet mode to suppress real time message rates</td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <code>-q</code>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyE-Column1-Body1">
            <code>-md</code>
          </td>
          <td class="TableStyle-Table_Num-BodyE-Column1-Body1">Dump all received messages to the screen as text. Do not use this with high message rates.</td>
          <td class="TableStyle-Table_Num-BodyD-Column1-Body1">
            <code>-md</code>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <code>-hm</code>
          </td>
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">Show the entire set of command line options</td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <code>-hm</code>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyB-Column1-Body1">-<code>he</code></td>
          <td class="TableStyle-Table_Num-BodyB-Column1-Body1">Show some example command lines</td>
          <td class="TableStyle-Table_Num-BodyA-Column1-Body1">
            <code>-he</code>
          </td>
        </tr>
      </tbody>
    </table>
    <h2 class="with-rule"><a name="JMS"/>JMS Options</h2>
    <p>JMS users will want to consider the following extra CLI options related to JNDI configuration.</p>
    <table style="margin-left: 0;margin-right: auto;mc-table-style: url('../../Resources/TableStyles/Table_Num.css');" class="TableStyle-Table_Num" cellspacing="0">
      <col class="TableStyle-Table_Num-Column-Column1"/>
      <col class="TableStyle-Table_Num-Column-Column1" style="width: 30%;"/>
      <col class="TableStyle-Table_Num-Column-Column1"/>
      <thead>
        <tr class="TableStyle-Table_Num-Head-Header1">
          <th class="TableStyle-Table_Num-HeadE-Column1-Header1">CLI Option</th>
          <th class="TableStyle-Table_Num-HeadE-Column1-Header1">Description</th>
          <th class="TableStyle-Table_Num-HeadD-Column1-Header1">Example</th>
        </tr>
      </thead>
      <tbody>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <code>-jcf=string</code>
          </td>
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p>JMS connection factory. </p>
            <p>Default: <code>/jms/cf/default</code></p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <code>-jcf=/JNDI/CF/demo</code>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyB-Column1-Body1">
            <code>-jndi</code>
          </td>
          <td class="TableStyle-Table_Num-BodyB-Column1-Body1">Enable JNDI topic and queue lookups. By default queues and topics endpoints are created from the Session without JNDI lookup.</td>
          <td class="TableStyle-Table_Num-BodyA-Column1-Body1">
            <code>-jndi</code>
          </td>
        </tr>
      </tbody>
    </table>
    <h2 class="with-rule"><a name="MQTT"/>MQTT Options</h2>
    <p>MQTT users should consider the following extra CLI options related to MQTT QoS and Session clean.</p>
    <table style="margin-left: 0;margin-right: auto;mc-table-style: url('../../Resources/TableStyles/Table_Num.css');" class="TableStyle-Table_Num" cellspacing="0">
      <col class="TableStyle-Table_Num-Column-Column1"/>
      <col class="TableStyle-Table_Num-Column-Column1" style="width: 30%;"/>
      <col class="TableStyle-Table_Num-Column-Column1"/>
      <thead>
        <tr class="TableStyle-Table_Num-Head-Header1">
          <th class="TableStyle-Table_Num-HeadE-Column1-Header1">CLI Option</th>
          <th class="TableStyle-Table_Num-HeadE-Column1-Header1">Description</th>
          <th class="TableStyle-Table_Num-HeadD-Column1-Header1">Example</th>
        </tr>
      </thead>
      <tbody>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <code>-mpq=int</code>
          </td>
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">MQTT Publisher QoS. Sets the Quality of Service (QoS) of MQTT messages published.<p>Default: 0; Accepted Values: 0, 1, and 2.</p></td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <code>-mpq=1</code>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <code>-msq=int</code>
          </td>
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">MQTT Subscription QoS. Sets the Quality of Service (QoS) of subscriptions requested.<p>Default: 0; Accepted Values: 0, 1, and 2.</p><p>It is also possible to overload the default subscription QoS on a per subscription basis by appending <code>qos=</code> to your topic. For example:</p><p><code>-stl=test_topicqos=1</code>)</p></td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <code>-msq=1</code>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyB-Column1-Body1">
            <code>-mcs=bool</code>
          </td>
          <td class="TableStyle-Table_Num-BodyB-Column1-Body1">MQTT flag indicating whether the session should be cleaned.<p>Default: 1 (true); Accepted values: 1 (true), 0 (false)</p></td>
          <td class="TableStyle-Table_Num-BodyA-Column1-Body1">
            <code>-mcs=1</code>
          </td>
        </tr>
      </tbody>
    </table>
    <h2 class="with-rule"><a name="REST"/>REST Options</h2>
    <p>REST users should consider the following extra CLI options.</p>
    <table style="margin-left: 0;margin-right: auto;mc-table-style: url('../../Resources/TableStyles/Table_Num.css');" class="TableStyle-Table_Num" cellspacing="0">
      <col class="TableStyle-Table_Num-Column-Column1"/>
      <col class="TableStyle-Table_Num-Column-Column1" style="width: 30%;"/>
      <col class="TableStyle-Table_Num-Column-Column1"/>
      <thead>
        <tr class="TableStyle-Table_Num-Head-Header1">
          <th class="TableStyle-Table_Num-HeadE-Column1-Header1">CLI Option</th>
          <th class="TableStyle-Table_Num-HeadE-Column1-Header1">Description</th>
          <th class="TableStyle-Table_Num-HeadD-Column1-Header1">Example</th>
        </tr>
      </thead>
      <tbody>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyB-Column1-Body1">
            <code>-spl=list</code>
          </td>
          <td class="TableStyle-Table_Num-BodyB-Column1-Body1">Server port list. Define a comma-separated list of ports for REST Consumers to connect to.</td>
          <td class="TableStyle-Table_Num-BodyA-Column1-Body1">
            <code>-spl=8081</code>
          </td>
        </tr>
      </tbody>
    </table>
    <h2 class="with-rule"><a name="Performa"/>Performance and Latency Measurement</h2>
    <p>Latency measurement is controlled by several options. In general defaults are chosen such that latency measurement can be enabled by adding just <code>-l</code> to the command. However, it is often required to tune these parameters to match your environment. For high throughput tests, it is useful to enable Nagle's algorithm to allow for greater network efficiency.</p>
    <table style="margin-left: 0;margin-right: auto;mc-table-style: url('../../Resources/TableStyles/Table_Num.css');" class="TableStyle-Table_Num" cellspacing="0">
      <col class="TableStyle-Table_Num-Column-Column1"/>
      <col class="TableStyle-Table_Num-Column-Column1" style="width: 30%;"/>
      <col class="TableStyle-Table_Num-Column-Column1"/>
      <thead>
        <tr class="TableStyle-Table_Num-Head-Header1">
          <th class="TableStyle-Table_Num-HeadE-Column1-Header1">CLI Option</th>
          <th class="TableStyle-Table_Num-HeadE-Column1-Header1">Description</th>
          <th class="TableStyle-Table_Num-HeadD-Column1-Header1">Example</th>
        </tr>
      </thead>
      <tbody>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <code>-l</code>
          </td>
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">Enable latency measurements (default is no latency).</td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <code>-l</code>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <code>-psm</code>
          </td>
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">Enable smooth publishers. Enabled by default for latency testing.</td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <code>-psm</code>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <code>-lg=int</code>
          </td>
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">Latency granularity factor. Default: 0<p>Controls bucket size. Bucket size increases by a factor of 2 for each increase of latency granularity. Current bucket size is printed in latency stats for reference.</p></td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <code>-lg=4</code>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyE-Column1-Body1">
            <code>-lb=int</code>
          </td>
          <td class="TableStyle-Table_Num-BodyE-Column1-Body1">Number of latency buckets. Default: 1024 buckets. Max is 4096. When you see N/A in the latency percentiles increasing number of buckets can help.</td>
          <td class="TableStyle-Table_Num-BodyD-Column1-Body1">
            <code>-lb=4096</code>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <code>-lp=2</code>
          </td>
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">Set the latency precision in significant digits after the decimal. Useful for sub-millisecond latency measurement.</td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <code>-lp=2</code>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <code>-lwu=sec</code>
          </td>
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">Set latency warmup in seconds. The default varies on a per tool basis; java based tools can generally benefit from a larger warmup time. Messages arriving within the warmup are not counted in latency measurement.</td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <code>-lwu=10.0</code>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyB-Column1-Body1">
            <code>-nagle</code>
          </td>
          <td class="TableStyle-Table_Num-BodyB-Column1-Body1">Enable Nagle’s algorithm (RFC 896) to allow higher tcp throughput.</td>
          <td class="TableStyle-Table_Num-BodyA-Column1-Body1">
            <code>-nagle</code>
          </td>
        </tr>
      </tbody>
    </table>
    <h2 class="with-rule"><a name="Order"/>Order Checking</h2>
    <p>With order checking enabled, published messages will have a Publisher-ID and a Message-ID encoded within the Solace message. We refer to the set of all messages with the same Publisher-ID as a "publisher stream".</p>
    <p>Consumers will decode this information during message processing and validate that Message-IDs from each publisher stream are received in sequential order. The first Message-ID received in each publisher stream will serve as the starting point for that stream.</p>
    <table style="margin-left: 0;margin-right: auto;mc-table-style: url('../../Resources/TableStyles/Table_Num.css');" class="TableStyle-Table_Num" cellspacing="0">
      <col class="TableStyle-Table_Num-Column-Column1"/>
      <col class="TableStyle-Table_Num-Column-Column1" style="width: 30%;"/>
      <col class="TableStyle-Table_Num-Column-Column1"/>
      <thead>
        <tr class="TableStyle-Table_Num-Head-Header1">
          <th class="TableStyle-Table_Num-HeadE-Column1-Header1">CLI Option</th>
          <th class="TableStyle-Table_Num-HeadE-Column1-Header1">Description</th>
          <th class="TableStyle-Table_Num-HeadD-Column1-Header1">Example</th>
        </tr>
      </thead>
      <tbody>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <code>-oc</code>
          </td>
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">Enable order checking</td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <code>-oc</code>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <code>-pso=int</code>
          </td>
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">Publisher stream offset. Clients will be assigned a Publisher-ID based on this offset.</td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <code>-pso=1</code>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <code>-poo=int</code>
          </td>
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">Publisher order offset. The initial Message-ID within each publisher stream will have this offset applied.</td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <code>-poo=100</code>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyB-Column1-Body1">
            <code>-upt</code>
          </td>
          <td class="TableStyle-Table_Num-BodyB-Column1-Body1">Integrity data is encoded/decoded using properties rather the binary attachment.</td>
          <td class="TableStyle-Table_Num-BodyA-Column1-Body1">
            <code>-upt</code>
          </td>
        </tr>
      </tbody>
    </table>
    <p class="Note">All clients will have the same Publisher-ID unless the <code>-pso</code> option is explicitly specified.</p>
    <h2 class="with-rule"><a name="Sample"/>Sample Output</h2>
    <p>The following is sample output of the tool. This command will have a single client send one message on a topic and receive it on the same topic.</p>
    <p class="Code">$ sdkperf_java -cip= HOST -cu=user01@default -ptl=T/a -mn=1 -msa=100 -mr=1 -stl=T/a</p>
    <ul>
      <li><code>-cip</code> and <code>–cu</code> identify the <MadCap:variable name="Product-Names.pubsub_brand_only"/> event broker, Message VPN and client username</li>
      <li><code>-ptl</code> and <code>–stl</code> identify the publish and subscribe topic</li>
      <li><code>-mn</code> and <code>–mr</code> specify to send a single message at a rate of 1 msg/sec</li>
      <li><code>-msa</code> specifies that the message should be 100 bytes in size.</li>
    </ul>
    <p>When SDKPerf starts up, it prints environment information to the console.</p>
    <pre xml:space="preserve">CLASSPATH: :./lib/commons-cli-1.2.jar:./lib/commons-logging-1.1.3.jar:./lib/nativetimer.jar:./lib/sol-common-7.1.1.174.jar:./lib/sol-jcsmp-7.1.1.174.jar:./lib/sol-sdkperf-7.1.1.55.jar:./lib/sol-sdkperf-jcsmp-7.1.1.55.jar:./lib/thirdparty/*.jar:./lib/optional/log4j.jar:./lib/optional/
JAVA: /usr/bin/java
SOLACE_VM_ARGS: -Xms512m -Xmx1024m
Run Info: CPU usage currently disabled.
Client naming used:
    logging ID   = perf_client000001
    username     = user01
    vpn          = default
    client names = sdk generated.
 
&gt; VM Name: Java HotSpot(TM) Server VM
Run Info: Using Java Nanosecond Timer for Timing
&gt; Timing Package Clock Speed (Hz): 1000000000</pre>
    <p>In the above example, you can see the Java classpath, JRE location, and VM args. Additionally, SDKPerf will print information about the client so that it is easy to identify the client on the <MadCap:variable name="Product-Names.pubsub_brand_only"/> event broker.</p>
    <p>Following this system information, SDKPerf will print a status line for each stage of the program.</p>
    <pre>&gt; Getting ready to init clients
&gt; Adding subscriptions if required
&gt; Getting ready to start clients.
&gt; Starting publish.
PUB MR(5s)=    0, SUB MR(5s)=    0, CPU=0
======&gt;Main thread finish
&gt; Running sdkperf shutdown...
Pausing -ped time to allow clients to finish recv messages (2000 ms)</pre>
    <p>Then, finally when it shuts down, it will print the summary stats outlining what was accomplished.</p>
    <pre>-------------------------------------------------
Aggregate Stats (Total # clients: 1):
-------------------------------------------------
Total Messages transmitted = 1
Computed publish rate (msg/sec) = 1.0
-------------------------------------------------
Total Messages received across all subscribers = 1
Messages received with discard indication = 0
Computed subscriber rate (msg/sec across all subscribers) = 1.0
 
CPU usage = 0%</pre>
    <p>At a minimum, SDKPerf will always print the number of messages sent and received and the computed message rate. It will print more detailed statistics as needed when the tool is used to measure things like latency, message order, message integrity, and so on.</p>
  </body>
</html>
