<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
  <head>
    <link href="../../Resources/TableStyles/Table_Num.css" rel="stylesheet" MadCap:stylesheetType="table"/>
  </head>
  <body>
    <h1>SDKPerf</h1>
    <p>SDKPerf is a tool for  validating performance, checking configuration, and exploring features associated with your Solace PubSub+ event broker.</p>
    <p class="Note">SDKPerf is a non-production tool and not officially supported under our Customer Support policy.  You may find SDKPerf useful for developmental and testing purposes; it is provided for "as-is" usage.</p>
    <p>Download the latest version of <a href="https://solace.com/downloads/?fwp_downloads_types=other" target="_blank" class="link-internal">SDKPerf</a>.</p>
    <h2 class="with-rule"><a name="Versions"/>Versions</h2>
    <p>SDKPerf is available for the following programming languages and technologies.</p>
    <table width="95%" style="mc-table-style: url('../../Resources/TableStyles/Table_Num.css');" class="TableStyle-Table_Num" cellspacing="0">
      <tbody>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1" width="28%">
            <strong>SDKPerf for C</strong>
          </td>
          <td width="71%" class="TableStyle-Table_Num-BodyG-Column1-Body1"><code>sdkperf_c</code> is a C++ application which uses the <MadCap:variable name="Product-Names.pubsub_brand_only"/> Messaging API for C. It is available on the following operating systems.<ul style="margin-bottom: 0;"><li>Linux 2.6 x86</li><li>Linux 2.6 x64</li><li>Solaris</li><li>Windows</li></ul></td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1" width="28%">
            <strong>SDKPerf for CS</strong>
          </td>
          <td width="71%" class="TableStyle-Table_Num-BodyG-Column1-Body1"><code>sdkperf_cs</code> is a C# application that uses the <MadCap:variable name="Product-Names.pubsub_brand_only"/> Messaging APIs for .NET. It is available on Windows.</td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1" width="28%">
            <strong>SDKPerf for Java &amp; JMS</strong>
          </td>
          <td width="71%" class="TableStyle-Table_Num-BodyG-Column1-Body1"><code>sdkperf_java</code> contains two client implementations in a single package: it supports both the <MadCap:variable name="Product-Names.pubsub_brand_only"/> Messaging API for Java (JCSMP)  and the <MadCap:variable name="Product-Names.pubsub_brand_only"/> Messaging API for JMS. The <code>bin</code> directory contains convenience scripts that make it clear which API is in use (for example, <code>sdkperf_java</code> and <code>sdkperf_jms</code>). Both <code>sdkperf_java</code> and <code>sdkperf_jms</code> works on all platforms that the <MadCap:variable name="Product-Names.pubsub_brand_only"/> Messaging APIs support that have at least Java <MadCap:variable name="Minimum-Supported-Component-Versions.Java Distribution"/>.</td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyE-Column1-Body1" width="28%">
            <strong>SDKPerf for JavaScript</strong>
          </td>
          <td width="71%" class="TableStyle-Table_Num-BodyD-Column1-Body1"><code>sdkperf_js</code> is a JavaScript application which uses the <MadCap:variable name="Product-Names.pubsub_brand_only"/> Messaging API for JavaScript. It is accessed through a simple web page which presents the various tool options in a graphical format.</td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1" width="28%">
            <strong>SDKPerf for MQTT</strong>
          </td>
          <td width="71%" class="TableStyle-Table_Num-BodyG-Column1-Body1"><code>sdkperf_mqt</code>t uses the Java SDKPerf platform and implements an MQTT client using the Paho Java API. It works against all MQTT event brokers including the Solace PubSub+ event broker. <code>sdkperf_mqtt</code> works on all platforms that have at least Java <MadCap:variable name="Minimum-Supported-Component-Versions.Java Distribution"/>.</td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1" width="28%">
            <strong>SDKPerf for Python</strong>
          </td>
          <td width="71%" class="TableStyle-Table_Num-BodyG-Column1-Body1"><code>sdkperf_py</code> uses the Python SDKPerf platform. This version requires Python version <MadCap:variable name="Manifest-Products-APIs.SDK-PYTH-MIN-PYTHON-LANG-VERSION"/> or greater. </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyB-Column1-Body1" width="28%">
            <strong>SDKPerf for REST</strong>
          </td>
          <td width="71%" class="TableStyle-Table_Num-BodyA-Column1-Body1"><code>sdkperf_rest</code> uses the Java SDKPerf platform and implements an HTTP client that follows the Solace REST Messaging Protocol. It is a quick and easy way to explore the Solace REST Messaging Protocol. <code>sdkperf_rest</code> will work on all platforms that have at least Java <MadCap:variable name="Minimum-Supported-Component-Versions.Java Distribution"/>.</td>
        </tr>
      </tbody>
    </table>
    <h2 class="with-rule"><a name="Tool"/>Tool Dependencies</h2>
    <p>Often the correct functioning of certain SDKPerf command options requires associated configuration on the <MadCap:variable name="Product-Names.pubsub_brand_only"/> event broker and is important to consider as you explore various different command-line tools. The following are some specific dependencies.</p>
    <ul>
      <li>SDKPerf JMS—All JMS connections to event brokers depend on being able to look up the connection factory from a JNDI store. So, at a minimum, you need to enable JNDI look-ups within a Message VPN and configure a connection factory. </li>
      <li>SDKPerf REST—On the REST message consume side, SDKPerf REST acts as an HTTP server with the ability to correctly terminate <MadCap:variable name="Variables.CompanyName"/> REST messaging connections and receive messages. For SDKPerf REST to receive messages, the event broker must be configured appropriately with a REST delivery point and a REST consumer within the Message VPN. </li>
    </ul>
    <p>Many of the SDKPerf command line examples shown below assume this event broker configuration has been completed in order for the commands to work.</p>
    <h2 class="with-rule"><a name="Quick"/>Quick Start</h2>
    <p>Give these commands a try if you just want to quickly get started with SDKPerf to send and receive messages. All the options and more examples are explained further in the sections that follow. Start with this one:</p>
    <p class="Code">sdkperf –cip=HOST -stl=a/topic –ptl=a/topic –mn=1 -msa=10 –md</p>
    <p>That's it! It publishes a ten byte message to topic <code>a</code> and subscribes to the same topic, displaying the messages it receives. Topic wildcards can be used for the subscription option. You can learn all about Solace topics in <MadCap:xref href="../../Messaging/Topic-Support-and-Syntax.htm">Topic Support and Syntax</MadCap:xref>.</p>
    <p>If you set up a new Message VPN and use a non-default username, use the <code>-cu</code> option, with <code>–cp</code> if you’re using a password. We didn’t use this before because SDKPerf uses the default username and JavaScript if you don’t specify one:</p>
    <pre>sdkperf –cip=HOST -stl=a/topic –ptl=a/topic –mn=1 -msa=10 –md –cu USERNAME@MSGVPN</pre>
    <p>If you're using Solace queues, provision your queue and substitute the <code>-stl</code> and <code>-ptl</code> options with the <code>-sql</code> and <code>-pql</code> options:</p>
    <pre>sdkperf –cip=HOST -sql=a/durable/queue –pql=a/durable/queue –mn=1 -msa=10 –md</pre>
    <p>If you want to connect to a <MadCap:variable name="Product-Names.cloud_product_short"/> account using Solace Message Format (SMF) over TCP, you must include the host address with port number, your password, user name and VPN as shown below: </p>
    <pre>sdkperf –cip=HOST:PORT -cp=PASSWORD -cu=USERNAME@VPN -ptl=a/topic –mn=5</pre>
    <p>That's just a quick introduction. You can go further by learning more about SDKPerf options, architecture, and application flow, along with examples in the following sections.</p>
    <h2 class="with-rule"><a name="SDKPerf"/>Architecture</h2>
    <p><img src="sdkperf-architecture-705x332.png" alt="SDKPerf Architecture" style="max-width: 546px;float: right; border-color:transparent; border-left-style: solid;border-left-width: 10px;border-bottom-style: solid;border-bottom-width: 4px;background-image: none;"/>The SDKPerf tools all share a common architecture across all the supported APIs and platforms. The following figure shows this architecture at a high level.</p>
    <p>Because SDKPerf is a tool for testing messaging, internally it is modeled as a common core and a bunch of messaging clients implementations. The SDKPerf core platform exposes a client interface which it uses to generically interact with clients across any API. This allows for the SDKPerf tool to work in the same manner across all APIs and protocols it supports. This is depicted in the architecture figure where you can see that for each API or protocol there is a corresponding SDKPerf client implementation that makes use of the API protocol and implements SDKPerf's client interface. This allows the SDKPerf platform to code to focus on the performance and functional testing required in a client-agnostic way.</p>
    <h2 class="with-rule"><a name="SDKPerf2"/>Application Flow</h2>
    <p>As a command line application SDKPerf will follow a specific application flow for a given invocation. On each invocation of SDKPerf, it does the following:</p>
    <ol>
      <li>Connect clients</li>
      <li>Add any required subscriptions and/or bind to endpoints</li>
      <li>Start publishing</li>
      <li>Wait until publishing is done</li>
      <li>Remove any subscriptions that were added</li>
      <li>Disconnect clients</li>
      <li>Cleanup and report stats</li>
    </ol>
    <p class="Note">If the set of command line options used does not result in messages being published, the application will wait for <code>SIGINT </code>(Ctrl-C) instead of waiting until publishing has been completed.</p>
  </body>
</html>
