<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:lastBlockDepth="2" MadCap:lastHeight="550" MadCap:lastWidth="767">
  <head/>
  <body>
    <h1>Using Topic Requestors</h1>
    <p>The <code>TopicRequestor</code> class provides a simple synchronous request/reply mechanism that a client can use to publish a message to a specific topic and wait for a reply to that message.</p>
    <p>To create a Topic Requestor, call <code>javax.jms.TopicRequestor()</code> and pass in a non‑transacted Session and a topic destination. The Topic Requestor automatically creates a temporary topic that is used for the duration of the Session.</p>
    <p>Once a Topic Requestor is created, call the <code>TopicRequestor.request(Message message)</code> method and pass in the message that you want to request reply to. A reply from a receiving application to the request is directed to the temporary topic created by the Topic Requestor. (This temporary topic acts as the JMSReplyTo destination.) The client that receives the request can use the <code>Message.getJMSReplyTo()</code> method to get the destination that the reply should be sent to.</p>
    <p>The first reply is returned to the requesting client; any subsequent replies are discarded. Note that the request waits until a reply is received – no timeout can be set for the request. This is problematic if a reply is slow to return or never arrives. </p>
    <p>When <code>TopicRequestor.close()</code> is called, both the Topic Requestor and the Session that it belongs to are closed.</p>
    <p style="font-weight: bold;">Related Sample</p>
    <p>For an example of how to publish use the <code>TopicRequestor</code> class to send messages to temporary topics and request direct replies to those messages, refer to the <code>SolJMSRRGuaranteedRequester</code> and <code>SolJMSRRGuaranteedReplier </code>samples.</p>
  </body>
</html>
