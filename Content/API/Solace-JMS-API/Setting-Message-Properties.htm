<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
  <head/>
  <body>
    <h1>Setting Message Properties</h1>
    <p>The following sections discuss some important message properties that can be set for messages to be published. These properties can affect how messages are routed.</p>
    <ul>
      <li>
        <MadCap:xref href="#Time-to-">Time-to-Live</MadCap:xref>
      </li>
      <li>
        <MadCap:xref href="#Dead">Dead Message Queue Eligibility</MadCap:xref>
      </li>
      <li>
        <MadCap:xref href="#Eliding">Eliding Eligibility</MadCap:xref>
      </li>
      <li>
        <MadCap:xref href="#Partition">Partition Key</MadCap:xref>
      </li>
    </ul>
    <h2 class="with-rule"><a name="Time-to-"/>Time-to-Live</h2>
    <p>To ensure that stale messages are not consumed, you can set a Time‑To-Live (TTL) value (in milliseconds) for each Guaranteed message published by a producer.
        The TTL value is ignored for non‑durable endpoints when using Direct Transport.</p>
    <h4>Respecting TTL</h4>
    <p>If destination queues or topic endpoints are configured to respect message TTLs, when received messages’ TTLs have passed, they are either discarded by the endpoint, or, if the messages are eligible for a Dead Message Queue (DMQ), they are moved to a DMQ provisioned on the event broker.</p>
    <p class="Note">The <code>respect-ttl</code> property value set at the <code>connectionFactory</code> level can be overridden through the <code>InitialContext</code> environment using <code>SupportedProperty.SOLACE_JMS_RESPECT_TIME_TO_LIVE</code>.</p>
    <h4>Setting TTL</h4>
    <p>You can set a TTL value for messages in the following ways:</p>
    <ul>
      <li>Call <code>MessageProducer.setTimeToLive(long timeToLive)</code> to set a default TTL value for all messages to be published by the <code>MessageProducer.</code> (A value of 0 means that the messages never expire.)</li>
      <li>After acquiring a <code>MessageProducer</code>, a TTL value can be passed in when you call either one of the following methods to publish the message:<ul><li><code>send(Destination destination, Message message, int deliveryMode, int priority, long timeToLive)</code> or <code>send(Message message, int deliveryMode, int priority, long timeToLive)</code></li></ul><p>The TTL value set through these methods overrides any set at the <code>MessageProducer</code> level.</p></li>
    </ul>
    <h4>Moving messages to a DMQ</h4>
    <p>If you want to move messages with expired TTL values to a provisioned DMQ, the endpoints must be configured to respect the messages’ TTL values:</p>
    <ul>
      <li>If you are using SolAdmin to provision endpoints, you must enable the Respect TTL check box and create a new queue or subscription name (that is, endpoint).</li>
      <li>If you want to dynamically create endpoints, the <code>connectionFactory</code> used should also be configured to respect TTLs. Therefore, when using SolAdmin to create a <code>connectionFactory</code>, enable the <code>Respect TTL</code> check box.  When using the CLI to create the <code>connectionFactory</code>, set <code>respect‑ttl</code> to <code>true</code>. For more information, refer to <MadCap:xref MadCap:unresolvedLink="import-link:managing_solace_jndi_objects_75995180_92633" href="Managing-Solace-JNDI-Objects.htm">Managing Solace JNDI Objects</MadCap:xref>.</li>
    </ul>
    <h2 class="with-rule"><a name="Dead"/>Dead Message Queue Eligibility</h2>
    <p>Guaranteed messages that have exceeded their TTL, or maximum number of redelivery attempts, can be moved from a durable Queue or a Topic Endpoint to a DMQ, instead of being discarded  if those messages are flagged as being DMQ-eligible. A DMQ is just a durable queue that has been assigned to serve as the DMQ for another durable endpoint. For more information, refer to <MadCap:xref MadCap:unresolvedLink="import-link:managing_guaranteed_messaging_1618706360_38163" href="../../Messaging/Guaranteed-Msg/Setting-Dead-Msg-Queues.htm">Setting Dead Message Queues</MadCap:xref>.</p>
    <p>You can dynamically create a queue with the name <code>#DEAD_MSG_QUEUE</code> through the JMS API (refer to <MadCap:xref href="Working-with-Destination.htm#Creating-Queues">Creating Queues</MadCap:xref>), or provision one through CLI or SolAdmin.</p>
    <p>You can flag published messages as DMQ eligible on a per-message basis, or you can enable message eligibility for DMQs on a Connection Factory basis so that all messages published by Producers using that Connection Factory are DMQ-eligible.</p>
    <ul>
      <li>
        <u>To flag individual messages</u>
      </li>
      <p>Set the <code>SOLACE_JMS_PROP_DEAD_MSG_QUEUE_ELIGIBLE</code> property to <code>true</code> for each message.</p>
      <li>
        <u>To flag messages at the Connection Factory level</u>
      </li>
      <p>Use SolAdmin or the CLI to enable the <code>default-dmq-eligible</code> property.</p>
    </ul>
    <p>For more information on this message property, refer to <MadCap:xref href="Message-Properties.htm#jms_properties_39190069_303895">Dead Message Queue Eligible</MadCap:xref>.</p>
    <h2 class="with-rule"><a name="Eliding"/>Eliding Eligibility</h2>
    <p>The message eliding capabilities of Solace PubSub+ enables client applications to only receive the most current messages published to topics that they subscribe to, at a rate that they can manage. Using message eliding can be useful in situations where a slower message rate is required or where there are slow consumers.</p>
    <p>To use message eliding, the following steps are required:</p>
    <ul>
      <li>A consuming client application must be assigned a client profile through its client username that permits it to use message eliding. The client profile also sets a rate to control the delay interval at which a new eliding-eligible message elides a previous version that is queued for delivery to the client.</li>
      <li>Published messages must be flagged as eligible for message eliding.</li>
      <li>You can flag published messages as eligible for message eliding on a per‑message basis, or you can enable message eliding eligibility on a Connection Factory basis so that all messages published by Producers using that Connection Factory are eliding-eligible. <ul><li>To flag individual messages, set the <code>SOLACE_JMS_PROP_ELIDING_ELIGIBLE</code> property to <code>true</code> for each message.</li><li>To flag messages at the Connection Factory level, use SolAdmin or the CLI to enable the <code>default-eliding-eligible</code> property.</li></ul></li>
    </ul>
    <p>For more information on this message property, refer to <MadCap:xref href="Message-Properties.htm#jms_properties_39190069_304048">Eliding Eligible</MadCap:xref>.</p>
    <h2 class="with-rule"><a name="Partition"/>Partition Key</h2>
    <p>You can set a partition key in your message to take advantage of partitioned queues. Partitioned queues allow you to easily scale the number of consumer applications in your event mesh, while maintaining the message sequence for all published messages with the same partition key. PubSub+ event brokers ensure that all related events are delivered to the same consumer in the correct sequence and also re-balance the event stream when you add or remove consumers. For more information see <MadCap:xref href="../../Messaging/Guaranteed-Msg/Queues.htm#partitioned-queues">Partitioned Queues</MadCap:xref>.</p>
    <p>To set the partition key, use the <code>setStringProperty(name,value)</code> method to set a name-value pair on a JMS API message. </p>
    <ul>
      <li>
        <p><code>name</code>—The constant <code>SupportedProperty.JMSX_GROUP_ID</code> or the string value <code>JMSXGroupID</code>.</p>
      </li>
      <li>
        <p><code>value</code>—A string representing the value of your partition key. Client applications set the value at publish time. </p>
      </li>
    </ul>
    <p>The following example sets the partition key <code>value</code> to <code>Group-0</code>:</p>
    <pre xml:space="preserve">
Message message = message.setStringProperty("JMSXGroupID", "Group-0");
// Or:
Message message.setStringProperty(SupportedProperty.JMSX_GROUP_ID, "Group-0");</pre>
  </body>
</html>
