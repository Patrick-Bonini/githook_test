<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
  <head/>
  <body>
    <h1>Browsing Messages</h1>
    <p>Client applications can use a QueueBrowser to look at messages spooled for a queue without consuming them.</p>
    <div class="Note">
      <ul>
        <li>The delivery restrictions imposed by a queue’s access type (that is, exclusive or non-exclusive) only affect consuming messages from a queue. They do not affect browsing messages on a queue. </li>
        <li>When the client is using Direct Transport mode, a QueueBrowser cannot be used to browse a temporary queue.</li>
      </ul>
    </div>
    <p style="font-weight: bold;">Related Samples</p>
    <p>For an example of how to browse messages on a queue, refer to the <code>SolJMSQueueBrowser</code> sample. </p>
    <p>To browse messages on a queue, do the following:</p>
    <ol>
      <li>Create a <code>QueueBrowser</code> object.
        <p>Call <code>Session.createBrowser(...)</code> and pass in the queue that you want to browse.</p><p>Optionally, you can also pass in a selector string for the <code>Selector</code> property. Using a selector enables the client to only browse messages that match a selector. Note that it could take longer for the message bus to evaluate spooled messages against a selector, especially if the selector used is complex. For more information on selectors, refer to <MadCap:xref href="Selectors.htm">Selectors</MadCap:xref>.</p></li>
      <li>Use the <code>QueueBrowser</code> to get an <code>Enumeration</code> object that can be used to browse the current queue messages in the order they were received (from oldest to newest) by the queue.
        <p>Call <code>QueueBrowser.getEnumeration()</code>.</p></li>
      <li>Iterate over the messages on the queue.
        <p>Call <code>Enumeration.hasMoreElements()</code>. This method returns<code> true</code> if there is at least one message available in the browser’s local message buffer; otherwise, it returns <code>false</code>.</p><p>If it returns <code>false</code>, it does not necessarily mean that the queue is empty, rather the local buffer does not currently contain any messages. Subsequent calls to <code>Enumeration.hasMoreElements()</code> or <code>Enumeration.nextElement()</code> could return <code>true</code> and return a message, respectively. </p><p class="Note">If you want to browse every message on a queue, it is recommended that you use<code>enumeration.nextElement()</code>. This method keeps returning messages until the local queue is empty and it has not received a message for 10 seconds.</p></li>
    </ol>
    <div class="Note">
      <p>Client applications should not make any assumptions about the polling strategy used by the JMS API when browsing spooled messages. For example, when browsing messages, the JMS API could be requesting more messages from the event broker or returning already buffered messages.</p>
    </div>
    <h2 class="with-rule"><a name="receiving_messages_3569307012_295301"/>Displaying Messages</h2>
    <p>To display the contents of a message in a human‑readable form, you can call <code>SolJmsUtility.dumpMessage(Message Msg)</code> and pass in the message instance. This method returns a text string that includes JMS message fields and their values along with Solace message fields and their values.</p>
    <p>This method is provided as an aid for programmers when developing applications.</p>
  </body>
</html>
