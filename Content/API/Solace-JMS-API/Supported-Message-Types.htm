<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
  <head>
    <link href="../../Resources/TableStyles/Table_Num.css" rel="stylesheet" MadCap:stylesheetType="table"/>
  </head>
  <body>
    <h1>Supported Message Types</h1>
    <p>The table below lists the standard JMS message types that are supported as well as the corresponding information about how to create them and how to set data to and get data from the message body.</p>
    <p class="Note">For a comprehensive list of the available methods that can be used for get/set or read/write operations, refer to <MadCap:xref href="jms-get-started-open.htm#API_Online_Helps">JMS API Reference</MadCap:xref>.</p>
    <table class="TableStyle-Table_Num" style="mc-table-style: url('../../Resources/TableStyles/Table_Num.css');margin-left: 0;margin-right: auto;caption-side: top;" cellspacing="0">
      <caption valign="top" style="padding-bottom: 3pt;">
        <p class="TblCaption">JMS Message Types</p>
      </caption>
      <col class="TableStyle-Table_Num-Column-Column1" style="width: 33%;"/>
      <col class="TableStyle-Table_Num-Column-Column1" style="width: 33%;"/>
      <col class="TableStyle-Table_Num-Column-Column1" style="width: 33%;"/>
      <thead>
        <tr class="TableStyle-Table_Num-Head-Header1">
          <th class="TableStyle-Table_Num-HeadE-Column1-Header1">Type and Description</th>
          <th class="TableStyle-Table_Num-HeadE-Column1-Header1">To create a message of this type, call...</th>
          <th class="TableStyle-Table_Num-HeadD-Column1-Header1">To get and set data...</th>
        </tr>
      </thead>
      <tbody>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">Message—The Message interface is the root interface of all JMS messages. A Message object holds all the standard message header information. It can be sent when a message containing only header information is sufficient. </p>
          </td>
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_BodyCode">session.<br/>createMessage()</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_Body">It is recommended that a message body of one of the following types is defined:</p>
            <ul>
              <li>Stream</li>
              <li>Map</li>
              <li>Text</li>
              <li>Object</li>
              <li>Bytes </li>
            </ul>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">StreamMessage—Message body contains a stream of Java primitive values. The message body is filled and read sequentially.</p>
          </td>
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_BodyCode">session.<br/>createStreamMessage()</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_Body">Use StreamMessage read and write methods for primitive types. For example, <code>writeBytes(...)</code> and <code>readInt(...)</code>.</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">MapMessage—Message body contains a set of name-value pairs, where the names are string objects, and the values are Java primitives. The pairs can be accessed sequentially or randomly by name.</p>
          </td>
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_BodyCode">session.<br/>createMapMessage()</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_Body">Use MapMessage get and set methods for name-value pairs, where the names are String objects, and the values are primitive data types in the Java programming language. For example, <code>setBoolean(...)</code> and <code>getFloat(...)</code>.</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyE-Column1-Body1">
            <p class="Tbl_Body">TextMessage—Message body contains a java.lang.String. This message type can be used for plain text messages. It can also be used for XML messages if the Solace proprietary message property <code>SOLACE_JMS_<br/>PROP_ISXML</code> is used.</p>
          </td>
          <td class="TableStyle-Table_Num-BodyE-Column1-Body1">
            <p class="Tbl_BodyCode">session.createText<br/>Message(...)</p>
          </td>
          <td class="TableStyle-Table_Num-BodyD-Column1-Body1">
            <ul>
              <li>Call <code>setText(...)</code> to set the string body of the text message.</li>
              <li>Call <code>getText(...)</code> to get the string body of the text message.</li>
            </ul>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">ObjectMessage—Message body contains a serializable Java object.</p>
          </td>
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_BodyCode">session.<br/>createObjectMessage()</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <ul>
              <li>Call <code>setObject(...)</code> to set the serializable object containing the message’s data</li>
              <li>Call <code>getObject(...)</code> to get the object containing the message’s data</li>
            </ul>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyB-Column1-Body1">
            <p class="Tbl_Body">BytesMessage—Message body contains a stream of uninterpreted bytes.</p>
          </td>
          <td class="TableStyle-Table_Num-BodyB-Column1-Body1">
            <p class="Tbl_BodyCode">session.<br/>createBytesMessage()</p>
          </td>
          <td class="TableStyle-Table_Num-BodyA-Column1-Body1">
            <p class="Tbl_Body">Use BytesMessage read and write methods. For example, <code>writeUTF(...)</code> and <code>readBytes(...)</code>.</p>
          </td>
        </tr>
      </tbody>
    </table>
  </body>
</html>
