<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" xml:lang="en-us" MadCap:conditions="Default.ConnectorSpecific">
  <head>
    <title/>
  </head>
  <body>
    <h1><a name="_bookmark8"/>Configuring Connection Details </h1>
    <h2><MadCap:variable name="Variables.CompanyName"/><MadCap:variable name="Product-Names.pubsub_brand_only"/> Connection Details</h2>
    <MadCap:snippetBlock src="../../../../Resources/Snippets/API/Connectors/common/configure-connection-details-part1.flsnp"/>
    <h2 MadCap:conditions="Default.ConnectorSpecific"><MadCap:variable name="Manifest-Products-Connectors.connector-azureservicebus-product-name"/> Connection Details</h2>
    <p MadCap:conditions="Default.ConnectorSpecific">Spring Cloud Azure for the <MadCap:variable name="Manifest-Products-Connectors.connector-azureservicebus-product-name"/> supports various methods for authentication to ensure secure and flexible integration options. The following approaches are the most commonly used methods to authenticate with <MadCap:variable name="Manifest-Products-Connectors.connector-azureservicebus-product-name"/> within your Spring application.  </p>
    <p MadCap:conditions="Default.ConnectorSpecific">The configuration steps for each method require you to replace placeholders (for example, <code>${SERVICEBUS_NAMESPACE_CONNECTION_STRING}</code>, <code>${AZURE_CLIENT_ID}</code>, and so on) with actual values from your Azure environment.</p>
    <h3 MadCap:conditions="Default.ConnectorSpecific">Connection String Authentication</h3>
    <p MadCap:conditions="Default.ConnectorSpecific">This method utilizes a connection string obtained from the Azure portal for the <MadCap:variable name="Manifest-Products-Connectors.connector-azureservicebus-product-name"/> namespace:</p>
    <pre xml:space="preserve" MadCap:conditions="Default.ConnectorSpecific">spring:
  cloud:
    azure:
      servicebus:
        connection-string: ${SERVICEBUS_NAMESPACE_CONNECTION_STRING}</pre>
    <h3 MadCap:conditions="Default.ConnectorSpecific">Service Principal with Client Secret</h3>
    <p MadCap:conditions="Default.ConnectorSpecific">This method uses a Microsoft Entra ID service principal with a client secret:</p>
    <pre xml:space="preserve" MadCap:conditions="Default.ConnectorSpecific">spring:
  cloud:
    azure:
      credential:
        client-id: ${AZURE_CLIENT_ID}
        client-secret: ${AZURE_CLIENT_SECRET}
       profile:
         tenant-id: ${TENANT_ID}
         subscription-id: ${AZURE_SUBSCRIPTION_ID} # Optional, only if resource
provisioning is needed
      servicebus:
        namespace: ${SERVICEBUS_NAMESPACE}</pre>
    <p MadCap:conditions="Default.ConnectorSpecific" class="Note">When using a service principal, ensure that your application has the necessary permissions to access the <MadCap:variable name="Manifest-Products-Connectors.connector-azureservicebus-product-name"/> resources . This might involve configuring Microsoft Entra ID roles and permissions accordingly.</p>
    <p MadCap:conditions="Default.ConnectorSpecific">For more information on the supported authentication methods for Spring Cloud Azure, see  <a href="https://learn.microsoft.com/en-us/azure/developer/java/spring-framework/authentication" target="_blank" class="link-offsite">Spring Cloud Azure Authentication</a>. </p>
    <h2>Connecting to Multiple Systems</h2>
    <p>To connect to multiple systems of a same type, use the <a href="https://docs.spring.io/spring-cloud-stream/docs/current/reference/html/spring-cloud-stream.html#multiple-systems" target="_blank" class="link-offsite">multiple binder syntax</a>.    </p>
    <p>For example:</p>
    <pre xml:space="preserve">spring: 
  cloud:
    stream: 
      binders:
        
        # 1st solace binder in this example 
	 solace1:
          type: solace 
	   environment: 
	     solace: 
	       java:
        	 host: tcp://localhost:55555
         
	 # 2nd solace binder in this example 
	 solace2:
          type: solace 
          environment: 
            solace: 
	       java:
        	 host: tcp://other-host:55555
        
	 # The only servicebus binder 
	 servicebus1:
          type: servicebus
	   # Add `environment` property map here if you need to customize this binder. 
	   # But for this example, we'll assume that defaults are used.
          
	 # Required for internal use 
	 undefined:
          type: undefined 
	 bindings:
          input-0:
            destination: &lt;input-destination&gt; 
	     binder: servicebus1
          output-0:
            destination: &lt;output-destination&gt;
            binder: solace1 # Reference 1st solace binder 
	   input-1:
            destination: &lt;input-destination&gt; 
	     binder: servicebus1
          output-1:
            destination: &lt;output-destination&gt;
            binder: solace2 # Reference 2nd solace binder</pre>
    <p MadCap:conditions="Default.ConnectorSpecific">The configuration above defines two binders of type <code>solace</code> and one binder of type <code>servicebus</code>, which are then referenced within the bindings. </p>
    <p>Each binder above is configured independently under <code>spring.cloud.stream.binders.&lt;bindername&gt;.environment.</code>.</p>
    <div class="note">
      <ul>
        <li>
          <p>When connecting to multiple systems, all binder configuration must be specified using the multiple binder syntax for all binders. For example, under the <code>spring.cloud.stream.binders.&lt;binder-name&gt;.environment</code>.</p>
        </li>
        <li>
          <p>Do not use single-binder configuration (for example, <code> solace.java.*</code> at the root of your <code>application.yml</code>) while using the multiple binder syntax.</p>
        </li>
      </ul>
    </div>
  </body>
</html>
