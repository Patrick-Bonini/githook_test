<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:conditions="Default.ConnectorSpecific">
  <head>
    <title/>
  </head>
  <body>
    <h1>Configuring Connection Details</h1>
    <MadCap:snippetBlock src="../../../../Resources/Snippets/API/Connectors/common/configure-connection-details-part1.flsnp"/>
    <h2>
      <a name="configuring-connection-details"/>
      <MadCap:conditionalText MadCap:conditions="Default.ConnectorSpecific">Configuring  Connection Details</MadCap:conditionalText>
    </h2>
    <h3>Manual Configuration</h3>
    <p>To manually configure <MadCap:variable name="Manifest-Products-Connectors.connector-ibmmq-product-name"/> connection details, set the following in <code>application.yml</code>:</p>
    <pre xml:space="preserve">
ibm:
  mq:
    user: admin
    password: passw0rd
    channel: DEV.APP.SVRCONN
    queue-manager: QM1
    conn-name: localhost(1414)
    additional-properties:
      &lt;key&gt;: &lt;value&gt;	</pre>
    <p>Additional properties are key-value pairs where <code>key</code> can either be the real string for the property, which often starts with <code>XMSC</code>, or the variable as known in the <a href="https://www.ibm.com/docs/en/ibm-mq/9.2?topic=jms-wmqconstants" class="link-offsite">WMQConstants</a> class.</p>
    <h3 MadCap:conditions="Default.ConnectorSpecific">JNDI</h3>
    <p>The JMS binder provides a generic way of configuring the connection details and using JNDI.</p>
    <h4>
      <a name="JNDI"/>
      <MadCap:conditionalText MadCap:conditions="Default.ConnectorSpecific">JNDI Context</MadCap:conditionalText>
    </h4>
    <p>The first step in using JNDI is to configure the JNDI context. The JMS binder expects standard JNDI properties to be specified under <code>jms-binder.jndi.context</code> in a key-value pair format. The key is the name of the property, such as <code>java.naming.provider.url</code>, and the value is a string in the format defined for that property.</p>
    <p>For example, configuring the File System JNDI service provider could look like:</p>
    <pre xml:space="preserve">
jms-binder: 
  jndi:
    context:
      java.naming.factory.initial: com.sun.jndi.fscontext.RefFSContextFactory
      java.naming.provider.url: file:/path/to/bindings/file	</pre>
    <p class="Note">All classes required by the chosen JNDI service provider must be added to the classpath.</p>
    <p>After the JNDI context has been successfully configured, <code><MadCap:xref href="#Connecti">Connection Factory Look up</MadCap:xref></code>, <code><MadCap:xref href="IBMMQ-JMS-Destination-Types.htm">JMS Destination Types</MadCap:xref></code>, or both can be looked up.</p>
    <p class="Note">If the connector is running as a container and testing with the File System JNDI service provider, consider mounting the <code>.bindings</code> file with a docker bind mount and then setting <code>java.naming.provider.url</code> to the target of that mount.</p>
    <h4>
      <a name="Connecti"/>
      <MadCap:conditionalText MadCap:conditions="Default.ConnectorSpecific">Connection Factory Lookup</MadCap:conditionalText>
    </h4>
    <p>To look up a connection factory, configure <code>jms-binder.jndi.connection-factory</code>:</p>
    <pre xml:space="preserve">
jms-binder:
  jndi:
    connection-factory:
      name: &lt;jndiConnectionFactoryName&gt;
      user: &lt;someUser&gt;
      password: &lt;somePassword&gt;	</pre>
    <p>Where:</p>
    <ul>
      <li>
        <p><code>&lt;jndiConnectionFactoryName&gt;</code> is the JNDI object name of the connection factory.</p>
      </li>
      <li>
        <p><code>&lt;someUser&gt;</code> is the user to authenticate with the JMS broker.</p>
      </li>
      <li>
        <p><code>&lt;somePassword&gt;</code> is the password to authenticate with the JMS broker.</p>
      </li>
    </ul>
    <p class="Note">The JNDI connection factories must not specify a clientID as this prevents producer bindings from connecting.</p>
    <h2 MadCap:conditions="Default.ConnectorSpecific">Secure Connections</h2>
    <p>For versions 2.3.0 and later of this connector, you can create an <a class="link-offsite" href="https://docs.spring.io/spring-boot/reference/features/ssl.html">SSLBundle</a><span class="fortechrview"> to configure a secure connection to </span><MadCap:variable name="Manifest-Products-Connectors.connector-ibmmq-product-name"/>, and then reference that SSLBundle using the <code>ibm.mq.ssl-bundle</code> property. For example:</p>
    <pre>spring:
  ssl:
    bundle:
      jks:
        my-bundle:
          truststore:
            location: "/path/to/truststore.jks"
            password: "changeit"
            type: "JKS"
ibm:
  mq:
    user: app
    password: passw0rd
    channel: DEV.APP.SVRCONN
    conn-name: localhost(1414)
    <span class="topicnoun">ssl-bundle: my-bundle</span>
    additional-properties:
      WMQ_SSL_CIPHER_SUITE: TLS_RSA_WITH_AES_128_CBC_SHA256 # As an example</pre>
    <h2 MadCap:conditions="Default.ConnectorSpecific">Connecting to Multiple Systems</h2>
    <p>To connect to multiple systems of a same type, use the <a href="https://docs.spring.io/spring-cloud-stream/docs/current/reference/html/spring-cloud-stream.html#multiple-systems" class="link-offsite">multiple binder syntax</a>. For example:</p>
    <pre xml:space="preserve">
spring:
  cloud:
    stream:
      binders:

        # 1st solace binder in this example
        solace1:
          type: solace
          environment:
            solace:
              java:
                host: tcp://localhost:55555

        # 2nd solace binder in this example
        solace2:
          type: solace
          environment:
            solace:
              java:
                host: tcp://other-host:55555

        # The only jms binder
        jms1:
          type: jms
          # Add `environment` property map here if you need to customize this binder.
          # For instance, `environment.jms-binder.jndi.context` and `environment.jms binder.jndi.connection-factory` configuration.

        # Required for internal use
        undefined:
          type: undefined
      bindings:
        input-0:
          destination: &lt;input-destination&gt;
          binder: jms1
        output-0:
          destination: &lt;output-destination&gt;
          binder: solace1 # Reference 1st solace binder
        input-1:
          destination: &lt;input-destination&gt;
          binder: jms1
        output-1:
          destination: &lt;output-destination&gt;
          binder: solace2 # Reference 2nd solace binder</pre>
    <p>The configuration above defines two binders of type <code>solace</code> and one binder of type <code>jms</code>, which are then referenced within the bindings. </p>
    <p>Note that each binder is configured independently under <code>spring.cloud.stream.binders.&lt;bindername&gt;.environment.</code>.</p>
    <p class="Note">When connecting to multiple systems, all binder configuration must be specified using the multiple binder syntax for all binders. For example, under the <code>spring.cloud.stream.binders.&lt;binder-name&gt;.environment</code>.</p>
    <p class="Note">Do not use single-binder configuration (for example, <code> solace.java.*</code> at the root of your <code>application.yml</code>) while using the multiple binder syntax.</p>
  </body>
</html>
