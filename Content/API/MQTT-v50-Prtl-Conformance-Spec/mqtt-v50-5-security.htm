<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
  <head>
    <link href="../../Resources/Stylesheets/mqtt_311_prtcl.css" rel="stylesheet" type="text/css"/>
  </head>
  <body>
    <h1>5 Security (non-normative)</h1>
    <h2><a name="5.1-introduction"/>5.1 Introduction</h2>
    <p class="MsoNormal">MQTT is a transport protocol specification for message
transmission, allowing implementers a choice of network, privacy,
authentication and authorization technologies. Since the exact security
technologies chosen will be context specific, it is the implementer's responsibility
to include the appropriate features as part of their design.</p>
    <p class="MsoNormal"> </p>
    <p class="MsoNormal">MQTT Implementations will likely need to keep pace with an
evolving security landscape.</p>
    <p class="MsoNormal"> </p>
    <p class="MsoNormal">This Chapter provides general implementation guidance so as
not to restrict choices available and is therefore non-normative. This should
not detract from its importance.</p>
    <p class="MsoNormal"> </p>
    <p class="MsoNormal">It is strongly recommended that Server implementations that
offer TLS <a href="mqtt-v50-1-introduction.htm#RFC5246" class="link-internal">[RFC5246]</a> should use TCP
port 8883 (IANA service name: secure-mqtt).</p>
    <p class="MsoNormal"> </p>
    <p class="MsoNormal">There are a number of threats that solution providers should
consider. For example:</p>
    <ul style="margin-top: 0in;" type="disc">
      <li class="MsoNormal">Devices could be compromised</li>
      <li class="MsoNormal">Data at rest in Clients and Servers might be accessible</li>
      <li class="MsoNormal">Protocol behaviors could have side effects (e.g. “timing
 attacks”)</li>
      <li class="MsoNormal">Denial of Service (DoS) attacks</li>
      <li class="MsoNormal">Communications could be intercepted, altered, re-routed or
 disclosed</li>
      <li class="MsoNormal">Injection of spoofed MQTT Control Packets</li>
    </ul>
    <p class="MsoNormal" style="margin-left: .5in;"> </p>
    <p class="MsoNormal">MQTT solutions are often deployed in hostile communication
environments. In such cases, implementations will often need to provide
mechanisms for:</p>
    <ul style="margin-top: 0in;" type="disc">
      <li class="MsoNormal">Authentication of users and devices</li>
      <li class="MsoNormal">Authorization of access to Server resources</li>
      <li class="MsoNormal">Integrity of MQTT Control Packets and application data
 contained therein</li>
      <li class="MsoNormal">Privacy of MQTT Control Packets and application data
 contained therein</li>
    </ul>
    <p class="MsoNormal" style="margin-left: .5in;"> </p>
    <p class="MsoNormal">In addition to technical security issues there could also be
geographic (e.g. U.S.-EU Privacy Shield Framework <a href="mqtt-v50-1-introduction.htm#USEUPRIVSH" class="link-internal">[USEUPRIVSH]</a>),
industry specific (e.g. PCI DSS <a href="mqtt-v50-1-introduction.htm#PCIDSS" class="link-internal">[PCIDSS]</a>)
and regulatory considerations (e.g. Sarbanes-Oxley <a href="mqtt-v50-1-introduction.htm#SARBANES" class="link-internal">[SARBANES]</a>).</p>
    <h2><a name="5.2-mqtt-solutions-security-certification"/>5.2 MQTT solutions: security
and certification</h2>
    <p class="MsoNormal">An implementation might want to provide conformance with
specific industry security standards such as NIST Cyber Security Framework <a href="mqtt-v50-1-introduction.htm#NISTCSF" class="link-internal">[NISTCSF]</a>, PCI-DSS <a href="mqtt-v50-1-introduction.htm#PCIDSS" class="link-internal">[PCIDSS]</a>,
FIPS-140-2 <a href="mqtt-v50-1-introduction.htm#FIPS1402" class="link-internal">[FIPS1402]</a> and NSA Suite B <a href="mqtt-v50-1-introduction.htm#NSAB" class="link-internal">[NSAB]</a>.</p>
    <p class="MsoNormal">Guidance on using MQTT within the NIST Cyber Security
Framework <a href="mqtt-v50-1-introduction.htm#NISTCSF" class="link-internal">[NISTCSF]</a> can be found
in the MQTT supplemental publication, MQTT and the NIST Framework for Improving
Critical Infrastructure Cybersecurity <a href="mqtt-v50-1-introduction.htm#MQTTNIST" class="link-internal">[MQTTNIST]</a>. The
use of industry proven, independently verified and certified technologies will
help meet compliance
requirements.</p>
    <h2><a name="5.3-lightweight-cryptography"/>5.3 Lightweight crytography and constrained devices</h2>
    <p class="MsoNormal">Advanced Encryption Standard <a href="mqtt-v50-1-introduction.htm#AES" class="link-internal">[AES]</a> is the
most widely adopted encryption algorithm. There is hardware support for AES in
many processors, but not commonly for embedded processors. The encryption algorithm
ChaCha20<a href="mqtt-v50-1-introduction.htm#CHACHA20" class="link-internal">[CHACHA20]</a> encrypts and decrypts much faster
in software, but is not as widely available as AES.</p>
    <p class="MsoNormal">ISO 29192 <a href="mqtt-v50-1-introduction.htm#ISO29192" class="link-internal">[ISO29192]</a> makes
recommendations for cryptographic primitives specifically tuned to perform on
constrained “low end” devices.</p>
    <h2><a name="5.4-implementation-notes"/>5.4 Implementation notes</h2>
    <p class="MsoNormal">There are many security concerns to consider when
implementing or using MQTT. The following section should not be considered a
“check list”. </p>
    <p class="MsoNormal">An implementation might want to achieve some, or all, of the
following:</p>
    <h3><a name="5.4.1-authentication-clients-by-server"/>5.4.1 Authentication of
Clients by the Server</h3>
    <p class="MsoNormal">The CONNECT packet contains User Name and Password fields.
Implementations can choose how to make use of the content of these fields. They
may provide their own authentication mechanism, use an external authentication
system such as LDAP <a href="mqtt-v50-1-introduction.htm#RFC4511" class="link-internal">[RFC4511]</a> or OAuth <a href="mqtt-v50-1-introduction.htm#RFC6749" class="link-internal">[RFC6749]</a>
tokens, or leverage operating system authentication mechanisms.</p>
    <p class="MsoNormal"> </p>
    <p class="MsoNormal">MQTT v5.0 provides an enhanced authentication mechanism as
described in <a href="mqtt-v50-4-operational-behavior.htm#4.12-enhanced-authentication" class="link-internal">section 4.12</a>. Using this
requires support for it in both the Client and Server.</p>
    <p class="MsoNormal"> </p>
    <p class="MsoNormal">Implementations passing authentication data in clear text,
obfuscating such data elements or requiring no authentication data should be
aware this can give rise to Man-in-the-Middle and replay attacks. <a href="#5.4.5-privacy-app-messages-control-packets" class="link-internal">Section 5.4.5</a> introduces approaches to
ensure data privacy.</p>
    <p class="MsoNormal"> </p>
    <p class="MsoNormal">A Virtual Private Network (VPN) between the Clients and
Servers can provide confidence that data is only being received from authorized
Clients.</p>
    <p class="MsoNormal"> </p>
    <p class="MsoNormal">Where TLS <a href="mqtt-v50-1-introduction.htm#RFC5246" class="link-internal">[RFC5246]</a> is used, TLS
Certificates sent from the Client can be used by the Server to authenticate the
Client.</p>
    <p class="MsoNormal"> </p>
    <p class="MsoNormal">An implementation might allow for authentication where the
credentials are sent in an Application Message from the Client to the Server.</p>
    <div class="div_2">
      <p>
        <span class="span_3">Solace Implementation Note</span>
      </p>
      <p>
        <span class="span_4">A Solace server supports TLS/SSL Client Certificates, OAuth v2 (including OpenID Connect), LDAP, RADIUS, and internal database authentication to authenticate MQTT Clients. See the “User Name” section of this document for more information on authentication.</span>
      </p>
    </div>
    <h3><a name="5.4.2-authorization-clients-by-server"/>5.4.2 Authorization of Clients
by the Server</h3>
    <p class="MsoNormal">If
a Client has been successfully authenticated, a Server implementation should
check that it is authorized before accepting its connection. </p>
    <p class="MsoNormal"> </p>
    <p class="MsoNormal">Authorization may be based on information provided by the
Client such as User Name, the hostname/IP address of the Client, or the outcome
of authentication mechanisms. </p>
    <p class="MsoNormal"> </p>
    <p class="MsoNormal">In particular, the implementation should check that the
Client is authorized to use the Client Identifier as this gives access to the
MQTT Session State (described in <a href="mqtt-v50-4-operational-behavior.htm#4.1-session-state" class="link-internal">section 4.1</a>).
This authorization check is to protect against the case where one Client,
accidentally or maliciously, provides a Client Identifier that is already being
used by some other Client. </p>
    <p class="MsoNormal"> </p>
    <p class="MsoNormal">An implementation should provide access controls that take
place after CONNECT to restrict the Clients ability to publish to particular
Topics or to subscribe using particular Topic Filters. An implementation should
consider limiting access to Topic Filters that have broad scope, such as the #
Topic Filter.</p>
    <p class="MsoNormal"> </p>
    <div class="div_2">
      <p>
        <span class="span_3">Solace Implementation Note</span>
      </p>
      <p class="p_1">Solace ACLs are applied to MQTT Clients based on the MQTT User Name used to authenticate a connection. ACLs provide:</p>
      <ul>
        <li>Source IP-based connection access control. In the case of WebSocket, the X-Forwarded-For (XFF) HTTP header field (if present) is used to identify the originating IP address.</li>
        <li>Publisher access controls on a per-topic basis.</li>
        <li>Subscriber access controls on a per-topic basis.</li>
        <li>Subscriber access controls on a per-share-name basis for shared subscriptions.</li>
      </ul>
    </div>
    <h3><a name="5.4.3-authentication-server-by-client"/>5.4.3
Authentication of the Server by the Client</h3>
    <p class="MsoNormal">The MQTT protocol is not trust symmetrical. When using basic
authentication, there is no mechanism for the Client to authenticate the
Server. Some forms of extended authentication do allow for mutual
authentication.</p>
    <p class="MsoNormal"> </p>
    <p class="MsoNormal">Where TLS <a href="mqtt-v50-1-introduction.htm#RFC5246" class="link-internal">[RFC5246]</a> is used, TLS
Certificates sent from the Server can be used by the Client to authenticate the
Server. Implementations providing MQTT service for multiple hostnames from a
single IP address should be aware of the Server Name Indication extension to TLS
defined in section 3 of <a href="mqtt-v50-1-introduction.htm#RFC6066" class="link-internal">[RFC6066]</a>.This allows a Client
to tell the Server the hostname of the Server it is trying to connect to.</p>
    <p class="MsoNormal"> </p>
    <p class="MsoNormal">An implementation might allow for authentication where the
credentials are sent in an Application Message from the Server to the Client. MQTT
v5.0 provides an enhanced authentication mechanism as described in <a href="mqtt-v50-4-operational-behavior.htm#4.12-enhanced-authentication" class="link-internal">section 4.12</a>, which can be used to Authenticate
the Server to the Client. Using this requires support for it in both the Client
and Server.</p>
    <p class="MsoNormal"> </p>
    <p class="MsoNormal">A VPN between Clients and Servers can provide confidence
that Clients are connecting to the intended Server.</p>
    <h3><a name="5.4.4-integrity-app-messages-control-packets"/>5.4.4 Integrity of Application
Messages and MQTT Control Packets</h3>
    <p class="MsoNormal">Applications can independently include hash values in their
Application Messages. This can provide integrity of the contents of Publish packets
across the network and at rest. </p>
    <p class="MsoNormal"> </p>
    <p class="MsoNormal">TLS <a href="mqtt-v50-1-introduction.htm#RFC5246" class="link-internal">[RFC5246]</a>
provides hash algorithms to verify the integrity of data sent over the network.</p>
    <p class="MsoNormal"> </p>
    <p class="MsoNormal">The use of VPNs to connect Clients and Servers can provide
integrity of data across the section of the network covered by a VPN.</p>
    <h3><a name="5.4.5-privacy-app-messages-control-packets"/>5.4.5 Privacy of Application Messages and MQTT
Control Packets</h3>
    <p class="MsoNormal">TLS <a href="mqtt-v50-1-introduction.htm#RFC5246" class="link-internal">[RFC5246]</a> can provide encryption
of data sent over the network. There are valid TLS cipher suites that include a
NULL encryption algorithm that does not encrypt data. To ensure privacy Clients
and Servers should avoid these cipher suites.</p>
    <p class="MsoNormal"> </p>
    <p class="MsoNormal">An application might independently encrypt the contents of
its Application Messages. This could provide privacy of the Application Message
both over the network and at rest. This would not provide privacy for other Properties
of the Application Message such as Topic Name. </p>
    <p class="MsoNormal"> </p>
    <p class="MsoNormal">Client and Server implementations can provide encrypted
storage for data at rest such as Application Messages stored as part of a
Session.</p>
    <p class="MsoNormal"> </p>
    <p class="MsoNormal">The use of VPNs to connect Clients and Servers can provide
privacy of data across the section of the network covered by a VPN.</p>
    <h3><a name="5.4.6-non-repudiation-message-transmission"/>5.4.6 Proof of Delivery of message
transmission</h3>
    <p class="MsoNormal">Application designers might need to consider appropriate
strategies to achieve end to end Proof of Delivery.</p>
    <h3><a name="5.4.7-detecting-compromised-clients-servers"/>5.4.7 Detecting compromise of
Clients and Servers</h3>
    <p class="MsoNormal">Client and Server implementations using TLS <a href="mqtt-v50-1-introduction.htm#RFC5246" class="link-internal">[RFC5246]</a> should provide
capabilities to ensure that any TLS certificates provided when initiating a TLS connection are associated with the hostname of the
Client connecting or Server being connected to.</p>
    <p class="MsoNormal"> </p>
    <p class="MsoNormal">Client and Server implementations using TLS can choose to
provide capabilities to check Certificate Revocation Lists (CRLs<a href="mqtt-v50-1-introduction.htm#RFC5280" class="link-internal">[RFC5280]</a>) and Online Certificate Status Protocol (OSCP) <a href="mqtt-v50-1-introduction.htm#RFC6960" class="link-internal">[RFC6960]</a> 
to prevent revoked certificates from being used.</p>
    <p class="MsoNormal"> </p>
    <p class="MsoNormal">Physical deployments might combine tamper-proof hardware
with the transmission of specific data in Application Messages. For example, a
meter might have an embedded GPS to ensure it is not used in an unauthorized
location.
 <a href="mqtt-v50-1-introduction.htm#IEEE8021AR" class="link-internal">[IEEE8021AR]</a> is a standard for implementing
mechanisms to authenticate a device’s identity using a cryptographically bound
identifier.</p>
    <h3><a name="5.4.8-detecting-abnormal-behaviors"/>5.4.8 Detecting abnormal
behaviors</h3>
    <p class="MsoNormal">Server implementations might monitor Client behavior to
detect potential security incidents. For example:</p>
    <ul>
      <li>Repeated connection attempts</li>
      <li>Repeated authentication attempts</li>
      <li>Abnormal termination of connections</li>
      <li>Topic scanning (attempts to send or subscribe to many topics)</li>
      <li>Sending undeliverable messages (no subscribers to the topics)</li>
      <li>Clients that connect but do not send data</li>
    </ul>
    <p class="MsoNormal"> </p>
    <p class="MsoNormal"><a name="_Toc473620337"/>Server implementations might close
the Network Connection of Clients that breach its security rules.</p>
    <p class="MsoNormal"> </p>
    <p class="MsoNormal">Server implementations detecting unwelcome behavior might
implement a dynamic block list based on identifiers such as IP address or Client
Identifier.</p>
    <p class="MsoNormal"> </p>
    <p class="MsoNormal">Deployments might use network-level controls (where
available) to implement rate limiting or blocking based on IP address or other
information.</p>
    <h3><a name="5.4.9-handlind-disallowed-unicode-codepoints"/>5.4.9 Handling of Disallowed Unicode code
points</h3>
    <p class="MsoNormal"><a href="mqtt-v50-1-introduction.htm#1.5.4-utf-8-encoded-string" class="link-internal">Section 1.5.4</a> describes the
Disallowed Unicode code points, which should not be included in a UTF-8 Encoded
String. A Client or Server implementation can choose whether to validate that
these code points are not used in UTF-8 Encoded Strings such as the Topic Name
or Properties.</p>
    <p class="MsoNormal"> </p>
    <p class="MsoNormal">If the Server does not validate the code points in a UTF-8
Encoded String but a subscribing Client does, then a second Client might be
able to cause the subscribing Client to close the Network Connection by
publishing on a Topic Name or using Properties that contain a Disallowed
Unicode code point. This section recommends some steps that can be taken to
prevent this problem.</p>
    <p class="MsoNormal"> </p>
    <p class="MsoNormal">A similar problem can occur when the Client validates that
the payload matches the Payload Format Indicator and the Server does not.  The
considerations and remedies for this are similar to those for handling
Disallowed Unicode code points.</p>
    <h4><a name="5.4.9.1-considerations-disallowed-unicode-codepoints"/>5.4.9.1 Considerations for the use of Disallowed Unicode
code points</h4>
    <p class="MsoNormal">An implementation would normally choose to validate UTF-8
Encoded strings, checking that the Disallowed Unicode code points are not used.
This avoids implementation difficulties such as the use of libraries that are
sensitive to these code points, it also protects applications from having to
process them. </p>
    <p class="MsoNormal"> </p>
    <p class="MsoNormal">Validating that these code points are not used removes some
security exposures. There are possible security exploits which use control
characters in log files to mask entries in the logs or confuse the tools which
process log files.  The Unicode Noncharacters are commonly used as special
markers and allowing them into UTF-8 Encoded Strings could permit such
exploits.  </p>
    <h4><a name="5.4.9.2-interactions-between-publishers-subscribers"/>5.4.9.2 Interactions between
Publishers and Subscribers</h4>
    <p class="MsoNormal">The publisher of an Application Message normally expects
that the Servers will forward the message to subscribers, and that these
subscribers are capable of processing the messages.</p>
    <p class="MsoNormal">These are some conditions under which a publishing Client
can cause the subscribing Client to close the Network Connection. Consider a
situation where: </p>
    <ul>
      <li>A Client publishes an Application Message using a Topic Name
containing one of the Disallowed Unicode code points. </li>
      <li>The publishing Client library allows the Disallowed Unicode code
point to be used in a Topic Name rather than rejecting it.</li>
      <li>The publishing Client is authorized to send the publication.</li>
      <li>A subscribing Client is authorized to use a Topic Filter which
matches the Topic Name. Note that the Disallowed Unicode code point might occur
in a part of the Topic Name matching a wildcard character in the Topic Filter.</li>
      <li>The Server forwards the message to the matching subscriber rather
than disconnecting the publisher. </li>
      <li>In this case the subscribing Client might: <ul><li>Close the Network Connection because it does not allow the use of
Disallowed Unicode code points, possibly sending a DISCONNECT before doing so. 
For QoS 1 and QoS 2 messages this might cause the Server to send the message
again, causing the Client to close the Network Connection again.</li><li>Reject the Application Message by sending a Reason Code greater
than or equal to 0x80 in a PUBACK (QoS 1) or PUBREC (QoS 2). </li><li>Accept the Application Message but fail to process it because it
contains one of the Disallowed Unicode code points. </li><li>Successfully process the Application Message.</li></ul></li>
    </ul>
    <p class="MsoNormal"> </p>
    <p class="MsoNormal">The potential for the Client to close the Network Connection
might go unnoticed until a publisher uses one of the Disallowed Unicode code
points. </p>
    <h4><a name="5.4.9.3-remedies"/>5.4.9.3 Remedies</h4>
    <p class="MsoNormal">If there is a possibility that a Disallowed Unicode code
point could be included in a Topic Name or other Properties delivered to a
Client, the solution owner can adopt one of the following suggestions:</p>
    <ol>
      <li>Change the
Server implementation to one that rejects UTF-8 Encoded Strings containing a
Disallowed Unicode code point either by sending a Reason Code greater than or
equal to 0x80 or closing the Network Connection.</li>
      <li>Change the
Client library used by the subscribers to one that tolerates the use of
Disallowed Code points. The client can either process or discard messages with
UTF-8 Encoded Strings that contain Disallowed Unicode code points so long as it
continues the protocol.</li>
    </ol>
    <h3><a name="5.4.10-other-security-considerations"/>5.4.10 Other security
considerations</h3>
    <p class="MsoNormal">If Client or Server TLS certificates are lost or it is
considered that they might be compromised they should be revoked (utilizing
CRLs <a href="mqtt-v50-1-introduction.htm#RFC5280" class="link-internal">[RFC5280]</a> and/or OSCP <a href="mqtt-v50-1-introduction.htm#RFC6960" class="link-internal">[RFC6960]</a>).</p>
    <p class="MsoNormal"> </p>
    <p class="MsoNormal">Client or Server authentication credentials, such as User
Name and Password, that are lost or considered compromised should be revoked
and/or reissued.</p>
    <p class="MsoNormal"> </p>
    <p class="MsoNormal">In the case of long lasting connections:</p>
    <ul>
      <li>Client and Server implementations using TLS <a href="mqtt-v50-1-introduction.htm#RFC5246" class="link-internal">[RFC5246]</a>
should allow for session renegotiation to establish new cryptographic
parameters (replace session keys, change cipher suites, change authentication
credentials).</li>
      <li>Servers may close the Network Connection of Clients and require
them to re-authenticate with new credentials. </li>
      <li>Servers may require their Client to reauthenticate periodically
using the mechanism described in <a href="mqtt-v50-4-operational-behavior.htm#4.12.1-re-authentication" class="link-internal">section 4.12.1</a>.</li>
    </ul>
    <p class="MsoNormal"> </p>
    <p class="MsoNormal">Constrained devices and Clients on constrained networks can
make use of TLS <a href="mqtt-v50-1-introduction.htm#RFC5246" class="link-internal">[RFC5246]</a> session resumption, in order
to reduce the costs of reconnecting TLS <a href="mqtt-v50-1-introduction.htm#RFC5246" class="link-internal">[RFC5246]</a>
sessions.</p>
    <p class="MsoNormal"> </p>
    <p class="MsoNormal">Clients connected to a Server have a transitive trust
relationship with other Clients connected to the same Server and who have
authority to publish data on the same topics.</p>
    <h3><a name="5.4.11-use-of-socks"/>5.4.11 Use of SOCKS</h3>
    <p class="MsoNormal">Implementations of Clients should be aware that some
environments will require the use of SOCKSv5 <a href="mqtt-v50-1-introduction.htm#RFC1928" class="link-internal">[RFC1928]</a>
proxies to make outbound Network Connections. Some MQTT implementations could
make use of alternative secured tunnels (e.g. SSH) through the use of SOCKS.
Where implementations choose to use SOCKS, they should support both anonymous
and User Name, Password authenticating SOCKS proxies. In the latter case,
implementations should be aware that SOCKS authentication might occur in
plain-text and so should avoid using the same credentials for connection to a
MQTT Server.</p>
    <h3><a name="5.4.12-security-profiles"/>5.4.12 Security profiles</h3>
    <p class="MsoNormal">Implementers and solution designers might wish to consider
security as a set of profiles which can be applied to the MQTT protocol. An
example of a layered security hierarchy is presented below.</p>
    <p class="MsoNormal"> </p>
    <h4><a name="5.4.12.1-clear-communication-profile"/>5.4.12.1 Clear communication
profile</h4>
    <p class="MsoNormal">When using the clear communication profile, the MQTT
protocol runs over an open network with no additional secure communication
mechanisms in place.</p>
    <p class="MsoNormal"> </p>
    <h4><a name="5.4.12.2-secured-network-communication-profile"/>5.4.12.2 Secured network
communication profile</h4>
    <p class="MsoNormal">When using the secured network communication profile, the
MQTT protocol runs over a physical or virtual network which has security
controls e.g., VPNs or physically secure network.</p>
    <p class="MsoNormal"> </p>
    <h4><a name="5.4.12.3-secured-transport-profile"/>5.4.12.3 Secured transport
profile</h4>
    <p class="MsoNormal">When using the secured transport profile, the MQTT protocol
runs over a physical or virtual network and using TLS <a href="mqtt-v50-1-introduction.htm#RFC5246" class="link-internal">[RFC5246]</a>
which provides authentication, integrity and privacy.</p>
    <p class="MsoNormal"> </p>
    <p class="MsoNormal">TLS <a href="mqtt-v50-1-introduction.htm#RFC5246" class="link-internal">[RFC5246]</a> Client authentication
can be used in addition to – or in place of – MQTT Client authentication as
provided by the User Name and Password fields.</p>
    <h4><a name="5.4.12.4-industry-specific-security-profiles"/>5.4.12.4 Industry specific security
profiles</h4>
    <p class="MsoNormal">It is anticipated that the MQTT protocol will be designed
into industry specific application profiles, each defining a threat model and
the specific security mechanisms to be used to address these threats. Recommendations
for specific security mechanisms will often be taken from existing works
including:</p>
    <p class="MsoNormal"> </p>
    <p class="MsoNormal" style="margin: 0in;margin-bottom: .0001pt;"><a href="mqtt-v50-1-introduction.htm#NISTCSF" class="link-internal">[NISTCSF]</a> NIST
Cyber Security Framework</p>
    <p class="MsoNormal" style="margin: 0in;margin-bottom: .0001pt;"><a href="mqtt-v50-1-introduction.htm#NIST7628" class="link-internal">[NIST7628]</a> NISTIR
7628 Guidelines for Smart Grid Cyber Security</p>
    <p class="MsoNormal" style="margin: 0in;margin-bottom: .0001pt;"><a href="mqtt-v50-1-introduction.htm#FIPS1402" class="link-internal">[FIPS1402]</a> Security
Requirements for Cryptographic Modules (FIPS PUB 140-2)</p>
    <p class="MsoNormal" style="margin: 0in;margin-bottom: .0001pt;"><a href="mqtt-v50-1-introduction.htm#PCIDSS" class="link-internal">[PCIDSS]</a> PCI-DSS
Payment Card Industry Data Security Standard</p>
    <p class="MsoNormal" style="margin: 0in;margin-bottom: .0001pt;"><a href="mqtt-v50-1-introduction.htm#NSAB" class="link-internal">[NSAB]</a> NSA
Suite B Cryptography</p>
  </body>
</html>
