<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
  <head>
    <link href="../../Resources/TableStyles/Table_Num.css" rel="stylesheet" MadCap:stylesheetType="table"/>
  </head>
  <body>
    <h1>Code and Compile Guidelines</h1>
    <p>As you start creating and updating your application code, consider the following guidelines for the messaging API that you are using:</p>
    <p style="font-weight: bold;">JCSMP </p>
    <ul>
      <li>To begin working with JCSMP , import the required packages: <code>com.solacesystems.jcsmp.*</code></li>
    </ul>
    <p class="Note">The Solace JCSMP  requires the use of standard Java distribution <MadCap:variable name="Minimum-Supported-Component-Versions.Java Distribution"/> or greater.</p>
    <p style="font-weight: bold;">Java RTO API</p>
    <ul>
      <li>To begin working with the Java RTO API, import the required packages: <code>com.solacesystems.solclientj.*</code></li>
    </ul>
    <p class="Note">The Solace Java RTO API requires the use of standard Java distribution <MadCap:variable name="Minimum-Supported-Component-Versions.Java Distribution"/> or greater.</p>
    <p style="font-weight: bold;">C API</p>
    <ul>
      <li>Ensure that you include all relevant <code>SolClient</code> header files. For a list of all required header files, refer to <MadCap:xref href="../../API-Developer-Online-Ref-Documentation/c/index.html">C API Developer Reference</MadCap:xref>.        <p class="Note">Windows developers should include windows.h before the “include solClient.h” statement. If <code>windows.h</code> is not included, then <code>winsock2.h</code> MUST be included before <code>solClient.h</code>.</p></li>
      <li>Examine the sample application code provided in the <code>ex</code> directory to ensure that you use the correct compile and link flags to build your application.</li>
      <li>The Windows distribution includes Visual Studio 2015 Solution and project files to make it easy to compile the sample codes. Support for other versions of Visual Studio is provided, though only Visual Studio 2015 and above is supported for C API 7.15.0+. For more information, <a href="../../get-support.htm" class="link-internal">contact Solace</a>. </li>
      <li>The sample Makefile and Visual  Studio 2015 Solution define the macro <code>SOLCLIENT_CONST_PROPERTIES</code>. The use of this macro is recommended for accurate type checking on property arrays passed to all <code>solClient_xxx_create()</code> methods.</li>
      <li>For UNIX or Linux systems, ensure that your application linker (typically ‘<code>ld</code>’) points to the <code>libsolclient.so</code> library file and not any versioned <code>*.so</code> files found in the <code>lib</code> directory.</li>
      <li>The iOS distribution includes an Xcode project in the <code>ex</code> directory. The sample application must be compiled from this project. It is recommended to look at this sample project to understand how to link the C API with your application.</li>
      <li>The C API distributions for Windows and macOS come bundled with OpenSSL. These OpenSSL binaries are for developer convenience only and should not be used in production environments. The C API distributions for Linux do not come with OpenSSL.</li>
    </ul>
    <p style="font-weight: bold;">.NET API</p>
    <ul>
      <li>To begin working with the .NET API, import the <a href="https://www.nuget.org/packages/SolaceSystems.Solclient.Messaging" class="link-offsite"><MadCap:variable name="Variables.CompanyName"/> .NET API NuGet package</a> using your package manager of choice and include the following namespace in your application:<pre xml:space="preserve">
using SolaceSystems.Solclient.Messaging;		</pre></li>
    </ul>
    <ul>
      <li MadCap:conditions="Default.HideFromAllOutput">
        <code>lib/SolaceSystems.Solclient.Messaging.dll</code>
        <ul>
          <li MadCap:conditions="Default.HideFromAllOutput">The platform target for this assembly is x86</li>
          <li MadCap:conditions="Default.HideFromAllOutput">At runtime, it requires libsolclient.dll (x86 native dll) to be in the path</li>
          <li MadCap:conditions="Default.HideFromAllOutput">It has the same strong name as <code>lib/64/SolaceSystems.Solclient.Messaging.dll</code></li>
        </ul>
      </li>
      <li MadCap:conditions="Default.HideFromAllOutput">
        <code>lib/64/SolaceSystems.Solclient.Messaging.dll</code>
        <ul>
          <li MadCap:conditions="Default.HideFromAllOutput">The platform target for this assembly is x64.</li>
          <li MadCap:conditions="Default.HideFromAllOutput">At runtime it requires <code>libsolclient_64.dll</code> (x64 native dll) to be in the path.</li>
          <li MadCap:conditions="Default.HideFromAllOutput">It has the same strong name as <code>lib/SolaceSystems.Solclient.Messaging.dll</code>.</li>
        </ul>
      </li>
      <li MadCap:conditions="Default.HideFromAllOutput"><code>lib/SolaceSystems.Solclient.Messaging_64.dll</code>.<ul><li MadCap:conditions="Default.HideFromAllOutput">The platform target for this assembly is x64.</li><li MadCap:conditions="Default.HideFromAllOutput">At runtime, it requires <code>libsolclient_64.dll</code> (x86 native dll) to be in the path.</li><li MadCap:conditions="Default.HideFromAllOutput">It has a different strong name than the rest of the bundled assemblies.</li><li MadCap:conditions="Default.HideFromAllOutput">When compiling/building against this assembly: the Target Platform of the executable must be x64 (in this case the executable will only run on a 64-bit machine); setting the executable’s Target Platform to Any CPU will produce an executable that can only run on a 64-bit machine.</li></ul></li>
    </ul>
    <ul>
      <p class="Note" MadCap:conditions="Default.HideFromAllOutput">To build one executable that is able to run as a 32-bit process on a 32-bit machine and as a 64-bit process on a 64-bit machine (without WOW64), do the following:</p>
      <ul>
        <li MadCap:conditions="Default.HideFromAllOutput">Select Any CPU as a Target Platform for the executable.</li>
        <li MadCap:conditions="Default.HideFromAllOutput">Reference <code>lib/64/SolaceSystems.Solclient.Messaging.dll</code> or <code>lib/SolaceSystems.Solclient.Messaging.dll</code>. </li>
        <li MadCap:conditions="Default.HideFromAllOutput">When deploying the executable on a 32-bit machine, make sure to bundle with it <code>lib/SolaceSystems.Solclient.Messaging.dll</code> and <code>lib/libsolclient.dll</code>.</li>
        <li MadCap:conditions="Default.HideFromAllOutput">When deploying the executable on a 64-bit machine, make sure to bundle with it <code>lib/64/SolaceSystems.Solclient.Messaging.dll</code> and <code>lib/libsolclient_64.dll</code>.<a name="More-Guidelines"/></li>
      </ul>
    </ul>
    <p style="font-weight: bold;">JavaScript Messaging API</p>
    <p>You can use several different variations of the JavaScript Messaging API. The differences between each variation include the available log levels and whether the API is minified. </p>
    <p>Minified variations are both smaller and optimized for performance. However, because the available log levels are reduced, debugging these variations can be more difficult. For more information about log levels, see <MadCap:xref href="../API-Developer-Guide/Configuring-Logging.htm">Configuring Logging</MadCap:xref>.</p>
    <p>The following table summarizes the available JavaScript Messaging API variations. </p>
    <table style="width: 100%; mc-table-style: url('../../Resources/TableStyles/Table_Num.css'); margin-left: 0; margin-right: auto;" class="TableStyle-Table_Num" cellspacing="0">
      <caption>JavaScript Messaging API Variations</caption>
      <col class="TableStyle-Table_Num-Column-Column1"/>
      <col class="TableStyle-Table_Num-Column-Column1"/>
      <col class="TableStyle-Table_Num-Column-Column1"/>
      <thead>
        <tr class="TableStyle-Table_Num-Head-Header1">
          <th class="TableStyle-Table_Num-HeadE-Column1-Header1">Variation</th>
          <th class="TableStyle-Table_Num-HeadE-Column1-Header1">Minified</th>
          <th class="TableStyle-Table_Num-HeadD-Column1-Header1">Available Log Levels</th>
        </tr>
      </thead>
      <tbody>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">Production</td>
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">Yes</td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1"><code>INFO</code>, <code>WARN</code>,<code> ERROR</code>, <code>FATAL</code></td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">Full</td>
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">No</td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1"><code>INFO</code>, <code>WARN</code>, <code>ERROR</code>, <code>FATAL</code></td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyB-Column1-Body1">Debug</td>
          <td class="TableStyle-Table_Num-BodyB-Column1-Body1">No</td>
          <td class="TableStyle-Table_Num-BodyA-Column1-Body1">All</td>
        </tr>
      </tbody>
    </table>
    <p>To load a JavaScript Messaging API variation, add one of the following statements to the entry point of your application (usually in the <code>&lt;head&gt;</code> section):</p>
    <ul>
      <li><code>&lt;script src="solclient.js"&gt;&lt;/script&gt;</code> for the production variation.</li>
      <li><code>&lt;script src="solclient-full.js"&gt;&lt;/script&gt;</code> for the full variation. </li>
      <li><code>&lt;script src="solclient-debug.js"&gt;&lt;/script&gt;</code> for the debug variation. </li>
    </ul>
    <p>The JavaScript Messaging API exports all its functionality through the global solace object. <MadCap:conditionalText MadCap:conditions="Default.HideFromAllOutput">No base system objects are extended or modified.</MadCap:conditionalText></p>
    <p>3rd party library core-js is used is for polyfill browsers and Node.js.</p>
    <p>In addition, the  JavaScript Messaging API uses timers to send keep alive messages at regular intervals to the event broker. If a client application is only receiving messages, the event broker then relies on the receipt of these keep alive messages to determine the health of that client. However, Internet Explorer suspends its JavaScript timers when a modal dialog window is open, which prevents the API from sending the keep alive messages to the event broker. Therefore, if a modal dialog window in Internet Explorer remains open for longer than the configured inactivity period, the event broker will not receive the required keep alive message, and it will disconnect the client.</p>
    <p>To prevent this scenario, avoid using modal dialog boxes in Internet Explorer, or, when their use is necessary, you may configure longer Web transport client inactivity timeouts (refer to <MadCap:xref href="../../Security/Configuring-Client-Profiles.htm#Config-Inactive-Timeouts">Configuring Inactivity Timeouts</MadCap:xref>).</p>
    <p style="font-weight: bold;">Node.js API</p>
    <p>You can use several different variations of the Node.js API. The differences between each variation include the available log levels and whether the API is minified. </p>
    <p>Minified variations are both smaller and optimized for performance. However, because the available log levels are reduced, debugging these variations can be more difficult. For more information about log levels, see <MadCap:xref href="../API-Developer-Guide/Configuring-Logging.htm">Configuring Logging</MadCap:xref>.</p>
    <p>The following table summarizes the available Node.js API variations. </p>
    <table style="width: 100%; mc-table-style: url('../../Resources/TableStyles/Table_Num.css'); margin-left: 0; margin-right: auto;" class="TableStyle-Table_Num" cellspacing="0">
      <caption>Node.js API Variations</caption>
      <col class="TableStyle-Table_Num-Column-Column1"/>
      <col class="TableStyle-Table_Num-Column-Column1"/>
      <col class="TableStyle-Table_Num-Column-Column1"/>
      <thead>
        <tr class="TableStyle-Table_Num-Head-Header1">
          <th class="TableStyle-Table_Num-HeadE-Column1-Header1">Variation</th>
          <th class="TableStyle-Table_Num-HeadE-Column1-Header1">Minified</th>
          <th class="TableStyle-Table_Num-HeadD-Column1-Header1">Available Log Levels</th>
        </tr>
      </thead>
      <tbody>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">Production</td>
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">Yes</td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1"><code>INFO</code>, <code>WARN</code>,<code> ERROR</code>, <code>FATAL</code></td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">Full</td>
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">No</td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1"><code>INFO</code>, <code>WARN</code>, <code>ERROR</code>, <code>FATAL</code></td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyB-Column1-Body1">Debug</td>
          <td class="TableStyle-Table_Num-BodyB-Column1-Body1">No</td>
          <td class="TableStyle-Table_Num-BodyA-Column1-Body1">All</td>
        </tr>
      </tbody>
    </table>
    <p>To load a Node.js API variation, add one of the following statements to the entry point of your application:</p>
    <ul>
      <li><code>var solace = require ("solclientjs").production;</code>.</li>
      <li><code>var solace = require ("solclientjs").full;</code>. </li>
      <li><code>var solace = require ("solclientjs").debug;</code>.</li>
    </ul>
    <h2 class="with-rule"><a name="Addition"/>Guidelines for Secure Connections and Authentication</h2>
    <p>The following requirements must also be met to successfully code and compile an application that will use TLS/SSL client connections, client certificate authentication, or Kerberos authentication schemes.</p>
    <h3>JCSMP Messaging API</h3>
    <p>The JCSMP messaging API requires the use of standard Java distribution <MadCap:variable name="Minimum-Supported-Component-Versions.Java Distribution"/>  or greater, which includes Java Secure Socket Extension (JSSE) APIs.</p>
    <h4>Kerberos Libraries</h4>
    <p>If your application will use a Kerberos client authentication scheme, the Kerberos libraries in the JVM are used by default. However, if you want to use Kerberos libraries other than those provided by the JVM, add the following system properties. In this case, the Kerberos libraries in the default OS library directory will be used.</p>
    <pre>-Dsun.security.jgss.native=true
-Djavax.security.auth.useSubjectCredsOnly=false</pre>
    <p>You can also add the following system property to provide the path to Kerberos libraries located in a location other than the default OS library directory:</p>
    <pre>-Dsun.security.jgss.lib=&lt;file path to Kerberos library&gt;</pre>
    <h3>Java RTO, C, and .NET Messaging APIs</h3>
    <p>The Java RTO, C, and .NET APIs support both TLS/SSL security libraries and Kerberos security libraries. (The names of these packages are operating system dependent.)</p>
    <h4>TLS/SSL Libraries</h4>
    <p>To allow programmers to quickly develop client applications that create secure connections to event brokers, OpenSSL libraries (including the crypto library) are bundled with the APIs in <code>.a</code> and <code>.so</code> versions (Linux), <code>.lib</code> and <code>.dll </code>versions (Windows), and in <code>.a</code> and <code>.dylib</code> versions (macOS). These libraries allow developers to prototype and test TLS/SSL-encrypted client connections.</p>
    <p class="Note">The provided libraries are distributed for developers’ convenience and are not endorsed for distribution in a production network. Consult with your Network Operations Center to obtain your organization’s latest secure TLS/SSL packages. OpenSSL distributions can be found at <a href="http://www.openssl.org/" class="link-internal">www.openssl.org</a>.</p>
    <h4>Kerberos Libraries</h4>
    <p>To develop client applications to use Kerberos authentication, the appropriate Generic Security Service Application Program Interface (GSSAPI) library files must be installed on the development system and on systems that will run the applications. GSSAPI libraries are not bundled with the APIs.</p>
    <p>Note that when using the C API, the GSSAPI libraries to use when running on Linux or Solaris systems are set through the <code>SOLCLIENT_GLOBAL_PROP_GSS_KRB_LIB</code> property. If you do not want to use the defined default library, you can change the library specified for this global property.</p>
    <p>To successfully link TLS/SSL security libraries or Kerberos security libraries when building your application using the Java RTO, C, and .NET APIs, refer to the following sections:</p>
    <ul>
      <li>
        <MadCap:xref href="#quick_start_3578404598_258917">Recommended Methods for Linking with Security Libraries</MadCap:xref>
      </li>
      <li>
        <MadCap:xref href="#quick_start_3578404598_258962">Alternate Method to Dynamically Link Linux/SunOS/Solaris Applications</MadCap:xref>
      </li>
      <li>
        <MadCap:xref href="#quick_start_3578404598_258971">Static Linking with Security Libraries</MadCap:xref>
      </li>
    </ul>
    <h3><a name="quick_start_3578404598_258917"/>Recommended Methods for Linking with Security Libraries</h3>
    <p>The following tables provide information for dynamically linking TLS/SSL libraries and  Kerberos libraries with Windows, Linux, and SunOS/Solaris applications.</p>
    <table class="TableStyle-Table_Num" style="caption-side: top;mc-table-style: url('../../Resources/TableStyles/Table_Num.css');width: 95%;" cellspacing="0">
      <caption valign="top" style="padding-bottom: 3pt;">
        <p class="TblCaption">Dynamically Linking TLS/SSL Libraries</p>
      </caption>
      <thead>
        <tr class="TableStyle-Table_Num-Head-Header1">
          <th class="TableStyle-Table_Num-HeadE-Column1-Header1">Applications Using...</th>
          <th class="TableStyle-Table_Num-HeadD-Column1-Header1">Description</th>
        </tr>
      </thead>
      <tbody>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">Windows<br/>(Java RTO, C, and .NET APIs)</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <ul>
              <li>The Java RTO can only use dynamically linked libraries.</li>
              <li>Whether applications are dynamically linked against <code>libsolclient.dll</code> (the 32‑bit library) or <code>libsolclient_64.dll</code> (the 64-bit library), or they are statically linked against <code>libsolclientStatic.lib</code> (the 32‑bit library) or <code>libsolclient_64Static.lib</code> (the 64-bit library), they must have <code>libeay32.dll</code> and <code>ssleay32.dll</code> available at runtime. Both 32-bit and 64-bit Windows versions of these libraries are included with the C and .NET API distributions to make testing and development easier. When developing your application, ensure that the correct 32-bit versions or 64‑bit versions of <code>libeay32.dll</code> and <code>ssleay32.dll</code> are used when you are testing and deploying.</li>
              <li>When using Visual Studio, it is not necessary to modify your Visual Studio project because <code>libsolclient</code> dynamically loads the libraries as needed. Applications that do not use TLS/SSL features of <code>libsolclient</code> do not need to deploy the OpenSSL libraries.</li>
              <li>The latest Windows libraries for OpenSSL can be found at <code>https://wiki.openssl.org/index.php/Binaries</code>.</li>
            </ul>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">Linux<br/>(Java RTO and C APIs)</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <ul>
              <li>The Java RTO API can only use dynamically linked libraries.</li>
              <li>Whether applications are dynamically linked against <code>libsolclient.so</code> or statically linked against <code>libsolclient.a</code>, they should be built against the TLS/SSL dynamic libraries <code>libssl.so</code> and <code>libcrypto.so </code>to create an application with a dynamic dependency on <code>libssl.so</code> and <code>libcrypto.so</code>. To create this dependency, in the link-edit command (<code>/usr/bin/ld</code>) of your build process, add <code>-lssl -lcrypto</code> to the command line. Your system’s run-time linker will ensure the proper library is linked with your application at run-time. To verify the run-time dependency, execute the command <code>/usr/bin/ldd &lt;application-executable-name&gt;</code>.</li>
              <li>When your run your application, the TLS/SSL dynamic libraries <code>libssl.so</code> and <code>libcrypto.so</code> must be found in the path defined by the environment variable <code>LD_LIBRARY_PATH</code>.</li>
            </ul>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyB-Column1-Body1">
            <p class="Tbl_Body">SunOS/Solaris<br/>(C API only)</p>
          </td>
          <td class="TableStyle-Table_Num-BodyA-Column1-Body1">
            <ul>
              <li>TLS/SSL is not supported by <code>libsolclient</code> on SunOS or Solaris.</li>
            </ul>
          </td>
        </tr>
      </tbody>
    </table>
    <p class="Spacer_-_smallest">
      <table class="TableStyle-Table_Num" style="caption-side: top;mc-table-style: url('../../Resources/TableStyles/Table_Num.css');width: 95%;" cellspacing="0">
        <caption valign="top" style="padding-bottom: 3pt;">
          <p class="TblCaption">Dynamically Linking Kerberos Libraries</p>
        </caption>
        <thead>
          <tr class="TableStyle-Table_Num-Head-Header1">
            <th class="TableStyle-Table_Num-HeadE-Column1-Header1">Applications Using...</th>
            <th class="TableStyle-Table_Num-HeadD-Column1-Header1">Description</th>
          </tr>
        </thead>
        <tbody>
          <tr class="TableStyle-Table_Num-Body-Body1">
            <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
              <p class="Tbl_Body">Windows<br/>(Java RTO, C, and .NET APIs)</p>
            </td>
            <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
              <ul>
                <li>The Java RTO API can only use dynamically linked libraries.</li>
                <li>Whether applications are dynamically or statically linked against <code>libsolclient.lib</code>, they must have <code>secur32.dll</code> available at runtime. This library is included as part of your operating system distribution and there is no action required to add it.</li>
                <li>It is not necessary to modify your Visual Studio project because <code>libsolclient</code> dynamically loads the libraries as needed.</li>
              </ul>
            </td>
          </tr>
          <tr class="TableStyle-Table_Num-Body-Body1">
            <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
              <p class="Tbl_Body">Linux (Java RTO and C APIs)</p>
            </td>
            <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
              <ul>
                <li>The Java RTO API can only use dynamically linked libraries.</li>
                <li>Whether applications are dynamically linked against <code>libsolclient.so</code>, or statically linked against <code>libsolclient.a</code>, they should be built against the Kerberos/GSS dynamic library <code>libgssapi_krb5.so</code> to create an application with a dynamic dependency on <code>libgssapi_krb5.so</code>. To create this dependency, in the link-edit command (<code>/usr/bin/ld</code>) of your build process, add <code>-lgssapi_krb5</code> to the command line. Your system’s run-time linker will ensure the proper library is linked with your application at run-time. To verify the run-time dependency, execute the command <code>/usr/bin/ldd &lt;application-executable-name&gt;</code>. </li>
                <li>When your run your application, the Kerberos dynamic library <code>libgssapi_krb5.so</code> must be found in the path defined by the environment variable <code>LD_LIBRARY_PATH</code>.</li>
              </ul>
            </td>
          </tr>
          <tr class="TableStyle-Table_Num-Body-Body1">
            <td class="TableStyle-Table_Num-BodyB-Column1-Body1">
              <p class="Tbl_Body">SunOS/Solaris <br/>(C API only)</p>
            </td>
            <td class="TableStyle-Table_Num-BodyA-Column1-Body1">
              <ul>
                <li>Whether applications are dynamically linked against <code>libsolclient.so</code> or statically linked against <code>libsolclient.a</code>, they should be built against the Kerberos/GSS dynamic library <code>mech_krb5.so</code> to create an application with a dynamic dependency on <code>mech_krb5.so</code>. To create this dependency, in the link-edit command (<code>/usr/bin/ld</code>) of your build process, add <code>-lmech_krb5</code> to the command line. Your system's run-time linker will ensure the proper library is linked with your application at run-time. To verify the run-time dependency, execute the command <code>/usr/bin/ldd &lt;application-executable-name&gt;</code>.</li>
                <li>When your run your application, the Kerberos dynamic library <code>mech_krb5.so</code> must be found in the path defined by the environment variable <code>LD_LIBRARY_PATH</code>.</li>
              </ul>
              <MadCap:snippetBlock src="../../Resources/Snippets/C-Solaris-Deprecated.flsnp"/>
            </td>
          </tr>
        </tbody>
      </table>
    </p>
    <h3><a name="quick_start_3578404598_258962"/>Alternate Method to Dynamically Link Linux/SunOS/Solaris Applications</h3>
    <p id="ww258964">When you build an application as recommended above, it will have a run-time dependency on the required security libraries. If you are using TLS/SSL, this can be verified with <code>/usr/bin/ldd</code>. If you are using Kerberos, the library pointed to the <code>SOLCLIENT_GLOBAL_PROP_GSS_KRB_LIB</code> property will be dynamically loaded at runtime.</p>
    <p> When you build an application as recommended above, it also means that the applications will not run on systems where the required libraries are not present. This is not typically an issue because all of the libraries used are automatically deployed in operating system installations. </p>
    <p>However, in some cases, you may want to build one binary application that can run when the security libraries are not present as long as features that require these libraries are not used. This is possible and may be simpler for upgrading customers as you do not need to modify your existing build procedure. </p>
    <p>If you do not include any extra libraries (other than <code>libsolclient.so</code> or <code>libsolclient.a</code>) in your link-edit step, your application will not have any run-time dependencies. However, <code>libsolclient</code> itself will still attempt to dynamically load the required libraries at run-time if session properties indicates TLS/SSL or GSS is necessary.</p>
    <MadCap:snippetBlock src="../../Resources/Snippets/C-Solaris-Deprecated.flsnp"/>
    <h3><a name="quick_start_3578404598_258971"/>Static Linking with Security Libraries</h3>
    <p>On all operating systems, security libraries may be statically linked with your application when it is built. This is not recommended, as it requires rebuilding or redeploying your Solace application whenever you need to update the security subsystem. It may be useful to deploy an application on target platforms that do not have the required libraries, or the desired versions of the libraries are not present.</p>
    <p class="Note">The Windows Kerberos interface, which is included in <code>secur32.dll</code>, does not have static library equivalent, and the Kerberos library may not be statically linked into Linux or SunOS/Solaris applications.</p>
    <p>The following table provides information for statically linking TLS/SSL libraries with Windows, Linux, and SunOS/Solaris applications. </p>
    <table class="TableStyle-Table_Num" style="caption-side: top;mc-table-style: url('../../Resources/TableStyles/Table_Num.css');width: 95%;" cellspacing="0">
      <caption valign="top" style="padding-bottom: 3pt;">
        <p class="TblCaption">Statically Linking TLS/SSL Libraries</p>
      </caption>
      <thead>
        <tr class="TableStyle-Table_Num-Head-Header1">
          <th class="TableStyle-Table_Num-HeadE-Column1-Header1">
                        Applications Using...
                    </th>
          <th class="TableStyle-Table_Num-HeadD-Column1-Header1">
                       Description
                    </th>
        </tr>
      </thead>
      <tbody>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">Windows<br/>(C and .NET APIs)</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <ul>
              <li>Applications that are dynamically linked against <code>libsolclient.dll</code> or <code>libsolclient_64.dll</code> cannot be statically linked against the TLS/SSL libraries.</li>
              <li>Applications that are statically linked against <code>libsolclientStatic.lib</code> or <code>libsolclient_64Static.lib</code> may be also statically linked against the TLS/SSL libraries. You must also include the static versions of the TLS/SSL libraries, <code>libeay32.lib</code> and <code>ssleay32.lib</code>. Be sure to find and link against the static versions of these libraries, not the import libraries that have the same name.</li>
            </ul>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">Linux (C API only)</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <ul>
              <li>Whether applications are dynamically linked against <code>libsolclient.so</code> or statically linked against <code>libsolclient.a</code> they may also be built against the TLS/SSL static libraries<code> libssl.a</code> and <code>libcrypto.a</code>. However, to do so you must also include the provided static link enabler object <code>solClientSSLStaticLinkEnable.o</code>. </li>
              <li>In the link-edit command (<code>/usr/bin/ld</code>) of your build process, you must add ‘<code>solClientSSLStaticLinkEnable.o libcrypto.a libssl.a</code>’ to the command line. These objects must occur after l<code>ibsolclient.a</code> (or <code>libsolclient.so</code>), and <code>solclientSSLStaticLinkEnable.o</code> must occur before the TLS/SSL libraries.</li>
            </ul>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">iOS (C API only)</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <ul>
              <li>Always statically link against <code>libsolclient.so</code>. <code>libsolclient</code> includes <code>libssl.a</code> and <code>libcrypto.a</code>, so an iOS application does not need any extra steps to create secure connections.</li>
            </ul>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyB-Column1-Body1">
            <p class="Tbl_Body">SunOS/Solaris <br/>(C API only)</p>
          </td>
          <td class="TableStyle-Table_Num-BodyA-Column1-Body1">
            <ul>
              <li>TLS/SSL is not supported by <code>libsolclient</code> on SunOS or Solaris.</li>
            </ul>
          </td>
        </tr>
      </tbody>
    </table>
  </body>
</html>
