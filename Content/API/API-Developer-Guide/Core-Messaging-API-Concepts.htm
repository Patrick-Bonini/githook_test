<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
  <head/>
  <body>
    <h1><a name="core_messaging_api_concepts_2465013491_264545">
            </a><![CDATA[
]]>Messaging API Concepts
</h1>
    <p>The Solace Messaging Application Programming Interfaces (APIs) are designed with the same core concepts, and they use the same fundamental components to process messages and data. Understanding how the APIs use these components, and how they relate to each other, is necessary to develop applications to send and receive messages over Solace PubSub+.</p>
    <p>This section provides an introduction to these core concepts and processing components.</p>
    <h2 class="with-rule"><a name="core_messaging_api_concepts_2465013491_264790">
            </a>Messaging Domains</h2>
    <p>The messaging APIs support both Point-to-Point (PTP) and Publish and Subscribe (Pub/Sub) messaging domains.</p>
    <ul>
      <li>Point-to-Point 
                <p>PTP messaging is built around the concept of message Queues that clients can publish messages to. Each message is addressed to a specific Queue. Consuming clients can also extract messages from Queues that hold messages for them.</p></li>
    </ul>
    <ul>
      <li>Publish and Subscribe 
                <p>Pub/Sub clients address messages to some node in a content hierarchy. These nodes are defined Topics. Publishers and subscribers are generally anonymous and may dynamically publish or subscribe to the content hierarchy. The Solace message bus distributes the messages published to a node to those clients that have subscribed to the same node.</p></li>
    </ul>
    <p>The messaging APIs provide many features, including:</p>
    <ul>
      <li>connection management to Solace PubSub+ event brokers</li>
      <li>addition and removal of topic-based subscriptions</li>
      <li>sending and receiving messages (blocking and non-blocking)</li>
      <li>Direct and Guaranteed message delivery modes</li>
      <li>structured data types that do not rely on a specific architecture or programming language</li>
      <li>extensive support for logging and customizing through property parameters</li>
      <li>Request/Reply messaging support</li>
      <li>Queue Browser support</li>
      <li>PubSub+ Cache client API support</li>
    </ul>
  </body>
</html>
