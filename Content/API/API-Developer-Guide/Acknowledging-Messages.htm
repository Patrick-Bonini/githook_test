<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
  <head>
    <link href="../../Resources/TableStyles/Table_Num.css" rel="stylesheet" MadCap:stylesheetType="table"/>
  </head>
  <body>
    <h1>Acknowledging Messages Received by Clients</h1>
    <p>The messaging APIs provide acknowledgments to the <MadCap:variable name="Product-Names.pubsub_brand_only"/> event broker for the guaranteed messages that clients receive through a Flow. The figure below shows the process of how the guaranteed messages that an application receives through a Flow are acknowledged. During this Flow, client applications can also send a negative acknowledgment (Nack) for malformed messages or messages that could not be processed.</p>
    <p class="GraphicCaption">Acknowledging Received Guaranteed Messages</p>
    <p class="GraphicCaption">
      <img src="Images/message_acknowledgement_sub.jpg" alt=""/>
    </p>
    <h2 class="with-rule"><a name="API"/>API Acknowledgments</h2>
    <p>A Guaranteed Message window size limits the number of messages that the API can receive before it must return an acknowledgment to the event broker to indicate that it received the messages in the window. After the API sends this acknowledgment, the Guaranteed Message window reopens so that further messages can be sent to the API.</p>
    <p>An application can adjust the windowed acknowledgments by changing the default acknowledgment timer and threshold parameters set through the Flow properties (refer to <MadCap:xref href="Creating-Flows.htm#Importan">Important Flow Properties</MadCap:xref>). Changing these defaults is not usually required and will change the performance characteristics of a Flow.</p>
    <h2 class="with-rule"><a name="Applicat"/>Application Acknowledgments</h2>
    <p>One of the two following application acknowledgment modes can be used for acknowledging a message:</p>
    <ul>
      <li>Auto-acknowledgment</li>
      <li>Client acknowledgment</li>
    </ul>
    <p>The acknowledgment mode to use is set through one of the flow properties listed below. By default, the auto-acknowledgment mode is used. </p>
    <p>The following table shows how to perform acknowledgment for the different APIs:</p>
    <table style="mc-table-style: url('../../Resources/TableStyles/Table_Num.css');" class="TableStyle-Table_Num" cellspacing="0">
      <col class="TableStyle-Table_Num-Column-Column1"/>
      <col class="TableStyle-Table_Num-Column-Column1"/>
      <thead>
        <tr class="TableStyle-Table_Num-Head-Header1">
          <th class="TableStyle-Table_Num-HeadE-Column1-Header1"><MadCap:variable name="Product-Names.pubsub_brand_only"/> Messaging API</th>
          <th class="TableStyle-Table_Num-HeadD-Column1-Header1">Use</th>
        </tr>
      </thead>
      <tbody>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">
              <a href="../../API-Developer-Online-Ref-Documentation/java/index.html" target="_blank" class="link-internal">JCSMP</a>
            </p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_BodyCode">
              <code>ConsumerFlowProperties.setAckMode(String ackMode)</code>
            </p>
            <p class="Tbl_Body">Possible values are:</p>
            <ul>
              <li>
                <p class="Tbl_BodyCode">
                  <code>JCSMPProperties.SUPPORTED_MESSAGE_ACK_AUTO</code>
                </p>
              </li>
              <li>
                <p class="Tbl_BodyCode">
                  <code>JCSMPProperties.SUPPORTED_MESSAGE_ACK_CLIENT</code>
                </p>
              </li>
            </ul>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">
              <a href="../../API-Developer-Online-Ref-Documentation/jrto/index.html" target="_blank" class="link-internal">Java RTO</a>
            </p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_BodyCode">
              <code>FlowHandle.PROPERTIES.ACKMODE</code>
            </p>
            <p class="Tbl_Body">Possible values in <code>SolEnum.AckMode</code> are:</p>
            <ul>
              <li>
                <p class="Tbl_BodyCode">
                  <code>AckMode.AUTO</code>
                </p>
              </li>
              <li>
                <p class="Tbl_BodyCode">
                  <code>AckMode.CLIENT</code>
                </p>
              </li>
            </ul>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">
              <a href="../../API-Developer-Online-Ref-Documentation/c/index.html" target="_blank" class="link-internal">C</a>
            </p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p><code>SOLCLIENT_FLOW_PROP_ACKMODE</code>. The possible values are: </p>
            <ul>
              <li>
                <code>SOLCLIENT_FLOW_PROP_ACKMODE_CLIENT</code>
              </li>
              <li><code>SOLCLIENT_FLOW_PROP_ACKMODE_AUTO</code> (Default)</li>
            </ul>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyE-Column1-Body1">
            <p class="Tbl_Body">
              <a href="../../API-Developer-Online-Ref-Documentation/net/index.html" target="_blank" class="link-internal">.NET</a>
            </p>
          </td>
          <td class="TableStyle-Table_Num-BodyD-Column1-Body1">
            <p class="Tbl_BodyCode">
              <code>FlowProperties.AckMode</code>
            </p>
            <p class="Tbl_Body">Possible values are:</p>
            <ul>
              <li>
                <p class="Tbl_BodyCode">
                  <code>AutoAck</code>
                </p>
              </li>
              <li>
                <p class="Tbl_BodyCode">
                  <code>ClientAck</code>
                </p>
              </li>
            </ul>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyB-Column1-Body1">
            <p class="Tbl_Body"><a href="../../API-Developer-Online-Ref-Documentation/js/index.html" target="_blank" class="link-internal">JavaScript</a> and <a href="../../API-Developer-Online-Ref-Documentation/nodejs/index.html" target="_blank" class="link-internal">Node.js</a></p>
          </td>
          <td class="TableStyle-Table_Num-BodyA-Column1-Body1">
            <p class="Tbl_BodyCode">
              <code>solace.MessageConsumerProperties.acknowledgeMode</code>
            </p>
            <p class="Tbl_Body">Possible values are:</p>
            <ul>
              <li>
                <p class="Tbl_BodyCode">
                  <code>solace.MessageConsumerAcknowledgeMode.AUTO</code>
                </p>
              </li>
              <li>
                <p class="Tbl_BodyCode">
                  <code>solace.MessageConsumerAcknowledgeMode.CLIENT</code>
                </p>
              </li>
            </ul>
          </td>
        </tr>
      </tbody>
    </table>
    <h3>Auto-Acknowledgment Mode</h3>
    <p>When the auto-acknowledgment mode is used, the API automatically generates application-level acknowledgments. </p>
    <p>For JCSMP, acknowledgments are sent at different times depending on whether the message is received asynchronously or synchronously:</p>
    <ul>
      <li>when received asynchronously, the acknowledgment  is sent after the message callback completes.</li>
      <li>when received synchronously, the acknowledgment is sent after the message is removed from the API's internal queue during the <code>receive()</code> method. It's important to realize that the acknowledgment has been sent before control is returned to the application (that is after the <code>receive()</code> method completes).</li>
    </ul>
    <h3><a name="client-acks"/>Client Acknowledgment Mode</h3>
    <p>When the client acknowledgment mode is used the client must explicitly send an acknowledgment for the message ID of each message received. Optionally, you can use negative acknowledgments as well. For more information, see <MadCap:xref href="#nacks-support">Negative Acknowledgments for Specific Messages</MadCap:xref>.</p>
    <p>To explicitly send a client acknowledgment, call one of the methods or functions listed below.</p>
    <p class="Note">Avoid allowing the number of outstanding unacknowledged messages to become excessively large (for example, 10,000 or more) because the egress message rate from the event broker can start to decline. </p>
    <table class="TableStyle-Table_Num" style="caption-side: top;width: 95%;mc-table-style: url('../../Resources/TableStyles/Table_Num.css');" cellspacing="0">
      <caption valign="top" style="padding-bottom: 3pt;">
        <p class="TblCaption">To send an Explicit Client Acknowledgment</p>
      </caption>
      <thead>
        <tr class="TableStyle-Table_Num-Head-Header1">
          <th class="TableStyle-Table_Num-HeadE-Column1-Header1"><MadCap:variable name="Product-Names.pubsub_brand_only"/> Messaging API</th>
          <th class="TableStyle-Table_Num-HeadD-Column1-Header1">Use</th>
        </tr>
      </thead>
      <tbody>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">
              <a href="../../API-Developer-Online-Ref-Documentation/java/index.html" target="_blank" class="link-internal">JCSMP</a>
            </p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_BodyCode">
              <code>XMLMessage.ackMessage()</code>
            </p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">
              <a href="../../API-Developer-Online-Ref-Documentation/jrto/index.html" target="_blank" class="link-internal">Java RTO</a>
            </p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_BodyCode">
              <code>FlowHandle.ack(...)</code>
            </p>
            <p> See the<a href="../../API-Developer-Online-Ref-Documentation/jrto/index.html" target="_blank" class="link-internal"><MadCap:variable name="Product-Names.pubsub_brand_only"/> Messaging API for JRTO</a> for information </p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">
              <a href="../../API-Developer-Online-Ref-Documentation/c/index.html" target="_blank" class="link-internal">C</a>
            </p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_BodyCode">
              <code>solClient_flow_sendAck(...)</code>
            </p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyE-Column1-Body1">
            <p class="Tbl_Body">
              <a href="../../API-Developer-Online-Ref-Documentation/net/index.html" target="_blank" class="link-internal">.NET</a>
            </p>
          </td>
          <td class="TableStyle-Table_Num-BodyD-Column1-Body1">
            <p class="Tbl_BodyCode">
              <code>IFlow.Ack(...)</code>
            </p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyB-Column1-Body1">
            <p class="Tbl_Body"><a href="../../API-Developer-Online-Ref-Documentation/js/index.html" target="_blank" class="link-internal">JavaScript</a> and <a href="../../API-Developer-Online-Ref-Documentation/nodejs/index.html" target="_blank" class="link-internal">Node.js</a></p>
          </td>
          <td class="TableStyle-Table_Num-BodyA-Column1-Body1">
            <p class="Tbl_BodyCode">
              <code>solace.Message.acknowledge()</code>
            </p>
            <p class="Note">Acknowledgment is called on the message object.</p>
          </td>
        </tr>
      </tbody>
    </table>
    <p>When using the client acknowledgment mode with the C API, the maximum number of messages that the API can deliver to the application through the Flow without receiving client acknowledgments can be set through the <code>SOLCLIENT_FLOW_PROP_MAX_UNACKED_MESSAGES</code> Flow property. By default, this property has a value of -1, which specifies that the maximum number of unacknowledged messages that can be delivered is not restricted by the API. (To change the maximum number of unacknowledged messages that may be received through an existing Flow, call <code>solClient_flow_setMaxUnacked()</code>).</p>
    <h2><a name="nacks-support"/>Negative Acknowledgments for Specific Messages</h2>
    <p>You can use negative acknowledgments (Nacks) if you have configured your applications for client acknowledgments (see  <MadCap:xref href="#client-acks">Client Acknowledgment Mode</MadCap:xref>). When you use Nacks, you can send a settlement outcome to let the event broker know the result from processing a guaranteed message that was received. Based on the settlement outcome, the event broker knows how to handle the message on its queue. You can use the following settlement outcomes:</p>
    <ul>
      <li> ACCEPTED—This ACK notifies the event broker that your client application successfully processed the guaranteed message. When the event broker receives this outcome it removes the message from its queue.<ul><li>When you call a settlement function/methods with an outcome of ACCEPTED, it is the same as calling an ACK function/methods in <MadCap:xref href="#client-acks">Client Acknowledgment Mode</MadCap:xref>.</li></ul></li>
      <li>FAILED—This NACK notifies the event broker that your client application did not process the message. When the event broker receives this NACK it attempts to redeliver the message while adhering to delivery count limits. </li>
      <li>REJECTED—This NACK notifies the event broker that your client application could process the message but it was not accepted (for example, failed validation). When the event broker receives this Nack it removes the message from its queue and then moves the message to the Dead Message Queue (DMQ) if it is configured.</li>
    </ul>
    <p>Before you can use NACK s, you must add the FAILED, REJECTED, or both outcomes as NACK types when you create the Flow to prepare the Flow to work with negative acknowledgments. You do not need to add the ACCEPTED outcome because it is always available.  If you try to use an outcome that has not been added, you get an error of <code>Required Settlement Outcome Not Supported</code>. </p>
    <div class="Note">
      <ul>
        <li>Nacks  can be lost during transit (for example due to unexpected networking issues). Consider this fact as part of the logic for handling messages when you develop your application.</li>
        <li>Nacks are supported on event brokers 10.2.1 and later. If an event broker does not support  Nacks, an <code>InvalidOperationException</code> occurs during the Flow bind request when an outcome is specified.</li>
      </ul>
    </div>
    <table style="mc-table-style: url('../../Resources/TableStyles/Table_Num.css');" class="TableStyle-Table_Num" cellspacing="0">
      <col class="TableStyle-Table_Num-Column-Column1"/>
      <col class="TableStyle-Table_Num-Column-Column1"/>
      <thead>
        <tr class="TableStyle-Table_Num-Head-Header1">
          <td class="TableStyle-Table_Num-HeadE-Column1-Header1"><MadCap:variable name="Product-Names.pubsub_brand_only"/> Messaging API</td>
          <td class="TableStyle-Table_Num-HeadD-Column1-Header1">Calls</td>
        </tr>
      </thead>
      <tbody>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">
              <a href="../../API-Developer-Online-Ref-Documentation/java/index.html" target="_blank" class="link-internal">JCSMP</a>
            </p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p>Enable and prepare the Flow to use negative acknowledgments:</p>
            <p>
              <code>ConsumerFlowProperties.addRequiredSettlementOutcomes(Outcome outcometoadd)</code>
            </p>
            <p>You need to add one or both of:</p>
            <p>
              <ul>
                <li><code>Outcome.FAILED</code><![CDATA[
							]]></li>
                <li>
                  <code>Outcome.REJECTED</code>
                </li>
              </ul>
              <p><code>Outcome.ACCEPTED</code> is not required to be set and always supported.</p>
            </p>
            <p>You can ACK or NACK using:</p>
            <p><![CDATA[  ]]><code>XMLMessage.settle(settlement_outcome)</code></p>
            <p>Possible values to use:</p>
            <p>
              <ul>
                <li><code>Outcome.ACCEPTED</code><![CDATA[							]]></li>
                <li><code>Outcome.FAILED</code><![CDATA[
							]]></li>
                <li>
                  <code>Outcome.REJECTED</code>
                </li>
              </ul>
            </p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">
              <a href="../../API-Developer-Online-Ref-Documentation/jrto/index.html" target="_blank" class="link-internal">Java RTO</a>
            </p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p>To enable and prepare the Flow to use negative acknowledgments, set <code>REQUIRED_OUTCOME_FAILED</code> , <code>REQUIRED_OUTCOME_REJECTED</code> , or both to <code>ENABLE</code>:</p>
            <pre xml:space="preserve">
int flowProps = 0;
String[] flowProperties = new String[10];
flowProperties[flowProps++] = FlowHandle.PROPERTIES.REQUIRED_OUTCOME_FAILED;
flowProperties[flowProps++] = SolEnum.BooleanValue.ENABLE;
flowProperties[flowProps++] = FlowHandle.PROPERTIES.REQUIRED_OUTCOME_REJECTED;
flowProperties[flowProps++] = SolEnum.BooleanValue.ENABLE;
</pre>
            <p>To acknowledge a message, you can send an ACK or NACK using:</p>
            <p>
              <code>flowHandle.settle(msgId, messageOutcome);</code>
            </p>
            <p>Possible values to use:</p>
            <p>
              <ul>
                <li><code>MessageOutcome.ACCEPTED</code><![CDATA[							]]></li>
                <li><code>MessageOutcome.FAILED</code><![CDATA[
							]]></li>
                <li>
                  <code>MessageOutcome.REJECTED</code>
                </li>
              </ul>
            </p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">
              <a href="../../API-Developer-Online-Ref-Documentation/c/index.html" target="_blank" class="link-internal">C</a>
            </p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p>Enable and prepare the Flow to use negative acknowledgments:</p>
            <ul>
              <li>
                <code>SOLCLIENT_FLOW_PROP_REQUIRED_OUTCOME_FAILED</code>
              </li>
              <li>
                <code>SOLCLIENT_FLOW_PROP_REQUIRED_OUTCOME_REJECTED</code>
              </li>
              <li>To enable a Nack, set the property to <code>SOLCLIENT_PROP_ENABLE_VAL</code></li>
            </ul>
            <p>To acknowledge a message, you can send an ACK or NACK using:</p>
            <p>
              <code>solClient_flow_settleMsg	(solClient_opaqueFlow_pt,solClient_msgId_t,solClient_msgOutcome_t)</code>
            </p>
            <p>For <code>solClient_msgOutcome_t</code>, you can use the following enumerated values:</p>
            <ul>
              <li>
                <code>SOLCLIENT_OUTCOME_ACCEPTED</code>
              </li>
              <li>
                <code>SOLCLIENT_OUTCOME_FAILED</code>
              </li>
              <li>
                <code>SOLCLIENT_OUTCOME_REJECTED</code>
              </li>
            </ul>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyE-Column1-Body1">
            <p class="Tbl_Body">
              <a href="../../API-Developer-Online-Ref-Documentation/net/index.html" target="_blank" class="link-internal">.NET</a>
            </p>
          </td>
          <td class="TableStyle-Table_Num-BodyD-Column1-Body1">
            <p>Enable and set the following properties to <code>true</code> in the <code>IFlow</code> interface to use negative acknowledgments:</p>
            <ul>
              <li><code>IFlow.RequiredOutcomeFailed = true</code><![CDATA[
   ]]></li>
              <li>
                <code>IFlow.RequiredOutcomeRejected = true</code>
              </li>
            </ul>
            <p>You can send an ACK or NACK using:</p>
            <ul>
              <li>
                <code>IFlow.Settle(long ADMessageId, MessageOutcome outcome)</code>
              </li>
            </ul>
            <p>For the <code>MessageOutcome</code>, you use one of the following values:</p>
            <ul>
              <li>
                <code>MessageOutcome.Accepted</code>
              </li>
              <li>
                <code>MessageOutcome.Rejected</code>
              </li>
              <li>
                <code>MessageOutcome.Failed</code>
              </li>
            </ul>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyB-Column1-Body1">
            <p class="Tbl_Body"><a href="../../API-Developer-Online-Ref-Documentation/js/index.html" target="_blank" class="link-internal">JavaScript</a> and <a href="../../API-Developer-Online-Ref-Documentation/nodejs/index.html" target="_blank" class="link-internal">Node.js</a></p>
          </td>
          <td class="TableStyle-Table_Num-BodyA-Column1-Body1">
            <p>When you create a flow, enable and set the following properties on your message consumer to use negative acknowledgments:<br/><code>requiredSettlementOutcomes: [MessageOutcome.FAILED, MessageOutcome.REJECTED]</code></p>
            <p><code>MessageOutcome.ACCEPTED</code> is not required to be set with <code>requiredSettlementOutcomes</code> and is always supported.</p>
            <p>You can send an ACK or NACK using:</p>
            <p>
              <code>Message.settle(messageOutcome)</code>
            </p>
            <p>For the <code>messageOutcome</code>, you use one of the following values:</p>
            <ul>
              <li>
                <code>MessageOutcome.ACCEPTED</code>
              </li>
              <li>
                <code>MessageOutcome.REJECTED</code>
              </li>
              <li>
                <code>MessageOutcome.FAILED</code>
              </li>
            </ul>
          </td>
        </tr>
      </tbody>
    </table>
    <h3><a name="client-nacks-jrto"/>Using Nacks with the Java RTO API</h3>
    <p>The following sample code shows how to send Nacks using the <MadCap:variable name="Product-Names.pubsub_brand_only"/> Messaging API for Java RTO:</p>
    <pre xml:space="preserve">
// session must have SolEnum.CapabilityName.AD_APP_ACK_FAILED capability in order for negative MessageOutcomes to be supported
// MessageOutcome.ACCEPTED is always supported
 
FlowHandle flowHandle = Solclient.Allocator.newFlowHandle();
 
// Setting Flow Properties
int flowProps = 0;
String[] flowProperties = new String[10];
flowProperties[flowProps++] = FlowHandle.PROPERTIES.ACKMODE;
flowProperties[flowProps++] = SolEnum.AckMode.CLIENT;
flowProperties[flowProps++] = FlowHandle.PROPERTIES.REQUIRED_OUTCOME_FAILED;
flowProperties[flowProps++] = SolEnum.BooleanValue.ENABLE;
flowProperties[flowProps++] = FlowHandle.PROPERTIES.REQUIRED_OUTCOME_REJECTED;
flowProperties[flowProps++] = SolEnum.BooleanValue.ENABLE;
 
sessionHandle.createFlowForHandle(flowHandle, flowProperties, queue, null,
		     new MessageCallbackSample() {
			 @Override
			 public void onMessage(Handle handle) {
			     FlowHandle flowHandle = (FlowHandle) handle;
			     MessageHandle msgHandle = flowHandle.getRxMessage();
			     long msgId = msgHandle.getGuaranteedMessageId();
							
			     /* An example try-catch block for processing and settling a message. */	
			     try {
			         processMessage(msgHandle);
			         flowHandle.settle(msgId, MessageOutcome.ACCEPTED);
			     } catch (Exception e){
			         flowHandle.settle(msgId, MessageOutcome.FAILED);
			     }
			 }	
		      }, flowEventCallback);
</pre>
    <h3><a name="client-nacks-jcsmp"/>Using Nacks with the JCSMP API</h3>
    <p>The following sample code shows how to send Nacks using the <MadCap:variable name="Product-Names.pubsub_brand_only"/> Messaging API for JCSMP:</p>
    <pre xml:space="preserve">...
...
// A session has already been created with JCSMPProperties.SUPPORTED_MESSAGE_ACK_CLIENT
final ConsumerFlowProperties cfp = new ConsumerFlowProperties().setEndpoint(q);

// Add the settlement outcomes - Outcome.ACCEPTED does not need to be added because it is always included
// The consumer can add multiple outcomes, for example cfp.addRequiredSettlementOutcomes(Outcome.FAILED, Outcome.REJECTED);
cfp.addRequiredSettlementOutcomes(Outcome.FAILED);

final FlowReceiver flowReceiver= session.createFlow(null, cfp);
BytesXMLMessage msg = flowReceiver.receive(1000);
try {
    processMessage(msg);
    msg.settle(Outcome.ACCEPTED);// same as msg.ackMessage();  
    catch (Exception e){
        msg.settle(Outcome.FAILED); // Failed to process message, settle as FAILED
    }
}
...
...
</pre>
    <h3><a name="client-acks-c-api"/>Using Nacks with the C API</h3>
    <p>For the <MadCap:variable name="Product-Names.pubsub_brand_only"/> Messaging API for to use Nacks you must set <code>SOLCLIENT_FLOW_PROP_REQUIRED_OUTCOME_FAILED</code>, <code>SOLCLIENT_FLOW_PROP_REQUIRED_OUTCOME_REJECTED</code>, or both properties to <code>SOLCLIENT_PROP_ENABLE_VAL</code>. </p>
    <p>The following sample code shows how to send Nacks using a fictional <code>processMessage()</code> function to process the guaranteed message, which provides a status of processing so that you can send the settlement outcome using the <code>solClient_flow_settleMsg()</code> function: </p>
    <pre xml:space="preserve">/* This code snippet presumes that you have a
   session and endpoint (queue)already */
/* Message Count for messages that were accepted by the client */
static int msgCount = 0;
static int msgCountSuccess = 0;
static int msgCountFailed = 0;
static int msgCountRejected = 0;

/* Callback to handle messages */
	
static solClient_rxMsgCallback_returnCode_t flowMessageReceiveCallback ( solClient_opaqueFlow_pt flow_p, 
                                                                         solClient_opaqueMsg_pt msg_p,
                                                                         void *user_p )
{
  solClient_msgId_t msgId;
  int status=0;
  /* Process the message. */
  printf ( "Received message:\n" );
  //Some function to process the message and return a status
  status = processMessage(msg_p);
  solClient_msg_getMsgId (msg_p, &amp;msgId); 
  msgCount ++
    
 /* If the status was good)
 if ( status  == 0 ) {
	printf ( "Message passed validation\n");
	solClient_flow_settleMsg(flow_p, msgId, SOLCLIENT_OUTCOME_ACCEPTED);
       msgCountSuccess++;
 }
 else if (status ==  1 ) {
	printf ( "Message failed validation\n");
	solClient_flow_settleMsg(flow_p, msgId, SOLCLIENT_OUTCOME_REJECTED);
       msgCountRejected++;
 }
 else {
    printf ( "Message failed to process message.\n");
    solClient_flow_settleMsg(flow_p, msgId, SOLCLIENT_OUTCOME_FAILED);
    msgCountFailed++;
 }
}			
...
...

int main (in argc, char *argv[])
{
   /* The code snippet presumes a session has been created */
   /* Configure the Flow function information */
   flowFuncInfo.rxMsgInfo.callback_p = flowMessageReceiveCallback;
   flowFuncInfo.eventInfo.callback_p = flowEventCallback;
   
   if (!solClient_session_isCapable(session_p, SOLCLIENT_SESSION_CAPABILITY_AD_APP_ACK_FAILED)) {
      exit(1);
    }
    /* We must add both these properties if want use FAIL and REJECT as outcomes
       which prepares the flow to use negative acknowledgment. */
    props[propIndex++] = SOLCLIENT_FLOW_PROP_ACKMODE;
    props[propIndex++] = SOLCLIENT_FLOW_PROP_ACKMODE_CLIENT;
    props[propIndex++] = SOLCLIENT_FLOW_PROP_REQUIRED_OUTCOME_FAILED;    
    props[propIndex++] = SOLCLIENT_PROP_ENABLE_VAL;
    props[propIndex++] = SOLCLIENT_FLOW_PROP_REQUIRED_OUTCOME_REJECTED;    
    props[propIndex++] = SOLCLIENT_PROP_ENABLE_VAL;
    props[propIndex++] = NULL;

    ...
    ...
     solClientRc = solClient_session_createFlow(props,
                                                session_p,
			                         &amp;flow_p,
			                         &amp;flowFuncInfo,
			                         sizeof(flowFuncInfo));


  /** Wait for messages **/
  printf ( "Waiting for messages......\n" );
  fflush ( stdout );
  while ( msgCount &lt; 1 ) {
     SLEEP ( 1 );
  }
...
...
}				
</pre>
    <h3><a name="client-acks-dotnet-cscsmp"/>Using Nacks with the .NET API</h3>
    <p>For the <MadCap:variable name="Product-Names.pubsub_brand_only"/> .NET (C#) API, you must set   <code>RequiredOutcomeFailed</code>, <code>RequiredOutcomeRejected</code>, or both properties to <code>true</code> to use Nacks. The following sample code shows how to send Nacks using a fictional <code>messageProcessingObject.process()</code> method, which  determines the settement outcome that is sent with the <code>IFlow.Settle()</code> method:</p>
    <pre xml:space="preserve">// This code snippet presumes that you have a session and endpoint (queue)already
// Use object object instantiation to set the required properties to use Nacks.
FlowProperties flowProps = new FlowProperties()
{
   AckMode = MessageAckMode.ClientAck,
   RequiredOutcomeFailed = true,
   RequiredOutcomeRejected = true
};
 
IFlow flow = session.CreateFlow(flowProps, queue, null,
                        new EventHandler&lt;MessageEventArgs&gt; (delegate(object source, MessageEventArgs args){
                           // Got a message and do processing and based on result fictional messageProcessingObject
		            if (messageProcessingObject.process(args.Message) == 1)	{			
                               // Accept the message
                               flow.Settle(args.Message.ADMessageId, MessageOutcome.Accepted);
			    }
			    else if ((messageProcessingObject.process(args.Message) == 3) {
			        // Reject the message
                               flow.Settle(args.Message.ADMessageId, MessageOutcome.Rejected);
			    }
			    else {
			        // Failed to process the message
                               flow.Settle(args.Message.ADMessageId, MessageOutcome.Failed); 
				args.Message.Dispose();
                        }),
                        new EventHandler&lt;FlowEventArgs&gt; (delegate(object source, FlowEventArgs args) {
			    // Got an event
                         }));
...
...
}				
</pre>
    <h3><a name="client-acks-js-nodejs"/>Using Nacks with the Javascript API</h3>
    <p>The following sample code shows how to send Nacks using the <MadCap:variable name="Product-Names.pubsub_brand_only"/> Messaging API for Javascript:</p>
    <pre xml:space="preserve">
try {
  // Create a message consumer with support for NACKs
  const messageConsumer = session.createMessageConsumer({
     // solace.MessageConsumerProperties
     queueDescriptor: { name: 'QueueName', type: solace.QueueType.QUEUE, durable: true },
     acknowledgeMode: solace.MessageConsumerAcknowledgeMode.CLIENT, // Enabling Client ack
     // session is created with SUPPORTED_MESSAGE_ACK_CLIENT to support negative acknowledgment outcomes
     // MessageOutcome.ACCEPTED is not required to be set and always supported
     requiredSettlementOutcomes: [MessageOutcome.FAILED, MessageOutcome.REJECTED], // set the settlement outcome for the flow. Flow Type will be 0x03
  });
 
  // Define message consumer event listeners
  messageConsumer.on(solace.MessageConsumerEventName.UP, function () {
      // consumer is up
  });
 
  messageConsumer.on(solace.MessageConsumerEventName.CONNECT_FAILED_ERROR, function (error) {
      // Error: the message consumer could not bind to queue
  });
 
  messageConsumer.on(solace.MessageConsumerEventName.DOWN, function () {
      // The message consumer is down
  });
 
  messageConsumer.on(solace.MessageConsumerEventName.DOWN_ERROR, function (details) {
      console.log('Received "DOWN_ERROR" event - details: ' + details);
  });
 
  // Define message received event listener
  messageConsumer.on(solace.MessageConsumerEventName.MESSAGE, function (message) {
      console.log('Received message: "' + message.getBinaryAttachment() + '",' +
          ' details:\n' + message.dump());
       // use the new settle method to ACK/NACK the message from the router
       message.settle(solace.MessageOutcome.ACCEPTED);// same as message.acknowledge();
 
      // messages can also be settled with the FAILED and REJECTED outcomes on supported broker sessions
      // message.settle(solace.MessageOutcome.FAILED);// same as message.acknowledge();
      // message.settle(solace.MessageOutcome.REJECTED);// same as message.acknowledge();
  });
 
  // Connect the message consumer
  messageConsumer.connect();
} catch (error) {
    // error occurred while creating the message consumer
    console.log(error.toString());
}
</pre>
  </body>
</html>
