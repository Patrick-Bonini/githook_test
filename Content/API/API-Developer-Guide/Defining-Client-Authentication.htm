<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
  <head>
    <link href="../../Resources/TableStyles/Table_Num.css" rel="stylesheet" MadCap:stylesheetType="table"/>
  </head>
  <body>
    <h1>Defining Client Authentication Info</h1>
    <p>The authentication scheme session property specifies whether Basic, Client Certificate, Kerberos, or OAuth authentication is to be used to authenticate a client’s connection to the <MadCap:variable name="Variables.CompanyName"/> <MadCap:variable name="Product-Names.pubsub_brand_only"/> event broker.</p>
    <table style="caption-side: top;width: 100%;mc-table-style: url('../../Resources/TableStyles/Table_Num.css');" class="TableStyle-Table_Num" cellspacing="0">
      <caption valign="top" style="padding-bottom: 3pt;">
        <p>To Set an Authentication Scheme</p>
      </caption>
      <col style="width: 20%;" class="TableStyle-Table_Num-Column-Column1"/>
      <col style="width: 80%;" class="TableStyle-Table_Num-Column-Column1"/>
      <thead>
        <tr class="TableStyle-Table_Num-Head-Header1">
          <th class="TableStyle-Table_Num-HeadE-Column1-Header1"><MadCap:variable name="Product-Names.pubsub_brand_only"/> Messaging API</th>
          <th class="TableStyle-Table_Num-HeadD-Column1-Header1">Property</th>
        </tr>
      </thead>
      <tbody>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">JCSMP</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <ul>
              <li>
                <p class="Tbl_BodyCode">JCSMPProperties.AUTHENTICATION_SCHEME_BASIC</p>
              </li>
              <li>
                <p class="Tbl_BodyCode">JCSMPProperties.AUTHENTICATION_SCHEME_CLIENT_CERTIFICATE</p>
              </li>
              <li>
                <p class="Tbl_BodyCode">JCSMPProperties.AUTHENTICATION_SCHEME_GSS_KRB</p>
              </li>
              <li>
                <p class="Tbl_BodyCode">JCSMPProperties.AUTHENTICATION_SCHEME_OAUTH2</p>
              </li>
            </ul>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">Java RTO</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_Body">
              <code>SessionHandle.PROPERTIES.AUTHENTICATION_SCHEME</code>
            </p>
            <p class="Tbl_Body">Possible values in <code>SolEnum.AuthenticationScheme</code> are:</p>
            <ul>
              <li>
                <p class="Tbl_BodyCode">AuthenticationScheme.BASIC</p>
              </li>
              <li>
                <p class="Tbl_BodyCode">AuthenticationScheme.CLIENT_CERTIFICATE</p>
              </li>
              <li>
                <p class="Tbl_BodyCode">AuthenticationScheme.GSS_KRB</p>
              </li>
              <li>
                <p class="Tbl_BodyCode">AuthenticationScheme.OAUTH2</p>
              </li>
            </ul>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">C</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <ul>
              <li>
                <p class="Tbl_BodyCode">SOLCLIENT_SESSION_PROP_AUTHENTICATION_SCHEME_BASIC</p>
              </li>
              <li>
                <p class="Tbl_BodyCode">SOLCLIENT_SESSION_PROP_AUTHENTICATION_SCHEME_CLIENT_CERTIFICATE</p>
              </li>
              <li>
                <p class="Tbl_BodyCode">SOLCLIENT_SESSION_PROP_AUTHENTICATION_SCHEME_GSS_KRB</p>
              </li>
              <li>
                <p class="Tbl_BodyCode">SOLCLIENT_SESSION_PROP_AUTHENTICATION_SCHEME_OAUTH2</p>
              </li>
            </ul>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyE-Column1-Body1">
            <p class="Tbl_Body">.NET</p>
          </td>
          <td class="TableStyle-Table_Num-BodyD-Column1-Body1">
            <p class="Tbl_Body">
              <code>SessionProperties.AuthenticationSchemes</code>
            </p>
            <p class="Tbl_Body">Possible values for the enumeration are:</p>
            <ul>
              <li>
                <p class="Tbl_BodyCode">AuthenticationSchemes.BASIC</p>
              </li>
              <li>
                <p class="Tbl_BodyCode">AuthenticationSchemes.CLIENT_CERTIFICATE</p>
              </li>
              <li>
                <p class="Tbl_BodyCode">AuthenticationSchemes.GSS_KRB</p>
              </li>
              <li>
                <p class="Tbl_BodyCode">AuthenticationSchemes.OAUTH2</p>
              </li>
            </ul>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">JavaScript</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_Body">Possible values for the enumeration are:</p>
            <ul>
              <li>
                <p class="Tbl_BodyCode">solace.AuthenticationScheme.BASIC</p>
              </li>
              <li>
                <p class="Tbl_BodyCode">solace.AuthenticationScheme.CLIENT_CERTIFICATE</p>
              </li>
              <li>
                <p class="Tbl_BodyCode">solace.AuthenticationScheme.OAUTH2</p>
              </li>
            </ul>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyB-Column1-Body1">
            <p class="Tbl_Body">Node.js</p>
          </td>
          <td class="TableStyle-Table_Num-BodyA-Column1-Body1">
            <p class="Tbl_Body">Possible values for the enumeration are:</p>
            <ul>
              <li>
                <p class="Tbl_BodyCode">solace.AuthenticationScheme.BASIC</p>
              </li>
              <li>
                <p class="Tbl_BodyCode">solace.AuthenticationScheme.CLIENT_CERTIFICATE</p>
              </li>
              <li>
                <p class="Tbl_BodyCode">solace.AuthenticationScheme.OAUTH2</p>
              </li>
            </ul>
          </td>
        </tr>
      </tbody>
    </table>
    <p>In addition to indicating in the session properties the authentication scheme that will be used for the client, each authentication type has specific prerequisites or configuration parameters that are required to successfully use that authentication scheme. For more information, refer to:</p>
    <ul>
      <li>
        <MadCap:xref href="#Basic-Auth">Basic Authentication</MadCap:xref>
      </li>
      <li>
        <MadCap:xref href="#Client-Cert">Client Certificate Authentication</MadCap:xref>
      </li>
      <li>
        <MadCap:xref href="#Kerberos">Kerberos Authentication</MadCap:xref>
      </li>
      <li>
        <MadCap:xref href="#OAuth">OAuth Authentication</MadCap:xref>
      </li>
    </ul>
    <h2 class="with-rule"><a name="Basic-Auth"/>Basic Authentication</h2>
    <p>Basic authentication is the default client authentication scheme. When this scheme is used, the client must provide the following properties for the event broker to authenticate the client (these properties are not encrypted):</p>
    <ul>
      <li>
        <MadCap:xref href="#Username">Username</MadCap:xref>
      </li>
      <li><MadCap:xref href="#Password">Password</MadCap:xref> (this is optional)</li>
    </ul>
    <h3><a name="Username"/>Username</h3>
    <p>A username is required for a Session to authenticate any clients connecting with the event broker over that Session. A username must be provided for each Session created, and it must match with a client username account provisioned on the event broker.</p>
    <p>When a Session connects to a Message VPN on an event broker, clients are created and deleted dynamically as they connect and disconnect from the event broker on that Session. Therefore, it is possible that a username can be used by a single client or by multiple clients.</p>
    <p class="Note">The username property is the same as the <code>client-username</code> property that can be shown through the Solace CLI or SolAdmin.</p>
    <table style="caption-side: top;width: 100%;mc-table-style: url('../../Resources/TableStyles/Table_Num.css');" class="TableStyle-Table_Num" cellspacing="0">
      <caption valign="top" style="padding-bottom: 3pt;">
        <p class="TblCaption">To Set a Username</p>
      </caption>
      <col style="width: 20%;" class="TableStyle-Table_Num-Column-Column1"/>
      <col width="80%" class="TableStyle-Table_Num-Column-Column1"/>
      <thead>
        <tr class="TableStyle-Table_Num-Head-Header1">
          <th class="TableStyle-Table_Num-HeadE-Column1-Header1"><MadCap:variable name="Product-Names.pubsub_brand_only"/> Messaging API</th>
          <th class="TableStyle-Table_Num-HeadD-Column1-Header1">Property</th>
        </tr>
      </thead>
      <tbody>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">JCSMP</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_BodyCode">JCSMPProperties.USERNAME</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">Java RTO</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_BodyCode">SessionHandle.PROPERTIES.USERNAME</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">C</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_BodyCode">SOLCLIENT_SESSION_PROP_USERNAME</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyE-Column1-Body1">
            <p class="Tbl_Body">.NET</p>
          </td>
          <td class="TableStyle-Table_Num-BodyD-Column1-Body1">
            <p class="Tbl_BodyCode">SessionProperties.UserName</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyB-Column1-Body1">
            <p class="Tbl_Body">JavaScript and Node.js</p>
          </td>
          <td class="TableStyle-Table_Num-BodyA-Column1-Body1">
            <p class="Tbl_BodyCode">solace.SessionProperties.userName</p>
          </td>
        </tr>
      </tbody>
    </table>
    <h3><a name="Password"/>Password</h3>
    <p>When Session authentication is enabled on the event broker, a valid username/password pair must be provided to connect a Session to an event broker. The default is no password.</p>
    <table class="TableStyle-Table_Num" style="caption-side: top;width: 100%;mc-table-style: url('../../Resources/TableStyles/Table_Num.css');" cellspacing="0">
      <caption valign="top" style="padding-bottom: 3pt;">
        <p class="TblCaption">To Set a Session Password Name</p>
      </caption>
      <col class="TableStyle-Table_Num-Column-Column1" style="width: 20%;"/>
      <col width="80%" class="TableStyle-Table_Num-Column-Column1"/>
      <thead>
        <tr class="TableStyle-Table_Num-Head-Header1">
          <th class="TableStyle-Table_Num-HeadE-Column1-Header1"><MadCap:variable name="Product-Names.pubsub_brand_only"/> Messaging API</th>
          <th class="TableStyle-Table_Num-HeadD-Column1-Header1">Property</th>
        </tr>
      </thead>
      <tbody>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">JCSMP</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_BodyCode">JCSMPProperties.PASSWORD</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">Java RTO</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_BodyCode">SessionHandle.PROPERTIES.PASSWORD</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">C</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_BodyCode">SOLCLIENT_SESSION_PROP_PASSWORD</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyE-Column1-Body1">
            <p class="Tbl_Body">.NET</p>
          </td>
          <td class="TableStyle-Table_Num-BodyD-Column1-Body1">
            <p class="Tbl_BodyCode">SessionProperties.Password</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyB-Column1-Body1">
            <p class="Tbl_Body">JavaScript and Node.js</p>
          </td>
          <td class="TableStyle-Table_Num-BodyA-Column1-Body1">
            <p class="Tbl_BodyCode">solace.SessionProperties.password</p>
          </td>
        </tr>
      </tbody>
    </table>
    <h2 class="with-rule"><a name="Client-Cert"/>Client Certificate Authentication</h2>
    <p>A client certificate authentication scheme allows a client to prove its identity to the event broker through a valid X509v3 client certificate obtained from a Certification Authority (CA).</p>
    <p>When the client certificate authentication scheme is used for the Session, the client must specify a client certificate and a private key. Depending on the API used, these could be separate files or be contained in a single keystore file.</p>
    <p>Client certificate authentication depends on the TLS/SSL facility on the event broker, so it can only be used for secure Sessions. For more information, see  <MadCap:xref href="Creating-Secure-Sessions.htm">Creating Secure Sessions</MadCap:xref>.</p>
    <h4>JCSMP </h4>
    <p>The keystore is a single file containing the client’s certificate, private key, and the CA certificate chain. A password for the keystore is required. A private key password must also be specified when the private key is encrypted and the password is not the same as the key store password. If a private key password is not specified, it is assumed that the private key has the same password as the keystore.</p>
    <h4>Java RTO, C, Node.js, and .NET APIs</h4>
    <p>The key store is in the form of a private key file and a client certificate file. The client certificate and the private key can be in separate files or in the same file, but both properties must be specified. If the private key is encrypted, a password must also be specified.</p>
    <p class="Note">The JavaScript API is configured through the browser where it runs and does not support  these configurations through session properties.</p>
    <table class="TableStyle-Table_Num" style="caption-side: top;width: 100%;mc-table-style: url('../../Resources/TableStyles/Table_Num.css');" cellspacing="0">
      <caption valign="top" style="padding-bottom: 3pt;">
        <p class="TblCaption"> Client Certificate Authentication Session Properties</p>
      </caption>
      <col class="TableStyle-Table_Num-Column-Column1" style="width: 20%;"/>
      <col width="80%" class="TableStyle-Table_Num-Column-Column1"/>
      <thead>
        <tr class="TableStyle-Table_Num-Head-Header1">
          <th class="TableStyle-Table_Num-HeadE-Column1-Header1">Property </th>
          <th class="TableStyle-Table_Num-HeadD-Column1-Header1">Description</th>
        </tr>
      </thead>
      <tbody>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">SSL Client Certificate</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_Body">(Java RTO, C, Node.js, and .NET APIs.) The client certificate file name.</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">SSL Key Store</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_Body">(JCSMP  only.) The keystore file URL/path format (file-based) <u>or</u> java.security.Keystore format (in-memory). You cannot mix in-memory and file-based usage. When you use the in-memory form, the java.security.Keystore is considered immutable once you pass it into the JCSMP API.</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">SSL Key Store Password</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_Body">(JCSMP only.) The password required to verify the integrity of the contents of the keystore. The keystore password can be used to decipher the private key if the <code>SSL_PRIVATE_KEY_PASSWORD</code> property is not specified.</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyE-Column1-Body1">
            <p class="Tbl_Body">SSL Key Store Format</p>
          </td>
          <td class="TableStyle-Table_Num-BodyD-Column1-Body1">
            <p class="Tbl_Body">(JCSMP only.) The format of the keystore; either <code>JKS</code> or <code>PKCS12</code>. The default value is <code>JKS</code>.</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">SSL Private Key File</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_Body">(Java RTO, C, Node.js, and .NET APIs.) The private key file name.</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">SSL Private Key Alias</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_Body">(JCSMP only.) The alias of the private key to use for client authentication. If there is only one private key entry in the given keystore then this property does not have to be set.</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyB-Column1-Body1">
            <p class="Tbl_Body">SSL Private Key Password</p>
          </td>
          <td class="TableStyle-Table_Num-BodyA-Column1-Body1">
            <p class="Tbl_Body">The password that decrypts the private key. For JCSMP, the private key is in the keystore, and this property is required when the private key is encrypted with a different key than the password used to encrypt the keystore.</p>
          </td>
        </tr>
      </tbody>
    </table>
    <p>If a specified key store cannot be loaded (for example, for JCSMP, a bad file format is used, or, for the C API, a private key file or client certificate file is not readable) the connection is not attempted and an error is reported to the application.</p>
    <h4>Required Event Broker Configurations</h4>
    <p>For a client to use a client certificate authentication scheme, the host event broker must be properly configured for TLS/SSL connections, and Client Certificate Verification must be enabled for the particular Message VPN that the client is connecting to. The Message VPN that the client connects to can be configured to use the common name in the client certificate’s subject as the client username or to use a client username (refer to <MadCap:xref href="#Username">Username</MadCap:xref>) that the client provides. (Assigning the client username based on the common name in the client certificate is the default behavior.)</p>
    <h2 class="with-rule"><a name="Kerberos"/>Kerberos Authentication</h2>
    <p>The Kerberos authentication scheme allows a client to use the Kerberos mechanism to authenticate its connection with the event broker.</p>
    <p>Kerberos authentication can be used to authenticate clients for either secured or unsecured Sessions to the event broker. That is, unlike client certificate authentication, Kerberos authentication does not depend on the TLS/SSL facility on the event broker.</p>
    <p>To use the Kerberos authentication scheme, the following configurations must be made:</p>
    <ul>
      <li>Required versions and libraries for the:<ul><li><u>JCSMP</u></li><p>Java distribution <MadCap:variable name="Minimum-Supported-Component-Versions.Java Distribution"/> or greater is required. By default, the Kerberos libraries provided by the JVM are used. However, if required for your corporate policies, you can also configure the Kerberos libraries that will be used. For more information, refer to <MadCap:xref href="../Messaging-APIs/Code-and-Compile-Guideli.htm#Addition">Guidelines for Secure Connections and Authentication</MadCap:xref>.</p><li><u>Java RTO API on Linux</u></li><p>Libraries that implement GSSAPI (Generic Security Services API) Version 2 must be used.</p><li><u>Java RTO API on Windows</u></li><p>The SSPI that is distributed with Windows is used.</p><li><u>C API on Linux and SunOS</u></li><p>Libraries that implement GSSAPI Version 2 must be used.</p><li><u>C APIs on Windows</u></li><p>The Security Support Provided Interface (SSPI) that is distributed with Windows is used.</p><li><u>.NET API</u></li><p>The SSPI that is distributed with Windows is used.</p></ul></li>
      <li>Set Kerberos as the authentication scheme to use for the session.</li>
      <li><u>Java Only</u>: Enable Kerberos.        <p>To enable Kerberos authentication for JCSMP, use the following system property to specify a valid Java Authentication and Authorization Service (JAAS) configuration file:</p><p class="Code">-Djava.security.auth.login.config=jaas.conf</p><p>Sample contents of <code>jaas.conf</code>:</p><p class="Code">SolaceGSS {<br/>   com.sun.security.auth.module.Krb5LoginModule required<br/>   useTicketCache=true<br/>   isInitiator=true <br/>   doNotPrompt=true<br/>   debug=false;<br/>};</p></li>
    </ul>
    <h4>Required Event Broker Configurations</h4>
    <p>For a client to use a Kerberos authentication scheme, a Kerberos key tab file must be configured for the host event broker and Kerberos authentication must be configured and enabled for any Message VPNs that a client will connect to. Refer to <MadCap:xref MadCap:unresolvedLink="import-link:managing_client_authentication_and_authorization_3377806447_92633" href="../../Security/Configuring-Client-Authentication.htm">Managing Client Authentication and Authorization</MadCap:xref>.</p>
    <h2 class="with-rule"><a name="OAuth"/>OAuth Authentication</h2>
    <p>The OAuth authentication scheme allows a client to use the OAuth mechanism to authenticate its connection with the event broker. For more information see <MadCap:xref href="../../Security/Client-Authentication-Overview.htm#OAuth">OAuth Authentication</MadCap:xref>.</p>
    <p>PubSub+ event brokers support the following OAuth authentication mechanisms:</p>
    <ul>
      <li>
        <p>
          <MadCap:xref href="#OAuth2">OAuth 2.0</MadCap:xref>
        </p>
      </li>
      <li>
        <p>
          <MadCap:xref href="#OpenID C">OpenID Connect</MadCap:xref>
        </p>
      </li>
    </ul>
    <p class="Note">The authentication mechanism (OAuth2.0 vs OpenID Connect) is configured in the event broker OAuth profile(s) on the VPN.  In either case, JCSMP is configured with the authentication scheme OAUTH2.<br/></p>
    <h3><a name="OAuth2"/>OAuth 2.0</h3>
    <p>When the event broker is configured for OAuth 2.0 authentication (<code>oauth-role</code> is set to <code>resource-server</code>) the client must provide the following properties for the event broker to authenticate the client:</p>
    <ul>
      <li>
        <p>A mandatory access token: Defined in OAuth, access tokens are issued by the authorization server after successfully authenticating the user and obtaining their consent. The access token is the artifact that allows an OAuth client application to access the user's resource. The <code>iss</code> claim in the token, if present, is used to identify which OAuth profile the event broker will use for token validation. If no profile with a matching issuer is found, the default profile is used.</p>
      </li>
    </ul>
    <ul>
      <li>
        <p>(Optionally) An Authorization Server Issuer Identifier (<code>iss</code>).  If provided, this parameter must match the issuer of an OAuth profile on the event broker. That profile will be used for token validation, rather than the profile with the issuer provided in the token’s <code>iss</code> claim, if any, or the default profile configured on the event broker.</p>
      </li>
    </ul>
    <table style="caption-side: top;width: 100%;mc-table-style: url('../../Resources/TableStyles/Table_Num.css');" class="TableStyle-Table_Num" cellspacing="0">
      <caption valign="top" style="padding-bottom: 3pt;">
        <p class="TblCaption">To Set a OAuth2 Access Token and Optional Issuer Identifier</p>
      </caption>
      <col style="width: 20%;" class="TableStyle-Table_Num-Column-Column1"/>
      <col width="80%" class="TableStyle-Table_Num-Column-Column1"/>
      <thead>
        <tr class="TableStyle-Table_Num-Head-Header1">
          <th class="TableStyle-Table_Num-HeadE-Column1-Header1"><MadCap:variable name="Product-Names.pubsub_brand_only"/> Messaging API</th>
          <th class="TableStyle-Table_Num-HeadD-Column1-Header1">Use</th>
        </tr>
      </thead>
      <tbody>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">JCSMP</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_BodyCode">JCSMPProperties.OAUTH2_ACCESS_TOKEN</p>
            <p class="Tbl_BodyCode">JCSMPProperties.OAUTH2_ISSUER_IDENTIFIER</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">Java RTO</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_BodyCode">PROPERTIES.SESSION_OAUTH2_ACCESS_TOKEN</p>
            <p class="Tbl_BodyCode">PROPERTIES.SESSION_OAUTH2_ISSUER_IDENTIFIER</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">C</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_BodyCode">SOLCLIENT_SESSION_PROP_OAUTH2_ACCESS_TOKEN</p>
            <p class="Tbl_BodyCode">SOLCLIENT_SESSION_PROP_OAUTH2_ISSUER_IDENTIFIER</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyE-Column1-Body1">
            <p class="Tbl_Body">.NET</p>
          </td>
          <td class="TableStyle-Table_Num-BodyD-Column1-Body1">
            <p class="Tbl_BodyCode">SessionProperties.Oauth2AccessToken</p>
            <p class="Tbl_BodyCode">SessionProperties.Oauth2IssuerIdentifier</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyB-Column1-Body1">
            <p class="Tbl_Body">JavaScript and Node.js</p>
          </td>
          <td class="TableStyle-Table_Num-BodyA-Column1-Body1">
            <p class="Tbl_BodyCode">solace.SessionProperties.accessToken</p>
            <p class="Tbl_BodyCode">solace.SessionProperties.issuerIdentifier</p>
          </td>
        </tr>
      </tbody>
    </table>
    <h3><a name="OpenID C"/>OpenID Connect</h3>
    <p>When the event broker is configured for OpenID Connect authentication (<code>oauth-role</code> is set to <code>client</code>) the client must provide the following properties for the event broker to authenticate the client:</p>
    <ul>
      <li>
        <p>A mandatory OpenID Connect ID Token; Defined by OpenID Connect(OIDC), ID tokens are an extension to OAuth2.0. ID tokens are issued by the authorization server and contain claims that carry information about the user. An ID token is an artifact that proves that the user has been authenticated. The <code>iss</code> claim in the token is used to identify which OAuth profile the event broker will use for token validation. If no profile with a matching issuer is found, the default profile is used.</p>
      </li>
    </ul>
    <ul>
      <li>
        <p>(Optionally) An access token. Your organization may require an optional access token, that the broker will use to determine the authorizations available to the authenticated client.</p>
      </li>
    </ul>
    <table style="caption-side: top;width: 100%;mc-table-style: url('../../Resources/TableStyles/Table_Num.css');" class="TableStyle-Table_Num" cellspacing="0">
      <caption valign="top" style="padding-bottom: 3pt;">
        <p class="TblCaption">To Set an OpenID Connect ID Token and Optional Access Token</p>
      </caption>
      <col style="width: 20%;" class="TableStyle-Table_Num-Column-Column1"/>
      <col width="80%" class="TableStyle-Table_Num-Column-Column1"/>
      <thead>
        <tr class="TableStyle-Table_Num-Head-Header1">
          <th class="TableStyle-Table_Num-HeadE-Column1-Header1"><MadCap:variable name="Product-Names.pubsub_brand_only"/> Messaging API</th>
          <th class="TableStyle-Table_Num-HeadD-Column1-Header1">Use</th>
        </tr>
      </thead>
      <tbody>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">JCSMP</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_BodyCode">JCSMPProperties.OIDC_ID_TOKEN</p>
            <p class="Tbl_BodyCode">JCSMPProperties.OAUTH2_ACCESS_TOKEN</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">Java RTO</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_BodyCode">PROPERTIES.SESSION_OIDC_ID_TOKEN</p>
            <p class="Tbl_BodyCode">PROPERTIES.SESSION_OAUTH2_ACCESS_TOKEN</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">C</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_BodyCode">SOLCLIENT_SESSION_PROP_OIDC_ID_TOKEN</p>
            <p class="Tbl_BodyCode">SOLCLIENT_SESSION_PROP_OAUTH2_ACCESS_TOKEN</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyE-Column1-Body1">
            <p class="Tbl_Body">.NET</p>
          </td>
          <td class="TableStyle-Table_Num-BodyD-Column1-Body1">
            <p class="Tbl_BodyCode">SessionProperties.OidcIdToken</p>
            <p class="Tbl_BodyCode">SessionProperties.Oauth2AccessToken</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyB-Column1-Body1">
            <p class="Tbl_Body">JavaScript and Node.js</p>
          </td>
          <td class="TableStyle-Table_Num-BodyA-Column1-Body1">
            <p class="Tbl_BodyCode">solace.SessionProperties.idToken</p>
            <p class="Tbl_BodyCode">solace.SessionProperties.accessToken</p>
          </td>
        </tr>
      </tbody>
    </table>
    <h4>Required Event Broker Configurations</h4>
    <p>For a client to use an OAuth authentication scheme, a Message VPN OAuth  profile  must be configured for the host event broker and OAuth authentication must be configured and enabled for any Message VPNs to which a client connects. Refer to <MadCap:xref MadCap:unresolvedLink="import-link:managing_client_authentication_and_authorization_3377806447_92633" href="../../Security/Configuring-Client-Authentication.htm#OAuth">OAuth Authentication</MadCap:xref>.</p>
    <h4><a name="Refreshi"/>Refreshing  Expired OAuth Tokens</h4>
    <p>By default, event brokers disconnect clients when their tokens expire (see <MadCap:xref href="../../Security/Configuring-Client-Authentication.htm#Disconnect-Token-Expiry">Disconnect on Token Expiration</MadCap:xref>). When a client session  is disconnected, the client tries to reconnect a number of times using the same OAuth token, based on the API's Reconnect Retries property (see <MadCap:xref href="Configuring-Connection-T.htm#Reconnec">Reconnect Retries</MadCap:xref>). If the connection can't be reestablished due to token expiration, the client has to recreate the session with all its subscriptions. To avoid this situation, you can update the configured token in the Solace Messaging APIs (JavaScript, JCSMP, Java RTO, CCSMP, .NET, C) <span MadCap:conditions="Default.HideFromAllOutput">[Delete in March when Python is included as all APIs will have this feature by then. Also, remove the conditions from the last row]</span>  so that it's valid the next time the client tries to connect. </p>
    <table class="TableStyle-Table_Num" style="caption-side: top;width: 100%;mc-table-style: url('../../Resources/TableStyles/Table_Num.css');" cellspacing="0">
      <caption valign="top" style="padding-bottom: 3pt;">
        <p class="TblCaption">To Refresh OAuth Token</p>
      </caption>
      <col class="TableStyle-Table_Num-Column-Column1" style="width: 20%;"/>
      <col width="80%" class="TableStyle-Table_Num-Column-Column1"/>
      <thead>
        <tr class="TableStyle-Table_Num-Head-Header1">
          <th class="TableStyle-Table_Num-HeadE-Column1-Header1"><MadCap:variable name="Product-Names.pubsub_brand_only"/> Messaging API</th>
          <th class="TableStyle-Table_Num-HeadD-Column1-Header1">Use</th>
        </tr>
      </thead>
      <tbody>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">C</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <pre xml:space="preserve">
propIndex = 0;
modifyProps[propIndex++] = SOLCLIENT_SESSION_PROP_OAUTH2_ACCESS_TOKEN;
modifyProps[propIndex++] = "newAccessToken";
modifyProps[propIndex]   = NULL;
if (solClient_session_modifyProperties(session_p, modifyProps) == SOLCLIENT_OK) {
}</pre>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p>Java RTO</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <pre xml:space="preserve">tokenUpdate[1] = newAccessToken;
session.modifyProperties(tokenUpdate);</pre>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">JavaScript and Node.js</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <pre>session.updateAuthenticationOnReconnect({accessToken : “newAccessToken”});</pre>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyE-Column1-Body1">
            <p class="Tbl_Body">JCSMP</p>
          </td>
          <td class="TableStyle-Table_Num-BodyD-Column1-Body1">
            <pre>session.setProperty(JCSMPProperties.OAUTH2_ACCESS_TOKEN, newAccessToken);</pre>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">.NET</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <pre xml:space="preserve">session.ModifyProperty(SessionProperties.PROPERTY.OAuth2AccessToken, newAccessToken);	</pre>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1" MadCap:conditions="Default.HideFromAllOutput">
          <td class="TableStyle-Table_Num-BodyB-Column1-Body1">
            <p>Python</p>
          </td>
          <td class="TableStyle-Table_Num-BodyA-Column1-Body1">
            <pre xml:space="preserve">
from solace.messaging.config.solace_properties import authentication_properties

def updateOauth2Tokens(messaging_service: MessagingService, new_access_token: str, new_id_token: str):
messaging_service.update_property(authentication_properties.SCHEME_OAUTH2_ACCESS_TOKEN, new_access_token)
messaging_service.update_property(authentication_properties.SCHEME_OAUTH2_OIDC_ID_TOKEN, new_id_token)</pre>
          </td>
        </tr>
      </tbody>
    </table>
    <p>Refreshing the expired token can happen while:</p>
    <ul>
      <li>
        <p>the client is connected. In this case, the client contacts the authentication server to refresh the token and modifies the session to use the updated token the next time the API connects to the event broker.</p>
      </li>
      <li>
        <p style="font-weight: normal;">the client is reconnecting. The reconnecting event includes a diagnostic subCode.  If this subCode is <code>Login Failure</code>, this may indicate that your token has expired.   In this case, the API tries to reconnect (using the expired token). The client  then contacts the authentication server to refresh the token and modifies the session to use the updated token the next time the API attempts to reconnect to the event broker.</p>
      </li>
    </ul>
    <p style="font-weight: normal;">In general, it is better if the application is aware of potential token expiry and refreshes the token before it expires.</p>
    <p class="Note">When the client's session is reconnected, the API re-applies the client's direct subscriptions. If there is a change in the ACLs as a result of the refreshed token, the subscriptions may be rejected by the event broker.</p>
  </body>
</html>
