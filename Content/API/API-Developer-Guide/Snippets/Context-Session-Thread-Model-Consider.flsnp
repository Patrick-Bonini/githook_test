<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
  <head>
    </head>
  <body>
    <h4>Recommendation</h4>
    <ul>
      <li>Use the 'One Session, One Context' threading model whenever possible. The 'Multiple Session, One Context' and 'Multiple Sessions, Multiple Contexts' models can potentially increase message processing throughput, but at the expense of additional processing.</li>
    </ul>
    <p>There are three different Threading Models to consider when designing an application:</p>
    <ol>
      <li>One Session One Context. A single Session is used with a single Context.</li>
      <li>Multiple Sessions One Context. Multiple Sessions are serviced using one Context.</li>
      <li>Multiple Sessions Multiple Contexts. Application provides or uses a number of threads, each containing a single Context and each Context contains one or more Sessions.</li>
    </ol>
    <p>For majority of cases, the 'One Session, One Context' model is sufficient for publisher and consumer application design.</p>
    <p>An application designer may want to move to 'Multiple Sessions, One Context' if there is a need to prioritize messages where higher value messages maybe sent/received across different Sessions,for example, through different TCP connections. This approach can potentially increase throughput as well.  This means that it may be necessary to forward received messages to downstream application internal queues such that messages are processed by additional application message processing threads.  All received messages can be processed by the same message and event callback functions, or Session specific ones by creating additional callbacks.</p>
    <p>With 'Multiple Sessions, Multiple Contexts', a designer can reduce the Context Thread processing burden of the 'Multiple Sessions, One Context' model where all Sessions must wait in the select loop before being processed. In this model, each Session can be separated into its own Context thread, and enhance the processing performance that multi-threading in the OSÂ provides. Due to the increased number of threads however, this approach requires expensive thread context switching, and therefore places more burden on the CPU and is more resource intensive.</p>
  </body>
</html>
