<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
  <head>
    <link href="../../Resources/TableStyles/Table_Num.css" rel="stylesheet" MadCap:stylesheetType="table"/>
  </head>
  <body>
    <h1>Creating Flows</h1>
    <p>To receive Guaranteed messages, client must create a consumer Flow within a Session, and bind that flow to an endpoint on a Solace PubSub+ event broker that messages are published or attracted to. One or more Flows can be created in a Session.</p>
    <p>A Flow is an API object that allows a client to receive Guaranteed messages from an endpoint. A maximum of 1,000 Flows can be created in a Session.</p>
    <p class="Note">JavaScript and Node.js APIs use the concept of a <code>MessageConsumer</code> to represent a Flow.</p>
    <p> To create a Flow in a connected Session, call the appropriate create flow method or function listed and provide the following:</p>
    <ul>
      <li>Flow properties
        <p>When a Flow is created, Flow properties must be provided. The table <MadCap:xref href="#Importan">Important Flow Properties</MadCap:xref> lists many important Flow properties that are common to the messaging APIs. For a complete list of required Flow properties, valid syntax and parameters, and default values, refer to the <MadCap:xref href="../Messaging-APIs/Solace-APIs-Overview.htm">APIs &amp; Protocols</MadCap:xref> for the appropriate messaging API.</p><p class="Note">JavaScript and Node.js APIs use <code>solace.MessageConsumerProperties</code> for Flow properties.</p></li>
      <li>endpoint to bind to
        <p>This argument is only required for the Java RTO and .NET APIs. For the Java, JavaScript, Node.js, and C APIs, the endpoint to bind to is provided in the Flow properties.</p></li>
      <li>Topic subscription        <p>The Topic subscription to use when binding to a Topic Endpoint. This argument is only required for the Java RTO and .NET APIs. For the Java, JavaScript, Node.js, and C APIs, the Topic subscription is provided in the Flow properties.</p></li>
      <li>message handlers
        <p>For each of the messaging APIs, a callback for handling received messages on the Flow must be provided:</p><ul><li>For JCSMP, pass in an <code>XMLMessageListener</code> callback interface to receive messages asynchronously. If no <code>XMLMessageListener</code> is set (that is, the message listener to <code>null</code>), messages are received synchronously.</li><li>For the Java RTO API, pass in a <code>MessageCallback</code>.</li><li>For the C API, pass in a pointer to a structure that provides information on callback functions for received messages and events.</li><li>For the .NET API, pass in a <code>messageEventHandler</code>.</li><li>For the JavaScript and Node.js APIs, define a listener to the <code>solace.MessageConsumerEventName.MESSAGE</code> event.</li></ul></li>
      <li>Flow event handlers
        <p>If the Active Flow Indication property is enabled, you must also provide a Flow event callback, event listener, or handler so that events indicating whether a client has an active flow to the exclusive queue, can be handled. Refer to <MadCap:xref href="#Active-Flow-Indication">Active Flow Indication</MadCap:xref>.</p></li>
      <li>endpoint properties when binding to a temporary endpoint
        <p>For a list of the endpoint properties and the default values used, refer to the <MadCap:xref href="../Messaging-APIs/Solace-APIs-Overview.htm">APIs &amp; Protocols</MadCap:xref> for the appropriate messaging API.</p></li>
    </ul>
    <p class="Note">Consumer Flows are not used to receive Direct messages because Direct messages are received directly through the Session interface.</p>
    <p style="font-weight: bold;">JCSMP</p>
    <p>To receive messages on a logical Flow, a client application must first acquire a <code>FlowReceiver</code> instance. Then to start receiving messages on the Flow, call <code>FlowReceiver.start()</code>. To stop receiving messages on the Flow, call the <code>stop()</code> method.</p>
    <p>The <code>FlowReceiver</code> is in an opened state until the <code>FlowReceiver.close()</code> method is called.</p>
    <table style="caption-side: top;width: 95%;mc-table-style: url('../../Resources/TableStyles/Table_Num.css');" class="TableStyle-Table_Num" cellspacing="0">
      <caption valign="top" style="padding-bottom: 3pt;">
        <p class="TblCaption">To Create Guaranteed Message Flows</p>
      </caption>
      <col class="TableStyle-Table_Num-Column-Column1"/>
      <col class="TableStyle-Table_Num-Column-Column1"/>
      <thead>
        <tr class="TableStyle-Table_Num-Head-Header1">
          <th class="TableStyle-Table_Num-HeadE-Column1-Header1"><MadCap:variable name="Product-Names.pubsub_brand_only"/> Messaging API</th>
          <th class="TableStyle-Table_Num-HeadD-Column1-Header1">Call</th>
        </tr>
      </thead>
      <tbody>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">JCSMP</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_Body"><code>JCSMPSession.createFlow(...)</code> to acquire a <code>FlowReceiver</code> instance.</p>
            <p class="Tbl_Body"> </p>
            <p class="Tbl_Body">Once a <code>FlowReceiver</code> is acquired, call <code>start()</code> to start receiving messages from the underlying connection by using either a specified asynchronous <code>XMLMessageListener</code> callback interface or synchronous <code>receive(...)</code> calls.</p>
            <p class="Tbl_Body">When using a synchronous receive mode, after <code>start()</code> is invoked for the <code>FlowReceiver</code>, use the following methods to receive messages:</p>
            <ul>
              <li>
                <p class="Tbl_Body"><code>receive()</code>—Receives the next available message, and waits until one is available.</p>
              </li>
              <li>
                <p class="Tbl_Body"><code>receive(int timeoutInMillis)</code>—Receives the next available message. If no message is available, the method blocks until a set amount of time expires.</p>
              </li>
              <li>
                <p class="Tbl_Body"><code>receiveNoWait()</code>—Receives the next available message.</p>
              </li>
            </ul>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">Java RTO</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_BodyCode">SessionHandle.createFlowForHandle(...)</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">C</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_BodyCode">solClient_session_createFlow(...)</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyE-Column1-Body1">
            <p class="Tbl_Body">.NET</p>
          </td>
          <td class="TableStyle-Table_Num-BodyD-Column1-Body1">
            <p class="Tbl_BodyCode">ISession.createFlow(...)</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyB-Column1-Body1">
            <p class="Tbl_Body">JavaScript and Node.js</p>
          </td>
          <td class="TableStyle-Table_Num-BodyA-Column1-Body1">
            <p class="Tbl_BodyCode">solace.Session.createMessageConsumer(...)</p>
          </td>
        </tr>
      </tbody>
    </table>
    <p>
      <table class="TableStyle-Table_Num" style="margin-left: 0;margin-right: auto;caption-side: top;width: 95%;mc-table-style: url('../../Resources/TableStyles/Table_Num.css');" cellspacing="0">
        <caption valign="top" style="padding-bottom: 3pt;">
          <p class="TblCaption"><a name="Importan"/>Important Flow (Message Consumer) Properties</p>
        </caption>
        <col class="TableStyle-Table_Num-Column-Column1"/>
        <col class="TableStyle-Table_Num-Column-Column1"/>
        <thead>
          <tr class="TableStyle-Table_Num-Head-Header1">
            <th class="TableStyle-Table_Num-HeadE-Column1-Header1">Property</th>
            <th class="TableStyle-Table_Num-HeadD-Column1-Header1">Description</th>
          </tr>
        </thead>
        <tbody>
          <tr class="TableStyle-Table_Num-Body-Body1">
            <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
              <p class="Tbl_Body">Active Flow Indication</p>
            </td>
            <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
              <p class="Tbl_Body">When enabled, this property enables active flow events to be generated to indicate to a client bound to an exclusive queue whether it has an active flow (that is, a flow in which messages are being delivered).</p>
              <p class="Tbl_Body">For more information, refer to <MadCap:xref href="#Active-Flow-Indication">Active Flow Indication</MadCap:xref>.</p>
            </td>
          </tr>
          <tr class="TableStyle-Table_Num-Body-Body1">
            <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
              <p class="Tbl_Body">Message Acknowledgment Mode</p>
            </td>
            <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
              <p class="Tbl_Body">Sets whether the API automatically generates an application-level acknowledgment for each received message (the default), or if the client must explicitly acknowledge each received message.</p>
              <p class="Tbl_Body">When the client provides an acknowledgment, the corresponding spooled message can be removed from the endpoint on the event broker.</p>
              <p class="Tbl_Body">This parameter does not affect the Guaranteed Message window.</p>
              <p class="Tbl_Body">For more information on message acknowledgment modes, refer to <MadCap:xref href="Acknowledging-Messages.htm">Acknowledging Messages Received by Clients</MadCap:xref>.</p>
            </td>
          </tr>
          <tr class="TableStyle-Table_Num-Body-Body1">
            <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
              <p class="Tbl_Body">Message Acknowledgment Threshold</p>
            </td>
            <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
              <p class="Tbl_Body">The threshold for sending a windowed message acknowledgment (set as a percentage of the window size).</p>
              <p class="Tbl_Body">This affects the flow-control window acknowledgment. The API sends a transport acknowledgment every N messages. N is calculated as this percentage of the flow window size if the endpoint's max-delivered-unacked-msgs-per-flow setting at bind time is greater than or equal to the transport window size. Otherwise, N is calculated as this percentage of the endpoint's max-delivered-unacked-msgs-per-flow setting at bind time. This threshold does not control application-level message acknowledgments.</p>
            </td>
          </tr>
          <tr class="TableStyle-Table_Num-Body-Body1">
            <td class="TableStyle-Table_Num-BodyE-Column1-Body1">
              <p class="Tbl_Body">Message Acknowledgment Timer</p>
            </td>
            <td class="TableStyle-Table_Num-BodyD-Column1-Body1">
              <p class="Tbl_Body">The maximum amount of time (in milliseconds) that can pass before an acknowledgment for Guaranteed messages received through the Flow must be sent.</p>
              <p class="Tbl_Body">This parameter is used in a situation where Guaranteed messages have been received, but the message acknowledgment window threshold has not been met.</p>
            </td>
          </tr>
          <tr class="TableStyle-Table_Num-Body-Body1">
            <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
              <p class="Tbl_Body">Endpoint (JCSMP, Java RTO, C, .NET APIs)</p>
            </td>
            <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
              <p class="Tbl_Body">The endpoint to bind to.</p>
            </td>
          </tr>
          <tr class="TableStyle-Table_Num-Body-Body1">
            <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
              <p class="Tbl_Body">Queue Descriptor (JavaScript and Node.js APIs)</p>
            </td>
            <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
              <p class="Tbl_Body">Defines the queue from which to consume (bind to):</p>
              <ul>
                <li>
                  <p class="Tbl_Body">type (queue or topic endpoint)</p>
                </li>
                <li>
                  <p class="Tbl_Body">name (optional for topic endpoints)</p>
                </li>
                <li>
                  <p class="Tbl_Body">durability (optional, durable if not specified)</p>
                </li>
              </ul>
            </td>
          </tr>
          <tr class="TableStyle-Table_Num-Body-Body1">
            <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
              <p class="Tbl_Body">Queue Properties (JavaScript and Node.js APIs)</p>
            </td>
            <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
              <p class="Tbl_Body">The properties of the remote queue.</p>
              <ul>
                <li>
                  <p class="Tbl_Body">For non-durable queues and topic endpoints, these properties define the queue that is created. For possible values, see the online API documentation.</p>
                </li>
                <li>
                  <p class="Tbl_Body">For durable queues, these must be unset on consumer creation. The values will be populated after the queue is connected.</p>
                </li>
              </ul>
            </td>
          </tr>
          <tr class="TableStyle-Table_Num-Body-Body1">
            <td class="TableStyle-Table_Num-BodyE-Column1-Body1">
              <p class="Tbl_Body">Topic Subscription </p>
            </td>
            <td class="TableStyle-Table_Num-BodyD-Column1-Body1">
              <p class="Tbl_Body">If binding to a Topic Endpoint, the Topic subscription to set on the endpoint.</p>
            </td>
          </tr>
          <tr class="TableStyle-Table_Num-Body-Body1">
            <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
              <p class="Tbl_Body">Selector</p>
            </td>
            <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
              <p class="Tbl_Body">An optional SQL-92 selector to use for the selection of messages for delivery (refer to <MadCap:xref href="Using-Selectors.htm">Using Selectors</MadCap:xref>).</p>
            </td>
          </tr>
          <tr class="TableStyle-Table_Num-Body-Body1">
            <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
              <p class="Tbl_Body">Guaranteed Message Window Size</p>
            </td>
            <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
              <p class="Tbl_Body">The maximum number of messages that can be received through the Flow before the API must send an acknowledgment to the event broker that the messages were received. For more information, refer to <MadCap:xref href="Acknowledging-Messages.htm">Acknowledging Messages Received by Clients</MadCap:xref>.</p>
              <p class="Note">The Guaranteed Message Window Size should not exceed the max-delivered-unacked-msgs-per-flow value that is set for a queue provisioned on the event broker, otherwise messages delivered to the API will not be acknowledged until the Message Acknowledgment Time value is exceeded.</p>
            </td>
          </tr>
          <tr class="TableStyle-Table_Num-Body-Body1">
            <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
              <p class="Tbl_Body">Start State</p>
            </td>
            <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
              <p class="Tbl_Body">Whether a Flow should be in a started state when it is created. In started state, a Flow can begin to receive messages immediately.</p>
            </td>
          </tr>
          <tr class="TableStyle-Table_Num-Body-Body1">
            <td class="TableStyle-Table_Num-BodyE-Column1-Body1">
              <p class="Tbl_Body">No Local</p>
            </td>
            <td class="TableStyle-Table_Num-BodyD-Column1-Body1">
              <p class="Tbl_Body">When enabled, messages published on the Session cannot be received through in an active Flow created in the same Session, even if the subscription matches the Topic of the published message. For more information, refer to <MadCap:xref href="#No-Local">No Local Delivery</MadCap:xref>.</p>
            </td>
          </tr>
          <tr class="TableStyle-Table_Num-Body-Body1">
            <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
              <p class="Tbl_Body">Reconnect Retry Count</p>
            </td>
            <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
              <p class="Tbl_Body">The maximum number of Flow reconnect attempts to make after an  error response with reason Replay Started or Service Unavailable is received.  For more information, refer to <MadCap:xref href="#Flow">Flow Auto Reconnect</MadCap:xref>.</p>
            </td>
          </tr>
          <tr class="TableStyle-Table_Num-Body-Body1">
            <td class="TableStyle-Table_Num-BodyB-Column1-Body1">
              <p class="Tbl_Body">Reconnect Retry Interval</p>
            </td>
            <td class="TableStyle-Table_Num-BodyA-Column1-Body1">
              <p class="Tbl_Body">The wait time between Flow reconnect attempts.  For more information refer to <MadCap:xref href="#Flow">Flow Auto Reconnect</MadCap:xref>.</p>
            </td>
          </tr>
        </tbody>
      </table>
    </p>
    <p style="font-weight: bold;">Related Samples</p>
    <p>For an example of how to configure Flow properties and bind to a Flow, refer to the <code>SimpleFlowToQueue</code> and <code>SimpleFlowToTopic</code> samples for the appropriate messaging APIs.</p>
    <p>For the JavaScript and Node.js APIs, refer to the <code>QueueConsumer</code> and <code>DTEConsumer</code> samples.</p>
    <h2 class="with-rule"><a name="Active-Flow-Indication"/>Active Flow Indication</h2>
    <p>If a queue has an exclusive access type (refer to <MadCap:xref href="Defining-Endpoint-Proper.htm">Defining Endpoint Properties</MadCap:xref>), multiple clients can bind to the queue, but only one client at a time can actively receive messages from it. Therefore, when a client creates a Flow and binds to an exclusive queue, the flow might not be active for the client if other clients are bound to the queue.</p>
    <p>If the Active Flow Indication property is enabled, a Flow active event is returned to the client when its bound flow becomes the active flow. The client also receives a Flow inactive event whenever it loses an active flow (for example, if the flow disconnects).</p>
    <p>The client must provide the following when the flow is created:</p>
    <ul>
      <li>When using the Java or Java RTO APIs, pass in a <code>FlowEventHandler</code> to use to handle the Flow active and Flow inactive events.</li>
      <li>When using the C API, pass in a pointer to the <code>functInfo_p</code> structure to provide information on the callback function to use for received Flow active and Flow inactive events.</li>
      <li>When using the .NET API, pass in a <code>flowEventHandler</code> to use to handle the Flow active and Flow inactive events.</li>
    </ul>
    <p class="Note">The Active Flow Indication property is ignored when a Flow binds to a non-exclusive queue, unless that queue is partitioned. In the case of a <a href="../../Messaging/Guaranteed-Msg/Queues.htm#partitioned-queues" target="_self" class="link-internal">partitioned queue</a>, clients logically bind to the parent (non-exclusive) queue, but the event broker actually binds them to a partition (exclusive) queue. Because of this, the Active Flow Indication can be used with partitioned queues.</p>
    <h2 class="with-rule"><a name="No-Local"/>No Local Delivery</h2>
    <p>It is possible for a client to publish Non‑Persistent or Persistent messages to a Topic, and if the same client has a matching Topic subscription, it can receive them on an active Flow on the same Session. To prevent a client from receiving any Non‑Persistent or Persistent messages that it has published, the No Local property can be used for the Flow that the client uses to bind an exclusive Queue (that is, a Queue that only permits a single bound client to receive messages) or a Topic Endpoint, and that Flow must be the active Flow for the endpoint. (The No Local property is ignored when the Flow binds to a non‑exclusive Queue.) For more information on access types, refer to refer to <MadCap:xref href="Defining-Endpoint-Proper.htm">Defining Endpoint Properties</MadCap:xref>.</p>
    <div class="Note">
      <ul>
        <li>The No Local property only prevents messages published by a client from being spooled for that same client if it has established an active Flow at the same time. If the client does not have an active Flow established, messages published to the Topic that it subscribes to can still be spooled.</li>
        <li>The No Local property can also be enabled for a Session. When enabled for a Session, the No Local property only affects the delivery of Direct messages to the client on the same Session that the messages were published on. It does not affect the delivery of Non-Persistent or Persistent messages. (For more information, refer to <MadCap:xref href="Enabling-No-Local-Delive.htm">Enabling No Local Delivery for a Session</MadCap:xref>.)</li>
      </ul>
    </div>
    <div class="Note">
      <p>When the No Local property is enabled only for the Session or only for the Flow, it is possible for the event broker to change the delivery mode of a published message so that it could still be delivered to its publishing client. For example, if a client publishes a message to Topic “A”, the message cannot be delivered as a Direct message to that client when No Local is enabled for the Session, but if No Local is not enabled for a Flow bound to a Topic Endpoint with the Topic subscription “A”, the message could be delivered to that client on the Flow as a Non-Persistent message.<br/>For information on how messages’ delivery modes can be automatically modified when a Topic match occurs, refer to <MadCap:xref href="../../Messaging/Guaranteed-Msg/Topic-Matching-and-Delivery-Modes.htm">Topic Matching and Message Delivery Modes</MadCap:xref>.</p>
    </div>
    <table class="TableStyle-Table_Num" style="mc-table-style: url('../../Resources/TableStyles/Table_Num.css');margin-left: 0;margin-right: auto;caption-side: top;width: 95%;" cellspacing="0">
      <caption valign="top" style="padding-bottom: 3pt;">
        <p class="TblCaption">To Enable No Local Subscriptions for a Flow</p>
      </caption>
      <col class="TableStyle-Table_Num-Column-Column1"/>
      <col class="TableStyle-Table_Num-Column-Column1"/>
      <thead>
        <tr class="TableStyle-Table_Num-Head-Header1">
          <th class="TableStyle-Table_Num-HeadE-Column1-Header1"><MadCap:variable name="Product-Names.pubsub_brand_only"/> Messaging API</th>
          <th class="TableStyle-Table_Num-HeadD-Column1-Header1">Property</th>
        </tr>
      </thead>
      <tbody>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">JCSMP</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_BodyCode">ConsumerFlowProperties.<br/>setNoLocal(boolean noLocal)</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">Java RTO</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_BodyCode">FlowHandle.PROPERTIES.NO_LOCAL</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">C</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_BodyCode">SOLCLIENT_FLOW_PROP_NO_LOCAL</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyE-Column1-Body1">
            <p class="Tbl_Body">.NET</p>
          </td>
          <td class="TableStyle-Table_Num-BodyD-Column1-Body1">
            <p class="Tbl_BodyCode">FlowProperties.NoLocal</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyB-Column1-Body1">
            <p class="Tbl_Body">JavaScript and Node.js</p>
          </td>
          <td class="TableStyle-Table_Num-BodyA-Column1-Body1">
            <p class="Tbl_BodyCode">solace.MessageConsumerProperties.noLocal</p>
          </td>
        </tr>
      </tbody>
    </table>
    <h2 class="with-rule"><a name="Flow"/>Flow Reconnect</h2>
    <p>When Flow Reconnect is enabled, all APIs automatically attempt to reconnect a Flow when  an error response is received as long as the reason given in the error response string is one of the following:</p>
    <ul>
      <li>Replay Started</li>
      <li>Service Unavailable—Indicates that either the queue or topic endpoint was shutdown or deleted, or Assured Delivery services on the broker have been disabled.</li>
    </ul>
    <p>In addition, when one of these errors is reported they are accompanied by a <code>RECONNECTING</code> event as defined in each API. If the reconnect is successful, the API generates a <code>RECONNECTED</code> event. If the reconnect fails, then the appropriate <code>DOWN</code> error event occurs.</p>
    <p class="Note">This behavior applies only to established Flows. If an initial bind is rejected by the message broker for any reason, then it is reported as a bind failed event and no retry is attempted. </p>
    <p>Flow Reconnect is supported and enabled by default in the following API versions:</p>
    <ul>
      <li>JCSMP 10.7.0+</li>
      <li>Java RTO API 7.12.0+</li>
      <li>C API 7.13.0+</li>
      <li>.NET API 10.8.0+</li>
      <li>JavaScript and Node.js API 10.4.0+</li>
    </ul>
    <p>While enabled, all APIs  attempt to reconnect Flows every three seconds indefinitely. </p>
    <p>You can configure the maximum number of Flow reconnect attempts, as well as the interval between attempts by providing the appropriate properties  when the Flow is created (see the tables below).</p>
    <p>To disable Flow Reconnect,  set the reconnect retry count to 0.</p>
    <table class="TableStyle-Table_Num" style="mc-table-style: url('../../Resources/TableStyles/Table_Num.css');margin-left: 0;margin-right: auto;caption-side: top;width: 95%;" cellspacing="0">
      <caption valign="top" style="padding-bottom: 3pt;">
        <p class="TblCaption">To Set the Reconnect Retry Count for a Flow </p>
      </caption>
      <col class="TableStyle-Table_Num-Column-Column1"/>
      <col class="TableStyle-Table_Num-Column-Column1"/>
      <thead>
        <tr class="TableStyle-Table_Num-Head-Header1">
          <th class="TableStyle-Table_Num-HeadE-Column1-Header1"><MadCap:variable name="Product-Names.pubsub_brand_only"/> Messaging API</th>
          <th class="TableStyle-Table_Num-HeadD-Column1-Header1">Property</th>
        </tr>
      </thead>
      <tbody>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">JCSMP</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_BodyCode">ConsumerFlowProperties.setReconnectTries<br/></p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">Java RTO</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_BodyCode">FlowHandle.PROPERTIES.MAX_RECONNECT_TRIES</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1" MadCap:conditions="">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">C</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_BodyCode">SOLCLIENT_FLOW_PROP_MAX_RECONNECT_TRIES</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1" MadCap:conditions="">
          <td class="TableStyle-Table_Num-BodyE-Column1-Body1">
            <p class="Tbl_Body">.NET</p>
          </td>
          <td class="TableStyle-Table_Num-BodyD-Column1-Body1">
            <p class="Tbl_BodyCode">FlowProperties.ReconnectTries</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyB-Column1-Body1">
            <p class="Tbl_Body">JavaScript and Node.js</p>
          </td>
          <td class="TableStyle-Table_Num-BodyA-Column1-Body1">
            <p class="Tbl_BodyCode">solace.MessageConsumerProperties.reconnectAttempts</p>
          </td>
        </tr>
      </tbody>
    </table>
    <table class="TableStyle-Table_Num" style="mc-table-style: url('../../Resources/TableStyles/Table_Num.css');margin-left: 0;margin-right: auto;caption-side: top;width: 95%;" cellspacing="0">
      <caption valign="top" style="padding-bottom: 3pt;">
        <p class="TblCaption">To Set the Reconnect Retry Interval for a Flow</p>
      </caption>
      <col class="TableStyle-Table_Num-Column-Column1"/>
      <col class="TableStyle-Table_Num-Column-Column1"/>
      <thead>
        <tr class="TableStyle-Table_Num-Head-Header1">
          <th class="TableStyle-Table_Num-HeadE-Column1-Header1"><MadCap:variable name="Product-Names.pubsub_brand_only"/> Messaging API</th>
          <th class="TableStyle-Table_Num-HeadD-Column1-Header1">Property</th>
        </tr>
      </thead>
      <tbody>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">JCSMP</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_BodyCode">ConsumerFlowProperties.setReconnectRetryIntervalInMsecs</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">Java RTO</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_BodyCode">FlowHandle.PROPERTIES.RECONNECT_RETRY_INTERVAL_MS</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1" MadCap:conditions="">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">C</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_BodyCode">SOLCLIENT_FLOW_PROP_RECONNECT_RETRY_INTERVAL_MS</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1" MadCap:conditions="">
          <td class="TableStyle-Table_Num-BodyE-Column1-Body1">
            <p class="Tbl_Body">.NET</p>
          </td>
          <td class="TableStyle-Table_Num-BodyD-Column1-Body1">
            <p class="Tbl_BodyCode">FlowProperties.ReconnectRetryInterval</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyB-Column1-Body1">
            <p class="Tbl_Body">JavaScript and Node.js</p>
          </td>
          <td class="TableStyle-Table_Num-BodyA-Column1-Body1">
            <p class="Tbl_BodyCode">solace.MessageConsumerProperties.reconnectIntervalInMsecs</p>
          </td>
        </tr>
      </tbody>
    </table>
  </body>
</html>
