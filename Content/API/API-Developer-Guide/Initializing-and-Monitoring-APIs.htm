<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
  <head>
    <link href="../../Resources/TableStyles/Table_Num.css" rel="stylesheet" MadCap:stylesheetType="table"/>
    <link href="../../Resources/TableStyles/Table_Num.css" rel="stylesheet" MadCap:stylesheetType="table"/>
  </head>
  <body>
    <h1><a name="initializing_and_monitoring_apis_2715568632_231241"/>Initializing and Monitoring APIs</h1>
    <p>This section describes how to initialize the messaging APIs and provides information for using messaging API logging and Session statistics.</p>
    <h2 class="with-rule"><a name="Initiali"/>Initializing APIs</h2>
    <p>To work with a messaging API, it must first be initialized.</p>
    <h4>JCSMP</h4>
    <p>No specific method call is required; JCSMP is initialized the first time a call is made to an API interface.</p>
    <h4>Java RTO, C, and .NET APIs</h4>
    <p>Call a function or method listed in the table below to initialize the Java RTO, C, or .NET APIs. When these messaging APIs are initialized, you can optionally set the initial log level filter for all log categories so that only logs at a specified level and more severe are emitted. (For more information on logging levels, refer to <MadCap:xref href="Configuring-Logging.htm">Configuring Logging</MadCap:xref>.)</p>
    <p>You can also set the global buffer sizes for the memory pools that are used to temporarily save messages in the application space (for the Java RTO API, refer to <MadCap:xref href="Java-RTO-API-Best-Practices.htm#Modifyin">Modifying the Global Pool Buffer Sizes</MadCap:xref>; for the C API, refer to <MadCap:xref href="C-API-Best-Practices.htm#best_practices_3532640973_258503">Modifying the Global Pool Buffer Sizes</MadCap:xref>; for the .NET API, refer to <MadCap:xref href="-NET-Best-Practices.htm#best_practices_2265904997_251233">Modifying the Global Pool Buffer Sizes</MadCap:xref>).</p>
    <h4><a name="JavaScri"/>JavaScript and Node.js APIs</h4>
    <p>Call the function listed in the table below to initialize the JavaScript or Node.js APIs.  By default, when these APIs are initialized, they include the version 7 behavior profile for backwards compatibility.  Behavior profiles allow old applications to remain compatible with old versions of the API, while allowing new applications to take advantage of updated recommended defaults. When writing a new application, Solace recommends using the newest available  profile. For example, if version 10 is the newest   profile, add the following to the entry point of your application to initialize the API with the version 10  profile and run it with the default property values that Solace recommends at the time of the  version 10 release:</p>
    <pre class="Code" xml:space="preserve">var factoryProps = new solace.SolclientFactoryProperties();
factoryProps.profile = solace.SolclientFactoryProfiles.version10;
solace.SolclientFactory.init(factoryProps);</pre>
    <p> When modifying an existing application to use a new behavior profile, the differences between behavior profiles should be considered.</p>
    <table class="TableStyle-Table_Num" style="caption-side: top;mc-table-style: url('../../Resources/TableStyles/Table_Num.css');width: 95%;" cellspacing="0">
      <caption valign="top" style="padding-bottom: 3pt;">
        <p class="TblCaption">To Initialize a Messaging API</p>
      </caption>
      <thead>
        <tr class="TableStyle-Table_Num-Head-Header1">
          <th class="TableStyle-Table_Num-HeadE-Column1-Header1"><MadCap:variable name="Product-Names.pubsub_brand_only"/> Messaging API</th>
          <th class="TableStyle-Table_Num-HeadD-Column1-Header1">Use</th>
        </tr>
      </thead>
      <tbody>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">JCSMP</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_Body">Not applicable</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">Java RTO</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_BodyCode">Solclient.init(...)</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">C</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_BodyCode">solClient_initialize(...)</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyE-Column1-Body1">
            <p class="Tbl_Body">.NET</p>
          </td>
          <td class="TableStyle-Table_Num-BodyD-Column1-Body1">
            <p class="Tbl_BodyCode">ContextFactory.Instance.Init(...)</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyB-Column1-Body1">
            <p class="Tbl_Body">JavaScript and Node.js</p>
          </td>
          <td class="TableStyle-Table_Num-BodyA-Column1-Body1">
            <p class="Tbl_BodyCode">solace.SolclientFactory.init(...)</p>
          </td>
        </tr>
      </tbody>
    </table>
    <p style="font-weight: bold;">Related Samples</p>
    <p>For an example of how to initialize the Java RTO or C API, refer to the <code>DirectPubSub</code> sample for that API. For the .NET API, refer to <code>SampleApp</code>. For the JavaScript and Node.js APIs refer to the <code>TopicSubscriber</code> and <code>TopicPublisher</code> samples. </p>
    <h2 class="with-rule"><a name="cleanup"/>Cleanup</h2>
    <p>When the client application is finished using the C API or .NET API, it should perform a global clean-up, which automatically frees all allocated resources, including those allocated for Contexts and Sessions that have been previously created but are not destroyed.</p>
    <table class="TableStyle-Table_Num" style="caption-side: top;mc-table-style: url('../../Resources/TableStyles/Table_Num.css');width: 95%;" cellspacing="0">
      <caption valign="top" style="padding-bottom: 3pt;">
        <p class="TblCaption">To Cleanup When Finished With the Messaging API</p>
      </caption>
      <col class="TableStyle-Table_Num-Column-Column1"/>
      <col class="TableStyle-Table_Num-Column-Column1"/>
      <thead>
        <tr class="TableStyle-Table_Num-Head-Header1">
          <th class="TableStyle-Table_Num-HeadE-Column1-Header1"><MadCap:variable name="Product-Names.pubsub_brand_only"/> Messaging API
                    </th>
          <th class="TableStyle-Table_Num-HeadD-Column1-Header1">
                        Use
                    </th>
        </tr>
      </thead>
      <tbody>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">JCSMP</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_Body">Not applicable</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">Java RTO</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_Body">Not applicable</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">C</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_BodyCode">solClient_cleanup()</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyE-Column1-Body1">
            <p class="Tbl_Body">.NET</p>
          </td>
          <td class="TableStyle-Table_Num-BodyD-Column1-Body1">
            <p class="Tbl_BodyCode">ContextFactory.Instance.Cleanup()</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyB-Column1-Body1">
            <p class="Tbl_Body">JavaScript and Node.js</p>
          </td>
          <td class="TableStyle-Table_Num-BodyA-Column1-Body1">
            <p class="Tbl_Body">Not applicable</p>
          </td>
        </tr>
      </tbody>
    </table>
    <div class="Note">
      <ul>
        <li>Contexts and Sessions should always be destroyed or disposed before a cleanup is performed. If <code>solClient_cleanup()</code> or <code>ContextFactory.Cleanup()</code> is called while Sessions are connected, any messages buffered for transmission are discarded and not sent.
			<p>Note that invocations of “initialize” and “cleanup” are reference counted. For example, if “initialize” is called twice, “cleanup” must be called twice to properly free the resources.</p></li>
        <li>In the .NET environment, the .NET garbage collector may attempt to release <code>IMessage</code> containers after the application has called  <code>ContextFactory.Cleanup()</code>. This will cause warnings like “<code>2012-08-07 19:11:50Z - Warn - Sdk:Bad msg_p pointer (0000000004000FE1) in solClient_msg_free</code>”. These warnings may be disregarded because they indicate that the API has detected and avoided a double-free.
<br/>However, 	if the same application calls <code>ContextFactory.Init()</code> subsequent to <code>ContextFactory.Cleanup()</code>, the garbage collector may release messages that have been re-assigned to the newly initialized <code>ContextFactory</code>, and this will lead to an application crash. Therefore, it is recommended that you only call <code>ContextFactory.Init()/ContextFactory.Cleanup()</code> once.<![CDATA[		]]></li>
      </ul>
    </div>
    <p style="font-weight: bold;">Related Samples</p>
    <p>For an example of how to perform a global cleanup for the C API, refer to the <code>DirectPubSub</code> sample. For the .NET API, refer to <code>SampleUtils.cs</code> included with the sample files.</p>
  </body>
</html>
