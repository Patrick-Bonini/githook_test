<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
  <head>
    <link href="../../../Resources/TableStyles/Table_Num.css" rel="stylesheet" MadCap:stylesheetType="table"/>
  </head>
  <body>
    <h1>
  Using  <MadCap:variable name="Product-Names.pubsub_cache"/>  With the JCSMP API</h1>
    <p>When a session has been established with a <MadCap:variable name="Product-Names.pubsub_brand_only"/> event broker, a client application using the <MadCap:variable name="Product-Names.pubsub_brand_only"/> Message API for JCSMP can create a cache session and then make requests for cached messages (that is, cache requests).</p>
    <p>The basic steps to make a cache request in a session are:</p>
    <ol>
      <li>Create a cache session. Refer to <MadCap:xref href="#Creating">Creating Cache Session Objects</MadCap:xref>.</li>
      <li>Send a cache request. Refer to <MadCap:xref href="#Sending">Sending Cache Requests</MadCap:xref>.</li>
      <li>Receive requested cached messages. Refer to <MadCap:xref href="#Receivin">Receiving Cached Messages</MadCap:xref>.</li>
    </ol>
    <h2 class="with-rule"><a name="Creating"/>Creating Cache Session Objects</h2>
    <p>Once <code>JCSMPSession</code> is acquired, a client can call the <code>createCacheSession(CacheSessionProperties)</code> method and pass in the cache session properties listed below to create a cache session object.</p>
    <p>A cache session object allows multiple outstanding cache requests and synchronizes those requests. A single session can have many cache session objects.</p>
    <table class="TableStyle-Table_Num" style="caption-side: top;mc-table-style: url('../../../Resources/TableStyles/Table_Num.css');width: 95%;" cellspacing="0">
      <caption valign="top" style="padding-bottom: 3pt;">
        <p class="TblCaption">Cache Session Property Parameters</p>
      </caption>
      <col width="25%" class="TableStyle-Table_Num-Column-Column1"/>
      <col class="TableStyle-Table_Num-Column-Column1" style="width: 75%;"/>
      <thead>
        <tr class="TableStyle-Table_Num-Head-Header1">
          <th class="TableStyle-Table_Num-HeadE-Column1-Header1">Parameter</th>
          <th class="TableStyle-Table_Num-HeadD-Column1-Header1">Description</th>
        </tr>
      </thead>
      <tbody>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_BodyCode">cacheName</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_Body">The identifying name of the Distributed Cache, Cache Cluster, or PubSub+ Cache Instance to send the cache requests to.</p>
            <p class="Tbl_Body">Specifying a PubSub+ Cache Instance bypasses redundancy and load balancing of cache requests. Specifying the Distributed Cache is the preferred method.</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_BodyCode">maxMsgAge</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_Body">The maximum age (in seconds) of the messages to retrieve. Messages that have been cached for more than this amount of time are not retrieved. </p>
            <p class="Tbl_Body">A value of 0 returns all possible messages for the topic, as defined by <code>maxMsgsPerTopic</code>.</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_BodyCode">maxMsgsPerTopic</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_Body">The maximum number of messages to retrieve for any one topic. If more messages are cached on a topic than the maximum value, the newest messages are returned.</p>
            <p class="Note">A value of 0 retrieves all messages newer than <code>maxMsgAge</code>.</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyB-Column1-Body1">
            <p class="Tbl_BodyCode">timeout</p>
          </td>
          <td class="TableStyle-Table_Num-BodyA-Column1-Body1">
            <p class="Tbl_Body">The amount of time (in milliseconds) to wait for a response to the cache request from the cache. This is a per-request timeout where each request sent by the application could result in multiple underlying requests.</p>
          </td>
        </tr>
      </tbody>
    </table>
    <h2 class="with-rule"><a name="Sending"/>Sending Cache Requests</h2>
    <p>To send a cache request, the client application must call <code>getMessageProducer(JCSMPStreamingPublishEventHandler)</code> to get an instance of <code>XMLMessageProducer</code> and <code>getMessageConsumer(XMLMessageListener</code>) to get an instance of <code>XMLMessageConsumer</code> from the session. <code>XMLMessageProducer</code> and <code>XMLMessageConsumer</code> can be obtained before or after creating a cache session, but they must be obtained before sending a cache request.</p>
    <p>Within a cache session, the client application can call <code>sendCacheRequest(Long, Topic, boolean, CacheLiveDataAction)</code> to send a blocking cache request or call <code>sendCacheRequest(Long, Topic, boolean, CacheLiveDataAction, CacheRequestListener)</code> to send a non‑blocking cache request message in the cache session.</p>
    <p>If there is an error in the passed parameters, <code>JCSMPException</code> is thrown.</p>
    <p class="Note">It is up to the client to deal with request timeouts as it is possible that Cache Clusters, event brokers, or individual PubSub+ Cache Instances may fail or disconnect in the middle of cache request processing. The cache response indicates whether the PubSub+ Cache Instance is in a lost message state. Refer to <MadCap:xref href="../../../Additional-Products/Solace-PubSub-Cache/Monitoring-PubSub-Cache-Conf.htm#Lost-Msg-State">Lost Message State</MadCap:xref> for details. </p>
    <table class="TableStyle-Table_Num" style="caption-side: top;mc-table-style: url('../../../Resources/TableStyles/Table_Num.css');width: 95%;" cellspacing="0">
      <caption valign="top" style="padding-bottom: 3pt;">
        <p class="TblCaption">Cache Request Message Parameters</p>
      </caption>
      <col width="25%" class="TableStyle-Table_Num-Column-Column1"/>
      <col class="TableStyle-Table_Num-Column-Column1" style="width: 75%;"/>
      <thead>
        <tr class="TableStyle-Table_Num-Head-Header1">
          <th class="TableStyle-Table_Num-HeadE-Column1-Header1">Parameter</th>
          <th class="TableStyle-Table_Num-HeadD-Column1-Header1">Description</th>
        </tr>
      </thead>
      <tbody>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_BodyCode">requestId</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_Body">A long value for a request provided by the application that is used to identify the originating request in the <code>CacheRequestListener</code> callbacks and the received cache messages.</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_BodyCode">topic</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_Body">The topic for which data is requested from the cache. Use of <code>#noexport</code> is not supported in the topic.</p>
            <p class="Note">Wildcard cache requests are only supported for <code>FLOW_THRU</code> cache requests. When a wildcard request matches multiple cached subjects, there are no temporal ordering guarantees between the individual topics returned (although temporal ordering will still be preserved amongst the messages for a specific topic).</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_BodyCode">subscribe</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_Body">If this parameter is set to <code>true</code>, send a subscription request to the event broker for the topic with the cache request.</p>
            <p class="Tbl_Body">By sending a subscription with the cache request, the client will receive relevant live data messages after it has received all of the cached messages.</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyE-Column1-Body1">
            <p class="Tbl_BodyCode">liveDataAction</p>
          </td>
          <td class="TableStyle-Table_Num-BodyD-Column1-Body1">
            <p class="Tbl_Body">Enumerated actions to perform on live data messages received during an outstanding cache request:</p>
            <ul>
              <li><code>FLOW_THRU</code>—Immediately deliver live data messages matching the cache request topic to the application. Subsequent matching cache messages are also delivered to the application.</li>
              <li><code>FULFILL</code>—Immediately deliver live data messages matching the cache request topic to the application. If a live data message matching the cache request topic is received before the cache response, the cache response is discarded.</li>
              <li><code>QUEUE</code>—Queue live data messages matching the cache request topic until the cache response is received, and deliver the live data to the application after the cache‑response data.</li>
            </ul>
            <p class="Note">To perform wildcard cache requests, <code>FLOW_THRU</code> must be set for the <code>liveDataAction</code> parameter.</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyB-Column1-Body1">
            <p class="Tbl_BodyCode">listener</p>
          </td>
          <td class="TableStyle-Table_Num-BodyA-Column1-Body1">
            <p class="Tbl_Body">The <code>CacheRequestListener</code> to be notified of the cache request’s completion status. This parameter is only required for a non‑blocking cache request.</p>
          </td>
        </tr>
      </tbody>
    </table>
    <p>After a non‑blocking cache request is made, the API can invoke the callback methods listed below when the request completes or returns an exception.</p>
    <table class="TableStyle-Table_Num" style="caption-side: top;mc-table-style: url('../../../Resources/TableStyles/Table_Num.css');width: 95%;" cellspacing="0">
      <caption valign="top" style="padding-bottom: 3pt;">
        <p class="TblCaption">Possible Methods That Are Invoked for Returned Non-Blocking Cache Request Events</p>
      </caption>
      <col style="width: 25%;" class="TableStyle-Table_Num-Column-Column1"/>
      <col style="width: 75%;" class="TableStyle-Table_Num-Column-Column1"/>
      <thead>
        <tr class="TableStyle-Table_Num-Head-Header1">
          <th class="TableStyle-Table_Num-HeadE-Column1-Header1">Method</th>
          <th class="TableStyle-Table_Num-HeadD-Column1-Header1">Description</th>
        </tr>
      </thead>
      <tbody>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_BodyCode">onComplete(...)</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_Body">Indicates that the non‑blocking cache request completed successfully. The corresponding request ID, subscription topic, and cache request result are provided.</p>
            <p class="Tbl_Body">The possible cache request results include:</p>
            <ul>
              <li><code>OK</code>—Cached data was returned in a cache reply or the request was fulfilled by live data.</li>
              <li><code>NO_DATA</code>—The returned cache reply did not contain any data.</li>
              <li><code>SUSPECT_DATA</code>—The returned cache data was suspect. The returned cache data is suspect if the cache is in the lost message state.</li>
            </ul>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyB-Column1-Body1">
            <p class="Tbl_BodyCode">onException(...)</p>
          </td>
          <td class="TableStyle-Table_Num-BodyA-Column1-Body1">
            <p class="Tbl_Body">An error interrupted the non‑blocking cache request. The corresponding request ID, subscription topic, and exception that occurred during the cache request are provided.</p>
            <p class="Note">If a failure occurs, the API does not automatically retry any outstanding cache requests. In addition, if there is a loss of connection with the event broker, any outstanding cache requests are canceled.</p>
          </td>
        </tr>
      </tbody>
    </table>
    <h2 class="with-rule"><a name="Receivin"/>Receiving Cached Messages</h2>
    <p>When using JCSMP, cached messages are received using the same methods as other messages, except that for non‑blocking cache messages a <code>CacheRequestListener</code> is required. For more information on receiving Direct messages, refer to <MadCap:xref href="../Receiving-Direct-Message.htm" class="MCXref xref" data-mc-unresolved-link="import-link:publishing_direct_messages_2796366838_41099">Receiving Direct Messages</MadCap:xref>.</p>
    <p>The messaging API does not attempt to reorder cached messages received across different Cache Clusters. In addition, the messaging API does not attempt to drop duplicate messages received from Cache Clusters or live publishers.</p>
    <h2 class="with-rule"><a name="Destroyi"/>Destroying Cache Sessions</h2>
    <p>To cancel all outstanding requests and destroy the cache session object, call the<code> close()</code> method. It is safe to call this method from any thread.</p>
    <p>When <code>close()</code> is called, the following occurs:</p>
    <ul>
      <li>All outstanding cache requests are implicitly cancelled as they are when the <code>cancel()</code> method is called.</li>
      <li>Any subsequent cache requests throw a <code>ClosedFacilityException</code>.</li>
    </ul>
    <h3><a name="Cancelin"/>Canceling Cache Requests</h3>
    <p>To cancel all outstanding requests, without destroying the cache session object, call the <code>cancel()</code> method. It is safe to call this method from any thread, and it can be called repeatedly.</p>
    <p>When <code>cancel()</code> is called, the following occurs:</p>
    <ul>
      <li>all outstanding cache requests are canceled</li>
      <li>all live messages that have been queued are delivered</li>
      <li>all in-progress synchronous cache requests immediately return to the caller through a <code>JCSMPInterruptedException</code></li>
      <li>all in-progress asynchronous cache requests have their <code>CacheRequestListener onException(...)</code> method called immediately with a <code>JCSMPInterruptedException</code></li>
    </ul>
  </body>
</html>
