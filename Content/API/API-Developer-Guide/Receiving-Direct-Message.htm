<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
  <head>
    <link href="../../Resources/TableStyles/Table_Num.css" rel="stylesheet" MadCap:stylesheetType="table"/>
  </head>
  <body>
    <h1>Receiving Direct Messages</h1>
    <p>Direct messages can be delivered to a client in a Session when the event broker has matching Topic subscriptions for that client. For the client to receive the messages, it must use a message receive interface or callback/delegate appropriate for the programming language used.</p>
    <p style="font-weight: bold;">JCSMP</p>
    <p>Direct messages are received through an acquired <code>XMLMessageConsumer</code> interface. An <code>XMLMessageConsumer</code> can operate in either an asynchronous mode (when a listener is specified) or a synchronous mode (if no message listener is specified).</p>
    <table class="TableStyle-Table_Num" style="caption-side: top;mc-table-style: url('../../Resources/TableStyles/Table_Num.css');" cellspacing="0">
      <caption valign="top" style="padding-bottom: 3pt;">
        <p class="TblCaption">Acquiring an XMLMessageConsumer</p>
      </caption>
      <col class="TableStyle-Table_Num-Column-Column1"/>
      <col class="TableStyle-Table_Num-Column-Column1"/>
      <thead>
        <tr class="TableStyle-Table_Num-Head-Header1">
          <th class="TableStyle-Table_Num-HeadE-Column1-Header1"><MadCap:variable name="Product-Names.pubsub_brand_only"/> Messaging API</th>
          <th class="TableStyle-Table_Num-HeadD-Column1-Header1">Use</th>
        </tr>
      </thead>
      <tbody>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyB-Column1-Body1">
            <p class="Tbl_Body">JCSMP</p>
          </td>
          <td class="TableStyle-Table_Num-BodyA-Column1-Body1">
            <p class="Tbl_BodyCode">JCSMPSession.getMessageConsumer(XMLMessageListener)</p>
            <ul>
              <li>To use a asynchronous message delivery mode, pass in an <code>XMLMessageListener</code> callback interface.</li>
              <li>To use a synchronous message delivery mode, set the message listener to <code>null</code>.
                        <p>After <code>start()</code> is invoked for the consumer, use the following methods to receive messages:</p><ul><li><code>receive()</code>—receives the next available message, and waits until one is available.</li><li><code>receive(int timeoutInMillis)</code>—receives the next available message. If no message is available, the method blocks until a set amount of time expires.</li><li><code>receiveNoWait()</code>—receives the next available message.</li></ul></li>
            </ul>
          </td>
        </tr>
      </tbody>
    </table>
    <p>To enable an acquired <code>XMLMessageConsumer</code> to read messages from the underlying connection and deliver messages to the application, call <code>XMLMessageConsumer.start()</code>. To stop delivering messages to the application, call <code>XMLMessageConsumer.stop()</code>.</p>
    <p><code>XMLMessageConsumer</code> is in an “opened” state until the <code>XMLMessageConsumer.close()</code> method is called.</p>
    <p style="font-weight: bold;">Java RTO API</p>
    <p>Direct messages are received through a message receive callback that is set when the Session is created. This message receive callback is invoked for each received Direct message.</p>
    <p style="font-weight: bold;">C API</p>
    <p>Direct messages are received through a message receive callback that is set when the Session is created. This message receive callback is invoked for each received Direct message.</p>
    <p>The message receive callback that is chosen dictates which messaging interface is used: the <code>solClientMsg</code> interface or the deprecated <code>solClient_bufInfo_t</code> interface. A value of <code>NULL</code> is required for the interface that is not used.</p>
    <p>For new deployments, the <code>solClientMsg</code> interface is recommended because it provides access to additional event broker features, such as SDTs and PubSub+ Cache.</p>
    <p style="font-weight: bold;">.NET API</p>
    <p>Direct messages are received through a message receive delegate that is set when the Session is created. This message receive delegate is invoked for each received Direct message.</p>
    <p style="font-weight: bold;">JavaScript and Node.js APIs</p>
    <p>Direct messages are received through a message listener defined for the session for the <code>solace.SessionEventCode.MESSAGE</code> event.</p>
    <table class="TableStyle-Table_Num" style="caption-side: top;width: 95%;mc-table-style: url('../../Resources/TableStyles/Table_Num.css');" cellspacing="0">
      <caption valign="top" style="padding-bottom: 3pt;">
        <p class="TblCaption">Message Receive Callback/Delegate</p>
      </caption>
      <col class="TableStyle-Table_Num-Column-Column1"/>
      <col class="TableStyle-Table_Num-Column-Column1"/>
      <thead>
        <tr class="TableStyle-Table_Num-Head-Header1">
          <th class="TableStyle-Table_Num-HeadE-Column1-Header1"><MadCap:variable name="Product-Names.pubsub_brand_only"/> Messaging API</th>
          <th class="TableStyle-Table_Num-HeadD-Column1-Header1">Set Through</th>
        </tr>
      </thead>
      <tbody>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">JCSMP</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_Body">Not applicable</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">Java RTO</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_BodyCode">MessageCallback</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">C</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_BodyCode">solClient_session_rxMsgCallbackFunc_t</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyE-Column1-Body1">
            <p class="Tbl_Body">.NET</p>
          </td>
          <td class="TableStyle-Table_Num-BodyD-Column1-Body1">
            <p class="Tbl_BodyCode">EventHandler&lt;MessageEventArgs&gt;</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyB-Column1-Body1">
            <p class="Tbl_Body">JavaScript and Node.js</p>
          </td>
          <td class="TableStyle-Table_Num-BodyA-Column1-Body1">
            <p class="Tbl_BodyCode">solace.Session.subscribe(...)</p>
          </td>
        </tr>
      </tbody>
    </table>
    <h2 class="with-rule"><a name="discard-indications"/>Message Discard Indications</h2>
    <p>A receiving client can use a message discard indication method or function to query whether the event broker  has for any reason discarded any Direct messages previous to the current received message. If the call returns <code>true</code>, the event broker has discarded one or more messages prior to the current message; if the call returns <code>false</code>, no messages prior to the current message were lost.</p>
    <p>When a client application detects a message discard has occurred, it should handle this event appropriately. For example, it can follow its regular session re‑initialization procedure.</p>
    <div class="Note">
      <ul>
        <li>Message discards can occur if an event broker’s egress per-client priority queues fill up with received messages. When this occurs, the oldest messages on the queues can be discarded to allow new incoming messages to be enqueued. Egress per-client priority queues could fill up in a situation where there are slow subscriber (that is, clients that are not consuming messages quickly enough). For more information on egress per-client priority queues and how to configure them, refer to <MadCap:xref MadCap:unresolvedLink="import-link:managing_msg_delivery_resources_4245516314_92633" href="../../Messaging/Managing-Event-Delivery-Resources.htm">Managing Message Delivery Resources</MadCap:xref>.</li>
        <li>It is recommended that consuming clients do not use discard indications when using message eliding. In a situation where an event broker’s egress priority queue for a client fills up with received messages, the oldest messages on the egress queue are discarded to make room for newly arriving messages, and the message at the head of the queue is flagged with the discard indication. However, if eliding is enabled, that message could be elided, and the client would not receive the discard indication.</li>
      </ul>
    </div>
    <table class="TableStyle-Table_Num" style="caption-side: top;width: 95%;mc-table-style: url('../../Resources/TableStyles/Table_Num.css');" cellspacing="0">
      <caption valign="top" style="padding-bottom: 3pt;">
        <p class="TblCaption">To Query Whether Messages Have Been Discarded</p>
      </caption>
      <col class="TableStyle-Table_Num-Column-Column1"/>
      <col class="TableStyle-Table_Num-Column-Column1"/>
      <thead>
        <tr class="TableStyle-Table_Num-Head-Header1">
          <th class="TableStyle-Table_Num-HeadE-Column1-Header1"><MadCap:variable name="Product-Names.pubsub_brand_only"/> Messaging API</th>
          <th class="TableStyle-Table_Num-HeadD-Column1-Header1">Call</th>
        </tr>
      </thead>
      <tbody>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">JCSMP</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_BodyCode">XMLMessage.getDiscardIndication()</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">Java RTO</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_BodyCode">MessageHandle.getDiscardIndication()</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">C</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_BodyCode">solClient_msg_isDiscardIndication(...)</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyE-Column1-Body1">
            <p class="Tbl_Body">.NET</p>
          </td>
          <td class="TableStyle-Table_Num-BodyD-Column1-Body1">
            <p class="Tbl_BodyCode">IMessage.DiscardIndication</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyB-Column1-Body1">
            <p class="Tbl_Body">JavaScript and Node.js</p>
          </td>
          <td class="TableStyle-Table_Num-BodyA-Column1-Body1">
            <p class="Tbl_BodyCode">solace.Message.isDiscardIndication()</p>
          </td>
        </tr>
      </tbody>
    </table>
    <h2 class="with-rule"><a name="topic-dispatch"/>Receiving Topic-Specific Messages with Custom Callbacks</h2>
    <p>When using the Java RTO, C, or .NET APIs, by default, Direct messages are dispatched to the receive callback or delegate that is configured for the Session. However, you can also use special receive callbacks or delegates to handle Direct messages that are published to specific Topics. This functionality is also known as topic dispatching because messages with a specific Topic are dispatched to a specific callback or delegate.</p>
    <p>Dispatching messages according to their Topics to a custom message receive callback or delegate can be useful when the matching subscriptions contain wildcards because it enables you to separate out received messages with more precision. For example if a Session’s Topic is <code>part1/&gt;</code>, a client could receive messages with the Topics <code>part1/item1</code> and <code>part1/item2</code>. Using topic dispatch subscriptions, you can configure one receive callback or delegate for messages published to <code>part1/item1</code> and another for messages published to <code>part1/item2</code>.</p>
    <p>Even if topic dispatching is enabled for the Session, the message receive callback or delegate that is set when the Session is created is still used, and it acts as a default callback/delegate for all subscriptions that were added without the dispatch option (refer to <MadCap:xref href="Managing-Subscriptions.htm#Add-Topic-Subs">Adding Topic Subscriptions</MadCap:xref>). Therefore, a received message is handled by the Session message receive callback/delegate if, and only if, that message’s Topic does not match one or more subscriptions that were added using the topic subscribe with dispatch function/method. Otherwise, the message is dispatched to the callbacks/delegates configured for those subscriptions, instead of being handled by the default Session callback/delegate.</p>
    <p>Full wildcard subscription syntax is supported for Topic dispatching. Therefore if a message matches multiple subscriptions with configured dispatch callbacks/delegates (for example, message with a Topic of <code>part1/item1</code> matches subscription Topics for <code>part1/item1</code> and <code>part1/&gt;</code>), then each matching subscription invokes a callback/delegate. As a result, a client can receive and process a message multiple times. (For information on Topic syntax rules supported for subscriptions, refer to <MadCap:xref MadCap:unresolvedLink="import-link:a_topic_support_and_syntax_819845554_56063" href="../../Messaging/Topic-Support-and-Syntax.htm">Topic Support and Syntax</MadCap:xref>.)</p>
    <p class="Note">When a message does not match a subscription Topic with a specific callback/delegate, it is dispatched to the default Session message receive callback/delegate only once, regardless of the number of subscriptions it matches.</p>
    <p>To add a subscription that will use topic dispatch, the topic dispatch Session property must be enabled for the Session.</p>
    <table class="TableStyle-Table_Num" style="caption-side: top;width: 95%;mc-table-style: url('../../Resources/TableStyles/Table_Num.css');" cellspacing="0">
      <caption valign="top" style="padding-bottom: 3pt;">
        <p class="TblCaption">To Enable Topic Dispatch for a Session</p>
      </caption>
      <col class="TableStyle-Table_Num-Column-Column1"/>
      <col class="TableStyle-Table_Num-Column-Column1"/>
      <thead>
        <tr class="TableStyle-Table_Num-Head-Header1">
          <th class="TableStyle-Table_Num-HeadE-Column1-Header1"><MadCap:variable name="Product-Names.pubsub_brand_only"/> Messaging API</th>
          <th class="TableStyle-Table_Num-HeadD-Column1-Header1">Session Property</th>
        </tr>
      </thead>
      <tbody>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">JCSMP</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_Body">Not applicable</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">Java RTO</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_BodyCode">SessionHandle.PROPERTIES.TOPIC_DISPATCH</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">C</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_BodyCode">SOLCLIENT_SESSION_PROP_TOPIC_DISPATCH</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyE-Column1-Body1">
            <p class="Tbl_Body">.NET</p>
          </td>
          <td class="TableStyle-Table_Num-BodyD-Column1-Body1">
            <p class="Tbl_BodyCode">ISession.TopicDispatch</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyB-Column1-Body1">
            <p class="Tbl_Body">JavaScript and Node.js</p>
          </td>
          <td class="TableStyle-Table_Num-BodyA-Column1-Body1">
            <p class="Tbl_Body">Not applicable</p>
          </td>
        </tr>
      </tbody>
    </table>
    <p>To use dispatch for a specific Topic, use a function or method listed below, and do the following:</p>
    <ul>
      <li>For the Java RTO API, create a <code>MessageDispatchTargetHandle</code> and pass it in as the Topic subscription.</li>
      <li>For the C API, pass in a Topic subscription and the message receive callback to use for that Topic.</li>
      <li>For the .NET API, pass in a <code>IDispatchTarget</code> object. The <code>IDispatchTarget</code> encapsulates a subscription and a message receive delegate for messages with Topics matching that subscription.</li>
      <li>For each API, you can also set optional subscription flags.</li>
    </ul>
    <table class="TableStyle-Table_Num" style="caption-side: top;width: 95%;mc-table-style: url('../../Resources/TableStyles/Table_Num.css');" cellspacing="0">
      <caption valign="top" style="padding-bottom: 3pt;">
        <p class="TblCaption">To Use Topic Dispatch for a Subscription</p>
      </caption>
      <thead>
        <tr class="TableStyle-Table_Num-Head-Header1">
          <th class="TableStyle-Table_Num-HeadE-Column1-Header1"><MadCap:variable name="Product-Names.pubsub_brand_only"/> Messaging API</th>
          <th class="TableStyle-Table_Num-HeadD-Column1-Header1">Call</th>
        </tr>
      </thead>
      <tbody>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">JCSMP</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_Body">Not applicable</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">Java RTO</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <ul>
              <li>
                <code>Solclient.Allocator.<br/>newMessageDispatchTargetHandle(...)</code>
              </li>
              <li>
                <code>SessionHandle.subscribe<br/>(MessageDispatchTargetHandle ...)</code>
              </li>
            </ul>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">C</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_BodyCode">solClient_session_topicSubscribeWithDispatch(...)</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyE-Column1-Body1">
            <p class="Tbl_Body">.NET</p>
          </td>
          <td class="TableStyle-Table_Num-BodyD-Column1-Body1">
            <p class="Tbl_BodyCode">IMessageDispatcher.Subscribe(...)</p>
            <p class="Note">An <code>ISession</code> implements the <code>IMessageDispatcher</code> interface.</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyB-Column1-Body1">
            <p class="Tbl_Body">JavaScript and Node.js</p>
          </td>
          <td class="TableStyle-Table_Num-BodyA-Column1-Body1">
            <p class="Tbl_Body">Not applicable</p>
          </td>
        </tr>
      </tbody>
    </table>
    <table class="TableStyle-Table_Num" style="caption-side: top;width: 95%;mc-table-style: url('../../Resources/TableStyles/Table_Num.css');" cellspacing="0">
      <caption valign="top" style="padding-bottom: 3pt;">
        <p class="TblCaption">Available Topic Dispatch Subscription Flags</p>
      </caption>
      <thead>
        <tr class="TableStyle-Table_Num-Head-Header1">
          <th class="TableStyle-Table_Num-HeadE-Column1-Header1">Flag</th>
          <th class="TableStyle-Table_Num-HeadD-Column1-Header1">Description</th>
        </tr>
      </thead>
      <tbody>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">Request Confirm</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_Body">The call should return immediately and a confirmation event is generated after the event broker has completed the subscription add or remove request.</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">All Deliver‑To‑One</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_Body">When present in a subscription add request, this flag overrides the Deliver‑To‑One property in a message. If there is a Topic match for subscriptions with the All Deliver‑To‑One flag, the message is delivered to the clients with those subscriptions and to one additional client with a matching Topic subscription that does not have the All Deliver‑To‑One override.</p>
            <p class="Note">For the .NET API, this option is set as a Topic property.</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">Wait for Confirm</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_Body">The call should not return until a confirmation is received from the event broker.</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyB-Column1-Body1">
            <p class="Tbl_Body">Local Dispatch Only</p>
          </td>
          <td class="TableStyle-Table_Num-BodyA-Column1-Body1">
            <p class="Tbl_Body">Add the Topic subscription to the messaging API’s dispatch table only. Do not add the subscription to the event broker.</p>
          </td>
        </tr>
      </tbody>
    </table>
    <p>For more information and examples for dispatching received Direct messages based on subscription topics, refer to the reference material  <MadCap:variable name="Product-Names.pubsub_brand_only"/> Messaging APIs for <a href="../Messaging-APIs/JavaRTO-API/java-rto-home.htm" class="link-internal">Java RTO</a>, <a href="../Messaging-APIs/C-API/c-api-home.htm" class="link-internal">C</a>, or <a href="../Messaging-APIs/dotNet-API/net-api-home.htm" class="link-internal">.NET</a>.</p>
    <p style="font-weight: bold;">Related Samples</p>
    <p>For an example of how to use topic dispatch for a subscription, refer to the <code>TopicDispatch</code> sample for the appropriate messaging API.</p>
    <h2 class="with-rule"><a name="reply"/>Replying to Request Messages</h2>
    <p>To reply to an incoming request message, an application can call one of the methods listed below and provide the request message that is being replied to and the message contents to reply with. Typically, the ReplyTo address and a correlation ID for the Reply message are provided by the received Request message. The Reply method or function automatically sets a single bit response attribute, and it uses a correlation ID that matches that of the incoming request message.</p>
    <p>For information on sending request messages, refer to <MadCap:xref href="Publishing-Messages-that.htm">Publishing Messages that Request Replies</MadCap:xref>.</p>
    <table style="caption-side: top;width: 95%;mc-table-style: url('../../Resources/TableStyles/Table_Num.css');" class="TableStyle-Table_Num" cellspacing="0">
      <caption valign="top" style="padding-bottom: 3pt;">
        <p class="TblCaption">To Send Reply Messages</p>
      </caption>
      <thead>
        <tr class="TableStyle-Table_Num-Head-Header1">
          <th class="TableStyle-Table_Num-HeadE-Column1-Header1">PubSub+ Messaging API</th>
          <th class="TableStyle-Table_Num-HeadD-Column1-Header1">Call</th>
        </tr>
      </thead>
      <tbody>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">JCSMP</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_BodyCode">XMLMessageProducer.sendReply(...)</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">Java RTO</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_BodyCode">SessionHandle.sendReply(...)</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">C</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_BodyCode">solClient_session_sendReply(...)</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyE-Column1-Body1">
            <p class="Tbl_Body">.NET</p>
          </td>
          <td class="TableStyle-Table_Num-BodyD-Column1-Body1">
            <p class="Tbl_BodyCode">ISession.SendReply(...)</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyB-Column1-Body1">
            <p class="Tbl_Body">JavaScript and Node.js</p>
          </td>
          <td class="TableStyle-Table_Num-BodyA-Column1-Body1">
            <p class="Tbl_BodyCode">solace.SessionsendReply(...)</p>
          </td>
        </tr>
      </tbody>
    </table>
    <p style="font-weight: bold;">Related Samples</p>
    <p>For an example of how to send and receive request/reply messages, refer to the <code>RRDirectRequester</code> and <code>RRDirectReplier</code> samples for the Java, Java RTO, C, and .NET APIs. For the JavaScript and Node.js APIs refer to the <code>BasicRequestor</code> and <code>BasicReplier</code> samples.</p>
  </body>
</html>
