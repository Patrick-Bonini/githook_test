<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
  <head>
    <link href="../../Resources/TableStyles/Table_Num.css" rel="stylesheet" MadCap:stylesheetType="table"/>
  </head>
  <body>
    <h1>Creating Secure Sessions</h1>
    <p>Clients can optionally create secure Sessions that require trusted server certificates to establish a TLS/SSL-encrypted client connection to a <MadCap:variable name="Product-Names.pubsub_brand_only"/> event broker. When a secure Session is created, SMF information is transported using TLS/SSL over TCP instead of plain-text over TCP.</p>
    <p>To create a secure Session, a number of TLS/SSL-specific Session properties must be specified as discussed below. In addition, the event broker that the secure Session will connect to must be properly configured, and the appropriate server certificate must be in place. For information on configuring an event broker to allow for secure connections, refer to <MadCap:xref MadCap:unresolvedLink="import-link:managing_tls_ssl_service_796577956_15157" href="../../Security/Managing-TLS-SSL-Service.htm">Managing TLS/SSL Service</MadCap:xref>.</p>
    <h4>Related Samples</h4>
    <p>For an example of how to create and connect secure Sessions, refer to the <code>SecureSession</code> sample for the appropriate messaging API. Also, you can use secure Sessions on other samples by prepending “<code>tcps:</code>” to the hostname used in the sample (refer to <MadCap:xref href="Session-Props-Required.htm#Creating_ent_sessions_sess_props_host">Host</MadCap:xref>).</p>
    <h2 class="with-rule"><a name="TLS"/>TLS/SSL-Specific Properties</h2>
    <p>To create a secure Session, the following Session properties must configured.</p>
    <p class="Note">The JavaScript API is configured through the browser where it runs, and doesn't support these configurations through Session properties.</p>
    <table style="caption-side: top;mc-table-style: url('../../Resources/TableStyles/Table_Num.css');" class="TableStyle-Table_Num" cellspacing="0">
      <caption valign="top" style="padding-bottom: 3pt;">
        <p>
          <b>TLS/SSL Secure Session Properties</b>
        </p>
      </caption>
      <col style="width: 150px;" class="TableStyle-Table_Num-Column-Column1"/>
      <col style="width: 600px;" class="TableStyle-Table_Num-Column-Column1"/>
      <col style="width: 450px;" class="TableStyle-Table_Num-Column-Column1"/>
      <thead>
        <tr class="TableStyle-Table_Num-Head-Header1">
          <th class="TableStyle-Table_Num-HeadE-Column1-Header1">Property</th>
          <th class="TableStyle-Table_Num-HeadE-Column1-Header1">Use</th>
          <th class="TableStyle-Table_Num-HeadD-Column1-Header1">Description</th>
        </tr>
      </thead>
      <tbody>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">Host</p>
          </td>
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p>C: <code>SOLCLIENT_SESSION_PROP_HOST</code></p>
            <p>C#/.NET: <code>SessionProperties.Host</code></p>
            <p>JCSMP: <code>JCSMPProperties.HOST</code></p>
            <p>Java RTO: <code>SessionHandle.PROPERTIES.HOST</code></p>
            <p>JavaScript: <code>solace.SessionProperties.url</code></p>
            <p>Node.js: <code>solace.SessionProperties.url</code></p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_Body">Each host entry for a TLS/SSL connection requires an appropriate TLS/SSL protocol, and a specific TLS/SSL port number can optionally be specified. </p>
            <p class="Tbl_Body">If no port number is specified, the default port of 55443 is used.</p>
            <p class="Tbl_Body">For information on configuring hosts, refer to <MadCap:xref href="Session-Props-Required.htm#Creating_ent_sessions_sess_props_host">Host</MadCap:xref>.</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">SSL Excluded Protocols</p>
          </td>
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p>C: <code>SOLCLIENT_SESSION_PROP_SSL_EXCLUDED_PROTOCOLS</code> </p>
            <p>C#/.NET: <code>SessionProperties.SSLExcludedProtocols</code></p>
            <p>JCSMP: <code>JCSMPProperties.SSL_EXCLUDED_PROTOCOLS</code></p>
            <p>Java RTO: <code>SessionHandle.PROPERTIES.SSL_EXCLUDED_PROTOCOLS</code></p>
            <p>JavaScript: N/A</p>
            <p>Node.js: <code>solace.SessionProperties.sslExcludedProtocols</code></p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_Body">A comma-separated list of encryption protocols that may not be used for secure connections. Possible values are:</p>
            <ul>
              <li>SSLv3.0 (<code>SSLv3</code>)</li>
              <li>TLS v1.0 (<code>TLSv1</code>)</li>
              <li>TLS v1.1 (<code>TLSv1.1</code>)</li>
              <li>TLS v1.2 (<code>TLSv1.2</code>)</li>
            </ul>
            <p class="Tbl_Body">See the preference for the specific values for SSL v3.0, TLS v1.0, TLS, v1.1, TLS V1.2. The default list is empty, meaning that any encryption protocol can be used (no protocols are excluded). </p>
            <p class="Note">As of <MadCap:variable name="Variables.CompanyName"/> <MadCap:variable name="Product-Names.pubsub_brand_only"/> 7.1, this property has replaced the deprecated property SSL Protocol. Solace recommends switching to the new property as soon as possible. You may not use SSL Exclude Protocols and SSL Protocol together.</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">SSL Certificate Validation</p>
          </td>
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p>C: <code>SOLCLIENT_SESSION_PROP_DEFAULT_SSL_VALIDATE_CERTIFICATE</code></p>
            <p>C#/.NET: <code>SessionProperties.SSLValidateCertificate</code></p>
            <p>JCSMP: <code>JCSMPProperties.SSL_VALIDATE_CERTIFICATE</code></p>
            <p>Java RTO: <code>SessionHandle.PROPERTIES.SSL_VALIDATE_CERTIFICATE</code></p>
            <p>JavaScript: N/A</p>
            <p>Node.js: <code>solace.SessionProperties.sslValidateCertificate</code></p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_Body">Indicates that whether the API should validate server certificates with the trusted certificates in the trust store. </p>
            <p class="Tbl_Body">The API-specific information is as follows:</p>
            <ul>
              <li> (C, Java RTO, Node.js, and .NET APIs) The trust store is a directory on a server that contains the trusted certificates. The default value for this property is <code>True</code>.</li>
              <li>(JCSMP) A JKS or PKCS12 certificate file is used for the trust store.</li>
            </ul>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyE-Column1-Body1">
            <p class="Tbl_Body">SSL Certificate Date Validation</p>
          </td>
          <td class="TableStyle-Table_Num-BodyE-Column1-Body1">
            <p>C: <code>SOLCLIENT_SESSION_PROP_DEFAULT_SSL_VALIDATE_CERTIFICATE_DATE</code></p>
            <p>C#/.NET: <code>SessionProperties.SSLValidateCertificateDate</code></p>
            <p>JCSMP: <code>JCSMPProperties.SSL_VALIDATE_CERTIFICATE_DATE</code></p>
            <p>Java RTO: <code>SessionHandle.PROPERTIES.SSL_VALIDATE_CERTIFICATE_DATE</code></p>
            <p>JavaScript: N/A</p>
            <p>Node.js: N/A</p>
          </td>
          <td class="TableStyle-Table_Num-BodyD-Column1-Body1">
            <p class="Tbl_Body">Indicates whether the Session connection should fail when an expired certificate or a certificate not yet in use is received. The default is <code>True</code>.</p>
            <p class="Tbl_Body"> </p>
            <p>No certificate date validation is performed if the SSL Certificate Validation property is set to <code>False</code>.</p>
            <p class="Tbl_Body"> </p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">SSL  Certificate Host Validation (SSL Server Certificate Validation Using Subject-Alternative Name )</td>
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p>C: <code>SOLCLIENT_SESSION_PROP_SSL_VALIDATE_CERTIFICATE_HOST</code></p>
            <p>C#/.NET: <code>SessionProperties.SSLValidateCertificateHost</code></p>
            <p>JCSMP: <code>JCSMPProperties.SSL_VALIDATE_CERTIFICATE_HOST</code></p>
            <p>Java RTO: <code>SessionHandle.PROPERTIES.SSL_VALIDATE_CERTIFICATE_HOST</code></p>
            <p>JavaScript: N/A</p>
            <p>Node.js: N/A</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p>Indicates if the session connection validates the subject alternative name in the X.509 certificate. If the X.509 certificate does not contain the subject alternative name section, the Common Name in the Subject field of the X.509 certificate is verified against the HOST property. The default and recommended setting is <code>True</code>.</p>
            <p>No certificate host validation is performed if the SSL Certificate Validation property is set to <code>False</code>.</p>
            <p> </p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">SSL Cipher Suites</p>
          </td>
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p>C: <code>SOLCLIENT_SESSION_PROP_DEFAULT_SSL_CIPHER_SUITES</code></p>
            <p>C#/.NET: <code>SessionProperties.SSLCipherSuites</code></p>
            <p>JCSMP: <code>JCSMPProperties.SSL_CIPHER_SUITES</code></p>
            <p>Java RTO: <code>SessionHandle.PROPERTIES.SSL_CIPHER_SUITES</code></p>
            <p>JavaScript: N/A</p>
            <p>Node.js: <code>solace.SessionProperties.sslCipherSuites</code></p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_Body">A comma-separated list of cipher suites, listed in order of importance, to use to negotiate with the event broker.</p>
            <p class="Tbl_Body">A cipher suite is a combination of cryptographic parameters that define the security algorithms and key sizes used for authentication, key agreement, encryption, and integrity protection.</p>
            <p class="Tbl_Body">For a listing of the supported cipher suites in order of preference, refer to  <MadCap:xref href="../Messaging-APIs/Solace-APIs-Overview.htm">APIs &amp; Protocols</MadCap:xref> for the appropriate messaging API. By default, no cipher suites are listed, which indicates that all supported ciphers should be considered.</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">SSL Trusted Store Directory</p>
          </td>
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p>C:<code> SOLCLIENT_SESSION_PROP_SSL_TRUST_STORE_DIR</code></p>
            <p>C#/.NET: <code>SessionProperties.SSLTrustStoreDir</code></p>
            <p>JCSMP: N/A</p>
            <p>Java RTO: <code>SessionHandle.PROPERTIES.SSL_TRUST_STORE_DIR</code></p>
            <p>JavaScript: N/A</p>
            <p>Node.js: N/A</p>
            <p> </p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_Body">The directory where trusted certificates are stored.</p>
            <p class="Tbl_Body"> The API-specific information is as follows:</p>
            <ul>
              <li>(Java RTO, C, and .NET APIs only) The network directory where the trusted certificates are stored.</li>
              <li>For iOS applications, the OpenSSL trusted store directory must be included in the application’s bundle and the <code> SOLCLIENT_SESSION_PROP_SSL_TRUST_STORE_DIR</code> property set to the path of this directory. For an example, refer to the iOS <code>SecureSession</code> sample. For instructions on running the <code>SecureSession</code> sample for iOS, see the <code>README</code> file in the <code>ex/certs</code> directory in the location where the iOS API is installed.</li>
            </ul>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyE-Column1-Body1">
            <p class="Tbl_Body">SSL Trust Store (file-based)</p>
          </td>
          <td class="TableStyle-Table_Num-BodyE-Column1-Body1">
            <p>C: N/A </p>
            <p>C#/.NET: N/A</p>
            <p>JCSMP: <code>JCSMPProperties.SSL_TRUST_STORE</code></p>
            <p>Java RTO: N/A</p>
            <p>Javascript: N/A</p>
            <p>Node.js: <code>solace.SessionProperties.sslTrustStores</code></p>
          </td>
          <td class="TableStyle-Table_Num-BodyD-Column1-Body1">
            <p class="Tbl_Body">The trust store files to use. The API-specific information is as follows:</p>
            <ul>
              <li>(JCSMP only) The trust store file (in URL or path format) to use. This property is mandatory if the <code>SSL_VALIDATE_CERTIFICATE</code> property is set to <code>True</code>.</li>
              <li>(Node.js only) The trusted certificated files (in path format) to use. This property is mandatory if the <code>sslValidateCertificateproperty</code> is set to <code>True</code>.</li>
            </ul>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p>SSL Trust Store (in-memory)</p>
          </td>
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p>C: N/A </p>
            <p>C#/.NET: <code>SessionProperties.SSLTrustStore</code></p>
            <p>JCSMP: <code>JCSMPProperties.SSL_IN_MEMORY_TRUST_STORE</code></p>
            <p>Java RTO: N/A</p>
            <p>Javascript: N/A</p>
            <p>Node.js: N/A</p>
            <p> </p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p>Indicates the trusted certificates that are available as in-memory trust store. The API-specific information is as follows:</p>
            <ul>
              <li>(.NET API only) The trusted certificates (in <code>X509CertificateCollection</code> format) to use for in-memory usage. This property is mandatory if the <code>SSLValidateCertificate</code> property is set to <code>True</code>. This property cannot be used in conjunction with <code>SSLTrustStoreDir </code>property.</li>
              <li>(JCSMP only) The in-memory store in a <code>java.security.KeyStore</code> format. The <code>SSL_TRUST_STORE_PASSWORD</code> property is not required when using this property . Only use <code>SSL_TRUST_STORE</code> <u style="font-weight: bold;">or</u> <code>SSL_IN_MEMORY_TRUST_STORE</code>. You cannot mix in-memory and file-based (for example, URLs or filepaths) usage for the SSL trust store property. It's important to remember when using in-memory trust store that the  <code>Keystore</code> object is considered immutable after its passed the <MadCap:variable name="Product-Names.pubsub_brand_only"/> Messaging API for JCSMP.</li>
            </ul>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">SSL Trust Store Password</p>
          </td>
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p>C:N/A</p>
            <p>C#/.NET: N/A</p>
            <p>JCSMP: <code>SessionHandle.PROPERTIES.SSL_TRUST_STORE_PASSWORD</code> </p>
            <p>Java RTO: N/A</p>
            <p>Javascript: N/A</p>
            <p>Node.js: N/A</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_Body">Specifies the password of the trust store. The API-specific information is as follows:</p>
            <ul>
              <li>(JCSMP only) The trust store password for the trust store provided for the <code>SSL_TRUST_STORE_PASSWORD</code>  property. This property is mandatory if the <code>SSL_VALIDATE_CERTIFICATE</code> property is set to <code>True</code>.</li>
            </ul>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">SSL Trust Store Format</p>
          </td>
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p>C: N/A</p>
            <p>C#/.NET: N/A</p>
            <p>JCSMP: <code>JCSMPProperties.SSL_TRUST_STORE_FORMAT</code> </p>
            <p>Java RTO: N/A</p>
            <p>Javascript: N/A</p>
            <p>Node.js: N/A</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_Body">Indicates the format used by the trust store provided for the SSL Trust Store property. The API-specific information is as follows:</p>
            <ul>
              <li>(JCSMP  only) Supported trust store formats are <code>JKS</code> (the default) and <code>PKCS12</code>.</li>
            </ul>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyE-Column1-Body1">
            <p class="Tbl_Body">SSL Connection Downgrade To</p>
          </td>
          <td class="TableStyle-Table_Num-BodyE-Column1-Body1">
            <p> </p>
            <p>C: <code>SOLCLIENT_SESSION_PROP_SSL_CONNECTION_DOWNGRADE_TO</code></p>
            <p>C#/.NET: <code>SessionProperties.SSLConnectionDowngradeTo</code></p>
            <p>JCSMP: <code>SessionHandle.PROPERTIES.SSL_CONNECTION_DOWNGRADE_TO</code></p>
            <p>Java RTO: <code>SessionHandle.PROPERTIESSSL_CONNECTION_DOWNGRADE_TO</code></p>
            <p>Javascript: N/A</p>
            <p>Node.js: <code>solace.SessionProperties.sslConnectionDowngradeTo</code></p>
          </td>
          <td class="TableStyle-Table_Num-BodyD-Column1-Body1">
            <p class="Tbl_Body">Indicates that the SSL connection should be downgraded following client authentication. </p>
            <p class="Tbl_Body"> </p>
            <p class="Tbl_Body">Allowed transport protocols for SSL Connection Downgrade To property are: <span style="font-family: 'Courier New';">"PLAIN_TEXT"</span>. This property is optional.</p>
          </td>
        </tr>
        <tr MadCap:conditions="Default.HideFromAllOutput" class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyB-Column1-Body1">&lt;TEMPLATE&gt; Generic name of property</td>
          <td class="TableStyle-Table_Num-BodyB-Column1-Body1">
            <p>C: N/A</p>
            <p>C#/.NET: N/A</p>
            <p>JCSMP: N/A</p>
            <p>Java RTO: N/A</p>
            <p>JavaScript: N/A</p>
            <p>Node.js: N/A</p>
          </td>
          <td class="TableStyle-Table_Num-BodyA-Column1-Body1">
            <p>General description</p>
            <p>* List for each API if specific descriptions or information is required.</p>
          </td>
        </tr>
      </tbody>
    </table>
  </body>
</html>
