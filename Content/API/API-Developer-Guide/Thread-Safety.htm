<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
  <head>
    <link href="../../Resources/TableStyles/Table_Num.css" rel="stylesheet" MadCap:stylesheetType="table"/>
  </head>
  <body>
    <h1><a name="Thread-Safety"/>Thread Safety</h1>
    <p>The <MadCap:variable name="Product-Names.pubsub_brand_only"/> Messaging APIs ensure that certain API elements are thread-safe, while others are the responsibility of the application developer. The table below lists who is responsible for the thread safety of each API element: </p>
    <p> </p>
    <table style="mc-table-style: url('../../Resources/TableStyles/Table_Num.css');width: 100%;margin-left: 0;margin-right: auto;" class="TableStyle-Table_Num" cellspacing="0">
      <col class="TableStyle-Table_Num-Column-Column1">
            </col>
      <col class="TableStyle-Table_Num-Column-Column1" style="width: 20%;">
            </col>
      <col class="TableStyle-Table_Num-Column-Column1" style="width: 20%;">
            </col>
      <thead>
        <tr class="TableStyle-Table_Num-Head-Header1">
          <th class="TableStyle-Table_Num-HeadE-Column1-Header1" style="text-align: left;" rowspan="2">Element of <MadCap:variable name="Product-Names.pubsub_brand_only"/> APIs</th>
          <th class="TableStyle-Table_Num-HeadD-Column1-Header1" style="text-align: center;border-left-style: solid;border-left-width: 1px;border-right-style: solid;border-right-width: 1px;border-bottom-style: solid;border-bottom-width: 1px;padding-left: 4pt;padding-right: 6pt;padding-top: 6pt;padding-bottom: 6pt;" colspan="2">Thread Safety</th>
        </tr>
        <tr class="TableStyle-Table_Num-Head-Header1">
          <th class="TableStyle-Table_Num-HeadE-Column1-Header1" style="border-left-style: solid;border-left-width: 1px;border-right-style: solid;border-right-width: 1px;padding-left: 4pt;padding-right: 6pt;padding-top: 6pt;padding-bottom: 6pt;text-align: center;">API Built-In<br/>Thread Safety</th>
          <th class="TableStyle-Table_Num-HeadD-Column1-Header1" style="border-left-style: solid;border-left-width: 1px;border-right-style: solid;border-right-width: 1px;padding-left: 4pt;padding-right: 6pt;padding-top: 6pt;padding-bottom: 6pt;text-align: center;">Application Developer's<br/>Responsibility</th>
        </tr>
      </thead>
      <tbody>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1" style="font-weight: bold;text-align: left;">Contexts</td>
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1" style="text-align: center;">
            <img src="../../Resources/Images/Cloud/reusable-icons/check-mark-brand.png" alt="built in"/>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1" style="text-align: center;"> </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1" style="font-weight: bold;text-align: left;">Sessions </td>
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1" style="text-align: center;">
            <img src="../../Resources/Images/Cloud/reusable-icons/check-mark-brand.png" alt="built in"/>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1" style="text-align: center;"> </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1" style="font-weight: bold;text-align: left;">Flows</td>
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1" style="text-align: center;">
            <img src="../../Resources/Images/Cloud/reusable-icons/check-mark-brand.png" alt="built in"/>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1" style="text-align: center;"> </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyE-Column1-Body1" style="font-weight: bold;text-align: left;">Messages </td>
          <td class="TableStyle-Table_Num-BodyE-Column1-Body1" style="text-align: center;"> </td>
          <td class="TableStyle-Table_Num-BodyD-Column1-Body1" style="text-align: center;">
            <img src="../../Resources/Images/Cloud/reusable-icons/check-mark-brand.png" alt="developer"/>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1" style="font-weight: bold;text-align: left;">Transacted Sessions </td>
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1" style="text-align: center;"> </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1" style="text-align: center;">
            <img src="../../Resources/Images/Cloud/reusable-icons/check-mark-brand.png" alt="developer"/>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyB-Column1-Body1" style="font-weight: bold;text-align: left;">Transacted Flows </td>
          <td class="TableStyle-Table_Num-BodyB-Column1-Body1" style="text-align: center;"> </td>
          <td class="TableStyle-Table_Num-BodyA-Column1-Body1" style="text-align: center;">
            <img src="../../Resources/Images/Cloud/reusable-icons/check-mark-brand.png" alt="developer"/>
          </td>
        </tr>
      </tbody>
    </table>
    <h2 class="with-rule"><a name="Contexts-Sessions-Flows-Thread-Safe"/>Contexts, Sessions, and Flows: Thread Safe </h2>
    <p>Your enterprise might need multiple Contexts to organize communications between applications and event brokers. Similarly, your applications might use multiple publishers or receivers in a single session, requiring multiple threads. To ensure that your applications can rely on determinate API results during operation, the Messaging APIs guarantee that all Contexts, Sessions, and Flows you create are thread safe. The Messaging APIs use two built-in mechanisms  to ensure that Contexts, Sessions, and Flows, which allow for guaranteed messaging, remain thread-safe:</p>
    <p> </p>
    <p class="Note">All callbacks in the <MadCap:variable name="Product-Names.pubsub_brand_only"/> Messaging APIs occur on the same internal context thread, making them thread-safe.</p>
    <h4>Mutex (Mutual Exclusion)</h4>
    <p>To ensure thread safety, the Messaging APIs use mutexes to limit a segment of code to a single thread. After that thread has executed that segment, the code segment is unlocked, and another thread can gain access to it. The use of mutexes ensures that only one thread at a time has access to resources that are shared by multiple threads. </p>
    <p style="text-align: center;">
      <img src="Images/Thread_Safety_Mutex.png" alt="Illustration depicting a mutex " style="padding-top: 15px;padding-bottom: 15px;"/>
    </p>
    <h4>Serialization</h4>
    <p>Sometimes thread safety can be required over many hundreds or thousands of lines of code. To avoid locking down large segments of code, which can cause programs to block and become non-performant, the Messaging APIs use serialization. With serialization, the tasks for a particular operation are scheduled on a thread such that they occur in a specific sequence and are prevented from running simultaneously. This ensures that these tasks run serially and cannot conflict with each other.</p>
    <p style="text-align: center;">
      <img src="Images/Thread_Safety_Serialization.png" alt="Illustration depicting thread serialization" style="padding-top: 15px;padding-bottom: 15px;"/>
    </p>
    <p class="Note">Because serialization occurs on the Messaging API Context thread, you do not need to implement it in your application.</p>
    <p>The combination of these two mechanisms ensures that no indeterminate results or unexpected behaviors arise when you use Contexts, Flows, and Sessions in multi-threaded, enterprise applications.</p>
    <h2 class="with-rule"><a name="Messages-Developer-Responsibility"/>Messages: Developer Responsibility</h2>
    <p>The Messaging APIs do not guarantee that messages are thread safe; however, this has more to do with the nature of event streaming than with data stability. We recommend that you implement individual message processing on a single thread. This ensures that the payload of each message will not be subject to race conditions or thread-safety problems, which could result in indeterminate results.  </p>
    <h2 class="with-rule"><a name="Transacted-Sessions-Transacted-Flows-Developer-Responsibility"/>Transacted Sessions and Transacted Flows: Developer Responsibility</h2>
    <p>All of the <MadCap:variable name="Product-Names.pubsub_brand_only"/> Messaging APIs support local transactions only (with the exception of JMS which also supports Distributed Transactions), and because local transactions are modeled after JMS Transactions, they follow JMS protocols. The JMS protocol requires that local transactions, which include transacted flows and transacted sessions, be handled by a single thread. This is because there is no definite start or end on a transacted session and the completion of a transaction requires a commit call. After a transaction is committed, it is deemed complete. At that point, the transaction messages are sent or received, and a new transaction begins. This means that all processing of a transacted session or flow must be processed and controlled by a single thread, operating in a similar fashion to message processing. Although this means that transacted sessions and transacted flows are technically not thread safe, they operate in a single-threaded fashion that does not pose any thread-safety risks. </p>
  </body>
</html>
