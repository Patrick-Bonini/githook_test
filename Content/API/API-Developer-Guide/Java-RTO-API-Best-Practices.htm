<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
  <head>
    <link href="../../Resources/TableStyles/Table_Num.css" rel="stylesheet" MadCap:stylesheetType="table"/>
  </head>
  <body>
    <h1>Java RTO API Best Practices</h1>
    <h2 class="with-rule"><a name="Context"/>Context and Session Threading Model Considerations</h2>
    <MadCap:snippetBlock src="Snippets/Context-Session-Thread-Model-Consider.flsnp"/>
    <h3><a name="Context"/>Context Thread Affinity</h3>
    <h4>Recommendation</h4>
    <ul>
      <li>Use <code>IPCSupport.CONTEXT_PROPERTIES.THREAD_AFFINITY_CPU_LIST</code> to pin the API generated context thread to a CPU. </li>
    </ul>
    <p>When the context thread is automatically generated by the C API, the thread affinity can be set for the context thread through the <code>IPCSupport.CONTEXT_PROPERTIES.THREAD_AFFINITY_CPU_LIST</code> parameter during context creation. When you set the thread affinity, it dedicates a specific CPU for processing improvement and prevents the context thread from being interrupted by other processes. By default, the thread affinity for the auto-created context thread is not set, allowing your operating system to optimally schedule the context thread on available CPUs. The expected string value is a comma-separated list that can be:</p>
    <ul>
      <li>
        <p>numbers—base-10 non-negative integers between 0 and the number of CPUs in the system<br/><b>and/or</b></p>
      </li>
      <li>
        <p> ranges—two numbers with a dash character between them</p>
      </li>
    </ul>
    <p>The following example shows how to create a <code>ContextHandle</code> and set the thread affinity for a list of CPUs using numbers and ranges:</p>
    <pre>
			final ContextHandle contextHandle = Solclient.Allocator.newContextHandle();<br/>String[] contextProps = new String[2];<br/>int propIndex = 0;<br/>contextProps[propIndex++] = IPCSupport.CONTEXT_PROPERTIES.THREAD_AFFINITY_CPU_LIST;
<br/>contextProps[propIndex++] = "1,2,3,8-10,13-15";
<br/>rc = Solclient.createContextForHandle(contextHandle, contextProps);<br/>assertReturnCode("Solclient.createContextForHandle()", rc, SolEnum.ReturnCode.OK);
</pre>
    <p>The default value of <code>IPCSupport.CONTEXT_PROPERTIES.THREAD_AFFINITY_CPU_LIST</code> is an empty string, which results in no thread affinity setting.</p>
    <p>For more information and details about usage, see the <a href="../../API-Developer-Online-Ref-Documentation/jrto/index.html" class="link-internal"><MadCap:variable name="Product-Names.pubsub_brand_only"/> Messaging API for Java RTO reference</a>.</p>
    <h2 class="with-rule"><a name="Memory"/>Memory Management</h2>
    <p>The Java RTO API is designed to cause no garbage collection within the JVM. However, to prevent garbage collection, applications using the Java RTO API must also be designed correctly.</p>
    <h3><a name="Modifyin"/>Modifying the Global Pool Buffer Sizes</h3>
    <p>When the Java RTO API is initialized, you can optionally modify the default global data buffer sizes for the five pools that are used.</p>
    <p>When you call the <code>Solclient.init(...)</code> function to initialize the C API, you can pass in <code>Solclient.GLOBAL_PROPERTIES.DBQUANTASIZE_&lt;0-4&gt; “DBQUANTASIZE”</code> to specify the size (in bytes) of the data buffers for each of the five pools.</p>
    <p>For more information, see the <a href="../../API-Developer-Online-Ref-Documentation/jrto/index.html" class="link-internal"><MadCap:variable name="Product-Names.pubsub_brand_only"/> Messaging API for Java RTO reference</a>.</p>
    <h3><a name="Configur"/>Configuring Message Buffer Sizes</h3>
    <p>When creating a Session, an application can configure the following memory and resource allocation-related Session property parameters:</p>
    <ul>
      <li>
        <code>SessionHandle.PROPERTIES.BUFFER_SIZE</code>
        <p>The Session buffer size used for transmitting messages for the TCP Session. This parameter specifies the maximum amount of messages to buffer (as measured in bytes). For maximum performance, when sending small messages, the Session buffer size should be set to multiple times the typical message size.</p>
        <p>The C API always accepts at least one message to transmit. So even if the size of a single message exceeds the set buffer size, it is accepted and transmitted, as long as the current buffered data is zero. However, no further messages are accepted until the amount of data buffered is reduced below the set buffer size.</p>
      </li>
      <li>
        <code>SessionHandle.PROPERTIES.SOCKET_RCV_BUF_SIZE</code>
        <p>The receive buffer size (in bytes) for the subscriber data socket. A default value of 150,000 is used. If this property is set to 0, the receive buffer size uses the operating system default. </p>
        <div class="Note">
          <p class="Tbl_Body">On Windows platforms the receive socket buffer size must be much larger than the send socket buffer sizes to prevent data loss when sending and receiving messages. For example, the default send socket and internal buffer sizes are set to 90,000, and the default receive socket buffer size is set to 150,000. If you change the default sizes, it is recommended that you maintain a similar sizing ratio.</p>
        </div>
      </li>
      <li>
        <code>SessionHandle.PROPERTIES.SOCKET_SEND_BUF_SIZE</code>
        <p>This parameter allows the send buffer size (in bytes) for the publisher data socket to be set by the application. A default value of 90,000 is used. If this property is set to 0, the send buffer size uses the operating system default.</p>
      </li>
    </ul>
    <h3><a name="Object"/>Object Pooling</h3>
    <p>Whenever possible, objects should not be allocated and freed, but instead pre‑allocated and reused. This includes all of the objects provided within the Java RTO API, but also all other objects within the application. Solace recommends that application designers follow the object pool pattern to accomplish this.</p>
    <p>The object pool pattern involves using and re-using a pool of initialized objects rather than destroying and recreating objects as needed. New objects should be created only when the pool contains no usable objects, so that the number of total objects in use is kept as low as possible.</p>
    <h3><a name="Get"/>Get vs. Take</h3>
    <p>When using <code>MessageHandle.getRxMessage()</code> to acquire messages, the Java RTO API retains ownership of the message and its allocated memory. The message will be freed automatically by the API after the message callback has completed. For best performance, Solace recommends using <code>MessageHandle.getRxMessage()</code>.</p>
    <p>When using <code>MessageHandle.takeRxmessage(MessageHandle)</code> to acquire messages, the application takes ownership of the message. Destroying the message with <code>Handle.destroy()</code> becomes the responsibility of the application. Using <code>MessageHandle.takeRxmessage(MessageHandle)</code> invokes a copy inside the Java RTO API.</p>
    <p>The same distinction between get and take applies to the equivalent methods in <code>SessionHandle</code>, <code>FlowHandle</code>, and <code>CacheSessionHandle</code>.</p>
    <h3><a name="TCP"/>TCP Send and Receive Buffer Size</h3>
    <MadCap:snippetBlock src="Snippets/TCP-Send-Rec-Buf-Size.flsnp"/>
    <ul>
      <li><code>SessionHandle.PROPERTIES.SOCKET_RCV_BUF_SIZE</code>; 150,000 bytes</li>
      <li><code>SessionHandle.PROPERTIES.SOCKET_SEND_BUF_SIZE</code>; 90,000 bytes</li>
    </ul>
    <h2 class="with-rule" MadCap:conditions="Default.HideFromAllOutput"><a name="Logging"/>Logging and Log Levels</h2>
    <p MadCap:conditions="Default.HideFromAllOutput">Event logging can have a significant impact on performance. In a production environment, only the most serious events should be logged. In the Java RTO API, verbose log levels such as debug and info may cause the JVM to perform garbage collection.</p>
    <h2 class="with-rule"><a name="Session"/>Session Establishment</h2>
    <h3><a name="Blocking2"/>Blocking Connect</h3>
    <MadCap:snippetBlock src="Snippets/Blocking-Connect.flsnp"/>
    <p>The blocking connect property is <code>SessionHandle.PROPERTIES.CONNECT_BLOCKING</code>.</p>
    <h3><a name="Host"/>Host Lists</h3>
    <MadCap:snippetBlock src="Snippets/Host-Lists.flsnp"/>
    <h3><a name="Client2"/>Client API Keep-alive</h3>
    <MadCap:snippetBlock src="Snippets/Client-API-keepalive.flsnp"/>
    <h3><a name="High"/>High Availability Failover and Reconnect Retries</h3>
    <MadCap:snippetBlock src="Snippets/HA-Failover-Reconnect-Retries.flsnp"/>
    <h3><a name="Replicat"/>Replication Failover and Reconnect Retries</h3>
    <MadCap:snippetBlock src="Snippets/Re-Fail-Reconn-Retry.flsnp"/>
    <h3><a name="Replicat2"/>Replication Failover and Session Re-Establishment</h3>
    <MadCap:snippetBlock src="Snippets/Rep-Fail-Sess-ReEstab.flsnp"/>
    <h3><a name="File"/>File Descriptor Limitation</h3>
    <MadCap:snippetBlock src="Snippets/File-Des-Limit.flsnp"/>
    <h2 class="with-rule"><a name="Subscrip"/>Subscription Management</h2>
    <p>The following best practices can be used for managing subscriptions:</p>
    <ul>
      <li>If you are adding or removing a large number of subscriptions, set the Wait for Confirm flag (<code>SessionHandle.SolEnum.SubscribeFlags.WAIT_FOR_CONFIRM</code>) on the final subscription to ensure that all subscriptions have been processed by the event broker. However, to increase performance, it is recommended that you do not set Wait for Confirm on all other subscriptions except for the last.</li>
      <li>In the event of a Session disconnect, you can have the API reapply subscriptions that were initially added by the application when the Session is reconnected. To reapply subscriptions on reconnect, enable the Reapply Subscriptions Session property (<code>SessionHandle.PROPERTIES.REAPPLY_SUBSCRIPTIONS</code>). Using this setting is recommended.</li>
    </ul>
    <h2 class="with-rule"><a name="Blocking"/>Sending Messages</h2>
    <h3>Blocking Send</h3>
    <MadCap:snippetBlock src="Snippets/Blocking-Send.flsnp"/>
    <p>The send blocking parameter is <code>SessionHandle.PROPERTIES.SEND_BLOCKING</code>.</p>
    <h3><a name="Batch"/>Batch Send</h3>
    <h4>Recommendation</h4>
    <ul>
      <li>Use the batch sending facility to optimize send performance.  This is particularly useful for performance benchmarking a client application.</li>
    </ul>
    <p>Use the batch-sending facility to optimize send performance.  This is particularly useful for performance benchmarking client applications.</p>
    <p>A group of up to 50 messages can be sent through a single API call.  This allows messages to be sent in a batch.  The messages can be either Direct or Guaranteed. When batch-sending messages through the send-multiple API, the same Delivery mode, that is Direct or Persistent mode, should be set for all  messages in the batch. Messages in a batch can be set to different destinations.</p>
    <p>In addition to using the batch-sending API, messages should be pre-allocated and reused for batch-sending whenever possible. Specifically, don't reallocate new messages for each call to the batch-sending API.</p>
    <p>The batch-sending API call is <code>SessionHandle.send()</code>.</p>
    <h3><a name="Time-to-"/>Time-to-Live Messages</h3>
    <MadCap:snippetBlock src="Snippets/Time-To-Live-Msg.flsnp"/>
    <h2 class="with-rule"><a name="Receivin2"/>Receiving Messages</h2>
    <h3><a name="Memory2"/>Memory Management when Receiving Messages</h3>
    <MadCap:snippetBlock src="Snippets/Mem-Mgmt-Rec-Msg.flsnp"/>
    <h3><a name="Handling"/>Handling Duplicate Message Publication</h3>
    <h4>Recommendation</h4>
    <ul>
      <li>Publishing duplicate messages can be avoided if the client application uses the Last Value Queue (LVQ) to determine the last message successfully spooled by the event broker upon restarting.</li>
    </ul>
    <p>When a client application is  unexpectedly restarted, it's possible for it to become out-of-sync with respect to the message publishing sequence.  There should be a mechanism by which it can determine the last message that was successfully published to, and received by, the event broker in order to correctly resume publishing without injecting duplicate messages.</p>
    <p>One approach is for the publishing application to maintain a database that correlates between the published message identifier and the acknowledgment it receives from the event broker.  This approach is completely self-contained on the client application side, but can introduce processing latencies if not well managed.</p>
    <p>Another approach is to make use of the Last Value Queue (LVQ) feature, where the LVQ stores the last message spooled on the queue. A publishing client application can then browse the LVQ to determine the last message spooled by the event broker.  This allows the publisher to resume publishing without introducing duplicate messages.</p>
    <p>Refer to <MadCap:xref href="../../Messaging/Guaranteed-Msg/Configuring-Queues.htm#Configur16">Configuring Max Spool Usage Values</MadCap:xref> for instructions on setting up LVQ.</p>
    <h3><a name="Handling2"/>Handling Redelivered Messages</h3>
    <h4>Recommendation</h4>
    <ul>
      <li>When consuming from endpoints, a client application should appropriately handle redelivered messages.</li>
    </ul>
    <p>When a client application restarts, unexpectedly or not, and rebinds to a queue, it may receive messages that it had already processed as well as acknowledged.  This can happen because the acknowledgment can be lost on route to the event broker due to network issues.  The redelivered messages will be marked with the <code>redelivered</code> flag.</p>
    <p>A client application that binds to a non-exclusive queue may also receive messages with the <code>redelivered</code> flag set, even though the messages are received by the client application for the first time.  This is due to other clients connecting to the same non-exclusive queue which disconnects without the application acknowledging the received messages.  These messages are then redelivered to other client applications that bind to the same non-exclusive queue.</p>
    <p>The consuming application should contain a message processing mechanism to handle the above mentioned scenarios.</p>
    <h3><a name="Dealing"/>Dealing with Unexpected Message Formats</h3>
    <h4>Recommendation</h4>
    <ul>
      <li>Client applications should be able to handle unexpected message formats.  In the case of consuming from endpoints, a client application should acknowledge received messages even if those messages are unexpectedly formatted.</li>
    </ul>
    <p>Client applications should be able to contend with unexpected message formats.  There shouldn't be any assumptions made about a message's payload; for example, a payload may contain an empty attachment.  Applications should be coded such that they will avoid crashing, as well as logging the message contents and sending an acknowledgment back to the event broker if using Guaranteed Messaging. If client applications crash without sending acknowledgments, then when they reconnect, the same messages will be redelivered causing the applications to fail again.</p>
    <h3><a name="Client"/>Client Acknowledgment</h3>
    <h4>Recommendation</h4>
    <ul>
      <li>Client Applications should acknowledge received messages as soon as they have completed processing those messages when client acknowledgment mode is used.</li>
    </ul>
    <p>Once an application has completed processing a message, it should acknowledge the receipt of the message to the event broker.  Only when the event broker receives an acknowledgment for a Guaranteed Message will the message be permanently removed from its message spool. If the client disconnects without sending acknowledgments for some received messages, then those messages will be redelivered.  For the case of an exclusive queue, those messages will be delivered to the next connecting client.  For the case of a non-exclusive queue, those messages will be redelivered to the other clients that are bound to the  queue.</p>
    <p>There are two kinds of acknowledgments:</p>
    <ul>
      <li><u>API (also known as Transport) Acknowledgment</u>.  This is an internal acknowledgment between the API and the event broker and isn't exposed to the application.  The Assured Delivery (AD) window size, acknowledgment timer, and the acknowledgment threshold settings control API Acknowledgment.  A message that isn't transport acknowledged will be automatically redelivered by the event broker.</li>
      <li><u>Application Acknowledgment</u>.  This acknowledgment mechanism is on top of the API Acknowledgment. Its primary purpose is to confirm that message processing has been completed, and  that the corresponding messages can be permanently removed from the event broker. There are two application acknowledgment modes: auto-acknowledgment and client acknowledgment. When auto-acknowledgment mode is used, the API automatically generates application-level acknowledgments on behalf of the application.  When client acknowledgment mode is used, the client application must explicitly send the acknowledgment for the message ID of each message received.</li>
    </ul>
    <p>Refer to the <MadCap:xref href="Receiving-Guaranteed-Messages.htm">Receiving Guaranteed Messages</MadCap:xref> for a more detailed discussion on the different acknowledgment modes.</p>
    <h2 class="with-rule"><a name="Do"/>Do Not Block in Callbacks</h2>
    <p>Applications must not block in and should return as quickly as possible from message receive, event and timer callbacks so that the calling thread can process the next message, event or timer and perform internal API housekeeping. The one exception is for transacted sessions. Applications can call API-provided blocking functions such as commit, rollback and send from within the message receive callback of a transacted session.</p>
    <h2 class="with-rule"><a name="Queues"/>Queues and Flows</h2>
    <h3><a name="Receivin"/>Receiving One Message at a Time</h3>
    <MadCap:snippetBlock src="Snippets/One-message.flsnp"/>
    <h3><a name="Setting"/>Setting Temporary Endpoint Spool Size</h3>
    <MadCap:snippetBlock src="Snippets/Set-Temp-EP-Spool-Size.flsnp"/>
    <h3><a name="AD"/>AD Window Size and max-delivered-unacked-msgs-per-flow</h3>
    <MadCap:snippetBlock src="Snippets/AD-Window-Size.flsnp"/>
    <h3><a name="Number"/>Number of Flows and AD Window Size</h3>
    <MadCap:snippetBlock src="Snippets/Flows-and-AD-Window-Size.flsnp"/>
    <h2 class="with-rule"><a name="Error"/>Error Handling and Logging</h2>
    <h3><a name="Logging2"/>Logging and Log Level</h3>
    <MadCap:snippetBlock src="Snippets/logging-and-log-level.flsnp"/>
    <p>Verbose log levels such as debug and info may cause the JVM to perform garbage collection.  This will unintentionally contradict the design principle behind the Java RTO API which is to cause no garbage collection within the JVM.</p>
    <h3><a name="Handling3"/>Handling Session Events / Errors</h3>
    <MadCap:snippetBlock src="Snippets/Session-Events-Errors.flsnp"/>
    <table class="TableStyle-Table_Num" style="width: 624px;caption-side: top;mc-table-style: url('../../Resources/TableStyles/Table_Num.css');" cellspacing="0">
      <caption valign="top" style="padding-bottom: 3pt;">
        <p class="TblCaption">Session Events</p>
      </caption>
      <col style="width: 548px;" class="TableStyle-Table_Num-Column-Column1"/>
      <col style="width: 342px;" class="TableStyle-Table_Num-Column-Column1"/>
      <thead>
        <tr class="TableStyle-Table_Num-Head-Header1">
          <td class="TableStyle-Table_Num-HeadE-Column1-Header1">Java RTO
  (SolEnum.
  SessionEventCode)</td>
          <td class="TableStyle-Table_Num-HeadD-Column1-Header1">Description</td>
        </tr>
      </thead>
      <tbody>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p>ACKNOWLEDGEMENT</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p>The oldest transmitted Persistent/Non Persistent message that has been
 acknowledged.</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p>ASSURED_DELIVERY_
  DOWN</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p>Guaranteed Delivery Publishing is not available.</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p>CAN_SEND</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p>The send is no longer blocked.</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyE-Column1-Body1">
            <p>CONNECT_FAILED_ERROR</p>
          </td>
          <td class="TableStyle-Table_Num-BodyD-Column1-Body1">
            <p>The Session attempted to connect but was unsuccessful.</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p>DOWN_ERROR</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p>The Session was established and then went down.</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p>MODIFYPROP_FAIL</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p>The session property modification failed.</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p>MODIFYPROP_OK</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p>The session property modification completed.</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyE-Column1-Body1">
            <p>PROVISION_ERROR</p>
          </td>
          <td class="TableStyle-Table_Num-BodyD-Column1-Body1">
            <p>The endpoint create/delete command failed.</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p>PROVISION_OK</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p>The endpoint create/delete command completed.</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p>RECONNECTED_NOTICE</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p>The automatic reconnect of the Session was successful, and the Session
 was established again.</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p>RECONNECTING_NOTICE</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p>The Session has gone down, and an automatic reconnect attempt is in
 progress.</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyE-Column1-Body1">
            <p>REJECTED_MSG_ERROR</p>
          </td>
          <td class="TableStyle-Table_Num-BodyD-Column1-Body1">
            <p>The appliance rejected a published message.</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p>REPUBLISH_UNACKED_
  MESSAGES</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p>After successfully reconnecting a disconnected session, the API
 received an unknown publisher flow name response when reconnecting the
 Guaranteed Delivery publisher flow.</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p>RX_MSG_TOO_
  BIG_ERROR</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p>The API discarded a received message that exceeded the Session buffer
 size.</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p>SUBSCRIPTION_ERROR</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p>The application rejected a subscription (add or remove).</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyE-Column1-Body1">
            <p>SUBSCRIPTION_OK</p>
          </td>
          <td class="TableStyle-Table_Num-BodyD-Column1-Body1">
            <p>The subscribe or unsubscribe operation has succeeded.</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p>TE_UNSUBSCRIBE_
  ERROR</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p>The Topic Endpoint unsubscribe command failed.</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p>TE_UNSUBSCRIBE_OK</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p>The Topic Endpoint unsubscribe completed.</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p>UP_NOTICE</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p>The Session is established</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyB-Column1-Body1">
            <p>VIRTUAL_ROUTER_
  NAME_CHANGED</p>
          </td>
          <td class="TableStyle-Table_Num-BodyA-Column1-Body1">
            <p>The appliance’s Virtual Router Name changed during a reconnect
 operation.</p>
          </td>
        </tr>
      </tbody>
    </table>
    <h3><a name="Handling4"/>Handling Flow Events / Errors</h3>
    <MadCap:snippetBlock src="Snippets/Handling-Flow-Events-Errors.flsnp"/>
    <table style="width: 624px;caption-side: top;mc-table-style: url('../../Resources/TableStyles/Table_Num.css');" class="TableStyle-Table_Num" cellspacing="0">
      <caption valign="top" style="padding-bottom: 3pt;">
        <p class="TblCaption">Flow Events</p>
      </caption>
      <col style="width: 548px;" class="TableStyle-Table_Num-Column-Column1"/>
      <col style="width: 342px;" class="TableStyle-Table_Num-Column-Column1"/>
      <thead>
        <tr class="TableStyle-Table_Num-Head-Header1">
          <td class="TableStyle-Table_Num-HeadE-Column1-Header1">Java RTO
  (SolEnum.
  FlowEventCode)</td>
          <td class="TableStyle-Table_Num-HeadD-Column1-Header1">Description</td>
        </tr>
      </thead>
      <tbody>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p>UP_NOTICE</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p>The Flow is established</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p>DOWN_ERROR</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p>The Flow was established and then disconnected by the appliance, likely
 due to operator intervention.</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p>BIND_FAILED_ERROR</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p>The Flow attempted to connect but was unsuccessful.</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyE-Column1-Body1">
            <p>SESSION_DOWN</p>
          </td>
          <td class="TableStyle-Table_Num-BodyD-Column1-Body1">
            <p>The Session for the Flow was disconnected.</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p>ACTIVE</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p>The Flow has become active.</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p>INACTIVE</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p>The Flow has become inactive.</p>
          </td>
        </tr>
        <tr MadCap:conditions="" style="height: 320px;" class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p>RECONNECTING</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p>When Flow Reconnect is enabled, instead of a DOWN_ERROR event, the API generates this event and attempts to rebind the Flow.</p>
            <p>If the Flow rebind fails, the API monitors the bind failure and terminates the reconnecting attempts with a DOWN_ERROR unless the failure reason  is one of the following:</p>
            <ul>
              <li>Queue Shutdown</li>
              <li>Topic Endpoint Shutdown</li>
              <li>Service Unavailable</li>
            </ul>
            <p>For more information about Flow Reconnect, refer to <MadCap:xref href="Creating-Flows.htm#Flow">Flow Auto Reconnect</MadCap:xref>.</p>
          </td>
        </tr>
        <tr MadCap:conditions="" class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyB-Column1-Body1">
            <p>RECONNECTED</p>
          </td>
          <td class="TableStyle-Table_Num-BodyA-Column1-Body1">The Flow has been successfully reconnected.</td>
        </tr>
      </tbody>
    </table>
    <h2 class="with-rule"><a name="Message"/>Event Broker Configuration that Influences Client Application Behavior</h2>
    <h3><a name="Max"/>Max Redelivery</h3>
    <MadCap:snippetBlock src="Snippets/Max-Redelivery.flsnp"/>
    <h3><a name="Reject"/>Reject Message to Sender on Discard</h3>
    <MadCap:snippetBlock src="Snippets/Reject-Msg-Sender-Discard.flsnp"/>
  </body>
</html>
