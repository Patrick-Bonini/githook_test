<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
  <head>
    <link href="../../Resources/TableStyles/Table_Num.css" rel="stylesheet" MadCap:stylesheetType="table"/>
  </head>
  <body>
    <h1>Creating Structured Data Maps and Streams</h1>
    <p>The memory that must be allocated to create maps and streams can either be allocated by the client application to create message-independent maps and streams (refer to <MadCap:xref href="#Message-Independent">Message-Independent Maps and Streams</MadCap:xref>), or it can be automatically allocated by the API to create message‑dependent maps and streams (refer to <MadCap:xref href="#Message-Dependent">Message-Dependent Maps and Streams</MadCap:xref>).</p>
    <p>Message-independent maps and streams are available for all of the messaging APIs; whereas, message-dependent maps and streams are available for only the C and .NET APIs.</p>
    <h2 class="with-rule"><a name="Message-Independent"/>Message-Independent Maps and Streams</h2>
    <p>Typically, a map or stream is created in application memory that is independent of a particular message. This allows a container to be added to other containers or to the binary message parts of more than just one message. Using a message‑independent container can be useful if you want to add it repeatedly to different messages or to existing containers as a common container.</p>
    <p>For the Java, JavaScript, Node.js, and .NET APIs, when a container is created, memory is allocated for it from the heap.</p>
    <p>For the C API, you must pass in pointers to the location to receive the container pointer and to the location to create the container.</p>
    <p>The following sections discuss how to use containers that are message‑independent:</p>
    <ul>
      <li>
        <MadCap:xref href="#Create-Maps">Creating Structured Data Maps</MadCap:xref>
      </li>
      <li>
        <MadCap:xref href="#Create-Streams">Creating Structured Data Streams</MadCap:xref>
      </li>
      <li>
        <MadCap:xref href="#Copy-Content">Copying Content from Containers to Messages</MadCap:xref>
      </li>
      <li>
        <MadCap:xref href="#Add-Content">Adding Content from Containers to Messages by Reference</MadCap:xref>
      </li>
      <li>
        <MadCap:xref href="#Add-Containers">Adding Containers to Existing Containers</MadCap:xref>
      </li>
    </ul>
    <h3><a name="Create-Maps"/>Creating Structured Data Maps</h3>
    <table class="TableStyle-Table_Num" style="caption-side: top;mc-table-style: url('../../Resources/TableStyles/Table_Num.css');" cellspacing="0">
      <caption valign="top" style="padding-bottom: 3pt;">
        <p class="TblCaption">To Create Structured Data Maps</p>
      </caption>
      <thead>
        <tr class="TableStyle-Table_Num-Head-Header1">
          <th class="TableStyle-Table_Num-HeadE-Column1-Header1"><MadCap:variable name="Product-Names.pubsub_brand_only"/> Messaging API</th>
          <th class="TableStyle-Table_Num-HeadD-Column1-Header1">
                        Use
                    </th>
        </tr>
      </thead>
      <tbody>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">Java</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <ul>
              <li>
                <p class="Tbl_BodyCode">XMLMessageProducer.createMap()</p>
              </li>
              <li>
                <p class="Tbl_BodyCode">JCSMPFactory.createMap()</p>
              </li>
            </ul>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">C</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_BodyCode">solClient_container_createMap()</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">.NET</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_BodyCode">SDTUtils.CreateMap(...)</p>
            <p class="Note">Once the application is done with the map, explicitly call <code>Dispose()</code> to ensure that allocated memory is freed.</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyB-Column1-Body1">
            <p class="Tbl_Body">JavaScript and Node.js</p>
          </td>
          <td class="TableStyle-Table_Num-BodyA-Column1-Body1">
            <p class="Tbl_Body">Create a new <code>solace.SDTMapContainer</code> object</p>
          </td>
        </tr>
      </tbody>
    </table>
    <h3><a name="Create-Streams"/>Creating Structured Data Streams</h3>
    <table class="TableStyle-Table_Num" style="caption-side: top;mc-table-style: url('../../Resources/TableStyles/Table_Num.css');" cellspacing="0">
      <caption valign="top" style="padding-bottom: 3pt;">
        <p class="TblCaption">To Create Structured Data Streams</p>
      </caption>
      <thead>
        <tr class="TableStyle-Table_Num-Head-Header1">
          <th class="TableStyle-Table_Num-HeadE-Column1-Header1"><MadCap:variable name="Product-Names.pubsub_brand_only"/> Messaging API</th>
          <th class="TableStyle-Table_Num-HeadD-Column1-Header1">
                       Use
                    </th>
        </tr>
      </thead>
      <tbody>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">JCSMP</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <ul>
              <li>
                <p class="Tbl_BodyCode">XMLMessageProducer.createStream()
</p>
              </li>
              <li>
                <p class="Tbl_BodyCode">JCSMPFactory.createStream()</p>
              </li>
            </ul>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">C</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_BodyCode">solClient_container_createStream(...)</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">.NET</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_Body"><code>SDTUtils.CreateStream(...)</code> and pass in the maximum size (in bytes) for the stream.</p>
            <p class="Note">Once the application is done with the stream, explicitly call <code>Dispose()</code> to ensure that allocated memory is freed.</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyB-Column1-Body1">
            <p class="Tbl_Body">JavaScript and Node.js</p>
          </td>
          <td class="TableStyle-Table_Num-BodyA-Column1-Body1">
            <p class="Tbl_Body">Create a new <code>solace.SDTStreamContainer</code> object</p>
          </td>
        </tr>
      </tbody>
    </table>
    <h3><a name="Copy-Content"/>Copying Content from Containers to Messages</h3>
    <p>To copy data from a container into a message’s binary attachment, call one of the functions or methods listed below. Pass in the message the content is for and the container with the content to be copied in. For the C API, pointers to the message and the container are used.</p>
    <p>If a binary attachment is present before the function or method is called, it is removed before the new data is copied in.</p>
    <p>After the function or method is called, any further changes to the container contents are not propagated to the referenced message.</p>
    <table class="TableStyle-Table_Num" style="caption-side: top;mc-table-style: url('../../Resources/TableStyles/Table_Num.css');width: 95%;" cellspacing="0">
      <caption valign="top" style="padding-bottom: 3pt;">
        <p class="TblCaption">To Copy Container Content to Messages</p>
      </caption>
      <thead>
        <tr class="TableStyle-Table_Num-Head-Header1">
          <th class="TableStyle-Table_Num-HeadE-Column1-Header1"><MadCap:variable name="Product-Names.pubsub_brand_only"/> Messaging API</th>
          <th class="TableStyle-Table_Num-HeadD-Column1-Header1">Use
                    </th>
        </tr>
      </thead>
      <tbody>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">JCSMP</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_Body">Not applicable</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">C</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_BodyCode">solClient_msg_<br/>setBinaryAttachmentContainer(...)</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">.NET</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_BodyCode">SDTUtils.SetSDTContainer(...)</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyB-Column1-Body1">
            <p class="Tbl_Body">JavaScript and Node.js</p>
          </td>
          <td class="TableStyle-Table_Num-BodyA-Column1-Body1">
            <p class="Tbl_Body">Not applicable</p>
          </td>
        </tr>
      </tbody>
    </table>
    <h3><a name="Add-Content"/>Adding Content from Containers to Messages by Reference</h3>
    <p>To add data from a map or a stream into a message’s binary attachment through a container reference call a method or function listed in the table below and pass a reference to the message to receive the contents and the container with the contents that are to be added.</p>
    <p>If the message already has a binary attachment, it is removed and only the referenced map is transmitted.</p>
    <h4>C API</h4>
    <p>Adding data from a map or a stream into a message’s binary attachment through an opaque container pointer reference can improve system performance because it avoids copying application memory into the message binary attachment.</p>
    <p>When the <code>solClient_session_sendMsg()</code> function is called, and the message is sent, the binary attachment contents are copied directly from the application memory to the transmit socket or buffer.</p>
    <p class="Note">After <code>solClient_msg_setBinaryAttachmentContainerPtr()</code> is called, any further changes to the container data can result in corrupt container contents for the transmitted message, so the container must not be modified until the message has been successfully transmitted and acknowledged (if it is a Guaranteed message).</p>
    <table class="TableStyle-Table_Num" style="caption-side: top;mc-table-style: url('../../Resources/TableStyles/Table_Num.css');width: 95%;" cellspacing="0">
      <caption valign="top" style="padding-bottom: 3pt;">
        <p class="TblCaption">Adding Content from Containers by Reference</p>
      </caption>
      <thead>
        <tr class="TableStyle-Table_Num-Head-Header1">
          <th class="TableStyle-Table_Num-HeadE-Column1-Header1"><MadCap:variable name="Product-Names.pubsub_brand_only"/> Messaging API</th>
          <th class="TableStyle-Table_Num-HeadD-Column1-Header1">Use</th>
        </tr>
      </thead>
      <tbody>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">JCSMP</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <ul>
              <li>
                <p class="Tbl_BodyCode">MapMessage.setMap(SDTMap map)</p>
              </li>
              <li>
                <p class="Tbl_BodyCode">StreamMessage.setStream(SDTStream stream)</p>
              </li>
            </ul>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">C</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_BodyCode">solClient_msg_setBinaryAttachmentContainerPtr(solClient_opaqueMsg_pt msg_p, solClient_opaqueContainer_pt cont_p)</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">.NET</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_Body">Not applicable</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyB-Column1-Body1">
            <p class="Tbl_Body">JavaScript and Node.js</p>
          </td>
          <td class="TableStyle-Table_Num-BodyA-Column1-Body1">
            <p class="Tbl_Body">Create a new SDT field object, passing in the SDT map or stream container object to be added by reference using <code>solace.SDTField.create(...)</code>, then pass the SDT field object to <code>message.setSdtContainer(...)</code>.</p>
          </td>
        </tr>
      </tbody>
    </table>
    <h3><a name="Add-Containers"/>Adding Containers to Existing Containers</h3>
    <p>To add an existing container to a map or stream, call one of the functions or methods listed in the table below and pass in the parent container and the subcontainers that you want to add to it.</p>
    <h4>C API</h4>
    <p>Pointers to the message and the container are used. In addition, if the parent container is a map, you must also pass in the name of the field to add the container, and if the parent container is a stream, the <code>name</code> parameter must be <code>NULL</code>.</p>
    <p>To Add Containers to Existing Containers</p>
    <table class="TableStyle-Table_Num" style="caption-side: top;mc-table-style: url('../../Resources/TableStyles/Table_Num.css');" cellspacing="0">
      <caption valign="top" style="padding-bottom: 3pt;">
        <p> </p>
      </caption>
      <col class="TableStyle-Table_Num-Column-Column1"/>
      <col class="TableStyle-Table_Num-Column-Column1"/>
      <thead>
        <tr class="TableStyle-Table_Num-Head-Header1">
          <th class="TableStyle-Table_Num-HeadE-Column1-Header1"><MadCap:variable name="Product-Names.pubsub_brand_only"/> Messaging API</th>
          <th class="TableStyle-Table_Num-HeadD-Column1-Header1">Use</th>
        </tr>
      </thead>
      <tbody>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">JCSMP</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <ul>
              <li>
                <p class="Tbl_BodyCode">SDTMap.putMap(String key, SDTMap value)</p>
                <p class="Tbl_Body">Associates the specified key with the value in the map. </p>
              </li>
              <li>
                <p class="Tbl_BodyCode">SDTMap.putStream(String key, SDTStream value)</p>
                <p class="Tbl_Body">Associates the specified key with the value in the map.</p>
              </li>
              <li>
                <p class="Tbl_BodyCode">SDTStream.writeMap(SDTMap value)</p>
                <p class="Tbl_Body">Writes a map to a stream.</p>
              </li>
              <li>
                <p class="Tbl_BodyCode">SDTStream.writeStream(SDTStream value)</p>
                <p class="Tbl_Body">Writes a stream to a stream.</p>
              </li>
            </ul>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">C</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_BodyCode">solClient_container_addContainer(...)</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">.NET</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <ul>
              <li>
                <p class="Tbl_BodyCode">IMapContainer.AddSDTContainer(...)</p>
              </li>
              <li>
                <p class="Tbl_BodyCode">IStreamContainer.AddSDTContainer(...)</p>
              </li>
            </ul>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyB-Column1-Body1">
            <p class="Tbl_Body">JavaScript and Node.js</p>
          </td>
          <td class="TableStyle-Table_Num-BodyA-Column1-Body1">
            <p class="Tbl_Body">Create a new SDT field object, passing in the SDT map or stream container object to be added using <code>solace.SDTField.create(...)</code>, then use the <code>addField(...)</code> method to add it to the SDT map or stream container.</p>
          </td>
        </tr>
      </tbody>
    </table>
    <h2 class="with-rule"><a name="Message-Dependent"/>Message-Dependent Maps and Streams</h2>
    <p>For the C and .NET APIs, containers can also be created directly in the binary attachment of a message using the memory block managed by the messaging API; the container is then dependent on that particular message and cannot be reused by other messages. For the Java, JavaScript, and Node.js API, containers can only be created independent of a particular message.</p>
    <h3><a name="Creating"/>Creating Message-Dependent Maps and Streams</h3>
    <p>When using the C or .NET APIs, a client can create a map or stream of structured data directly in the binary attachment of a message. Structured data added in this manner is not created in an application memory-based container that can be reused. However, it does avoid a memory copy operation, and it off-loads the task of memory management from the application so that the messaging API is responsible for managing the memory allocated for the container.</p>
    <p>To create message-dependent maps or streams, call one of the methods listed below to create a map or stream directly in the binary attachment of a specific message.</p>
    <p>To Create Message-Dependent Maps and Streams</p>
    <table class="TableStyle-Table_Num" style="caption-side: top;mc-table-style: url('../../Resources/TableStyles/Table_Num.css');width: 95%;" cellspacing="0">
      <caption valign="top" style="padding-bottom: 3pt;">
        <p> </p>
      </caption>
      <thead>
        <tr class="TableStyle-Table_Num-Head-Header1">
          <th class="TableStyle-Table_Num-HeadE-Column1-Header1"><MadCap:variable name="Product-Names.pubsub_brand_only"/> Messaging API</th>
          <th class="TableStyle-Table_Num-HeadD-Column1-Header1">Use</th>
        </tr>
      </thead>
      <tbody>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">JCSMP</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_Body">Not applicable</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">C</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <ul>
              <li>
                <p class="Tbl_BodyCode">solClient_msg_createBinaryAttachmentMap(...)</p>
              </li>
              <li>
                <p class="Tbl_BodyCode">solClient_msg_createBinaryAttachmentStream(...)</p>
              </li>
            </ul>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">.NET</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <ul>
              <li>
                <p class="Tbl_BodyCode">SDTUtils.CreateMap(...) </p>
              </li>
              <li>
                <p class="Tbl_BodyCode">SDTUtils.CreateStream(...)</p>
              </li>
            </ul>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyB-Column1-Body1">
            <p class="Tbl_Body">JavaScript and Node.js</p>
          </td>
          <td class="TableStyle-Table_Num-BodyA-Column1-Body1">
            <p class="Tbl_Body">Not applicable</p>
          </td>
        </tr>
      </tbody>
    </table>
    <p>When using one of these functions or methods, you must specify the size (in bytes) of the datablock to allocate for the creation of the map or stream.</p>
    <p class="Note">If a specific datablock size is set, and it is too small for the subsequently created map or stream, a larger datablock is allocated when data is added, and the existing structured data is copied into the new buffer. This reallocation can negatively affect performance.</p>
    <p>If you want to use the smallest amount of messaging API memory, set a value of 0 for the size parameter. In this case, the API uses the smallest possible datablock (by default 10,240 bytes) to build the containers. If this is not enough, a reallocation occurs, and all existing data is copied into the new, larger buffer.</p>
    <p>Data fields, submaps, and substreams can be created using SDT add methods or functions. Applications that receive messages can also do this before retransmitting or forwarding the data. For a comprehensive list of the available container methods and functions, refer to the <MadCap:xref href="../Messaging-APIs/Solace-APIs-Overview.htm">APIs &amp; Protocols</MadCap:xref> documentation for the appropriate messaging API.</p>
    <div class="Note">
      <p>Deleting fields results in a buffer copy of the remainder of the map.</p>
    </div>
  </body>
</html>
