<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
  <head>
    <link href="../../Resources/TableStyles/Table_Num.css" rel="stylesheet" MadCap:stylesheetType="table"/>
  </head>
  <body>
    <h1>Creating Contexts</h1>
    <p>Contexts are used for organizing communications between applications and a Solace PubSub+ event broker. Each client application must use a minimum of one Context. A Context acts as a container in which one or more Sessions can be configured and Session‑related events can be handled. It encapsulates threads that drive network I/O and message delivery notification for the Sessions and Session components associated with that Context.</p>
    <p>Context properties are used to dictate the behavior of a Context. If no specific Context properties are specified, the default values are used. For information on the Context properties refer to the <i class="Emphasis">API Developer Online Reference</i> documentation for the appropriate messaging API.</p>
    <h2 class="with-rule"><a name="initializing_and_monitoring_apis_2715568632_602452"/>Callbacks and Delegates</h2>
    <p>When using the C or .NET APIs, all callbacks or delegate invocations (for example, message receive callbacks, event callback, and timer callbacks) from the API to the application run from the Context thread. For optimal performance, the following rules should be followed when developing your applications for use with Solace PubSub+</p>
    <ul>
      <li>The Context thread must run to detect relief from flow control and unblock waiting application threads.</li>
      <li>The Context thread must run to complete the Session connection sequence and unblock applications waiting for the connection to complete.</li>
      <li>The Context thread must run to unblock applications waiting for confirmation of subscription requests.</li>
    </ul>
    <p>Consequently, applications must not block in callback/delegate routines because it can deadlock the application or at a minimum severely degrade receive performance. Deferring SolClient processing by running for excessively long periods of time in the callback routines prevents the API from unblocking other application threads that might be waiting for confirmation of sent messages, or be blocked in flow-control situations.</p>
    <p>To create a Context, call a method or function listed below appropriate for the messaging API. Once created, a Context is automatically started.</p>
    <p style="font-weight: bold;">JCSMP</p>
    <p>A default Context is created by the messaging API implicitly; however, it also provides the ability to create new Contexts.</p>
    <p style="font-weight: bold;">C API</p>
    <p>This is the only Messaging API that allows client applications to ‘drive’ the Context’s main loop using their own application threads. </p>
    <table class="TableStyle-Table_Num" style="caption-side: top;mc-table-style: url('../../Resources/TableStyles/Table_Num.css');width: 95%;" cellspacing="0">
      <caption valign="top" style="padding-bottom: 3pt;">
        <p class="TblCaption">To Create a Context</p>
      </caption>
      <thead>
        <tr class="TableStyle-Table_Num-Head-Header1">
          <th class="TableStyle-Table_Num-HeadE-Column1-Header1"><MadCap:variable name="Product-Names.pubsub_brand_only"/> Messaging API</th>
          <th class="TableStyle-Table_Num-HeadD-Column1-Header1">Use</th>
        </tr>
      </thead>
      <tbody>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">JCSMP</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_BodyCode">JCSMPFactory.createContext(...)</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">Java RTO</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_BodyCode">Solclient.createContextForHandle(...)</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">C</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_BodyCode">solClient_context_create(...)</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyE-Column1-Body1">
            <p class="Tbl_Body">.NET</p>
          </td>
          <td class="TableStyle-Table_Num-BodyD-Column1-Body1">
            <p class="Tbl_BodyCode">ContextFactory.CreateContext(...)</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyB-Column1-Body1">
            <p class="Tbl_Body">JavaScript and Node.js</p>
          </td>
          <td class="TableStyle-Table_Num-BodyA-Column1-Body1">
            <p class="Tbl_Body">Not applicable</p>
          </td>
        </tr>
      </tbody>
    </table>
    <p style="font-weight: bold;">Related Samples</p>
    <p>For an example of how to create a Context for the Java RTO, C, and .NET APIs, refer to the <code>DirectPubSub</code> sample. </p>
    <table class="TableStyle-Table_Num" style="caption-side: top;mc-table-style: url('../../Resources/TableStyles/Table_Num.css');width: 95%;" cellspacing="0">
      <caption valign="top" style="padding-bottom: 3pt;">
        <p class="TblCaption">To Destroy a Context</p>
      </caption>
      <col class="TableStyle-Table_Num-Column-Column1"/>
      <col class="TableStyle-Table_Num-Column-Column1"/>
      <thead>
        <tr class="TableStyle-Table_Num-Head-Header1">
          <th class="TableStyle-Table_Num-HeadE-Column1-Header1"><MadCap:variable name="Product-Names.pubsub_brand_only"/> Messaging API</th>
          <th class="TableStyle-Table_Num-HeadD-Column1-Header1">Use</th>
        </tr>
      </thead>
      <tbody>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">JCSMP</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_BodyCode">Context.destroy()</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">Java RTO</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_BodyCode">ContextHandle.destroy()</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">C</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_BodyCode">solClient_context_destroy(...)</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyE-Column1-Body1">
            <p class="Tbl_Body">.NET</p>
          </td>
          <td class="TableStyle-Table_Num-BodyD-Column1-Body1">
            <p class="Tbl_BodyCode">IContext.Dispose()</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyB-Column1-Body1">
            <p class="Tbl_Body">JavaScript and Node.js</p>
          </td>
          <td class="TableStyle-Table_Num-BodyA-Column1-Body1">
            <p class="Tbl_Body">Not applicable</p>
          </td>
        </tr>
      </tbody>
    </table>
    <h2 class="with-rule"><a name="initializing_and_monitoring_apis_2715568632_556224"/>Context Timers</h2>
    <p>When using the C or .NET APIs, Contexts can use a timer to perform a scheduled task. These tasks are guaranteed to execute on the thread driving the Context with which the timer tasks are registered.</p>
    <p>The Context timer relies on a defined callback or delegate, which allows a callback routine to be invoked within the Context’s thread when a set interval of time expires. A repeating or a one-shot (that is, one-time) callback/delegate can be used. For example, a timer could be used to publish messages at set intervals or to perform an asynchronous operation just once.</p>
    <p>To start a Context timer, call a function or method listed below. You must pass in the type of timer to start (one-shot or repeat), the requested timer duration (in milliseconds), and the callback routine or delegate to invoke when the timer expires.</p>
    <p>When the timer expires, the specified timer callback routine is invoked. If it is a repeat timer, the timer is automatically rescheduled for the same duration, and it continues to run until the timer is stopped. If it is a one-shot timer, the timer is automatically canceled. </p>
    <table class="TableStyle-Table_Num" style="caption-side: top;mc-table-style: url('../../Resources/TableStyles/Table_Num.css');width: 95%;" cellspacing="0">
      <caption valign="top" style="padding-bottom: 3pt;">
        <p class="TblCaption">To Start a Context Timer</p>
      </caption>
      <thead>
        <tr class="TableStyle-Table_Num-Head-Header1">
          <th class="TableStyle-Table_Num-HeadE-Column1-Header1"><MadCap:variable name="Product-Names.pubsub_brand_only"/> Messaging API</th>
          <th class="TableStyle-Table_Num-HeadD-Column1-Header1">Use</th>
        </tr>
      </thead>
      <tbody>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">JCSMP</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_Body">Not applicable</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">Java RTO</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_Body">Not applicable</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">C</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_BodyCode">solClient_context_startTimer(...)</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyE-Column1-Body1">
            <p class="Tbl_Body">.NET</p>
          </td>
          <td class="TableStyle-Table_Num-BodyD-Column1-Body1">
            <p class="Tbl_BodyCode">TimerTask.Start(...)</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyB-Column1-Body1">
            <p class="Tbl_Body">JavaScript and Node.js</p>
          </td>
          <td class="TableStyle-Table_Num-BodyA-Column1-Body1">
            <p class="Tbl_Body">Not applicable</p>
          </td>
        </tr>
      </tbody>
    </table>
    <p class="Note">Contexts, Sessions, Flows, or timers cannot be disposed in a callback.</p>
    <p style="font-weight: bold;">Related Samples</p>
    <p>For an example of how to create a Context timer for the C API, refer to the <code>dtoPubSub</code> sample.</p>
  </body>
</html>
