<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
  <head/>
  <body>
    <h1>Handling Session Events</h1>
    <h2 class="with-rule"><a name="jcsmp"/>JCSMP</h2>
    <ul>
      <li>Session Events
        <p>An application can register an implementation of the <code>SessionEventHandler</code> interface when creating a Session through <code>JCSMPFactory#createSession(JCSMPProperties, Context, SessionEventHandler)</code>. This handler receives callbacks for Session events defined in <code>SessionEvent</code>.</p></li>
      <li>Channel Reconnect Events
			<p>An application that uses the Session’s default message consumer (acquired through <code>JCSMPSession#getMessageConsumer()</code>), can register a <code>JCSMPReconnectEventHandler</code> instance when acquiring that consumer. This handler receives callbacks before and after the client’s TCP connection is reconnected after a connection failure.</p></li>
    </ul>
    <h2 class="with-rule"><a name="javaRTO-api"/>Java RTO API</h2>
    <p>An application can register a <code>SessionEventCallback</code> when creating a Session with <code>ContextHandle.createSessionForHandle(...)</code>.</p>
    <p>For high-performance implementations of the Java RTO API, applications should use <code>SessionHandle.getSessionEvent(...)</code> rather than <code>SessionHandle.takeSessionEvent(...)</code>. When a get is used, the API retains responsibility for the event and will destroy it at the appropriate time. When a take is used, the API gives up control of the event and it is up to the application to destroy it.</p>
    <p>For more information on using <code>getSessionEvent()</code> and <code>takeSessionEvent()</code>, see <MadCap:xref href="Java-RTO-API-Best-Practices.htm#Get">Get vs. Take</MadCap:xref> in <MadCap:xref href="Java-RTO-API-Best-Practices.htm">Java RTO API Best Practices</MadCap:xref>.</p>
    <h2 class="with-rule"><a name="c-api"/>C API</h2>
    <p>When a Session is created, the application must provide a Session event callback (<code>solClient_session_eventCallbackInfoFunc_t</code>), along with an optional pointer to client data. This callback routine is invoked for event broker events that occur for the Session, such as connection problems, or publish or subscription issues.</p>
    <p>For a complete list of possible Session events, see <MadCap:xref href="../../API-Developer-Online-Ref-Documentation/c/index.html">C API Developer Reference</MadCap:xref>.</p>
    <h2 class="with-rule"><a name="net-api"/>.NET API</h2>
    <p>When a Session is created, the application must provide a Session event delegate (<code>EventHandler&lt;SessionEventArgs&gt;</code>) that is invoked each time an event occurs over the Session.</p>
    <p>For a complete list of Session events, see <MadCap:xref href="../../API-Developer-Online-Ref-Documentation/net/index.html" target="_blank">C#/.NET API Reference</MadCap:xref>.</p>
    <h2 class="with-rule"><a name="javascript-api"/>JavaScript and Node.js APIs</h2>
    <p>When a Session is created, the application must provide Session event listeners for each important Session events that are invoked each time an event occurs over the Session.</p>
    <p>For a complete list of Session events, see <code>solace.SessionEventCode</code> in the JavaScript and Node.js API Reference.</p>
    <h2 class="with-rule"><a name="related-samples-api"/>Related Samples</h2>
    <ul>
      <li>For an example of how to configure a Session event handler for JCSMP, see <code>SampleUtils.java</code> included with the sample files.</li>
      <li>For an example of how to configure a Session event callback for the Java RTO API, see <code>SampleUtils.java</code> included with the sample files.</li>
      <li>For an example of how to configure a Session event callback for the C API, see the <code>common.c</code> sample file.</li>
      <li>For an example of how to configure a Session event delegate for the .NET API, see <code>SampleUtils.cs</code> included with the sample files.</li>
      <li>For an example of how to configure Session event listeners for the JavaScript and Node.js APIs, see the <code>TopicSubscriber.js</code> sample.</li>
    </ul>
  </body>
</html>
