<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
  <head>
    <link href="../../Resources/TableStyles/Table_Num.css" rel="stylesheet" MadCap:stylesheetType="table"/>
    <link href="../../Resources/TableStyles/Table_Num.css" rel="stylesheet" MadCap:stylesheetType="table"/>
  </head>
  <body>
    <h1>C API Best Practices</h1>
    <p>The following are some of the best practices for the <MadCap:variable name="Manifest-Products-APIs.api-product-c-api-long"/>. The practices are divided into the following categories:</p>
    <ul>
      <li>
        <MadCap:xref href="#General">General Best Practices</MadCap:xref>
      </li>
      <li>
        <MadCap:xref href="#Threading">Threading</MadCap:xref>
      </li>
      <li>
        <MadCap:xref href="#file-desc-mgmt">File Descriptor Management</MadCap:xref>
      </li>
      <li>
        <MadCap:xref href="#init-data-structures">Initializing Data Structures with Provided Macros</MadCap:xref>
      </li>
      <li>
        <MadCap:xref href="#Memory">Memory Management</MadCap:xref>
      </li>
      <li>
        <MadCap:xref href="#Session">Session Establishment</MadCap:xref>
      </li>
      <li>
        <MadCap:xref href="#select-block-modes">Selecting Blocking Modes</MadCap:xref>
      </li>
      <li>
        <MadCap:xref href="#subscription-mgmt">Subscription Management</MadCap:xref>
      </li>
      <li>
        <MadCap:xref href="#ios-apps">Working with iOS Applications</MadCap:xref>
      </li>
      <li>
        <MadCap:xref href="#sending-messages">Sending Messages</MadCap:xref>
      </li>
      <li>
        <MadCap:xref href="#receive-messages">Receiving Messages</MadCap:xref>
      </li>
      <li>
        <MadCap:xref href="#do-not-block-callbacks">Do Not Block in Callbacks</MadCap:xref>
      </li>
      <li>
        <MadCap:xref href="#Queues">Queues and Flows</MadCap:xref>
      </li>
      <li>
        <MadCap:xref href="#error-handling">Error Handling and Logging</MadCap:xref>
      </li>
      <li>
        <MadCap:xref href="#message-config-client-behavior">Event Broker Configuration that Influences Client Application Behavior</MadCap:xref>
      </li>
    </ul>
    <h2 class="with-rule"><a name="General"/>General Best Practices</h2>
    <h3><a name="Tuning"/>Tuning Guidelines for Guaranteed Messaging</h3>
    <MadCap:snippetBlock src="Snippets/Tune-Guide-Guarn-Msg.flsnp"/>
    <h3><a name="Reapply"/>Reapply Subscriptions</h3>
    <MadCap:snippetBlock src="Snippets/Reapply-Sub.flsnp"/>
    <h3><a name="number-flow-msg-win-size"/>Number of Flows and Guaranteed Message Window Size</h3>
    <MadCap:snippetBlock src="Snippets/Flow-Guarn-Msg-Win-Size.flsnp"/>
    <h3><a name="Minimum"/>Minimum Message Burst Size</h3>
    <MadCap:snippetBlock src="Snippets/Min-Msg-Burst-Size.flsnp"/>
    <h2 class="with-rule"><a name="Threading"/>Threading</h2>
    <h3><a name="select-thread-model"/>Selecting a Threading Model</h3>
    <h4>Recommendation</h4>
    <ul>
      <li>Use an API provided Context thread whenever possible unless it is unable to match the required performance, and in such cases the application-provided Context thread technique should be considered.</li>
      <li>Use the 'One Session, One Context' threading model whenever possible. The 'Multiple Sessions, One Context' and 'Multiple Sessions, Multiple Contexts' models can potentially increase message processing throughput, but at the expense of additional processing caveats.</li>
    </ul>
    <p>The C API uses Contexts for organizing communications with Solace PubSub+ event brokers. Each client application that uses the C API must contain a minimum of one Context; and each Context can contain one or more Sessions.</p>
    <p>By default, the C API provides an internal Context thread for processing work that is suitable for the most common application models and architectures. This thread can handle application timers and file descriptors as registered by the application through the API.</p>
    <p>If you want to automatically create the Context thread, instead of relying on the application to create and destroy the Context thread, enable the <code>SOLCLIENT_CONTEXT_PROP_CREATE_THREAD</code> Context property. The API-provided Context thread blocks in <code>solClient_context_processEvents(...) </code>and is the thread the application is called from for all received messages and received events. The API-provided Context thread automatically exits cleanly when a Context is destroyed.</p>
    <h3><a name="app-provided-threads"/>Application-Provided Threads</h3>
    <p>Optionally, when the <code>SOLCLIENT_CONTEXT_PROP_CREATE_THREAD</code> Context property is disabled, an application can provide a Context thread and manage file descriptors itself. When this configuration is used, the API requires the application to provide thread processing time.</p>
    <p>The ability for the application to use its own thread and event loop processing (with the requirement that part of that event loop includes a call to the <code>processEvents()</code>) function offers developers much flexibility.</p>
    <p>When relying on application-provided threads, how to configure your Sessions in Contexts is an important consideration in application design, as it directly impacts factors such as CPU usage on application host machines, message latency, and throughput.</p>
    <p>The table below describes the threading models that can be used for application provided threads and how they affect application design and performance.</p>
    <table class="TableStyle-Table_Num" style="caption-side: top;mc-table-style: url('../../Resources/TableStyles/Table_Num.css');" cellspacing="0">
      <caption valign="top" style="padding-bottom: 3pt;">
        <p class="TblCaption">Threading Model Considerations</p>
      </caption>
      <col class="TableStyle-Table_Num-Column-Column1"/>
      <col class="TableStyle-Table_Num-Column-Column1"/>
      <col class="TableStyle-Table_Num-Column-Column1"/>
      <thead>
        <tr class="TableStyle-Table_Num-Head-Header1">
          <td class="TableStyle-Table_Num-HeadE-Column1-Header1">Threading Model</td>
          <td class="TableStyle-Table_Num-HeadE-Column1-Header1">Description</td>
          <td class="TableStyle-Table_Num-HeadD-Column1-Header1">Implementation Considerations</td>
        </tr>
      </thead>
      <tbody>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">One Session, One Context Thread</p>
          </td>
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">In this scenario, a single Session is used with a single Context on the application-provided thread.</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_Body">This approach forces all message and event processing into this Context thread instead of forwarding some or all processing downstream to other application threads.</p>
            <p class="Tbl_Body">This straight forward model allows for easier design and debugging, and it is ideal for applications that function as either a publisher or a consumer.</p>
            <p>For the majority of cases, the 'One Session, One Context' model is sufficient for publisher and consumer application design.</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">Multiple Sessions, One Context Thread</p>
          </td>
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">In this scenario, multiple Sessions are serviced using one Context on the application provided thread. You can process all messages received by the same message and event callback functions, or create additional callbacks.</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_Body">This approach puts considerable processing stress on the Context thread, as all Sessions must wait in the select loop before being processed. </p>
            <p class="Tbl_Body">Depending on message volume, it could be necessary to forward messages to downstream Queues for processing by additional application threads.</p>
            <p>An application designer may want to move to 'Multiple Sessions, One Context' if there is a need to prioritize messages where higher value messages maybe sent/received across different Sessions, for example through different TCP connections. This approach can potentially increase throughput as well.  This means that it may be necessary to forward received messages to downstream application internal queues such that messages are processed by additional application message processing threads.  All received messages can be processed by the same message and event callback functions, or Session specific ones by creating additional callbacks.</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyB-Column1-Body1">
            <p class="Tbl_Body">Multiple Sessions, Multiple Contexts Threads</p>
          </td>
          <td class="TableStyle-Table_Num-BodyB-Column1-Body1">
            <p class="Tbl_Body">In this scenario, the application provides a number of threads, each containing a single Context, and each Context can contain one or more Sessions.</p>
          </td>
          <td class="TableStyle-Table_Num-BodyA-Column1-Body1">
            <p class="Tbl_Body">This approach allows you to separate each Session connection into its own Context thread, which allows all processing to occur in each application-provided thread. </p>
            <p class="Tbl_Body" MadCap:conditions="Default.HideFromAllOutput">This approach combines the simplicity of the one Session for each Context thread model, with the enhanced performance that processing in multiple threads provides. However, due to the increased number of threads that the application must provide, this approach is much more CPU- and resource-intensive.</p>
            <p>With 'Multiple Sessions, Multiple Contexts', a designer can reduce the Context Thread processing burden of the 'Multiple Sessions, One Context' model where all Sessions must wait in the select loop before being processed. In this model, each Session can be separated into its own Context thread, and therefore enhance the processing performances that OS multi-threading provides. However, due to the increased number of threads, this approach requires expansive thread context switching, hence places more burden on the CPU and is more resource intensive.</p>
          </td>
        </tr>
      </tbody>
    </table>
    <div class="Note">
      <ul>
        <li>The application must call <code>solClient_context_timerTick()</code> for each Context.</li>
        <li>For a given Context, the messaging API’s file descriptor callbacks must be called from the same thread that calls<code> solClient_context_timerTick()</code> for that Context.</li>
      </ul>
    </div>
    <h3><a name="Context"/>Context Thread Affinity</h3>
    <h4>Recommendation</h4>
    <ul>
      <li>Use <code>SOLCLIENT_CONTEXT_PROP_THREAD_AFFINITY_CPU_LIST</code> to pin the API generated Context thread to a CPU. </li>
    </ul>
    <p>When the context thread is automatically generated by the C API, the thread affinity can be set for the context thread through the <code>SOLCLIENT_CONTEXT_PROP_THREAD_AFFINITY_CPU_LIST</code> parameter during context creation. When you set the thread affinity, it dedicates a specific CPU for processing improvement and prevents the context thread from being interrupted by other processes. By default, the thread affinity for the auto-created context thread is not set, allowing your operating system to optimally schedule the context thread on available CPUs. The expected string value is a comma-separated list that can be:</p>
    <ul>
      <li>
        <p>numbers—base-10 non-negative integers between 0 and the number of CPUs in the system<br/><b>and/or</b></p>
      </li>
      <li>
        <p> ranges—two numbers with a dash character between them</p>
      </li>
    </ul>
    <p>The following example shows how to set thread affinity for a list of CPUs using numbers and ranges:</p>
    <p class="Code">const char* contextProps_simple[3] = {SOLCLIENT_CONTEXT_PROP_THREAD_AFFINITY_CPU_LIST, "0,1,2,4,8-10,13-15", NULL};</p>
    <p>The default value of <code>SOLCLIENT_CONTEXT_PROP_THREAD_AFFINITY_CPU_LIST</code> is an empty string, which results in no thread affinity setting.</p>
    <p class="Note">This property has no effect if the application creates the context thread itself.</p>
    <p>For more information and details about usage, see the <MadCap:xref href="../Messaging-APIs/C-API/c-api-home.htm#Capireference">C API Reference</MadCap:xref> and the <code>solclient.h</code> header file.</p>
    <h2 class="with-rule"><a name="file-desc-mgmt"/>File Descriptor Management</h2>
    <p>The following table lists the management modes that can be used in C API to handle file descriptors.</p>
    <table class="TableStyle-Table_Num" style="caption-side: top;mc-table-style: url('../../Resources/TableStyles/Table_Num.css');" cellspacing="0">
      <caption valign="top" style="padding-bottom: 3pt;">
        <p class="TblCaption">File Descriptor Management Modes</p>
      </caption>
      <col class="TableStyle-Table_Num-Column-Column1"/>
      <col class="TableStyle-Table_Num-Column-Column1"/>
      <thead>
        <tr class="TableStyle-Table_Num-Head-Header1">
          <td class="TableStyle-Table_Num-HeadE-Column1-Header1">Management Mode</td>
          <td class="TableStyle-Table_Num-HeadD-Column1-Header1">Description</td>
        </tr>
      </thead>
      <tbody>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">API Management of API File Descriptors</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_Body">The default management mode is for the C API to internally manage its own file descriptor events. When an application’s processing Context calls <code>solClient_context_processEvents(...)</code>, the API waits for internal file descriptor events. Control returns to the calling application processing thread when at least one event occurs or a time-out occurs.</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">Application Management of API File Descriptors</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_Body">The application manages the event generation logic that is normally managed by the C API. Within a processing Context, the application provides file descriptor event register and unregister functions that the API uses to ask for events for its file descriptors. The application is then responsible for polling the file descriptor for events. When events occur on file descriptors owned by the API, the application event generation logic must call the routines that the API has registered for its file descriptors.</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyB-Column1-Body1">
            <p class="Tbl_Body">API Management of Application File Descriptors</p>
          </td>
          <td class="TableStyle-Table_Num-BodyA-Column1-Body1">
            <p class="Tbl_Body">The application registers its own file descriptors for events, such as read or write events, within a C API processing Context. When an application file descriptor is registered, the application provides a callback routine and a pointer to application data. The application then calls <code>solClient_context_processEvents(...)</code>, or relies on the internal API Context thread, as in the default management mode, which can cause event generation on the registered application file descriptors and on API file descriptors.</p>
          </td>
        </tr>
      </tbody>
    </table>
    <h3><a name="file-desc-limits"/>File Descriptor Limits</h3>
    <p>File descriptor limits in Linux and Solaris platforms restrict the number of files that can be managed per process to 1,024. Because the C API uses <code>select(2)</code> to poll devices, these file descriptor limits prevent the API from managing any single file descriptor that has a numerical value greater than 1,023.</p>
    <p>An application should not create more than 1,023 Sessions per process. The possible number of Sessions can be further reduced by any other files not managed by the API that the application has open.</p>
    <p>Similarly, on Windows platforms, a single Context cannot manage more than 63 Sessions that are connected to an event broker. However, unlike an application on a Linux platform, an application on a Windows platform can work around the OS limitations by creating many Contexts within a process.</p>
    <p>An application that registers its own file descriptor handlers (by providing <code>non-null</code> function pointers in <code>solClient_context_createRegisterFdFuncInfo_t</code>) is not limited in the API, but it might have its own limitations.</p>
    <p>An application that provides its file descriptors to the API to manage (by calling <code>solClient_context_registerForFdEvents()</code>) further reduces the number of Sessions that can be handled in a single Context (Windows platform) or process wide (Linux and Solaris platforms).</p>
    <MadCap:snippetBlock src="../../Resources/Snippets/C-Solaris-Deprecated.flsnp"/>
    <h2 class="with-rule"><a name="init-data-structures"/>Initializing Data Structures with Provided Macros</h2>
    <p>The C API provides static initializing macros for callback function data structures. Using the provided macros with accompanying explicit data structure initialization code is a good programming practice because it initializes the entire data structure and provides appropriate values for new fields. This ensures that your application will continue to compile without unexpected errors even if changes are made to the API callback function data structures.</p>
    <p>Static initializing macros are provided for the following callback function data structures:</p>
    <p class="Code">solClient_context_createFuncInfo_t – initializer SOLCLIENT_CONTEXT_CREATEFUNC_INITIALIZER</p>
    <p class="Code">solClient_session_createFuncInfo_t – initializer SOLCLIENT_SESSION_CREATEFUNC_INITIALIZER</p>
    <p class="Code">solClient_flow_createFuncInfo_t - initializer SOLCLIENT_FLOW_CREATEFUNC_INITIALIZER</p>
    <p>For example, you could initialize <code>solClient_session_createFuncInfo_t </code>as follows:</p>
    <pre xml:space="preserve">solClient_session_createFuncInfo_t sessionFuncInfo = SOLCLIENT_SESSION_CREATEFUNC_INITIALIZER;
sessionFuncInfo.rxInfo.callback_p     = rxLogCallbackFunc;
sessionFuncInfo.rxInfo.user_p         = userPtr;
sessionFuncInfo.eventInfo.callback_p  = eventLogCallbackFunc;
sessionFuncInfo.eventInfo.user_p      = userPtr;</pre>
    <p>The code snippet above is equivalent to and preferable to the immediate initialization in a declaration, as shown in the following example:</p>
    <pre>solClient_session_createFuncInfo_t sessionFuncInfo = {
            {rxMsgCallback, userPtr},
            {rxEventCallbac, userPtr},
            {NULL, NULL} };</pre>
    <p>Initializing in this manner without using the provided macros could require code changes to your program if future enhancements and changes are made to the C API.</p>
    <h2 class="with-rule"><a name="Memory"/>Memory Management</h2>
    <p>The following sections discuss how to manage memory in the C API and provide some guidelines for optimizing the performance of the API.</p>
    <h3><a name="Message"/>Message Abstraction</h3>
    <p>Applications using the C API use the <code>solClientMsg</code> interface, an abstract data structure stored in internal memory buffers with accessors and modifiers for each of the message parts.</p>
    <p>The <code>solClientMsg</code> interface provides the following functionality:</p>
    <ul>
      <li>An internal memory pool to avoid heap allocation and fragmentation.</li>
      <li>Add and get functions for structured data in the binary data payload (that is, the binary attachment) of the message.</li>
      <li>Add and get functions for unstructured data in the XML data and user-data payloads of the message.</li>
      <li>Add and get functions for Solace-defined and user-defined message headers.</li>
    </ul>
    <h3><a name="modify-global-pool"/>Modifying Global Pool Buffer Sizes</h3>
    <p>The <code>solClientMsg</code> interface is a message buffer API, which utilizes heap memory allocations. The C API allocates specific sized buffers from its own pools and maintains them internally. Buffers are allocated from heap storage and used for saving messages in the application space until they are released by the application.</p>
    <p>When the C API is initialized, you can optionally modify the default global data buffer sizes for the five pools that are used.</p>
    <p>When you call the <code>solClient_initialize</code> function to initialize the C API, you can use <code>SOLCLIENT_GLOBAL_PROP_DBQUANTASIZE_&lt;0-4&gt; “GLOBAL_DBQUANTA_SIZE”</code> to specify the size (in bytes) of the data buffers for each of the five pools.</p>
    <p>For more information, refer to <MadCap:xref href="../../API-Developer-Online-Ref-Documentation/c/index.html"><MadCap:xref href="../Messaging-APIs/C-API/c-api-home.htm#Capireference">C API Reference</MadCap:xref></MadCap:xref>.</p>
    <h3><a name="Configur"/>Configuring Message Buffer Sizes</h3>
    <p>When creating a Session, an application can configure the following memory and resource allocation-related Session property parameters:</p>
    <ul>
      <li>
        <code>SOLCLIENT_SESSION_PROP_BUFFER_SIZE</code>
        <p>The Session buffer size used for transmitting messages for the TCP Session. This parameter specifies the maximum amount of messages to buffer (as measured in bytes). For maximum performance, when sending small messages, the Session buffer size should be set to multiple times the typical message size.</p>
        <p>The C API always accepts at least one message to transmit. So even if the size of a single message exceeds the set buffer size, it is accepted and transmitted, as long as the current buffered data is zero. However, no further messages are accepted until the amount of data buffered is reduced below the set buffer size.</p>
      </li>
      <li>
        <code>SOLCLIENT_SESSION_PROP_SOCKET_RCV_BUF_SIZE</code>
        <p>The receive buffer size (in bytes) for the subscriber data socket. A default value of 150,000 is used. If this property is set to 0, the receive buffer size uses the operating system default.</p>
        <div class="Note">
          <p>On Windows platforms the receive socket buffer size must be much larger than the send socket buffer sizes to prevent data loss when sending and receiving messages. For example, the default send socket and internal buffer sizes are set to 90,000, and the default receive socket buffer size is set to 150,000. If you change the default sizes, it is recommended that you maintain a similar sizing ratio.</p>
        </div>
      </li>
      <li>
        <code>SOLCLIENT_SESSION_PROP_SOCKET_SEND_BUF_SIZE</code>
        <p>This parameter allows the send buffer size (in bytes) for the publisher data socket to be set by the application. A default value of 90,000 is used. If this property is set to 0, the send buffer size uses the operating system default.</p>
      </li>
    </ul>
    <h3><a name="Managing"/>Managing Memory When Publishing Messages</h3>
    <p>To ensure a high level of operational performance when publishing messages, avoid unnecessary memory moving and copying. To reduce the processing cycles used when moving and copying memory, consider the following guidelines:</p>
    <ul>
      <li>When the payload or message already exists in the application, use <code>solClient_msg_setXmlPtr</code> or <code>solClient_msg_setBinaryAttachmentPtr</code> functions to set the payload pointers directly to the message. The companion functions <code>solClient_msg_setXml</code> and <code>solClient_msg_setBinaryAttachment</code> copy the message into internally-allocated memory and should only be used when the message is being built and saved for some reason.</li>
      <li>If the Topic or Queue name destination already exists, use <code>solClient_msg_setTopicPtr or solClient_msg_setQueueNamePtr.</code></li>
    </ul>
    <p>Using structured data type (SDT) message containers always involves memory copies. Therefore, to conserve memory when using containers, consider the following guidelines:</p>
    <ul>
      <li>If you are sending a few headers that describe large content, consider setting the headers in the <code>USER_PROPERTY</code> map (set through <code>solClient_msg_createUserPropertyMap(...)</code>) and add the content using <code>solClient_msg_setBinaryAttachmentPtr()</code>.</li>
      <li>When building a container, always try to accurately estimate the required size. The container could be a user property map (created through <code>createUserPropertyMap()</code>), a map (created in a message through <code>solClient_msg_createBinaryAttachmentMap()</code>) or a stream (created in a message through <code>solClient_msg_createBinaryAttachmentStream(...)</code>).</li>
      <li>When building a complex container that uses a submap or substream, write the submap or substream completely and call <code>solClient_container_createStream(...)</code> to finish the submap or substream before adding more to the main container.
            <div class="Note"><p>When a binary attachment already exists in the application, you can use <code>solClient_msg_setBinaryAttachmentContainerPtr(...)</code> to avoid a memory copy. When the message is sent, the binary attachment contents are copied directly from the application memory to the transmit socket or buffer. Note that when this function is used, modifying the container or releasing the memory it references before the message is sent can corrupt the contents.</p></div></li>
    </ul>
    <h3><a name="manage-memory-recv-messages"/>Managing Memory When Receiving Messages</h3>
    <p>Message buffers received by the callback are owned by the C API, and they must not be released. However, to take ownership of these message buffers, the application can return <code>SOLCLIENT_CALLBACK_TAKE_MSG</code> to the API for each message. In this case, the application must call <code>solClient_msg_free(...)</code> when it is finished with the messages to release the memory.</p>
    <h3><a name="TCP"/>TCP Send and Receive Buffer Size</h3>
    <MadCap:snippetBlock src="Snippets/TCP-Send-Rec-Buf-Size.flsnp"/>
    <ul>
      <li><code>SOLCLIENT_SESSION_PROP_SOCKET_RCV_BUF_SIZE</code>; 150,000 bytes</li>
      <li><code>SOLCLIENT_SESSION_PROP_SOCKET_SEND_BUF_SIZE</code>; 90,000 bytes</li>
    </ul>
    <h2 class="with-rule"><a name="Session"/>Session Establishment</h2>
    <h3><a name="blocking-connects"/>Blocking Connect</h3>
    <MadCap:snippetBlock src="Snippets/Blocking-Connect.flsnp"/>
    <p>The blocking connect property is <code>SOLCLIENT_SESSION_PROP_CONNECT_BLOCKING</code>.</p>
    <h3><a name="host-lists"/>Host Lists</h3>
    <MadCap:snippetBlock src="Snippets/Host-Lists.flsnp"/>
    <h3><a name="client-api"/>Client API Keep-alive</h3>
    <MadCap:snippetBlock src="Snippets/Client-API-keepalive.flsnp"/>
    <h3><a name="ha-failover"/>High Availability Failover and Reconnect Retries</h3>
    <MadCap:snippetBlock src="Snippets/HA-Failover-Reconnect-Retries.flsnp"/>
    <h3><a name="replication-failover"/>Replication Failover and Reconnect Retries</h3>
    <MadCap:snippetBlock src="Snippets/Re-Fail-Reconn-Retry.flsnp"/>
    <h3><a name="replication-sessions"/>Replication Failover and Session Re-Establishment</h3>
    <MadCap:snippetBlock src="Snippets/Rep-Fail-Sess-ReEstab.flsnp"/>
    <h3><a name="blocking-call-transact"/>Blocking Call in Transacted Session Callback</h3>
    <h4>Recommendation</h4>
    <ul>
      <li>A blocking call on the message receive callback is allowed as the messages are delivered from a message dispatcher thread, not the context thread. A message dispatcher thread is created implicitly by the API for transacted session.</li>
    </ul>
    <p>One common usage pattern of a transacted session is to consume a message and publish the result, and commit these 2 steps as one atomic step. It's generally the case that one cannot make blocking calls, that is,<code> send()</code>, from within a message callback on the context thread. However, for a transacted session, the API implicitly creates a Message Dispatcher thread for the delivery of the message and, therefore, not from the context thread.  Hence, the blocking call is on the message dispatcher thread, and not from the context thread.</p>
    <p>When creating a transacted session, the client application can decide to have its own dispatcher thread, or to share a dispatcher thread with other transacted sessions using the same context.</p>
    <p>Refer to “Transacted Session” in the <MadCap:xref href="../Messaging-APIs/C-API/c-api-home.htm#Capireference">C API Reference</MadCap:xref> for further details.</p>
    <h3><a name="file-desc-limitations"/>File Descriptor Limitation</h3>
    <MadCap:snippetBlock src="Snippets/File-Des-Limit.flsnp"/>
    <h2 class="with-rule"><a name="select-block-modes"/>Selecting Blocking Modes</h2>
    <p>Blocking and non-blocking modes are configurable Session property parameters. When creating a Session, an application can configure whether a blocking or non-blocking mode is used when a connection is established, for send, subscribe, and unsubscribe operations. See the table below for a list of the available blocking mode Session properties.</p>
    <p class="Note">Even if a blocking mode is set for a Session, blocking mode is ignored when a call is made within a Context message receive, event, or timer callback function. In this situation, a blocking call succeeds if it can be processed immediately in a Context thread, otherwise it returns <code>SOLCLIENT_WOULD_BLOCK</code> as if it were a non-blocking call.</p>
    <p>Blocking applications must have separate threads for process events. Blocking threads are unblocked by events detected in the <code>solClient_context_processEvent</code> function.</p>
    <table class="TableStyle-Table_Num" style="caption-side: top;mc-table-style: url('../../Resources/TableStyles/Table_Num.css');" cellspacing="0">
      <caption valign="top" style="padding-bottom: 3pt;">
        <p class="TblCaption">Blocking Mode Session Property Parameters</p>
      </caption>
      <thead>
        <tr class="TableStyle-Table_Num-Head-Header1">
          <td class="TableStyle-Table_Num-HeadE-Column1-Header1">Parameter</td>
          <td class="TableStyle-Table_Num-HeadD-Column1-Header1">Description</td>
        </tr>
      </thead>
      <tbody>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_BodyCode">SOLCLIENT_SESSION_PROP_CONNECT_BLOCKING</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_Body">Sets whether to connect the Session in a blocking or non-blocking mode. </p>
            <p class="Tbl_Body">Use <code>SOLCLIENT_PROP_ENABLE_VAL</code> to connect in a blocking mode (the default). Use <code>SOLCLIENT_PROP_DISABLE_VAL</code> to connect in a non-blocking mode. The default is blocking mode.</p>
            <p class="Note">Avoid setting blocking connect when many Sessions are configured in a Context thread. Setting this mode serializes every step of the connection process for all the Sessions, and, as a result, increases the connection time.</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_BodyCode">SOLCLIENT_SESSION_PROP_SEND_BLOCKING</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_Body">Sets whether a blocking or non-blocking send operation is used.</p>
            <p class="Tbl_Body">Use <code>SOLCLIENT_PROP_ENABLE_VAL</code> to send in a blocking mode (the default). Use <code>SOLCLIENT_PROP_DISABLE_VAL</code> to send in a non-blocking mode.</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_BodyCode">SOLCLIENT_SESSION_PROP_SUBSCRIBE_BLOCKING</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_Body">Sets whether subscribe/unsubscribe operations occur in a blocking or non-blocking mode.</p>
            <p class="Tbl_Body">Use <code>SOLCLIENT_PROP_ENABLE_VAL</code> to subscribe in a blocking mode (the default). Use <code>SOLCLIENT_PROP_DISABLE_VAL</code> to subscribe in a non-blocking mode.</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyB-Column1-Body1">
            <p class="Tbl_BodyCode">SOLCLIENT_SESSION_PROP_BLOCKING_WRITE_TIMEOUT_MS</p>
          </td>
          <td class="TableStyle-Table_Num-BodyA-Column1-Body1">
            <p class="Tbl_Body">The time-out (in milliseconds) when sending messages or subscribing/unsubscribing in a blocking mode.</p>
            <p class="Note">If a time-out occurs, a return code <code>SOLCLIENT_FAIL</code> is returned.</p>
          </td>
        </tr>
      </tbody>
    </table>
    <h3><a name="block-modes-impact-publishers"/>How Blocking Modes Affect Publishing</h3>
    <p>How a <code>solClient_session_sendMsg</code> function call is handled depends on the blocking mode chosen for the Session.</p>
    <ul>
      <li>Blocking Mode<p>In this mode, the calling thread for each <code>solClient_session_sendMsg(...)</code> function call is blocked until C API accepts the message. As a result, the <code>solClient_session_sendMsg</code> calls are automatically limited to a rate at which the event broker can accept them. The <code>solClient_session_sendMsg</code> function call remains blocked until either it is accepted by the C API or the associated timer expires.</p></li>
    </ul>
    <ul>
      <li>Non-blocking Mode<p>In this mode, <code>solClient_session_sendMsg</code> function calls that cannot be accepted by the C API immediately return a <code>SOLCIENT_WOULD_BLOCK</code> error code to the application. When it can be accepted, the API receives a subsequent <code>SOLCLIENT_SESSION_EVENT_CAN_SEND</code> event, and then it can retry sending the request. In the interim it can continue to process other actions.</p></li>
    </ul>
    <h2 class="with-rule"><a name="subscription-mgmt"/>Subscription Management</h2>
    <p>The following best practices can be used for managing subscriptions:</p>
    <ul>
      <li>If you are adding or removing a large number of subscriptions, set the Wait for Confirm flag (<code>SOLCLIENT_SUBSCRIBE_FLAGS_WAITFORCONFIRM</code>) on the final subscription to ensure that all subscriptions have been processed by the event broker. On all other subscriptions, to increase performance, it is recommended that the application not set Wait for Confirm.</li>
      <li>In the event of a Session disconnect, you can have the API reapply subscriptions that were initially added by the application when the Session is reconnected. To reapply subscriptions on reconnect, enable the Reapply Subscriptions Session property (<code>SOLCLIENT_SESSION_PROP_REAPPLY_SUBSCRIPTIONS</code>). Using this setting is recommended.</li>
    </ul>
    <h2 class="with-rule"><a name="ios-apps"/>Working with iOS Applications</h2>
    <p>The iOS distribution of the C API allows you to create new or integrate existing iOS applications for use with Solace PubSub+. This section provides information on special considerations that apply to iOS applications.</p>
    <h3><a name="ios-apps-state"/>Responding to State and Connectivity Changes</h3>
    <p>For best performance, an application should respond appropriately when its state changes or the device’s network connectivity changes. This ensures that the application does not attempt to maintain connections to the event broker when it has been moved to the background by the OS.</p>
    <p>Responding to state and network connectivity changes properly will extend device battery life and minimize data connection usage.</p>
    <h4>State Changes</h4>
    <p>Applications should close session connections when they are moved to the background, and reopen any closed connections when they return to the foreground.</p>
    <p>As such, Solace recommends the following actions when state transitions occur:</p>
    <table class="TableStyle-Table_Num" style="caption-side: top;mc-table-style: url('../../Resources/TableStyles/Table_Num.css');" cellspacing="0">
      <caption valign="top" style="padding-bottom: 3pt;">
        <p class="TblCaption">Responding to State Changes</p>
      </caption>
      <col class="TableStyle-Table_Num-Column-Column1"/>
      <col class="TableStyle-Table_Num-Column-Column1"/>
      <thead>
        <tr class="TableStyle-Table_Num-Head-Header1">
          <td class="TableStyle-Table_Num-HeadE-Column1-Header1">Event</td>
          <td class="TableStyle-Table_Num-HeadD-Column1-Header1">Recommended Action</td>
        </tr>
      </thead>
      <tbody>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_BodyCode">applicationDidBecomeActive</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_Body">Application is about to move to the foreground. Establish session connections by calling <code>solClient_session_connect()</code>.</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyB-Column1-Body1">
            <p class="Tbl_BodyCode">applicationWillResignActive</p>
          </td>
          <td class="TableStyle-Table_Num-BodyA-Column1-Body1">
            <p class="Tbl_Body">Application is transitioning out of the foreground. Close session connections by calling <code>solClient_session_disconnect()</code>.</p>
          </td>
        </tr>
      </tbody>
    </table>
    <h4>Network Connectivity Changes</h4>
    <p>For best performance, applications should communicate over wi-fi connections whenever they are available instead of wireless wide area network (WWAN) connections to lower data usage and increase battery life.</p>
    <p>To prioritize wi-fi connections, Solace recommends the following actions when network connectivity changes occur:</p>
    <table class="TableStyle-Table_Num" style="width: 624px;caption-side: top;mc-table-style: url('../../Resources/TableStyles/Table_Num.css');" cellspacing="0">
      <caption valign="top" style="padding-bottom: 3pt;">
        <p class="TblCaption">Responding to Network Connectivity Changes</p>
      </caption>
      <col class="TableStyle-Table_Num-Column-Column1"/>
      <col class="TableStyle-Table_Num-Column-Column1"/>
      <col class="TableStyle-Table_Num-Column-Column1"/>
      <col width="25%" class="TableStyle-Table_Num-Column-Column1"/>
      <thead>
        <tr class="TableStyle-Table_Num-Head-Header1">
          <td class="TableStyle-Table_Num-HeadE-Column1-Header1">WWAN Status</td>
          <td class="TableStyle-Table_Num-HeadE-Column1-Header1">Wi-Fi Status</td>
          <td class="TableStyle-Table_Num-HeadE-Column1-Header1">Event</td>
          <td class="TableStyle-Table_Num-HeadD-Column1-Header1">Recommended Action</td>
        </tr>
      </thead>
      <tbody>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">Connected</p>
          </td>
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">Not connected</p>
          </td>
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">Wi-fi connects</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_Body">Force sessions to reconnect by calling <code>solClient_session_disconnect()</code> followed by <code>solClient_session_connect()</code>.</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">Connected</p>
          </td>
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">Not connected</p>
          </td>
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">WWAN disconnects</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_Body">Close session connections by calling <code>solClient_session_disconnect()</code>.</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">Not connected</p>
          </td>
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">Connected</p>
          </td>
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">Wi-fi disconnects</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_Body">Close session connections by calling <code>solClient_session_disconnect()</code>.</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyE-Column1-Body1">
            <p class="Tbl_Body">Not connected</p>
          </td>
          <td class="TableStyle-Table_Num-BodyE-Column1-Body1">
            <p class="Tbl_Body">Not connected</p>
          </td>
          <td class="TableStyle-Table_Num-BodyE-Column1-Body1">
            <p class="Tbl_Body">WWAN connects</p>
          </td>
          <td class="TableStyle-Table_Num-BodyD-Column1-Body1">
            <p class="Tbl_Body">Establish session connections by calling <code>solClient_session_connect()</code>.</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyB-Column1-Body1">
            <p class="Tbl_Body">Not connected</p>
          </td>
          <td class="TableStyle-Table_Num-BodyB-Column1-Body1">
            <p class="Tbl_Body">Not connected</p>
          </td>
          <td class="TableStyle-Table_Num-BodyB-Column1-Body1">
            <p class="Tbl_Body">Wi-fi connects</p>
          </td>
          <td class="TableStyle-Table_Num-BodyA-Column1-Body1">
            <p class="Tbl_Body">Establish session connections by calling <code>solClient_session_connect()</code>.</p>
          </td>
        </tr>
      </tbody>
    </table>
    <p style="font-weight: bold;">Related Samples</p>
    <p>For an example of how to respond to changes in application state, refer to the <code>AppTransitionsExample</code> sample included with the iOS API.</p>
    <p>For an example of how to respond to changes in network state, refer to the <code>AppReachabilityExample</code> sample included with the iOS API. </p>
    <h3><a name="providing-trust-store"/>Providing a Trust Store for Creating Secure Connections</h3>
    <p>To create a secure connection to an event broker, the iOS distribution of the C API uses OpenSSL, which is included in the API. The process of creating secure connections through the iOS distribution of the C API is the same as with other distributions. However, a few special considerations are required for the iOS distribution to provide a trust store to the C API to validate the event broker’s server certificate.</p>
    <p>When creating a secure connection, the C API attempts to establish trust with the remote event broker. To do so, the application must provide the path to a trust store that contains CA or self-signed certificates. A path to the trust store can be provided in one of the following ways:</p>
    <ul>
      <li>Include a static trust store into the applications bundle as a resource, and then provide a path to that location.
            <p>For example, assuming that the application bundles a trust store folder named <code>trustStore</code>, which contains .crt files, the following code could be used to initialize the session with this trust store:</p><pre>// The path to the trustStore will be stored into trustStorePath
NSString* trustStorePath = [[[NSBundle mainBundle] resourcePath] stringByAppendingString:@"/trustStore"];
// This path must be passed to the session we are about to create and connect
sessionProps[propIndex++] = SOLCLIENT_SESSION_PROP_SSL_TRUST_STORE_DIR;
sessionProps[propIndex++] = [resourceDirectory cStringUsingEncoding:NSASCIIStringEncoding]</pre></li>
      <li>Use <code>&lt;application_Home&gt;/Documents/</code> as the trust store, and then make that directory available to the user through file sharing. As this directory is initially empty, the application can copy a default trust store from the app bundle (as shown in the preceding bullet) into that directory. Then, the user can configure the trust store from iTunes through the application’s file sharing feature.</li>
    </ul>
    <p>Which approach is best depends on how the event broker’s certificate is signed. It is recommended that a CA be created to sign the event broker’s certificate, and then to bundle this CA certificate into the application. An application designer can then use this CA to create a certificate for event brokers that the application will use. This approach ensures that the application designer has control over which event broker the application trusts.</p>
    <h2 class="with-rule"><a name="sending-messages"/>Sending Messages</h2>
    <h3><a name="Blocking-send"/>Blocking Send</h3>
    <MadCap:snippetBlock src="Snippets/Blocking-Send.flsnp"/>
    <p>The send blocking parameter is <code>SOLCLIENT_SESSION_PROP_SEND_BLOCKING</code>.</p>
    <h3><a name="Batch"/>Batch Send</h3>
    <h4>Recommendation</h4>
    <ul>
      <li>Use the batch sending facility to optimize send performance.  This is particularly useful for performance benchmarking a client application.</li>
    </ul>
    <p>Use the batch-sending facility to optimize send performance.  This is particularly useful for performance benchmarking client applications.</p>
    <p>A group of up to 50 messages can be sent through a single API call.  This allows messages to be sent in a batch.  The messages can be either Direct or Guaranteed. When batch-sending messages through the send-multiple API, the same Delivery mode, that is Direct or Persistent mode, should be set for all  messages in the batch. Messages in a batch can be set to different destinations.</p>
    <p>In addition to using the batch-sending API, messages should be pre-allocated and reused for batch-sending whenever possible. Specifically, don't reallocate new messages for each call to the batch-sending API.</p>
    <p>The batch-sending API call is <code>solClient_session_sendMultipleMsg()</code>.</p>
    <h3><a name="Time-to-live-msg"/>Time-to-Live Messages</h3>
    <MadCap:snippetBlock src="Snippets/Time-To-Live-Msg.flsnp"/>
    <h2 class="with-rule"><a name="receive-messages"/>Receiving Messages</h2>
    <h3><a name="Consume-messages"/>Consume Messages As Soon As Possible</h3>
    <MadCap:snippetBlock src="Snippets/Consume-Msg-Soon-As-Possible.flsnp"/>
    <p>The application should ensure that the callback is returned promptly as this API operates in asynchronous mode only. Waiting in callback routines can deadlock the application, or at a minimum severely degrade the receive performance.</p>
    <h3><a name="handle-dup-messages"/>Handling Duplicate Message Publication</h3>
    <h4>Recommendation</h4>
    <ul>
      <li>Publishing duplicate messages can be avoided if the client application uses the Last Value Queue (LVQ) to determine the last message successfully spooled by the event broker upon restarting.</li>
    </ul>
    <p>When a client application is  unexpectedly restarted, it's possible for it to become out-of-sync with respect to the message publishing sequence.  There should be a mechanism by which it can determine the last message that was successfully published to, and received by, the event broker in order to correctly resume publishing without injecting duplicate messages.</p>
    <p>One approach is for the publishing application to maintain a database that correlates between the published message identifier and the acknowledgment it receives from the event broker.  This approach is completely self-contained on the client application side, but can introduce processing latencies if not well managed.</p>
    <p>Another approach is to make use of the Last Value Queue (LVQ) feature, where the LVQ stores the last message spooled on the queue. A publishing client application can then browse the LVQ to determine the last message spooled by the event broker.  This allows the publisher to resume publishing without introducing duplicate messages.</p>
    <p>Refer to <MadCap:xref href="../../Messaging/Guaranteed-Msg/Configuring-Queues.htm#Configur16">Configuring Max Spool Usage Values</MadCap:xref> for instructions on setting up LVQ.</p>
    <h3><a name="handle-redelivered-messages"/>Handling Redelivered Messages</h3>
    <h4>Recommendation</h4>
    <ul>
      <li>When consuming from endpoints, a client application should appropriately handle redelivered messages.</li>
    </ul>
    <p>When a client application restarts, unexpectedly or not, and rebinds to a queue, it may receive messages that it had already processed as well as acknowledged.  This can happen because the acknowledgment can be lost on route to the event broker due to network issues.  The redelivered messages will be marked with the <code>redelivered</code> flag.</p>
    <p>A client application that binds to a non-exclusive queue may also receive messages with the <code>redelivered</code> flag set, even though the messages are received by the client application for the first time.  This is due to other clients connecting to the same non-exclusive queue which disconnects without the application acknowledging the received messages.  These messages are then redelivered to other client applications that bind to the same non-exclusive queue.</p>
    <p>The consuming application should contain a message processing mechanism to handle the above mentioned scenarios.</p>
    <h3><a name="unexpected-messages"/>Dealing with Unexpected Message Formats</h3>
    <h4>Recommendation</h4>
    <ul>
      <li>Client applications should be able to handle unexpected message formats.  In the case of consuming from endpoints, a client application should acknowledge received messages even if those messages are unexpectedly formatted.</li>
    </ul>
    <p>Client applications should be able to contend with unexpected message formats.  There shouldn't be any assumptions made about a message's payload; for example, a payload may contain an empty attachment.  Applications should be coded such that they will avoid crashing, as well as logging the message contents and sending an acknowledgment back to the event broker if using Guaranteed Messaging. If client applications crash without sending acknowledgments, then when they reconnect, the same messages will be redelivered causing the applications to fail again.</p>
    <h3><a name="client-acks"/>Client Acknowledgment</h3>
    <h4>Recommendation</h4>
    <ul>
      <li>Client Applications should acknowledge received messages as soon as they have completed processing those messages when client acknowledgment mode is used.</li>
    </ul>
    <p>Once an application has completed processing a message, it should acknowledge the receipt of the message to the event broker.  Only when the event broker receives an acknowledgment for a Guaranteed Message will the message be permanently removed from its message spool. If the client disconnects without sending acknowledgments for some received messages, then those messages will be redelivered.  For the case of an exclusive queue, those messages will be delivered to the next connecting client.  For the case of a non-exclusive queue, those messages will be redelivered to the other clients that are bound to the  queue.</p>
    <p>There are two kinds of acknowledgments:</p>
    <ul>
      <li><u>API (also known as Transport) Acknowledgment</u>.  This is an internal acknowledgment between the API and the event broker and isn't exposed to the application.  The Assured Delivery (AD) window size, acknowledgment timer, and the acknowledgment threshold settings control API Acknowledgment.  A message that isn't transport acknowledged will be automatically redelivered by the event broker.</li>
      <li><u>Application Acknowledgment</u>.  This acknowledgment mechanism is on top of the API Acknowledgment. Its primary purpose is to confirm that message processing has been completed, and  that the corresponding messages can be permanently removed from the event broker. There are two application acknowledgment modes: auto-acknowledgment and client acknowledgment. When auto-acknowledgment mode is used, the API automatically generates application-level acknowledgments on behalf of the application.  When client acknowledgment mode is used, the client application must explicitly send the acknowledgment for the message ID of each message received.</li>
    </ul>
    <p>Refer to the <MadCap:xref href="Receiving-Guaranteed-Messages.htm">Receiving Guaranteed Messages</MadCap:xref> for a more detailed discussion on the different acknowledgment modes.</p>
    <h2 class="with-rule"><a name="do-not-block-callbacks"/>Do Not Block in Callbacks</h2>
    <p>Applications must not block in and should return as quickly as possible from message receive, event and timer callbacks so that the calling thread can process the next message, event or timer and perform internal API housekeeping. The one exception is for transacted sessions. Applications can call API-provided blocking functions such as commit, rollback and send from within the message receive callback of a transacted session.</p>
    <h2 class="with-rule"><a name="Queues"/>Queues and Flows</h2>
    <h3><a name="rec-one-msg"/>Receiving One Message at a Time</h3>
    <MadCap:snippetBlock src="Snippets/One-message.flsnp"/>
    <h3><a name="set-temporary-endpoints"/>Setting Temporary Endpoint Spool Size</h3>
    <MadCap:snippetBlock src="Snippets/Set-Temp-EP-Spool-Size.flsnp"/>
    <h3><a name="AD"/>AD Window Size and max-delivered-unacked-msgs-per-flow</h3>
    <MadCap:snippetBlock src="Snippets/AD-Window-Size.flsnp"/>
    <h3><a name="number-of-flows"/>Number of Flows and AD Window Size</h3>
    <MadCap:snippetBlock src="Snippets/Flows-and-AD-Window-Size.flsnp"/>
    <h2 class="with-rule"><a name="error-handling"/>Error Handling and Logging</h2>
    <p>When Sessions are terminated unexpectedly, error information can be collected and sent to the application. Error information is handled separately for each individual thread.</p>
    <h3><a name="logging-level"/>Logging and Log Level</h3>
    <MadCap:snippetBlock src="Snippets/logging-and-log-level.flsnp"/>
    <h3><a name="handle-session-event-errors"/>Handling Session Events / Errors</h3>
    <MadCap:snippetBlock src="Snippets/Session-Events-Errors.flsnp"/>
    <table class="TableStyle-Table_Num" style="width: 624px;caption-side: top;mc-table-style: url('../../Resources/TableStyles/Table_Num.css');" cellspacing="0">
      <caption valign="top" style="padding-bottom: 3pt;">
        <p class="TblCaption">Session Events</p>
      </caption>
      <col style="width: 548px;" class="TableStyle-Table_Num-Column-Column1"/>
      <col style="width: 342px;" class="TableStyle-Table_Num-Column-Column1"/>
      <thead>
        <tr class="TableStyle-Table_Num-Head-Header1">
          <td class="TableStyle-Table_Num-HeadE-Column1-Header1">C
  (solclient.h)</td>
          <td class="TableStyle-Table_Num-HeadD-Column1-Header1">Description</td>
        </tr>
      </thead>
      <tbody>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p>SOLCLIENT_SESSION_EVENT_ACKNOWLEDGEMENT</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p>The oldest transmitted Persistent / Non Persistent message that has been acknowledged.</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p>SOLCLIENT_SESSION_EVENT_ASSURED_DELIVERY_DOWN</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p>Guaranteed Delivery Publishing is not available.</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p>SOLCLIENT_SESSION_EVENT_CAN_SEND</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p>The send is no longer blocked.</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyE-Column1-Body1">
            <p>SOLCLIENT_SESSION_EVENT_CONNECT_FAILED_ERROR</p>
          </td>
          <td class="TableStyle-Table_Num-BodyD-Column1-Body1">
            <p>The Session attempted to connect but was unsuccessful.</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p>SOLCLIENT_SESSION_EVENT_DOWN_ERROR</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p>The Session was established and then went down.</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p>SOLCLIENT_SESSION_EVENT_MODIFYPROP_FAIL</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p>The session property modification failed.</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p>SOLCLIENT_SESSION_EVENT_MODIFYPROP_OK</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p>The session property modification completed.</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyE-Column1-Body1">
            <p>SOLCLIENT_SESSION_EVENT_PROVISION_ERROR</p>
          </td>
          <td class="TableStyle-Table_Num-BodyD-Column1-Body1">
            <p>The endpoint create/delete command failed.</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p>SOLCLIENT_SESSION_EVENT_PROVISION_OK</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p>The endpoint create/delete command completed.</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p>SOLCLIENT_SESSION_EVENT_RECONNECTED_NOTICE</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p>The automatic reconnect of the Session was successful, and the Session was established again.</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p>SOLCLIENT_SESSION_EVENT_RECONNECTING_NOTICE</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p>The Session has gone down, and an automatic reconnect attempt is in progress.</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyE-Column1-Body1">
            <p>SOLCLIENT_SESSION_EVENT_REJECTED_MSG_ERROR</p>
          </td>
          <td class="TableStyle-Table_Num-BodyD-Column1-Body1">
            <p>The appliance rejected a published message.</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p>SOLCLIENT_SESSION_EVENT_REPLUBLISH_UNACKED_MESSAGES</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p>After successfully reconnecting a disconnected session, the API
 received an unknown publisher flow name response when reconnecting the
 Guaranteed Delivery publisher flow.</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p>SOLCLIENT_SESSION_EVENT_RX_MSG_TOO_BIG_ERROR</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p>The API discarded a received message that exceeded the Session buffer
 size.</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p>SOLCLIENT_SESSION_EVENT_SUBSCRIPTION_ERROR</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p>The application rejected a subscription (add or remove).</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyE-Column1-Body1">
            <p>SOLCLIENT_SESSION_EVENT_SUBSCRIPTION_OK</p>
          </td>
          <td class="TableStyle-Table_Num-BodyD-Column1-Body1">
            <p>The subscribe or unsubscribe operation has succeeded.</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p>SOLCLIENT_SESSION_EVENT_TE_UNSUBSCRIBE_ERROR</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p>The Topic Endpoint unsubscribe command failed.</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p>SOLCLIENT_SESSION_EVENT_TE_UNSUBSCRIBE_OK</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p>The Topic Endpoint unsubscribe completed.</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p>SOLCLIENT_SESSION_EVENT_UP_NOTICE</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p>The Session is established</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyB-Column1-Body1">
            <p>SOLCLIENT_SESSION_EVENT_VIRTUAL_ROUTER_NAME_CHANGED</p>
          </td>
          <td class="TableStyle-Table_Num-BodyA-Column1-Body1">
            <p>The appliance’s Virtual Router Name changed during a reconnect
 operation.</p>
          </td>
        </tr>
      </tbody>
    </table>
    <h3><a name="handle-flow-events-errors"/>Handling Flow Events / Errors</h3>
    <MadCap:snippetBlock src="Snippets/Handling-Flow-Events-Errors.flsnp"/>
    <table class="TableStyle-Table_Num" style="width: 624px;caption-side: top;mc-table-style: url('../../Resources/TableStyles/Table_Num.css');" cellspacing="0">
      <caption valign="top" style="padding-bottom: 3pt;">
        <p class="TblCaption">Flow Events</p>
      </caption>
      <col style="width: 548px;" class="TableStyle-Table_Num-Column-Column1"/>
      <col style="width: 342px;" class="TableStyle-Table_Num-Column-Column1"/>
      <thead>
        <tr class="TableStyle-Table_Num-Head-Header1">
          <td class="TableStyle-Table_Num-HeadE-Column1-Header1">
            <p>
              <b>C
  (solclient.h)</b>
            </p>
          </td>
          <td class="TableStyle-Table_Num-HeadD-Column1-Header1">Description</td>
        </tr>
      </thead>
      <tbody>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p>SOLCLIENT_FLOW_EVENT_UP_NOTICE</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p>The Flow is established.</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p>SOLCLIENT_FLOW_EVENT_DOWN_ERROR</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p>The Flow was established and then disconnected by the appliance, likely due to operator intervention.</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p>SOLCLIENT_FLOW_EVENT_BIND_FAILED_ERROR</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p>The Flow attempted to connect but was unsuccessful.</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyE-Column1-Body1">
            <p>SOLCLIENT_FLOW_EVENT_SESSION_DOWN</p>
          </td>
          <td class="TableStyle-Table_Num-BodyD-Column1-Body1">
            <p>The Session for the Flow was disconnected.</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p>SOLCLIENT_FLOW_EVENT_ACTIVE</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p>The Flow has become active.</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p>SOLCLIENT_FLOW_EVENT_INACTIVE</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p>The Flow has become inactive.</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p>SOLCLIENT_FLOW_EVENT_RECONNECTING</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p>When Flow Reconnect is enabled, instead of a DOWN_ERROR event, the API generates this event and attempts to rebind the Flow.</p>
            <p>If the Flow rebind fails, the API monitors the bind failure and terminates the reconnecting attempts with a DOWN_ERROR unless the failure reason  is one of the following:</p>
            <ul>
              <li>Queue Shutdown</li>
              <li>Topic Endpoint Shutdown</li>
              <li>Service Unavailable</li>
            </ul>
            <p>For more information about Flow Reconnect, refer to <MadCap:xref href="Creating-Flows.htm#Flow">Flow Auto Reconnect</MadCap:xref>.</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1" MadCap:conditions="">
          <td class="TableStyle-Table_Num-BodyB-Column1-Body1">
            <p>SOLCLIENT_FLOW_EVENT_RECONNECTED</p>
          </td>
          <td class="TableStyle-Table_Num-BodyA-Column1-Body1">
            <p>The Flow has been successfully reconnected.</p>
          </td>
        </tr>
      </tbody>
    </table>
    <h3><a name="error-handling-functions"/>Error Handling Functions</h3>
    <p>To complete error handling, include calls to the functions listed below in your event handling code:</p>
    <table class="TableStyle-Table_Num" style="caption-side: top;mc-table-style: url('../../Resources/TableStyles/Table_Num.css');" cellspacing="0">
      <caption valign="top" style="padding-bottom: 3pt;">
        <p class="TblCaption">Error Handling Functions</p>
      </caption>
      <col class="TableStyle-Table_Num-Column-Column1"/>
      <col class="TableStyle-Table_Num-Column-Column1"/>
      <thead>
        <tr class="TableStyle-Table_Num-Head-Header1">
          <td class="TableStyle-Table_Num-HeadE-Column1-Header1">Function</td>
          <td class="TableStyle-Table_Num-HeadD-Column1-Header1">Description</td>
        </tr>
      </thead>
      <tbody>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_BodyCode">solClient_getLastErrorInfo()</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_Body">Returns a pointer to a <code>solClient_errorInfo_t</code> structure. This data structure contains the last captured error information for the calling thread.</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyB-Column1-Body1">
            <p class="Tbl_BodyCode">solClient_resetLastErrorInfo()</p>
          </td>
          <td class="TableStyle-Table_Num-BodyA-Column1-Body1">
            <p class="Tbl_Body">Clears the last error information. Error information is recorded on a per-thread basis.</p>
          </td>
        </tr>
      </tbody>
    </table>
    <h3><a name="Subcodes-for-c"/>Subcodes</h3>
    <p>Subcodes provide more detailed error information. The basic subcodes that can result from any API call are listed in the table below.</p>
    <p>Some API calls can also generate more specific error subcodes. For more information on these subcodes, refer to <MadCap:xref href="../../API-Developer-Online-Ref-Documentation/c/index.html"><MadCap:xref href="../Messaging-APIs/C-API/c-api-home.htm#Capireference">C API Reference</MadCap:xref></MadCap:xref>.</p>
    <p>The last generated subcode is stored on a per-thread basis and can be retrieved by an application thread. An application can call <code>solClient_subCodeToString()</code> to convert a subcode to a string.</p>
    <table class="TableStyle-Table_Num" style="caption-side: top;mc-table-style: url('../../Resources/TableStyles/Table_Num.css');" cellspacing="0">
      <caption valign="top" style="padding-bottom: 3pt;">
        <p class="TblCaption">Generic Subcodes</p>
      </caption>
      <col class="TableStyle-Table_Num-Column-Column1"/>
      <col class="TableStyle-Table_Num-Column-Column1"/>
      <thead>
        <tr class="TableStyle-Table_Num-Head-Header1">
          <td class="TableStyle-Table_Num-HeadE-Column1-Header1">Subcode</td>
          <td class="TableStyle-Table_Num-HeadD-Column1-Header1">Description</td>
        </tr>
      </thead>
      <tbody>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_BodyCode">SOLCLIENT_SUBCODE_INIT_NOT_CALLED</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_Body">An API call failed because <code>solClient_initialize(...) </code>was not called first.</p>
            <p class="Note">This subcode cannot occur for functions that are allowed to be called before <code>solClient_initialize</code>.</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_BodyCode">SOLCLIENT_SUBCODE_PARAM_OUT_OF_RANGE</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_Body">An API call was made with an out-of-range parameter. </p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_BodyCode">SOLCLIENT_SUBCODE_PARAM_NULL_PTR</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_Body">An API call was made with a null or invalid pointer parameter. </p>
            <p class="Note">This subcode only applies to functions that accept pointer parameters.</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyE-Column1-Body1">
            <p class="Tbl_BodyCode">SOLCLIENT_SUBCODE_PARAM_CONFLICT</p>
          </td>
          <td class="TableStyle-Table_Num-BodyD-Column1-Body1">
            <p class="Tbl_Body">An API call was made with an invalid parameter combination.</p>
            <p class="Note">This subcode only applies to functions that have interdependent parameters.</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_BodyCode">SOLCLIENT_SUBCODE_INTERNAL_ERROR</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_Body">An API call had an internal error (not an application fault). </p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_BodyCode">SOLCLIENT_SUBCODE_OS_ERROR</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_Body">An API call failed because of a failed operating system call. </p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyB-Column1-Body1">
            <p class="Tbl_BodyCode">SOLCLIENT_SUBCODE_OUT_OF_MEMORY</p>
          </td>
          <td class="TableStyle-Table_Num-BodyA-Column1-Body1">
            <p class="Tbl_Body">An API call failed because memory could not be allocated. </p>
          </td>
        </tr>
      </tbody>
    </table>
    <h2 class="with-rule"><a name="message-config-client-behavior"/>Event Broker Configuration that Influences Client Application Behavior</h2>
    <h3><a name="max-redelivery"/>Max Redelivery</h3>
    <MadCap:snippetBlock src="Snippets/Max-Redelivery.flsnp"/>
    <h3><a name="Reject"/>Reject Message to Sender on Discard</h3>
    <MadCap:snippetBlock src="Snippets/Reject-Msg-Sender-Discard.flsnp"/>
  </body>
</html>
