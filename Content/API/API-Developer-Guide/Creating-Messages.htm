<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
  <head>
    <link href="../../Resources/TableStyles/Table_Num.css" rel="stylesheet" MadCap:stylesheetType="table"/>
  </head>
  <body>
    <h1>Creating Messages</h1>
    <p>Messages are explicitly created by client applications when publishing and are implicitly created by the messaging APIs on matching message delivery.</p>
    <p style="font-weight: bold;">JCSMP</p>
    <p>Creates an object of the specified class  to encapsulate a message.</p>
    <p style="font-weight: bold;">Java RTO API</p>
    <p>Creates an object within the native library and provides a handle to the application.</p>
    <p style="font-weight: bold;">C API</p>
    <p>Allocates a memory buffer from heap storage to store and send and receive messages.</p>
    <p style="font-weight: bold;">.NET API</p>
    <p>Creates an <code>IMessage</code> object to encapsulate a message.</p>
    <p style="font-weight: bold;">JavaScript and Node.js APIs</p>
    <p>Creates a <code>solace.Message</code> object to encapsulate a message.</p>
    <p>When creating messages, the following factors should be considered:</p>
    <ul>
      <li>
        <MadCap:xref href="#publishing_direct_messages_2102779381_618548">Message Ownership</MadCap:xref>
      </li>
      <li>
        <MadCap:xref href="#publishing_direct_messages_2102779381_642572">Message Types</MadCap:xref>
      </li>
      <li>
        <MadCap:xref href="#publishing_direct_messages_2102779381_604482">Resetting Messages</MadCap:xref>
      </li>
    </ul>
    <h2 class="with-rule"><a name="publishing_direct_messages_2102779381_618548"/>Message Ownership</h2>
    <p>When creating messages for publishing, there are two message ownership models:</p>
    <ul>
      <li>Session-independent
			<p>In a Session‑independent message ownership model, client applications can reuse messages between send operations. Messages are allocated on demand and are disposed explicitly by client applications when they are done with the messages.</p></li>
    </ul>
    <ul>
      <li>Session-dependent
			<p>JCSMP also supports a Session-dependent message ownership model. In this model, message instances are pre-allocated into a producer message pool; client applications can ‘take’ a message instance from the message pool, populate it, and send it. When the send operation returns, the message instance is automatically reset and ‘put’ back into the message pool by the API. This is done through the <code>Producer</code> interface on the Session.</p><p>Session‑dependent messages cannot be used in a batch send (refer to <MadCap:xref href="Sending-Messages.htm#publishing_direct_messages_2102779381_475505">Sending Multiple Messages at a Time</MadCap:xref>).</p><p class="Note">The Session-dependent message ownership model is primarily maintained for backwards compatibility with existing applications that use JCSMP. It is recommended that new Java applications use the Session‑independent messages. There is no performance penalty for using the Session‑independent message ownership model if messages are pre‑allocated and reused, whenever possible.</p></li>
    </ul>
    <table style="caption-side: top;width: 95%;mc-table-style: url('../../Resources/TableStyles/Table_Num.css');" class="TableStyle-Table_Num" cellspacing="0">
      <caption valign="top" style="padding-bottom: 3pt;">
        <p class="TblCaption">To Create Session-Independent Messages</p>
      </caption>
      <col class="TableStyle-Table_Num-Column-Column1"/>
      <col class="TableStyle-Table_Num-Column-Column1"/>
      <thead>
        <tr class="TableStyle-Table_Num-Head-Header1">
          <th class="TableStyle-Table_Num-HeadE-Column1-Header1"><MadCap:variable name="Product-Names.pubsub_brand_only"/> Messaging API</th>
          <th class="TableStyle-Table_Num-HeadD-Column1-Header1">Call</th>
        </tr>
      </thead>
      <tbody>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">JCSMP</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_BodyCode">JCSMPFactory.createMessage(...)</p>
            <p class="Tbl_Body">Creates an object of the specified class (refer to <MadCap:xref class="Num_And_Name" href="#publishing_direct_messages_2102779381_665027">Table 5-5, Java Message Classes</MadCap:xref>) to encapsulate a message.</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">Java RTO</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_BodyCode">Solclient.createMessageForHandle(...)</p>
            <p class="Tbl_Body">Allocates a new message that is bound to the given unbound <code>MessageHandle</code>.</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">C</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_BodyCode">solClient_msg_alloc(...)</p>
            <p class="Tbl_Body">Allocates a memory buffer from heap storage to store and send and receive messages.</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyE-Column1-Body1">
            <p class="Tbl_Body">.NET</p>
          </td>
          <td class="TableStyle-Table_Num-BodyD-Column1-Body1">
            <ul>
              <li>
                <p class="Tbl_BodyCode">ContextFactory.CreateMessage()</p>
              </li>
              <li>
                <p class="Tbl_BodyCode">ISession.CreateMessage()</p>
                <p class="Tbl_Body">Creates an <code>IMessage</code> object to encapsulate a message.</p>
              </li>
            </ul>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyB-Column1-Body1">
            <p>JavaScript and Node.js</p>
          </td>
          <td class="TableStyle-Table_Num-BodyA-Column1-Body1">
            <p class="Tbl_BodyCode">solace.SolclientFactory.createMessage()</p>
            <p class="Tbl_Body">Creates a <code>solace.Message</code> object to encapsulate a message.</p>
          </td>
        </tr>
      </tbody>
    </table>
    <p style="font-weight: bold;">Related Samples</p>
    <p>For an example of how to create Session‑independent messages, refer to the <code>ADPubAck</code> sample for JCSMP, the <code>DirectPubSub</code> samples for the Java RTO, C, and .NET APIs, and the <code>TopicPublisher</code> sample for the JavaScript and Node.js APIs.</p>
    <table style="caption-side: top;width: 95%;mc-table-style: url('../../Resources/TableStyles/Table_Num.css');" class="TableStyle-Table_Num" cellspacing="0">
      <caption valign="top" style="padding-bottom: 3pt;">
        <p class="TblCaption">To Create Session-Dependent Messages</p>
      </caption>
      <col class="TableStyle-Table_Num-Column-Column1"/>
      <col class="TableStyle-Table_Num-Column-Column1"/>
      <thead>
        <tr class="TableStyle-Table_Num-Head-Header1">
          <th class="TableStyle-Table_Num-HeadE-Column1-Header1"><MadCap:variable name="Product-Names.pubsub_brand_only"/> Messaging API</th>
          <th class="TableStyle-Table_Num-HeadD-Column1-Header1">Call</th>
        </tr>
      </thead>
      <tbody>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">JCSMP</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_BodyCode">producer.createBytesXMLMessage()</p>
            <p class="Tbl_BodyCode">producer.createBytesMessage()</p>
            <p class="Tbl_BodyCode">producer.createMapMessage()</p>
            <p class="Tbl_BodyCode">producer.createStreamMessage()</p>
            <p class="Tbl_BodyCode">producer.createTextMessage()</p>
            <p class="Tbl_BodyCode">producer.createXMLContentMessage()</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">Java RTO</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_Body">Not applicable</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">C</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_Body">Not applicable</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyE-Column1-Body1">
            <p class="Tbl_Body">.NET</p>
          </td>
          <td class="TableStyle-Table_Num-BodyD-Column1-Body1">
            <p class="Tbl_Body">Not applicable</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyB-Column1-Body1">
            <p class="Tbl_Body">JavaScript and Node.js</p>
          </td>
          <td class="TableStyle-Table_Num-BodyA-Column1-Body1">
            <p class="Tbl_Body">Not applicable</p>
          </td>
        </tr>
      </tbody>
    </table>
    <h2 class="with-rule"><a name="publishing_direct_messages_2102779381_642572"/>Message Types</h2>
    <p>The messaging APIs support different message types as defined by the message payloads.</p>
    <p style="font-weight: bold;">JCSMP</p>
    <p>For programmers’ convenience, the following type‑safe message types/classes are provided.</p>
    <table style="caption-side: top;width: 95%;mc-table-style: url('../../Resources/TableStyles/Table_Num.css');" class="TableStyle-Table_Num" cellspacing="0">
      <caption valign="top" style="padding-bottom: 3pt;">
        <p class="TblCaption"><a name="publishing_direct_messages_2102779381_665027"/>Java Message Classes</p>
      </caption>
      <col class="TableStyle-Table_Num-Column-Column1"/>
      <col class="TableStyle-Table_Num-Column-Column1"/>
      <thead>
        <tr class="TableStyle-Table_Num-Head-Header1">
          <th class="TableStyle-Table_Num-HeadE-Column1-Header1">Message Class</th>
          <th class="TableStyle-Table_Num-HeadD-Column1-Header1">Description</th>
        </tr>
      </thead>
      <tbody>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_BodyCode">BytesXMLMessage</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_Body">An unstructured class that can be used to send a message containing an XML data payload.</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_BodyCode">BytesMessage</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_Body">A structured class that can be used to send a message that contains a stream of uninterpreted bytes in a binary attachment.</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_BodyCode">MapMessage</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_Body">A structured class that can be used to send a message that contains a structured data type (SDT) map. Refer to <MadCap:xref href="Using-Structured-Data.htm#using_structured_data_3599246180_554937">Using Structured Data</MadCap:xref>.</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyE-Column1-Body1">
            <p class="Tbl_BodyCode">StreamMessage</p>
          </td>
          <td class="TableStyle-Table_Num-BodyD-Column1-Body1">
            <p class="Tbl_Body">A structured class that can be used to send a message that contains a SDT stream. Refer to <MadCap:xref href="Using-Structured-Data.htm#using_structured_data_3599246180_554937">Using Structured Data</MadCap:xref>.</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_BodyCode">TextMessage</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_Body">A structured class that can be used to send a message that contains text.</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyB-Column1-Body1">
            <p class="Tbl_BodyCode">XMLContentMessage</p>
          </td>
          <td class="TableStyle-Table_Num-BodyA-Column1-Body1">
            <p class="Tbl_Body">A structured class that can be used to send a message that contains XML data.</p>
          </td>
        </tr>
      </tbody>
    </table>
    <p style="font-weight: bold;">Java RTO API</p>
    <p>The following message types are provided for Java RTO.</p>
    <p>Java RTO Message Classes</p>
    <table style="width: 95%;mc-table-style: url('../../Resources/TableStyles/Table_Num.css');" class="TableStyle-Table_Num" cellspacing="0">
      <col class="TableStyle-Table_Num-Column-Column1"/>
      <col class="TableStyle-Table_Num-Column-Column1"/>
      <thead>
        <tr class="TableStyle-Table_Num-Head-Header1">
          <th class="TableStyle-Table_Num-HeadE-Column1-Header1">Message Class</th>
          <th class="TableStyle-Table_Num-HeadD-Column1-Header1">Description</th>
        </tr>
      </thead>
      <tbody>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyB-Column1-Body1">
            <p class="Tbl_BodyCode">BytesMessage</p>
          </td>
          <td class="TableStyle-Table_Num-BodyA-Column1-Body1">
            <p class="Tbl_Body">A structured class that can be used to send a message that contains a stream of uninterpreted bytes in a binary attachment.</p>
          </td>
        </tr>
      </tbody>
    </table>
    <p style="font-weight: bold;">C, JavaScript, Node.js, and .NET APIs</p>
    <p>These  APIs define only a single message type. In these APIs, a message payload can contain any combination of the message types and classes listed above by way of message helper functions.</p>
    <h2 class="with-rule"><a name="publishing_direct_messages_2102779381_604482"/>Resetting Messages</h2>
    <p>When reusing a message in the Session-independent message ownership model, you can release all memory associated with a message buffer so that the message buffer is reset to its original state (that is, as if it has just been allocated). All fields are reset to their default values.</p>
    <p>The Java RTO API does not include a reset method. If a message is destroyed using <code>MessageHandle.destroy()</code>, you must call <code>createMessageForHandle</code> again to allocate a new message for the now-unbound handle.</p>
    <table style="caption-side: top;width: 95%;mc-table-style: url('../../Resources/TableStyles/Table_Num.css');" class="TableStyle-Table_Num" cellspacing="0">
      <caption valign="top" style="padding-bottom: 3pt;">
        <p class="TblCaption">To Reset a Message</p>
      </caption>
      <col class="TableStyle-Table_Num-Column-Column1"/>
      <col class="TableStyle-Table_Num-Column-Column1"/>
      <thead>
        <tr class="TableStyle-Table_Num-Head-Header1">
          <th class="TableStyle-Table_Num-HeadE-Column1-Header1"><MadCap:variable name="Product-Names.pubsub_brand_only"/> Messaging API</th>
          <th class="TableStyle-Table_Num-HeadD-Column1-Header1">Call</th>
        </tr>
      </thead>
      <tbody>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">JCSMP</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_BodyCode">XMLMessage.reset()</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">Java RTO</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_Body">Not applicable</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">C</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_BodyCode">solClient_msg_reset(...)</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyE-Column1-Body1">
            <p class="Tbl_Body">.NET</p>
          </td>
          <td class="TableStyle-Table_Num-BodyD-Column1-Body1">
            <p class="Tbl_BodyCode">IMessage.reset()</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyB-Column1-Body1">
            <p class="Tbl_Body">JavaScript and Node.js</p>
          </td>
          <td class="TableStyle-Table_Num-BodyA-Column1-Body1">
            <p class="Tbl_BodyCode">solace.Message.reset()</p>
          </td>
        </tr>
      </tbody>
    </table>
  </body>
</html>
