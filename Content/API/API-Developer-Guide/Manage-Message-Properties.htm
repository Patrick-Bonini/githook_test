<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
  <head>
    <link href="../../Resources/TableStyles/Table_Num.css" rel="stylesheet" MadCap:stylesheetType="table"/>
  </head>
  <body>
    <h1>Managing Messages in the <MadCap:variable name="Manifest-Products-APIs.PubSub-GenericAll-Messaging-API"/>s</h1>
    <p>The following sections discuss how you can manage messages when you use the <MadCap:variable name="Product-Names.pubsub_brand_only"/> Messaging APIs.<![CDATA[
		]]></p>
    <ul>
      <li>
        <p>
          <MadCap:xref href="#Getting-Msg-Props">Getting Message Properties</MadCap:xref>
        </p>
      </li>
      <li>
        <p>
          <MadCap:xref href="#Setting-Msg-Props">Setting Message Properties</MadCap:xref>
        </p>
      </li>
      <li>
        <p>
          <MadCap:xref href="#Duplicat1">Duplicating Messages</MadCap:xref>
        </p>
      </li>
      <li>
        <p>
          <MadCap:xref href="#Displayi1">Displaying Messages</MadCap:xref>
        </p>
      </li>
      <li>
        <p>
          <MadCap:xref href="#Freeing1">Freeing Messages</MadCap:xref>
        </p>
      </li>
    </ul>
    <h2><a name="Getting-Msg-Props"/>Getting Message Properties</h2>
    <p>A client can obtain message properties from a created message before it is published or from a message the API receives from the event broker.</p>
    <p>For a complete list of message properties that can be retrieved, see the appropriate API in the  <MadCap:xref href="../Messaging-APIs/Solace-APIs-Overview.htm">Solace Messaging APIs</MadCap:xref> section.</p>
    <div class="Note">
      <p>Some message properties, such as expiration, TTL and dead message queue eligibility, are only valid when used with guaranteed messages. See the relevant API reference documentation for more information.</p>
    </div>
    <table style="caption-side: top;mc-table-style: url('../../Resources/TableStyles/Table_Num.css');" class="TableStyle-Table_Num" cellspacing="0">
      <caption valign="top" style="padding-bottom: 3pt;">
        <p class="TblCaption">To Get Message Properties</p>
      </caption>
      <col style="width: 25%;" class="TableStyle-Table_Num-Column-Column1"/>
      <col width="75%" class="TableStyle-Table_Num-Column-Column1"/>
      <thead>
        <tr class="TableStyle-Table_Num-Head-Header1">
          <th class="TableStyle-Table_Num-HeadE-Column1-Header1"><MadCap:variable name="Product-Names.pubsub_brand_only"/> Messaging API</th>
          <th class="TableStyle-Table_Num-HeadD-Column1-Header1">Use</th>
        </tr>
      </thead>
      <tbody>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">JCSMP</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_BodyCode">All <code>XMLMessage.get*()</code> methods. For example:</p>
            <ul>
              <li>
                <p class="Tbl_BodyCode">
                  <code>XMLMessage.getApplicationMessageType()</code>
                </p>
              </li>
              <li>
                <p class="Tbl_BodyCode">
                  <code>XMLMessage.getDeliveryMode()</code>
                </p>
              </li>
              <li>
                <p class="Tbl_BodyCode">
                  <code>XMLMessage.getSenderId()</code>
                </p>
              </li>
            </ul>
            <p>For a complete list of methods, see the <a href="../../API-Developer-Online-Ref-Documentation/java/index.html" class="link-internal"><MadCap:variable name="Product-Names.pubsub_brand_only"/> Messaging API JCSMP reference</a>.</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">Java RTO</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_BodyCode">All <code>MessageHandle.get*()</code> methods. For example:</p>
            <ul>
              <li>
                <p class="Tbl_BodyCode">
                  <code>MessageHandle.getApplicationMessageType()</code>
                </p>
              </li>
              <li>
                <p class="Tbl_BodyCode">
                  <code>MessageHandle.getDeliveryCount()</code>
                </p>
              </li>
              <li>
                <p class="Tbl_BodyCode">
                  <code>MessageHandle.getSenderId()</code>
                </p>
              </li>
            </ul>
            <p>For a complete list of methods, see the <a href="../../API-Developer-Online-Ref-Documentation/jrto/index.html" class="link-internal"><MadCap:variable name="Product-Names.pubsub_brand_only"/> Messaging API Java RTO reference</a>.</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">C</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_BodyCode">All <code>solClient_msg_get*(...)</code>functions. For example:</p>
            <ul>
              <li>
                <p>
                  <code>solClient_msg_getApplicationMsgType (solClient_opaqueMsg_pt msg_p, const char **msgType_p)</code>
                </p>
              </li>
              <li>
                <p>
                  <code>solClient_msg_getDeliveryMode (solClient_opaqueMsg_pt msg_p, solClient_uint32_t *mode_p)</code>
                </p>
              </li>
              <li>
                <p>
                  <code>solClient_msg_getSenderId (solClient_opaqueMsg_pt msg_p, const char **buf_p)</code>
                </p>
              </li>
            </ul>
            <p>For a complete list of methods, see the <a href="../../API-Developer-Online-Ref-Documentation/c/index.html" class="link-internal"><MadCap:variable name="Product-Names.pubsub_brand_only"/> Messaging API C reference</a>.</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyE-Column1-Body1">
            <p class="Tbl_Body">.NET</p>
          </td>
          <td class="TableStyle-Table_Num-BodyD-Column1-Body1">
            <p class="Tbl_BodyCode">All <code>IMessage.Get*()</code> methods. For example:</p>
            <ul>
              <li>
                <p>
                  <code>IMessage.GetBinaryAttachment()</code>
                </p>
              </li>
              <li>
                <p>
                  <code>IMessage.GetDestinationTopicSuffix()</code>
                </p>
              </li>
              <li>
                <p>
                  <code>IMessage.GetUserData()</code>
                </p>
              </li>
            </ul>
            <p>For a complete list of methods, see the <a href="../../API-Developer-Online-Ref-Documentation/net/index.html" class="link-internal"><MadCap:variable name="Product-Names.pubsub_brand_only"/> Messaging API .NET reference</a>.</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyB-Column1-Body1">
            <p class="Tbl_Body">JavaScript and Node.js</p>
          </td>
          <td class="TableStyle-Table_Num-BodyA-Column1-Body1">
            <p class="Tbl_BodyCode">All <code>solace.Message.get*()</code> functions. For example:</p>
            <p class="Tbl_BodyCode">Examples:</p>
            <ul>
              <li>
                <p class="Tbl_BodyCode">
                  <code>solace.Message.getApplicationMessageType ( )</code>
                </p>
              </li>
              <li>
                <p>
                  <code>solace.Message.getDeliveryMode ( )</code>
                </p>
              </li>
              <li>
                <p>
                  <code>solace.Message.getSenderId ( )</code>
                </p>
              </li>
            </ul>
            <p>For a complete list of methods, see the <a href="../../API-Developer-Online-Ref-Documentation/nodejs/index.html" class="link-internal"><MadCap:variable name="Product-Names.pubsub_brand_only"/> Messaging API JavaScript reference</a>.</p>
          </td>
        </tr>
      </tbody>
    </table>
    <h2><a name="Setting-Msg-Props"/>Setting Message Properties</h2>
    <p>A client can set message properties on a created message before it is published or on a message the API receives from the event broker.</p>
    <p>For a complete list of message properties that can be set, see the appropriate API in the  <MadCap:xref href="../Messaging-APIs/Solace-APIs-Overview.htm">Solace Messaging APIs</MadCap:xref> section.</p>
    <div class="Note">
      <p>Some message properties, such as expiration, TTL and dead message queue eligibility, are only valid when used with guaranteed messages. See the relevant API reference documentation for more information.</p>
    </div>
    <table style="caption-side: top;mc-table-style: url('../../Resources/TableStyles/Table_Num.css');" class="TableStyle-Table_Num" cellspacing="0">
      <caption valign="top" style="padding-bottom: 3pt;">
        <p class="TblCaption">To set message properties</p>
      </caption>
      <col style="width: 25%;" class="TableStyle-Table_Num-Column-Column1"/>
      <col width="75%" class="TableStyle-Table_Num-Column-Column1"/>
      <thead>
        <tr class="TableStyle-Table_Num-Head-Header1">
          <th class="TableStyle-Table_Num-HeadE-Column1-Header1"><MadCap:variable name="Product-Names.pubsub_brand_only"/> Messaging API</th>
          <th class="TableStyle-Table_Num-HeadD-Column1-Header1">Use</th>
        </tr>
      </thead>
      <tbody>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">JCSMP</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p>All <code>XMLMessage.set*()</code> methods. For example:</p>
            <ul>
              <li>
                <p class="Tbl_BodyCode">
                  <code>XMLMessage.setApplicationMessageType(String id)</code>
                </p>
              </li>
              <li>
                <p class="Tbl_BodyCode">
                  <code>XMLMessage.setDeliveryMode(DeliveryMode mode)</code>
                </p>
              </li>
              <li>
                <p class="Tbl_BodyCode">
                  <code>XMLMessage.setSenderId(String senderId)</code>
                </p>
              </li>
            </ul>
            <p>For a complete list of methods, see the <a href="../../API-Developer-Online-Ref-Documentation/java/index.html" class="link-internal"><MadCap:variable name="Product-Names.pubsub_brand_only"/> Messaging API JCSMP reference</a>.</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">Java RTO</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p>All <code>MessageHandle.set*()</code> methods. For example:</p>
            <ul>
              <li>
                <p>
                  <code>MessageHandle.setApplicationMessageType(java.lang.String appMsgType)</code>
                </p>
              </li>
              <li>
                <p>
                  <code>MessageHandle.setCorrelationId(java.lang.String correlationId)</code>
                </p>
              </li>
              <li>
                <p>
                  <code>MessageHandle.setSenderId(java.lang.String senderId)</code>
                </p>
              </li>
            </ul>
            <p>For a complete list of methods, see the <a href="../../API-Developer-Online-Ref-Documentation/jrto/index.html" class="link-internal"><MadCap:variable name="Product-Names.pubsub_brand_only"/> Messaging API Java RTO reference</a>.</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">C</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p>All <code>solClient_msg_set*()</code> functions. For example:</p>
            <ul>
              <li>
                <p>
                  <code>solClient_msg_setApplicationMsgType (solClient_opaqueMsg_pt msg_p, const char *msgType)</code>
                </p>
              </li>
              <li>
                <p>
                  <code>solClient_msg_setDeliveryMode (solClient_opaqueMsg_pt msg_p, solClient_uint32_t mode)</code>
                </p>
              </li>
              <li>
                <p>
                  <code>solClient_msg_setSenderId (solClient_opaqueMsg_pt msg_p, const char *buf_p)</code>
                </p>
              </li>
            </ul>
            <p>For a complete list of methods, see the <a href="../../API-Developer-Online-Ref-Documentation/c/index.html" class="link-internal"><MadCap:variable name="Product-Names.pubsub_brand_only"/> Messaging API C reference</a>.</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyE-Column1-Body1">
            <p class="Tbl_Body">.NET</p>
          </td>
          <td class="TableStyle-Table_Num-BodyD-Column1-Body1">
            <p>All <code>IMessage.Set*()</code> methods. For example:</p>
            <ul>
              <li>
                <p>
                  <code>IMessage.SetBinaryAttachment (sbyte[] binaryAttachment)</code>
                </p>
              </li>
              <li>
                <p>
                  <code>IMessage.SetUserData (sbyte[] userData)</code>
                </p>
              </li>
              <li>
                <p>
                  <code>IMessage.SetXmlContent (sbyte[] xmlContent)</code>
                </p>
              </li>
            </ul>
            <p>For a complete list of methods, see the <a href="../../API-Developer-Online-Ref-Documentation/net/index.html" class="link-internal"><MadCap:variable name="Product-Names.pubsub_brand_only"/> Messaging API .NET reference</a>.</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyB-Column1-Body1">
            <p class="Tbl_Body">JavaScript and Node.js</p>
          </td>
          <td class="TableStyle-Table_Num-BodyA-Column1-Body1">
            <p>All <code>solace.Message.set*()</code> functions. For example:</p>
            <ul>
              <li>
                <p>
                  <code>solace.Message.setApplicationMessageType ( String value )</code>
                </p>
              </li>
              <li>
                <p>
                  <code>solace.Message.setDeliveryMode ( solace.MessageDeliveryModeType value )</code>
                </p>
              </li>
              <li>
                <p>
                  <code>solace.Message.setSenderId ( String value )</code>
                </p>
              </li>
            </ul>
            <p>For a complete list of methods, see the <a href="../../API-Developer-Online-Ref-Documentation/nodejs/index.html" class="link-internal"><MadCap:variable name="Product-Names.pubsub_brand_only"/> Messaging API JavaScript reference</a>.</p>
          </td>
        </tr>
      </tbody>
    </table>
    <h2><a name="Duplicat1"/>Duplicating Messages</h2>
    <p>When using the C API, a client can duplicate a message buffer, which allocates a new message that references the same data as the original. You can duplicate a created message or a received message.</p>
    <p>The data is reference counted to indicate that two message buffers have pointers to the data.</p>
    <table style="caption-side: top;width: 95%;mc-table-style: url('../../Resources/TableStyles/Table_Num.css');" class="TableStyle-Table_Num" cellspacing="0">
      <caption valign="top" style="padding-bottom: 3pt;">
        <p class="TblCaption">To Duplicate Messages</p>
      </caption>
      <col style="width: 25%;" class="TableStyle-Table_Num-Column-Column1"/>
      <col width="75%" class="TableStyle-Table_Num-Column-Column1"/>
      <thead>
        <tr class="TableStyle-Table_Num-Head-Header1">
          <th class="TableStyle-Table_Num-HeadE-Column1-Header1"><MadCap:variable name="Product-Names.pubsub_brand_only"/> Messaging API</th>
          <th class="TableStyle-Table_Num-HeadD-Column1-Header1">Use</th>
        </tr>
      </thead>
      <tbody>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">JCSMP</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_Body">Not applicable</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">Java RTO</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_Body">Not applicable</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">C</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_BodyCode">
              <code>solClient_msg_dup(...)</code>
            </p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyE-Column1-Body1">
            <p class="Tbl_Body">.NET</p>
          </td>
          <td class="TableStyle-Table_Num-BodyD-Column1-Body1">
            <p class="Tbl_Body">Not applicable</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyB-Column1-Body1">
            <p class="Tbl_Body">JavaScript and Node.js</p>
          </td>
          <td class="TableStyle-Table_Num-BodyA-Column1-Body1">
            <p class="Tbl_Body">Not applicable</p>
          </td>
        </tr>
      </tbody>
    </table>
    <h2><a name="Displayi1"/>Displaying Messages</h2>
    <p>You can use the message dump utility to display the contents of a message in a human‑readable form. This utility method or function is provided as a programming aid to facilitate the development and testing of messaging applications. You can display the contents of a created message or a received message.</p>
    <table style="caption-side: top;width: 95%;mc-table-style: url('../../Resources/TableStyles/Table_Num.css');" class="TableStyle-Table_Num" cellspacing="0">
      <caption valign="top" style="padding-bottom: 3pt;">
        <p class="TblCaption">To Display Message Contents</p>
      </caption>
      <col class="TableStyle-Table_Num-Column-Column1"/>
      <col class="TableStyle-Table_Num-Column-Column1"/>
      <thead>
        <tr class="TableStyle-Table_Num-Head-Header1">
          <th class="TableStyle-Table_Num-HeadE-Column1-Header1"><MadCap:variable name="Product-Names.pubsub_brand_only"/> Messaging API</th>
          <th class="TableStyle-Table_Num-HeadD-Column1-Header1">Use</th>
        </tr>
      </thead>
      <tbody>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p>JCSMP</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_BodyCode">
              <code>XMLMessage.dump()</code>
            </p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p>Java RTO</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_BodyCode">
              <code>MessageHandle.dump(...)</code>
            </p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">C</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_BodyCode">
              <code>solClient_msg_dump(...)</code>
            </p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyE-Column1-Body1">
            <p class="Tbl_Body">.NET</p>
          </td>
          <td class="TableStyle-Table_Num-BodyD-Column1-Body1">
            <p class="Tbl_BodyCode">
              <code>IMessage.Dump()</code>
            </p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyB-Column1-Body1">
            <p class="Tbl_Body">Javascript and Node.js</p>
          </td>
          <td class="TableStyle-Table_Num-BodyA-Column1-Body1">
            <p class="Tbl_BodyCode">
              <code>Solace.Message.dump()</code>
            </p>
          </td>
        </tr>
      </tbody>
    </table>
    <p>The format of the generated output is:</p>
    <p class="Code">&lt;field&gt;:                              &lt;value&gt;</p>
    <p>For example, a message part, such as a message header field like <code>SenderId</code>, is displayed as:</p>
    <p class="Code">SenderId:                             mySenderID</p>
    <p>If a message part is present in the message, but it contains NULL or an empty string, the field is displayed (in this case, <code>SenderID:</code>) but no value is present. If a message part is not present, then no output is generated for that part. For example, if there is no <code>SenderId</code> header field, then no <code>SenderId</code> field or value is generated.</p>
    <h2><a name="Freeing1"/>Freeing Messages</h2>
    <p>When using the Java RTO, C, or .NET APIs, a client should free a message when it is finished it so that the memory allocated to the message is freed. Clients should free outbound messages after publishing them, and free inbound messages after they finish processing them.</p>
    <p>When one of the calls listed below successfully return, the memory that was referenced by the freed message is no longer valid.</p>
    <table style="caption-side: top;width: 95%;mc-table-style: url('../../Resources/TableStyles/Table_Num.css');" class="TableStyle-Table_Num" cellspacing="0">
      <caption valign="top" style="padding-bottom: 3pt;">
        <p class="TblCaption">To Free Messages</p>
      </caption>
      <thead>
        <tr class="TableStyle-Table_Num-Head-Header1">
          <th class="TableStyle-Table_Num-HeadE-Column1-Header1"><MadCap:variable name="Product-Names.pubsub_brand_only"/> Messaging API</th>
          <th class="TableStyle-Table_Num-HeadD-Column1-Header1">Use</th>
        </tr>
      </thead>
      <tbody>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">JCSMP</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_Body">Not applicable</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">Java RTO</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p>A client may call <code>MessageHandle.takeRxMessage()</code> to take ownership of messages received in a callback. When this happens, the client must free the message when it is no longer needed.</p>
            <p class="Tbl_BodyCode">
              <code>MessageHandle.destroy()</code>
            </p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">C</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p>In general, a client does not need to free any message received from the C API in a callback. However, to take ownership of messages received in a callback, a client can return <code>SOLCLIENT_CALLBACK_TAKEMSG</code> to the API. In this latter case, a client must free the message when it no longer needs it.</p>
            <p class="Tbl_BodyCode">
              <code>solClient_msg_free(solClient_opaqueMsg_pt * 	msg_p)</code>
            </p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyE-Column1-Body1">
            <p class="Tbl_Body">.NET</p>
          </td>
          <td class="TableStyle-Table_Num-BodyD-Column1-Body1">
            <p class="Tbl_BodyCode">
              <code>Dispose()</code>
            </p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyB-Column1-Body1">
            <p class="Tbl_Body">JavaScript and Node.js</p>
          </td>
          <td class="TableStyle-Table_Num-BodyA-Column1-Body1">
            <p class="Tbl_Body">Not applicable</p>
          </td>
        </tr>
      </tbody>
    </table>
  </body>
</html>
