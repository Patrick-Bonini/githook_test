<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
  <head>
    <link href="../../Resources/TableStyles/Table_Num.css" rel="stylesheet" MadCap:stylesheetType="table"/>
  </head>
  <body>
    <h1>Consuming Messages in Transactions</h1>
    <p>To consume Guaranteed messages in a Transaction, a client must create a consumer Flow within the Transacted Session through one of the methods or functions listed below to bind to the destination endpoint that the messages are spooled to.</p>
    <p>Guaranteed messages can then be received from the destination endpoint through the consumer flow either:</p>
    <ul>
      <li>asynchronously, through a defined listener (<code>XMLMessageListener</code> for JCSMP), message receive callback (for the C API), or message receive delegate (for the .NET API).</li>
      <li>synchronously, through individual receive calls. The calls required to synchronously consume messages in a Transaction are listed below.</li>
    </ul>
    <p>Consumers in a Transacted Session function the same as those in a non‑Transacted Session, except that the messages they receive are only acknowledged, and subsequently removed from the event broker, when a successful commit occurs for the Transacted Session. For example, calling <code>XMLMessage.ackMessage()</code> (for JCSMP) or <code>solClient_flow_<br/>sendAck()</code> (for the C API) has no effect on Transacted Sessions. For information on how to receive Guaranteed messages synchronously or asynchronously, refer to <MadCap:xref href="Receiving-Guaranteed-Messages.htm">Receiving Guaranteed Messages</MadCap:xref>.</p>
    <p class="Note">For JCSMP, by default when a consumer flow is created, it is in a stop state (that is, no message are received until the client application calls <code>start()</code>). For the C and .NET APIs, when a consumer Flow is created, it is in a start state. The start/stop state of a consumer Flow can be set through the Flow properties.</p>
    <table style="caption-side: top;width: 95%;mc-table-style: url('../../Resources/TableStyles/Table_Num.css');" class="TableStyle-Table_Num" cellspacing="0">
      <caption valign="top" style="padding-bottom: 3pt;">
        <p class="TblCaption">To Create a Consumer Flow in a Transacted Session</p>
      </caption>
      <col class="TableStyle-Table_Num-Column-Column1"/>
      <col class="TableStyle-Table_Num-Column-Column1"/>
      <thead>
        <tr class="TableStyle-Table_Num-Head-Header1">
          <th class="TableStyle-Table_Num-HeadE-Column1-Header1"><MadCap:variable name="Product-Names.pubsub_brand_only"/> Messaging API</th>
          <th class="TableStyle-Table_Num-HeadD-Column1-Header1">Call</th>
        </tr>
      </thead>
      <tbody>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">JCSMP</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_Body"><code>TransactedSession.createFlow(...)</code> to acquire a <code>FlowReceiver</code> instance. </p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">Java RTO</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_BodyCode">TransactedSessionHandle.<br/>createFlowForHandle(...)</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">C</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_BodyCode">solClient_transactedSession_createFlow(...)</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyB-Column1-Body1">
            <p class="Tbl_Body">.NET</p>
          </td>
          <td class="TableStyle-Table_Num-BodyA-Column1-Body1">
            <p class="Tbl_BodyCode">ITransactedSession.CreateFlow(...)</p>
          </td>
        </tr>
      </tbody>
    </table>
    <table style="caption-side: top;width: 95%;mc-table-style: url('../../Resources/TableStyles/Table_Num.css');" class="TableStyle-Table_Num" cellspacing="0">
      <caption valign="top" style="padding-bottom: 3pt;">
        <p class="TblCaption"><a name="using_local_transactions_93849435_608593"/>To Synchronously Consume Messages in a Transaction</p>
      </caption>
      <col class="TableStyle-Table_Num-Column-Column1"/>
      <col class="TableStyle-Table_Num-Column-Column1"/>
      <thead>
        <tr class="TableStyle-Table_Num-Head-Header1">
          <th class="TableStyle-Table_Num-HeadE-Column1-Header1"><MadCap:variable name="Product-Names.pubsub_brand_only"/> Messaging API</th>
          <th class="TableStyle-Table_Num-HeadD-Column1-Header1">Call</th>
        </tr>
      </thead>
      <tbody>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">JCSMP</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <ul>
              <li><code>receive()</code>—Receive the next available message, and waits until one is available.</li>
              <li><code>receive(int timeoutInMillis)</code>—Receive the next available message. If no message is available, the method waits until a set amount of time expires.</li>
              <li><code>receiveNoWait()</code>—Receive the next available message. If no message is available, this method returns <code>null</code> immediately.</li>
            </ul>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">Java RTO</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_BodyCode">FlowHandle.receive(...)<span style="font-family: Helvetica;">—Receives a message from the specified flow. The API waits until a message is received or it reaches the specified timeout value.</span></p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">C</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_Body"><code>solClient_flow_receiveMsg(...)</code>—Receives a message from the specified Flow. It waits until it reaches a specified timeout value or a message is received. If the timeout value is 0, there is no wait. A client application must later call  <code>solClient_msg_free()</code> on the received message to release it.</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyB-Column1-Body1">
            <p class="Tbl_Body">.NET</p>
          </td>
          <td class="TableStyle-Table_Num-BodyA-Column1-Body1">
            <p class="Tbl_Body"><code>ITransactedSession.receive(...)</code>—Receives a message from the specified Flow. It waits until it reaches a specified timeout value or a message is received. If the timeout value is 0, there is no wait. A client application must later call <code>Dispose()</code> on the received message to release it.</p>
          </td>
        </tr>
      </tbody>
    </table>
    <p>When the following situations occur after the messages are consumed in a Transaction, but before a commit is made, those messages are still successfully committed:</p>
    <ul>
      <li>The messages are removed from the event broker by an administrative action (that is, the messages are deleted from the spool).</li>
      <li>The messages’ TTLs have expired. (Note that the commit succeeds whether or not expired messages are moved to a Dead Message Queue (DMQ).)</li>
    </ul>
  </body>
</html>
