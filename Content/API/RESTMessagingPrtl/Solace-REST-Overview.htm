<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
  <head>
    </head>
  <body>
    <h1>REST Messaging Protocol</h1>
    <p>This section describes the Solace Representational State Transfer (REST) messaging protocol and  message exchange patterns that will be encountered in common use cases.</p>
    <p>REST is a lightweight way of designing network applications. Solace REST messaging can be used to integrate external HTTP REST clients and other network appliances that have built-in support for REST-like messaging with Solace PubSub+.</p>
    <p> Solace REST messaging makes use of bi-directional HTTP POST requests to exchange messages in both directions as shown in the following figure. This enables REST clients to send messages to and receive messages from any Solace PubSub+ event broker clients.</p>
    <p>
      <img src="../../Resources/Images/RESTMessagingPrtl/Solace REST Overview.png" style="visibility: visible;mso-wrap-style: square;max-width: 550px;" MadCap:mediastyle="@media print { max-width: 550px; }" alt="Illustration depicting the concepts described in the surrounding text.">
            </img>
    </p>
    <p>REST producers send message contents in the body of an HTTP POST request. For request/reply scenarios, the response contents are carried in the body of the HTTP  200 OK responses. For REST consumers, the event broker sends the message in the body of an HTTP POST request. And again for request/reply scenarios, the response contents are carried in the HTTP 200 OK responses.</p>
    <p>The use of HTTP POST requests in both directions has several benefits. It removes the possibility of message loss which can exist when using HTTP GET requests to poll for messages. It also enables much higher performance and overall message rate when multiple, parallel HTTP connections are used.</p>
    <h2 class="with-rule">Solace REST Highlights</h2>
    <p>The following is a list of some of the key aspects of the Solace REST Protocol:</p>
    <ul>
      <li>the REST Service is controlled per Message VPN</li>
      <li>REST access Ports are also configured per Message VPN</li>
      <li>it supports HTTP 1.1 persistent connections for efficient messaging</li>
      <li>it supports HTTP and HTTPS message traffic</li>
      <li>it supports sending messages as an HTTP client</li>
      <li>it supports receiving messages as an HTTP server</li>
      <li>it supports basic and client certificate authentication</li>
      <li>it inter-operates with all other Solace clients</li>
    </ul>
    <h2 class="with-rule">REST Actors</h2>
    <p>There are two main actors in the Solace REST protocol:</p>
    <ul>
      <li>REST Producer—sends messages to the Solace PubSub+ event broker</li>
      <li>REST Consumer—receives messages from the Solace PubSub+ event broker</li>
    </ul>
    <h3><a name="Producers"/>REST Producers</h3>
    <p>
      <img src="../../Resources/Images/RESTMessagingPrtl/RESTProducers.jpg" alt="REST Producers" style="max-width: 350px;" MadCap:mediastyle="@media print { max-width: 350px; }"/>
    </p>
    <p>REST producers are applications that send REST messages to a topic or queue within a Message VPN on a Solace PubSub+ event broker. For REST producers to send messages to an event broker, they must establish a client connection to the event broker and be authenticated.</p>
    <p> In general, it is recommended that applications use HTTP 1.1 persistent connections to allow for higher performance sending by avoiding the need to establish a connection for each message send action.</p>
    <h3>REST Consumers</h3>
    <p>For physical client applications to consume  REST messages from Solace PubSub+, the  event broker will establish an HTTP connection to the consumer application and send messages to it using an HTTP POST request as seen in the following figure.</p>
    <p>
      <img src="../../Resources/Images/RESTMessagingPrtl/RESTConsumers.jpg" MadCap:mediastyle="@media print { max-width: 350px; }" style="max-width: 350px;" alt="">
            </img>
    </p>
    <p>The REST application acknowledges receipt of the message through a 200 OK HTTP response back to the event broker.</p>
    <p>To receive messages from the event broker, REST Delivery Points (RDPs) must be configured to provide the event broker with details on how to deliver the messages.</p>
  </body>
</html>
