<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
  <head/>
  <body>
    <h1>Using REST Messaging</h1>
    <p>Representational State Transfer (REST) is a lightweight way of designing network applications. It enables clients and network event brokers to communicate using standard HTTP methods like POST. Systems that implement REST are referred to as RESTful systems. RESTful systems use HTTP methods in a way that is consistent with the HTTP protocol definition (RFC 2616).</p>
    <p>REST is not a defined standard but rather a set of guidelines.</p>
    <h2 class="with-rule"><a name="REST2"/>REST Concepts</h2>
    <p>If you haven't used REST and Solace PubSub+ together before, you might want to look at the <MadCap:xref href="../Component-Maps.htm#REST">REST</MadCap:xref> section of <MadCap:xref href="../Component-Maps.htm">Overview: How Apps Interact with PubSub+ Messaging Components</MadCap:xref>. It'll take you on a tour of the PubSub+ event broker's messaging components, and explain at a high level how they make data move from producers to the broker, and from the broker to consumers, with REST.</p>
    <h2 class="with-rule"><a name="REST"/>REST Producers and Consumers</h2>
    <p>There are two main actors in the Solace REST protocol:</p>
    <ul>
      <li>REST producers—sends messages to the event broker</li>
      <li>REST consumers—receives messages from the event broker</li>
    </ul>
    <h3><a name="using_rest_3371569096_1032772"/>REST Producers</h3>
    <p>REST producers are applications that send REST messages to a topic or queue within a Message VPN on an event broker. For REST producers to send messages to an event broker, they must establish a client connection to the event broker. The event broker authenticates REST producers when they connect using a basic or client certificate authentication scheme. The Solace REST implementation does not support Kerberos authentication. Clients using a basic authentication scheme can connect as anonymous publishers by not specifying a username or password.</p>
    <p>When a connecting REST producer has been authenticated, the privileges for that producer are determined by standard Solace configuration parameters, such as client profiles and ACL profiles.</p>
    <p>A REST producer that has established a client connection to the event broker is represented as a normal client and will be visible using Solace CLI commands such as the <b>show client</b> User EXEC command.</p>
    <p>For information on how event brokers authenticate client entities and the authorization process that is used to provide them with service, refer to <MadCap:xref href="../../Security/Client-Authorization-Overview.htm">Client Authorization Overview</MadCap:xref> and <MadCap:xref href="../../Security/Client-Authentication-Overview.htm">Client Authentication Overview</MadCap:xref>.</p>
    <h3><a name="using_rest_3371569096_1012696"/>REST Consumers</h3>
    <p>To consume messages from Solace PubSub+ event broker, REST Consumers REST Delivery Points (RDPs) objects are required. RDPs objects that are provisioned within Message VPNs on the event broker. Physical REST applications that connect to the event broker can bind to an RDP to consume REST messages from it. RDPs consist of the following components:</p>
    <ul>
      <li>
        <MadCap:xref href="#using_rest_3371569096_1020458">REST Consumers</MadCap:xref>
      </li>
      <li>
        <MadCap:xref href="#using_rest_3371569096_1020517">Client Profile</MadCap:xref>
      </li>
      <li>
        <MadCap:xref href="#using_rest_3371569096_1020489">Queue Bindings</MadCap:xref>
      </li>
    </ul>
    <h4><a name="using_rest_3371569096_1020458"/>REST Consumers</h4>
    <p>REST Consumers are virtual objects within a Message VPN that represent physical consumers of REST messages (that is, client applications).</p>
    <p>Each physical consumer that an RDP services is identified by its IP address or hostname and TCP port number. An RDP can service multiple REST consumers. When an RDP services multiple REST Consumers, the event broker performs a load balancing function by choosing which REST Consumer to deliver each message to.</p>
    <p>An event broker can be configured to use authentication (basic, client certificate, or none) when it initiates connections to REST Consumers. </p>
    <h4><a name="using_rest_3371569096_1020517"/>Client Profile</h4>
    <p>An RDP must be assigned an existing client profile in the same Message VPN as the RDP. The RDP uses the TCP parameters and egress queue properties of the bound client profile.</p>
    <h4><a name="using_rest_3371569096_1020489"/>Queue Bindings</h4>
    <p>An RDP also contains queue bindings, which are references to durable message endpoints on the event broker. RDPs can only be bound to durable queues that exist within the same Message VPN as the RDP.</p>
    <p>When an RDP is bound to a queue, messages delivered to that queue will be attracted by the RDP and then scheduled for delivery to one of the REST consumers configured for the RDP.</p>
    <p>If a queue is deleted, any queue bindings referencing the deleted queue remain intact but those queue bindings will not be operational. To be brought into service, an RDP must have at least one operational queue binding. An RDP whose queue bindings are all not operational cannot be brought into service.</p>
    <h2 class="with-rule"><a name="using_rest_3371569096_1006101"/>REST Message Structure</h2>
    <p>REST messages sent to and from an event broker use the HTTP POST method. The POST structure differs depending on whether the message is a request or a response, and whether the message is being sent to or from an event broker.</p>
    <p>The Solace REST interface uses both standard HTTP headers (such as <code>Content-Length</code>) and Solace-specific HTTP headers (such as <code>Solace-Client-Name</code>). HTTP headers that are unique to the Solace REST interface and used internally by the event broker are prefixed by <code>Solace-</code>. To avoid confusion, applications should not use HTTP headers that begin with <code>Solace-</code>. For a complete list of the HTTP headers that are specific to Solace PubSub+, refer to <MadCap:xref href="../RESTMessagingPrtl/Solace-REST-Message-Encoding.htm#_Ref393979969">Solace REST Usage of HTTP Headers</MadCap:xref>.</p>
    <p>The body of a REST message consists of the data transmitted after the message’s HTTP headers. When a REST message reaches an event broker, this data is encapsulated in a Solace message payload, which may take a number of formats, including text or binary. Messages may optionally omit the message body.</p>
    <h3><a name="using_rest_3371569096_1009802"/>REST Message Structure Examples</h3>
    <p>The following are some possible configurations of REST messages based on origin and message type.</p>
    <p class="Note">There is no requirement for communication between a publisher and a subscriber to be exclusively REST or exclusively non-REST. For example, a REST client can receive a REST message and respond with a Solace Message Format (SMF) message. The event broker will deliver the message to its destination regardless of the message format.</p>
    <h4>REST Published Message to an Event Broker</h4>
    <p>A REST message sent from a publisher to an event broker consists of a POST request, HTTP headers, and an HTTP message body. The event broker uses the POST request to determine where to route the message, and the HTTP headers specify message properties that may determine how the message is handled. The body of the POST request is included as the message payload.</p>
    <h4>REST Message Acknowledgment from an Event Broker</h4>
    <p>When an event broker successfully receives a REST message, it sends back an acknowledgment (“ack”) in the form of a POST response. For Guaranteed messages, the event broker delays sending the POST response until it successfully spools the message.</p>
    <p>An ack consists of a response code (typically <code>200 OK</code>) and HTTP headers. Because the response code is sufficient to acknowledge receipt of the original message, the returned message has an empty message body.</p>
    <h4>REST Response from Consumer</h4>
    <p>If a request/reply exchange pattern is used, when a consumer responds to a REST request message, it reports its own response code (<code>200 OK</code>), new HTTP headers, and a message body. If the response from the consumer is a message, the message body will contain the message payload information that is to be returned to the original publisher.</p>
    <h2 class="with-rule"><a name="using_rest_3371569096_1000595"/>Message Exchange Patterns</h2>
    <p>This section describes the common message exchange patterns that may take place when using REST messaging with Solace PubSub+.</p>
    <h3><a name="using_rest_3371569096_1000973"/>REST Producer One-Way POST to an Event Broker</h3>
    <p>The figure immediately below shows an exchange pattern where a REST producer sends a message to an event broker.</p>
    <p class="GraphicCaption">REST Producer One-Way POST to an Event Broker</p>
    <p class="GraphicCaption">
      <img src="../../Resources/Images/REST-Messaging-Concepts/REST_Producer_One_Way_POST_to_Solace.png" alt=""/>
    </p>
    <p>In this scenario, the REST producer sends a message as a POST request to the event broker by directing the request to a URL that consists of the IP address or hostname of the event broker, the endpoint type (queue or topic), and a queue or topic name. The event broker behaves differently based on whether the message’s delivery mode is identified as direct or persistent.</p>
    <p>If the message’s <code>Solace-Delivery-Mode</code> is <code>direct</code>, upon receipt of the message the event broker sends a POST response of <code>200 OK</code> to the REST producer, then delivers the message. The POST does not indicate that the message has been delivered to its consumers, only that the event broker has received the message. </p>
    <p>If the message’s <code>Solace-Delivery-Mode</code> is <code>persistent</code> or <code>non-persistent</code>, when the event broker receives the message it stores it in the message spool, then sends a POST response of <code>200 OK</code> to the REST producer. Again, the POST response to the REST producer only indicates that the event broker has received the message and does not indicate that the message has been delivered. The event broker then attempts to deliver the message.</p>
    <p>A REST producer’s message to an event broker can fail for a number of reasons. If there is an error authenticating the REST Producer with the event broker or if there is an error in the message format, the event broker will return a POST response which includes details of the error. The error response you receive depends on the message’s <code>Solace-Delivery-Mode</code> is <code>direct</code> or <code>persistent</code> (or <code>non-persistent</code>). For information about the POST responses, see <MadCap:xref href="../RESTMessagingPrtl/Solace-REST-Status-Codes.htm">Solace REST Status Codes</MadCap:xref>.</p>
    <h3><a name="using_rest_3371569096_1001013"/>Event Broker One-Way POST to REST Consumer</h3>
    <p>The figure immediately below shows a scenario involving an event broker delivering a message to a REST Consumer.</p>
    <p class="GraphicCaption">Event Broker One-Way POST to REST Consumer</p>
    <p class="GraphicCaption">
      <img src="../../Resources/Images/REST-Messaging-Concepts/Solace_One_Way_POST_to_REST_Consumer.png" alt=""/>
    </p>
    <p>In this scenario, the event broker has received a message, and the event broker determines that the message will be received by a REST Consumer. If the message type is persistent, the event broker stores the message and retains it until delivery is confirmed.</p>
    <p>The message is delivered to the REST Consumer by way of a POST request to a fixed URL (configured in the REST Consumer) that is contained in the message. Upon receiving the message, the REST Consumer acknowledges the message with a POST response of <code>200 OK</code> to the event broker.</p>
    <p>If the message type was persistent, the event broker removes the message from the message spool when a <code>200 OK</code> response is received. Because this is a one-way message delivery, any information contained in the body of the response from the REST Consumer is discarded.</p>
    <p>If the event broker receives any status code in response other than <code>200 OK</code>, it will continue trying to deliver the message until the delivery is a success or until some other condition is met (for example, the max retry parameter is exceeded).</p>
    <h3><a name="using_rest_3371569096_1001058"/>REST Producer Request/Reply to an Event Broker</h3>
    <p>The figure immediately below shows how a REST Producer can send a message to any message consumer and specify that a reply message is desired.</p>
    <p class="GraphicCaption">REST Producer Request/Reply to an Event Broker</p>
    <p class="GraphicCaption">
      <img src="../../Resources/Images/REST-Messaging-Concepts/REST_Producer_Request_Reply_to_Solace.png" alt=""/>
    </p>
    <p>The REST Producer sends an initial REST message that includes the header <code>Solace-Reply-Wait-Time-In-ms</code>. This header indicates that a reply message is expected.</p>
    <p>If the message’s <code>Solace-Delivery-Mode</code> is <code>direct</code>, when the event broker receives the message, it encodes the REST message as an SMF message and sends it, with its specified delivery mode, to a consumer. If the message’s <code>Solace-Delivery-Mode</code> is <code>persistent</code> or <code>non-persistent</code>, the event broker spools the message before sending it.</p>
    <p>The consumer replies with its own message, which includes a reply to the original message. Upon receiving this reply, the event broker constructs a REST POST response from the reply and delivers it to the original producer with the status code <code>200 OK</code> and the reply message’s contents as the HTTP message payload.</p>
    <p>In this scenario, delivery failure can occur due to a number of reasons, including the wait time being exceeded or the reply message being in an unsupported format.</p>
    <h3><a name="using_rest_3371569096_1001155"/>Event Broker Request/Reply to REST Consumer</h3>
    <p>The figure immediately below shows how request/reply messages may also originate from a non-REST source.</p>
    <p class="GraphicCaption">Event Broker Request/Reply to REST Consumer</p>
    <p class="GraphicCaption">
      <img src="../../Resources/Images/REST-Messaging-Concepts/Solace_Request_Reply_to_Consumer.png" alt=""/>
    </p>
    <p>This scenario is similar to a one-way POST from an event broker to a REST Consumer. In this case, however, the POST from the event broker that the REST Consumer receives includes a <code>Solace-Reply-Wait-Time-In-ms</code> header. This indicates to the REST Consumer that the event broker expects a reply to the message.</p>
    <p>The REST Consumer encodes its reply in the HTTP message body of the POST response that it returns to the event broker. The status code of the response message is <code>200 OK</code> if the original message was received correctly.</p>
    <p>A <code>200 OK</code> response indicates that the message was received even if, for example, there are errors in processing the message. If required, the REST Consumer can encode details about any errors in the body of a <code>200 OK</code> response.</p>
    <h3><a name="using_rest_3371569096_1001097"/>REST Producer Request with Asynchronous Reply-to Destination</h3>
    <p>The figure immediately below  shows how an application can send messages and receive asynchronous replies using REST.</p>
    <p class="GraphicCaption">REST Producer Request with Async Reply-to Destination</p>
    <p class="GraphicCaption">
      <img src="../../Resources/Images/REST-Messaging-Concepts/REST_Producer_Async_Reply_to_Destination_4.png" alt=""/>
    </p>
    <p>In this scenario, an application acts as both a REST Producer and a REST Consumer (that is, it both sends and receives messages using HTTP POST). As a REST Producer, it sends the message as a POST to the event broker including the <code>Solace-Reply-To-Destination</code> header. The event broker reads the Reply-To information and destination from the POST.</p>
    <p>The event broker stores the message on the message spool if it is a persistent message. It then returns a <code>200 OK</code> status response to the REST Producer before sending the message to the end consumer.</p>
    <p>When the end consumer receives the message, the message’s Reply-To information is extracted from the original POST. The consumer sends its reply back to the event broker, where the reply is spooled again.</p>
    <p>The event broker delivers the reply message with a POST to the original application, whose connection parameters are stored as a REST Consumer in an RDP on the event broker. When the application receives the final reply message, it sends a <code>200 OK</code> back to the event broker to indicate that the sequence has completed.</p>
  </body>
</html>
