<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
  <head/>
  <body>
    <h1>REST</h1>
    <p>Solace REST messaging uses bidirectional HTTP POST requests to exchange messages with Solace PubSub+ event brokers. This lets REST clients send and receive messages to and from other Solace PubSub+ event broker clients whether they’re using a Solace API or an open API or protocol. </p>
    <p>The figure below shows how an application can send and receive messages over HTTP using a RESTful API.</p>
    <p>
      <img src="../../Resources/Images/REST-Messaging-Concepts/REST_OverView.png" alt=""/>
    </p>
    <h4>HTTP POST requests</h4>
    <p>REST producers send message contents in the body of an HTTP POST request. For request / reply scenarios, the response contents are carried in the body of the HTTP 200 OK responses.

			For REST consumers, the event broker sends the message in the body of an HTTP POST request. And again for request / reply scenarios, the response contents are carried in the HTTP 200 OK responses. This is explained in more detail in the section <MadCap:xref href="../RESTMessagingPrtl/Solace-REST-Overview.htm">REST Messaging Protocol</MadCap:xref>.

		The use of bidirectional HTTP POST requests has several benefits. First it removes the possibility of message loss which can exist when using HTTP GET requests to poll for messages. It also enables much higher performance and overall message rate when multiple, parallel HTTP connections are used.</p>
    <h4>REST Concepts</h4>
    <p>If you haven't used REST and Solace PubSub+ together before, you might want to look at the <MadCap:xref href="../Component-Maps.htm#REST">REST</MadCap:xref> section of the <MadCap:xref href="../Component-Maps.htm">Overview: How Apps Interact with PubSub+ Messaging Components</MadCap:xref> page. It'll take you on a tour of the PubSub+ event broker's messaging components, and explain at a high level how they make data move from producers to the broker, and from the broker to consumers, with REST.</p>
    <h2 class="with-rule"><a name="When"/>When to Use REST Messaging Versus a Microgateway  </h2>
    <p>Within a Message VPN, you can deploy either REST messaging or a Microgateway, but not both.</p>
    <h4>You Should Use REST Messaging When</h4>
    <p>You want an application to send and/or receive messages, but would prefer to use HTTP libraries instead of MQTT, AMQP, or libraries from Solace. When REST messaging  is deployed, your application must use HTTP as defined in <MadCap:xref href="../RESTMessagingPrtl/Solace-REST-Message-Encoding.htm">Solace REST Message Encoding</MadCap:xref>. </p>
    <p>For more information describing how to configure REST messaging, refer to <MadCap:xref href="../../Services/Configuring-EventBroker-for-REST.htm">Configuring Event Brokers for REST Messaging</MadCap:xref>. </p>
    <h4>You Should Use a Microgateway When</h4>
    <p>You want to provide connectivity between a RESTful service endpoint (defined by Swagger/Open API, RAML, or more informally) and a REST client. Microgateways provide higher performance, but less functionality than API Gateways, yet more capabilities than HTTP load balancers. When a Microgateway is deployed, Solace imposes no requirements on the HTTP protocol used.</p>
    <p>For more information about Microgateways, refer to <MadCap:xref href="../../Services/Microgateways.htm">Microgateways Overview</MadCap:xref>. </p>
    <h2 class="with-rule"><a name="REST-Tutorials"/>Get Started with REST Messaging Tutorials</h2>
    <p>These tutorials will introduce you to the fundamentals of using REST to develop applications using Solace PubSub+.</p>
    <a class="btn btn-lg btn-success mr-2 mt-2" role="button" href="https://solace.com/samples/solace-samples-rest-messaging/" target="blank">Start Tutorials</a>
  </body>
</html>
