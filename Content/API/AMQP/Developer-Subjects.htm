<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
  <head>
    <link href="../../Resources/TableStyles/Table_Num.css" rel="stylesheet" MadCap:stylesheetType="table"/>
  </head>
  <body>
    <h1>Reference Information for Developers</h1>
    <p> The event broker supports the AMQP 1.0 broker role. In its simplest form, this means that the event broker only accepts AMQP connections and never initiates them. A summary of where the Solace PubSub+ event broker implementation differs from the AMQP 1.0 specification can be found on the <MadCap:xref href="AMQP-Protocol-Conformance.htm">AMQP Protocol Conformance</MadCap:xref> page.</p>
    <p>For instructions on how to administer and configure the AMQP service on an event broker, refer to <MadCap:xref href="../../Services/Managing-AMQP-Messaging.htm">Managing AMQP Messaging</MadCap:xref>.</p>
    <p>The next sections will discuss some information that could be useful to if you're  developing applications that interact with Solace's AMQP implementation:</p>
    <ul>
      <li>
        <MadCap:xref href="#AMQP">AMQP Concepts</MadCap:xref>
      </li>
      <li>
        <MadCap:xref href="#Mapping">Mapping AMQP Terminology to Solace Terminology</MadCap:xref>
      </li>
      <li>
        <MadCap:xref href="#Mapping2">Mapping AMQP Messages to SMF Messages</MadCap:xref>
      </li>
      <li>
        <MadCap:xref href="#Topic">Topic Syntax</MadCap:xref>
      </li>
      <li>
        <MadCap:xref href="#Mapping3">Mapping AMQP Addressing to Solace Queues &amp; Topics</MadCap:xref>
      </li>
      <li>
        <MadCap:xref href="#Delayed">Delayed Message Consumption</MadCap:xref>
      </li>
    </ul>
    <h2 class="with-rule"><a name="AMQP"/>AMQP Concepts</h2>
    <p>If you haven't used AMQP and Solace PubSub+ together before, you might want to look at the <MadCap:xref href="../Component-Maps.htm#AMQP">AMQP</MadCap:xref> section of the <MadCap:xref href="../Component-Maps.htm">Overview: How Apps Interact with PubSub+ Messaging Components</MadCap:xref> page. It'll take you on a tour of the PubSub+ event broker's messaging components, and explain at a high level how they make data move from producers to the broker, and from the broker to consumers, with AMQP.</p>
    <h2 class="with-rule"><a name="Mapping"/>Mapping AMQP Terminology to Solace Terminology</h2>
    <p>If you're reading through the AMQP protocol specification it's important to note how certain key AMQP terms map to equivalent event broker terms. The following table shows how they correspond.</p>
    <table style="width: 100%;mc-table-style: url('../../Resources/TableStyles/Table_Num.css');" class="TableStyle-Table_Num" cellspacing="0">
      <col class="TableStyle-Table_Num-Column-Column1"/>
      <col class="TableStyle-Table_Num-Column-Column1"/>
      <col class="TableStyle-Table_Num-Column-Column1"/>
      <thead>
        <tr class="TableStyle-Table_Num-Head-Header1">
          <th class="TableStyle-Table_Num-HeadE-Column1-Header1">AMQP Term</th>
          <th class="TableStyle-Table_Num-HeadE-Column1-Header1">Solace Term</th>
          <th class="TableStyle-Table_Num-HeadD-Column1-Header1">Comments</th>
        </tr>
      </thead>
      <tbody>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">Container</td>
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">Client or event broker</td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">Â </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">Connection</td>
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">Client Object</td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">Every connection from a container outside the event broker is represented by a unique client object.</td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">Session</td>
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">N/A</td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">There is no visible session concept on the event broker; however, a "session" is automatically created after a client is successfully authenticated and a transport link between the client and event broker is successfully established for data exchange.</td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyE-Column1-Body1">Link (inbound)</td>
          <td class="TableStyle-Table_Num-BodyE-Column1-Body1">Ingress Flow</td>
          <td class="TableStyle-Table_Num-BodyD-Column1-Body1">All ingress links of a given connection are implemented with a single common ingress flow.</td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">Link (outbound)</td>
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">Egress Flow</td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">Each egress link of a given connection is implemented with an individual egress flow.</td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">Source (on broker)</td>
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">Queue or Topic-Endpoint</td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">Clients always receive from an endpoint.</td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyB-Column1-Body1">Target (on broker)</td>
          <td class="TableStyle-Table_Num-BodyB-Column1-Body1">Topic or Queue or Topic-Endpoint</td>
          <td class="TableStyle-Table_Num-BodyA-Column1-Body1">Clients can send to a topic or endpoint.</td>
        </tr>
      </tbody>
    </table>
    <h2 class="with-rule"><a name="Mapping2"/>Mapping AMQP Messages to SMF Messages</h2>
    <p>Native AMQP wire-line messages are accepted by the event broker and translated to their equivalent Solace SMF messages and internal object state. This transformation is transparent to the client on the other end of the connection.</p>
    <p>An AMQP message is composed of several parts. AMQP formally categorizes more parts of its message than SMF, and this has implications on mapping inbound and outbound messages. If an inbound message cannot be mapped from AMQP to SMF, the link on which the message arrived will be closed with an error. If an outbound message cannot be mapped from SMF to AMQP, the specific field in the message will be dropped.</p>
    <h2 class="with-rule"><a name="Topic"/>Topic Syntax</h2>
    <p>The topic syntax to be used by an AMQP implementation is not defined by the protocol, and it's left up to the client and broker implementations to define. The Solace AMQP implementation uses <MadCap:xref href="../../Messaging/SMF-Topics.htm">SMF Topics</MadCap:xref> syntax.</p>
    <h2 class="with-rule"><a name="Mapping3"/>Mapping AMQP Addressing to Solace Queues &amp; Topics</h2>
    <p>In the AMQP 1.0 protocol specification, the address field is used to identify the source and target of a link. On an event broker, the address is either:</p>
    <ul>
      <li>the name of a queue.</li>
      <li>a topic in SMF format </li>
    </ul>
    <h2 class="with-rule"><a name="Delayed"/>Delayed Message Consumption</h2>
    <p>Delayed message consumption allows messages to be published at one time and consumed at some later time, where you specify the lag between publication and consumption. For instructions on how to set up and use the feature, refer to <MadCap:xref href="../../Messaging/Guaranteed-Msg/Delayed-Delivery.htm">Delayed Delivery</MadCap:xref>. If you're going to use delayed message consumption, keep in mind that AMQP 1.0 sets every message as DMQ Eligible.</p>
  </body>
</html>
