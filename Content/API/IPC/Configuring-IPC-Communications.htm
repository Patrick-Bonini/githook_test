<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
  <head>
    <link href="../../Resources/TableStyles/Table_Num.css" rel="stylesheet" MadCap:stylesheetType="table"/>
  </head>
  <body>
    <h1>Configuring Inter-Process Communications</h1>
    <p>This section discusses Inter-Process Communications configuration information that should be considered when using the C and Java RTO messaging APIs.</p>
    <h2 class="with-rule"><a name="Context-Props"/>Context Properties that Affect IPC</h2>
    <p>The following table describes important threading modelâ€‘related context properties that affect IPC operations.</p>
    <table class="TableStyle-Table_Num" style="caption-side: top;mc-table-style: url('../../Resources/TableStyles/Table_Num.css');width: 95%;" cellspacing="0">
      <caption valign="top" style="padding-bottom: 3pt;">
        <p class="TblCaption">
          <span>IPC Context Properties</span>
        </p>
      </caption>
      <thead>
        <tr class="TableStyle-Table_Num-Head-Header1">
          <th class="TableStyle-Table_Num-HeadE-Column1-Header1">Management Mode</th>
          <th class="TableStyle-Table_Num-HeadD-Column1-Header1">Description</th>
        </tr>
      </thead>
      <tbody>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">
              <b>C:</b>
            </p>
            <p>
              <code>SOLCLIENT_CONTEXT_PROP_THREAD_AFFINITY_CPU_LIST</code>
            </p>
            <p class="Tbl_Body">
              <b>Java RTO:</b>
            </p>
            <p class="Tbl_BodyCode">
              <code>IPCSupport.CONTEXT_PROPERTIES.THREAD_AFFINITY_CPU_LIST</code>
            </p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_Body">Allows for control of the processor affinity for the internal context thread. The affinity is specified as a string of numbers or ranges representing CPUs, using 0-based CPU IDs. </p>
            <p class="Tbl_Body">An empty string  means that the affinity is not set, and the thread inherits the processor affinity from the main thread. The default value is an empty string.</p>
            <MadCap:snippetBlock src="../../Resources/Snippets/C-Solaris-Deprecated.flsnp"/>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">
              <b>C:</b>
            </p>
            <p>
              <code>SOLCLIENT_CONTEXT_PROP_IPC_SHM_THREAD_AFFINITY_CPU_LIST</code>
            </p>
            <p class="Tbl_Body">
              <b>Java RTO:</b>
            </p>
            <p class="Tbl_BodyCode">
              <code>IPCSupport.CONTEXT_PROPERTIES.IPC_SHM_THREAD_AFFINITY_CPU_LIST</code>
            </p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_Body">Controls the processor affinity for the internal shared memory thread. This property has the same semantics as <code>SOLCLIENT_CONTEXT_PROP_THREAD_AFFINITY_CPU_LIST</code>.</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyB-Column1-Body1">
            <p class="Tbl_Body">
              <b>C:</b>
            </p>
            <p class="Tbl_BodyCode">
              <code>SOLCLIENT_CONTEXT_PROP_IPC_SHM_SPIN</code>
            </p>
            <p class="Tbl_Body" style="font-weight: bold;">Java RTO:</p>
            <p class="Tbl_BodyCode">
              <code>IPCSupport.CONTEXT_PROPERTIES.IPC_SHM_SPIN</code>
            </p>
          </td>
          <td class="TableStyle-Table_Num-BodyA-Column1-Body1">
            <p class="Tbl_Body">Controls the spinning or blocking behavior of the internal shared memory thread. A value of -1 causes the thread to always spin. A value greater than 0 sets the number of times to spin the thread before blocking. A value of 0 means block without spinning.</p>
            <p class="Tbl_Body">The default value is 0.</p>
          </td>
        </tr>
      </tbody>
    </table>
    <h2 class="with-rule"><a name="Session-Props"/>Session Properties that Affect IPC</h2>
    <p>From the viewpoint of the application, a single session is used for all of the IPC connections to peer applications (both incoming and outgoing connections). The properties for this session and how they affect the underlying sessions that provide connections to peer applications must be considered.</p>
    <p>The following session properties should be given particular consideration.</p>
    <table class="TableStyle-Table_Num" style="caption-side: top;mc-table-style: url('../../Resources/TableStyles/Table_Num.css');width: 95%;" cellspacing="0">
      <caption valign="top" style="padding-bottom: 3pt;">
        <p class="TblCaption">Session Properties that Affect IPC</p>
      </caption>
      <thead>
        <tr class="TableStyle-Table_Num-Head-Header1">
          <th class="TableStyle-Table_Num-HeadE-Column1-Header1">Property</th>
          <th class="TableStyle-Table_Num-HeadD-Column1-Header1">Impact on IPC</th>
        </tr>
      </thead>
      <tbody>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">
              <b>C:</b>
            </p>
            <p class="Tbl_BodyCode">
              <code>SOLCLIENT_SESSION_PROP_HOST</code>
            </p>
            <p class="Tbl_Body">
              <b>Java RTO:</b>
            </p>
            <p class="Tbl_BodyCode">
              <code>SessionHandle.PROPERTIES.HOST</code>
            </p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_Body">When using IPC to communicate with multiple peers, the <code>HOST</code> property is used to configure the hostname or IP address used to listen for incoming connections from peers.</p>
            <p class="Tbl_Body">In addition, if the application is not solely passive in nature, it is also used to configure a list of peer connections to create (outgoing connections). This allows a multi-point session to create a series of sub-sessions and create outgoing connections. Each hostname or IP address entry must be semicolon separated. A given entry can have a series (up to four) semi-colon-separated host entries.</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">
              <b>C:</b>
            </p>
            <p class="Tbl_BodyCode">
              <code>SOLCLIENT_SESSION_PROP_PASSWORD</code>
            </p>
            <p class="Tbl_Body">
              <b>Java RTO:</b>
            </p>
            <p class="Tbl_BodyCode">
              <code>SessionHandle.PROPERTIES.PASSWORD</code>
            </p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_Body">Ignored for IPC connections.</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">
              <b>C:</b>
            </p>
            <p class="Tbl_BodyCode">
              <code>SOLCLIENT_SESSION_PROP_SOCKET_SEND_BUF_SIZE</code>
            </p>
            <p class="Tbl_Body">
              <b>Java RTO:</b>
            </p>
            <p class="Tbl_BodyCode">
              <code>SessionHandle.PROPERTIES.SOCKET_SEND_BUF_SIZE</code>
            </p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_Body">When using a shared memory transport, this property allows the application that created the connection to control the size of the socket send buffer.</p>
            <p class="Tbl_Body">The application that accepts an incoming connection that switches to shared memory has no control over the buffer sizes because it uses the shared memory channel created by the connection originator.</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyE-Column1-Body1">
            <p class="Tbl_Body">
              <b>C:</b>
            </p>
            <p class="Tbl_BodyCode">
              <code>SOLCLIENT_SESSION_PROP_SOCKET_RCV_BUF_SIZE</code>
            </p>
            <p class="Tbl_Body">
              <b>Java RTO:</b>
            </p>
            <p class="Tbl_BodyCode">
              <code>SessionHandle.PROPERTIES.SOCKET_RCV_BUF_SIZE</code>
            </p>
          </td>
          <td class="TableStyle-Table_Num-BodyD-Column1-Body1">
            <p class="Tbl_Body">When using a shared memory transport, this property allows the application that created the connection to control the size of the socket receive buffer.</p>
            <p class="Tbl_Body">The application that accepts an incoming connection that switches to shared memory has no control over the buffer size because it uses the shared memory channel created by the connection originator.</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">
              <b>C:</b>
            </p>
            <p class="Tbl_BodyCode">
              <code>SOLCLIENT_SESSION_PROP_REAPPLY_SUBSCRIPTIONS</code>
            </p>
            <p class="Tbl_Body">
              <b>Java RTO:</b>
            </p>
            <p class="Tbl_BodyCode">
              <code>SessionHandle.PROPERTIES.REAPPLY_SUBSCRIPTIONS</code>
            </p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_Body">IPC applications should always enable this property. Otherwise, when a new peer connects, the existing application subscriptions are not being sent to the new peer, and as a result, the new peer will not send matching traffic to the application.</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyB-Column1-Body1">
            <p class="Tbl_Body">
              <b>C:</b>
            </p>
            <p class="Tbl_BodyCode">
              <code>SOLCLIENT_SESSION_PROP_MULTIPOINT</code>
            </p>
            <p class="Tbl_Body">
              <b>Java RTO:</b>
            </p>
            <p class="Tbl_BodyCode">
              <code>IPCSupport.SESSION_PROPERTIES.MULTIPOINT</code>
            </p>
          </td>
          <td class="TableStyle-Table_Num-BodyA-Column1-Body1">
            <p class="Tbl_Body">When this session property is enabled (the default), the client can create a session that is allowed to have multiple underlying sessions/transports.</p>
          </td>
        </tr>
      </tbody>
    </table>
    <h3><a name="Config-Tras-Channel"/>Configuring the Transport Channel Type</h3>
    <p>The transport channel type used for IPC is configured through the syntax of the <code>HOST</code> session property. The entry for the <code>HOST</code> session property should provide a protocol, host, and port specified as follows:</p>
    <p class="Code">[Protocol:]Host[:Port]</p>
    <p><u>Where</u>:</p>
    <p><code>Protocol</code> is protocol used for the transport channel. Valid values are:</p>
    <ul>
      <li><code>tcp</code>â€”Use a TCP channel for communications between the application and its peers. If no protocol is set, <code>tcp</code> is used as a default.</li>
      <li><code>shm</code>â€”Use a shared memory channel for communications between the application and its peers. A TCP channel is first established, the peers then switch to a shared memory channel and tear down the TCP connection.</li>
      <li><code>listen</code>â€”Have the session listen for and accept incoming TCP connections. The peer establishing the connection indicates whether communications should continue over TCP or be switched to shared memory communications.</li>
    </ul>
    <p><code>Host</code>â€”The IP address (or hostname) to connect to or listen to for incoming connections. </p>
    <p><code>Port</code>â€”The port to connect to for an outgoing TCP connection, or to listen on for incoming TCP connections. A value is only required when using a port other than the automatically assigned default port number. (The default port is 55555 when compression is not used; the default port is 55003 when compression is used.)</p>
    <p><u>Examples</u>:</p>
    <p class="Tbl_Body">The following examples show how to specify transport channel types. Unless it is otherwise specified, the default port 55555 is used.</p>
    <ul>
      <li><code>192.168.160.28</code>â€”Connect to this IP address over TCP</li>
      <li><code>tcp:192.168.160.28</code>â€”Connect to this IP address over TCP</li>
      <li><code>shm:192.168.160.25</code>â€”Connect to this IP address over TCP, and then switch to shared memory communications.</li>
      <li><code>listen:192.168.160.25:44444</code>â€”Listen for incoming TCP connections on a loopback IP address, port 44444. Incoming connections can specify whether communication should continue over TCP or use shared memory.</li>
    </ul>
    <h3><a name="Config-Connects"/>Configuring Connections to Peer Applications</h3>
    <p>When a multi-point session accepts a new incoming connection, and internally creates a new sub-session for that new transport channel, the properties of the sub-session are inherited from the main session. This means that behavior, such as whether sends are blocking or not, is controlled by the session configured by the application.</p>
    <p>When a session creates outgoing connections (and their associated sub-sessions) to the peers listed in the <code>HOST</code> session property, each sub-session for an outgoing connection inherits the session properties from the main session.</p>
    <p class="Tbl_Body">The <code>MULTIPOINT</code> session property is used to control whether a session uses a single transport channel or if it supports a number of underlying sessions for connections to multiple peer applications. By default, a multi-point session is enabled.</p>
    <h2 class="with-rule"><a name="Session-Events"/>Session Events with IPC</h2>
    <p>To allow inter-process communications with multiple peer applications, there can be many sub-sessions below the session that a client application uses to establish a connection to the event broker. However, even when there are multiple sub-sessions, the client application only sees and interacts with the one session, and, as a result, it only receives session events from that single session.</p>
    <p>When the application connects the session, it receives a session up event when the first sub-session successfully connects. There are no further session up events as more sub-sessions are established by the API. Similarly, the application only receives a re-connecting or session down event when the last sub-session is no longer established. </p>
    <p>As a result, the application does not see, and cannot query, the status of individual IPC transports to peer applications. This view is similar to what application would have if it were communicating with other applications through an event broker, instead of communicating with them directly through IPC.</p>
  </body>
</html>
