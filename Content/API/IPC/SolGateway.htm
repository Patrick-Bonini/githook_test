<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
  <head/>
  <body>
    <h1>SolGateway</h1>
    <p>SolGateway is an application that must be used when IPC applications also want to communicate with other applications through a Solace PubSub+ event broker.</p>
    <div class="Note" MadCap:autonum="&lt;b&gt;Notice  &lt;/b&gt;">
      <p> Though it is compatible with both the C and Java RTO APIs, SolGateway is only included in the standard package for the C API.</p>
    </div>
    <p>The SolGateway application allows IPC applications running on a host to communicate with an event broker and interact with other applications in Solace PubSub+ through the Solace message bus.</p>
    <p>As shown in the figure below, SolGateway allows a number of applications residing on the same host to directly communicate with each other. It also provides those applications a gateway to the platform for communication with other applications.</p>
    <p>SolGateway allows an application to maintain the single-session view of communications with other applications and make applications more portable.</p>
    <p>SolGateway bridges traffic from the IPC applications to the event broker or from the event broker to the IPC applications behind the gateway. SolGateway does not route messages between IPC applications. If two IPC applications want to communicate directly with each other on the host, you must establish an IPC channel between them.</p>
    <p class="GraphicCaption"><a name="solgateway_3505740131_520707"/>Using a Single Session for Event Broker and IPC Peer Communications</p>
    <p class="GraphicCaption">
      <img src="Images/Solgateway1.jpg" alt=""/>
    </p>
    <p>As an alternative to using SolGateway, you can have each IPC application connect directly to the event broker. However, if this is done with a single session using SolGateway, then the application can receive traffic from both its direct‑connected IPC peer and from the event broker because the subscriptions are replicated on each transport channel underneath a session.</p>
    <p>As shown in the figure below, you can have an application use a separate session to connect to the event broker and then control which subscriptions are sent to peer applications and which are sent to the event broker.</p>
    <p class="GraphicCaption">SolGateway Using Separate Sessions for Event Broker and IPC Peer Communications</p>
    <p class="GraphicCaption">
      <img src="Images/Solgateway2.jpg" alt=""/>
    </p>
    <p>With this communication model, the application is controlling what traffic flows over which sessions, which provides more application control. However, at the same time, to communicate to all other applications, it is a less portable model than the “single session” model.</p>
    <h2 class="with-rule"><a name="solgateway_3505740131_521913"/>SolGateway Operation</h2>
    <p>SolGateway provides the following services:</p>
    <ol>
      <li>Creates a connection to the event broker.</li>
      <li>Accepts incoming connections from IPC peers (using either TCP or shared memory communications).</li>
      <li>Forwards received subscriptions from IPC peers to the event broker. This causes any matching messages on the event broker to be attracted to SolGateway.</li>
      <li>Sends, by default, a “&gt;” and a “#P2P/&gt;”subscription to each connected IPC peer so that all messages published by peer applications are sent to the SolGateway. This behavior can be changed through a command line option.</li>
      <li>Routes all messages received from the event broker to IPC peer applications that want the messages (according to the subscriptions received by SolGateway from the IPC peer applications).</li>
      <li>Sends all messages received from peer IPC applications to the event broker so that they can be received by other applications in the platform that are interested.</li>
    </ol>
    <h2 class="with-rule"><a name="solgateway_3505740131_531375"/>SolGateway Command Line Options</h2>
    <p>To view the command line options available for SolGateway, run the SolGateway application from the command line with no parameters.</p>
    <h2 class="with-rule"><a name="solgateway_3505740131_527736"/>SolGateway Limitations</h2>
    <p>SolGateway can send topic subscriptions received from IPC peers to the event broker to attract matching messages from other applications in Solace PubSub+. It can also publish messages generated by local applications to the event broker. As a result, you must take care to ensure that a local application does not receive the same message from both an IPC peer and from the event broker (that is, reflecting a message published by SolGateway, back to SolGateway and onwards to an IPC peer).</p>
    <p>If IPC applications are subscribing to one topic and publishing on a different topic, then this issue cannot occur. However, it can occur if IPC applications behind SolGateway are subscribing to the same topics that they are also publishing on. For example, in the<MadCap:xref class="Num" href="#solgateway_3505740131_520707"> figure above</MadCap:xref>, Application A has a subscription to topic “foo” and is receiving matching messages published by Application B over the IPC connection between the two applications. SolGateway also receives the subscription topic for “foo” and subscribes to this topic from the event broker. SolGateway also forwards published messages by Application B to the event broker. The event broker then sends this message back to SolGateway, which routes it to Application A, causing it to receive two copies.</p>
    <p>To prevent this scenario, you can:</p>
    <ul>
      <li>provision subscription ACLs on the event broker for the SolGateway connection to block subscriptions for which traffic does not need to be received from Solace PubSub+</li>
      <li>use the No Local Delivery (<code>-nl</code>) SolGateway command line option. When this option is specified messages published on the session cannot be received on the same session even if the client has a subscription that matches the published topic.</li>
    </ul>
  </body>
</html>
