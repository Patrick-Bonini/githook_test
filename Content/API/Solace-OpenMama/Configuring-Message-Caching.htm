<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
  <head/>
  <body>
    <h1>Configuring Message Caching</h1>
    <p>This section provides information on how ingress OpenMAMA messages for non‑book and order book data and dictionaries are handled when the PubSub+ Cache facility is used to provide last-value caching updates for clients. It also provides information on how to configure the SolOpenMAMA Plug-In that is required for OpenMAMA processing and handling.</p>
    <p>When the PubSub+ Cache facility is used with the Solace OpenMAMA messaging solution, the following message exchange patterns may occur:</p>
    <ul>
      <li>A publishing client connected to a specific Message VPN can publish messages with initial values or delta updates to well-known topics (that is, symbols), and the event broker distributes the messages to all the PubSub+ Cache Instances that belong to a Cache Cluster that is assigned a matching topic subscription. PubSub+ Cache Instances are configured to only keep the latest message for a topic rather than multiple messages.</li>
      <li>A subscribing client connected to the same Message VPN that wants an initial value (with the latest updates applied to it) can send cache requests for specific topics to a Distributed Cache, Cache Cluster, or PubSub+ Cache Instance that belongs to that Message VPN. The event broker message bus load-balances the client cache requests amongst the PubSub+ Cache Instances that cache messages for the requested topic, and a single PubSub+ Cache Instance will return a cache response to the requesting client with a message with the last values cached for the requested topic.</li>
    </ul>
    <p>To ensure that the OpenMAMA messages that are cached have the most current values, each PubSub+ Cache Instance must use a Solace-provided PubSub+ Cache Ingress Message Plug-In (<code>solopenmama_plugin</code>). The SolOpenMAMA Plug-In handles non-book, order book, and dictionary messages.</p>
    <p>The SolOpenMAMA Plug‑In inspects each received message, and then uses OpenMAMA libraries to properly handle them. For example, a SolOpenMAMA Plug-In stores initial value messages for a topic in its parent PubSub+ Cache Instance and when it receives subsequent update messages, it applies delta values updates to the appropriate fields in the cached message for the topic. If necessary, it can also discard a received message.</p>
    <p>The SolOpenMAMA Plug-In uses OpenMAMDA to process updates to order books according to a single dictionary file that is locally installed on the server hosting the PubSub+ Cache Instance.</p>
    <h2 class="with-rule"><a name="message-cache-process"/>Message Caching Process</h2>
    <p>When a PubSub+ Cache Instance receives an ingress OpenMAMA message for a specific topic, the SolOpenMAMA Plug-In gets the message payload, then inspects the message.</p>
    <p>Once the message is identified as a valid OpenMAMA message (non-book, order book, data dictionary, or delete), the Plug-In then handles the message in a manner appropriate to its type and instructs the PubSub+ Cache Instance whether to cache the message and what operations to perform for the cached contents for the topic.</p>
    <p>The Plug-In performs the following actions for the received message types:</p>
    <ul>
      <li>initial value message—The Plug-In performs no modifications to the message, and it is written unmodified to the PubSub+ Cache Instance.</li>
      <li>initial value book message—The Plug-In performs no modifications to the message, and it is written unmodified to the PubSub+ Cache Instance.</li>
      <li>initial value dictionary message—The Plug-In performs no modifications to the message, and it is written unmodified to the PubSub+ Cache Instance.</li>
      <li>update message—The Plug-In retrieves the cached message for the symbol from the PubSub+ Cache Instance, then applies the updates from the new message to the appropriate fields. The updated message is then written back to the PubSub+ Cache Instance.</li>
      <li>update book message—The Plug-In retrieves the cached message for the order book from the PubSub+ Cache Instance, then applies the updates from the new message to the appropriate fields. The updated message is then written back to the PubSub+ Cache Instance.</li>
      <li>delete message—The Plug-In instructs the PubSub+ Cache Instance to delete the cached message for the given topic, and then discard the received delete message. A delete message can be received for non-book, book, or dictionary data.</li>
      <li>unexpected message—The Plug-In discards the received message and generates a warn log message.</li>
    </ul>
    <p>For more detailed information on how the SolOpenMAMA Plug-In handles specific, enumerated Open MAMA messages, refer to <MadCap:xref href="message-type-handling.htm">OpenMAMA Message Type Handling</MadCap:xref>.</p>
    <p>The SolOpenMAMA Plug-In differs from customer‑defined PubSub+ Cache Ingress Plug-Ins in that the actions to perform for received OpenMAMA messages are predefined by Solace. This ensures that OpenMAMA messages are handled in a standard, predictable manner. (For more detailed information on the operation and configuration of customer‑defined PubSub+ Cache Ingress Plug-Ins, refer to <MadCap:xref MadCap:unresolvedLink="import-link:using_ingress_message_plugins_1786797330_38232" href="../../Additional-Products/Solace-PubSub-Cache/Using-Ingress-Message-Plugins.htm">Using Ingress Message Plug-Ins</MadCap:xref>.)</p>
    <h3><a name="data-loss-detection"/>Data Loss Detection</h3>
    <p>A PubSub+ Cache Instance stores reference copies of OpenMAMA messages for a particular set of topics, but there is no centralized network entity that is able to replay missing data from OpenMAMA messages to the PubSub+ Cache Instance. Therefore, the PubSub+ Cache Plug‑In cannot check for data loss or perform any specific actions in the event of data loss for a symbol.</p>
    <p>For information on how PubSub+ Cache handles lost messages, refer to <MadCap:xref MadCap:unresolvedLink="import-link:configuring_and_managing_solcache_541341864_17237" href="../../Additional-Products/Solace-PubSub-Cache/Configuring-PubSub-Cache-Ins.htm#Stop-On-Loss">Configuring Stop On Lost Message Behavior</MadCap:xref>.</p>
    <h2 class="with-rule"><a name="configuring-the-solopenmama-plugin"/>Configuring the SolOpenMAMA Plug-In</h2>
    <p>The configuration of a SolOpenMAMA Plug-In is provided through a special <code>mama.properties</code> file used for the SolOpenMAMA Plug-In. This <code>mama.properties</code> file, which differs from the configuration file of the same name used by the Solace Middleware Bridge, is required for each PubSub+ Cache Instance used to handle OpenMAMA messages. As of SolOpenMAMA 7.5.0 release, the PubSub+ Cache instance handles only payload version 2 messages and drops payload version 1 messages. Clients can continue to use SolOpenMAMA versions before 7.5.0, with the exception that payload version 1 messages will be discarded in the PubSub+ Cache instance.</p>
    <p>Typically, this configuration file is located in the same directory that the SolOpenMAMA Plug‑In was installed in on the Linux server hosting the PubSub+ Cache Instance. The location of the <code>mama.properties</code> file used for the SolOpenMAMA Plug-In must be specified in the <code>WOMBAT_PATH</code> environment variable.</p>
    <p>To modify the configuration of a PubSub+ Cache Instance’s SolOpenMAMA Plug-In, you can use a text editor to edit its <code>mama.properties</code> file. Any changes made to this file only take effect after the SolOpenMAMA Plug-In successfully initializes.</p>
    <p>You can perform the following configuration changes for the SolOpenMAMA Plug‑In:</p>
    <ul>
      <li>Plug-In dictionary file—To configure the dictionary file a SolOpenMAMA Plug‑In uses to handle Book Order messages, edit the <code>mama.solace.cacheplugin.dictionary.filename</code> property of the SolOpenMAMA Plug-In’s <code>mama.properties</code> file. The data dictionary that is specified for a SolOpenMAMA Plug-In must follow the OpenMAMA dictionary file format. A dictionary file may be used for several OpenMAMA publisher sources (specified through the <code>&lt;source&gt;</code> element in the property hierarchy).
                <p>This dictionary file must be saved on the server hosting the PubSub+ Cache Instance. By default, a file named <code>dictionary</code> is used.</p><p class="Note">The Plug-In does not monitor changes to the dictionary files. Therefore, if a dictionary is updated while it is in use, the PubSub+ Cache Instance must be restarted for the updates to take effect.</p></li>
      <li>handling of updates for non-cached entries—When a SolOpenMAMA Plug-In receives a non-book update message that has no existing cache entry, it can either instruct the PubSub+ Cache Instance to discard the message (the default behavior) or cache the message. 
                <p>To configure the handling behavior for update messages for which there are no existing cache entries, edit the <code>mama.solace.cacheplugin.update.<br/>update_before_initial</code> property of the <code>mama.properties</code> file. Specify <code>discard</code> to indicate that the PubSub+ Cache Instance should discard the updates, or specify <code>cache</code> to indicate that the PubSub+ Cache Instance should cache them.</p></li>
      <li>handling of submessages—When a SolOpenMAMA Plug-In receives a non-book update message that has SubMsg fields (mama field type: <code>MAMAM_FIELD_TYPE_MSG</code>) data, it can either:<ul><li>replace the existing values—The value of a submsg field in the cached message is replaced with the value of the corresponding submsg field in the received message. This is the default behavior.</li><li>merge the values—The value of a submsg field in the received message is merged with value of the submsg fields in the cached message. When a merge is used, if a submsg itself contains a submsg field, the merge is recursively applied to submsg field that are at the same hierarchy level between the cached message and the update message.
			<p>To configure the handling of non-book update messages that have SubMsg fields, edit the <code>mama.solace.cacheplugin.submsg_field_alg</code> property of the <code>mama.properties</code> file. Specify <code>replace</code> (the default value) or <code>merge</code>, to indicate the handling action you want the SolOpenMAMA Plug-In to perform.</p></li></ul></li>
    </ul>
    <h2 class="with-rule"><a name="tuning-message-caching-performance"/>Tuning Message Caching Performance</h2>
    <p>PubSub+ Cache and the SolOpenMAMA Plug-In use fixed size buffers to store incoming messages. To optimize performance and memory utilization, the buffer sizes must be tuned in each PubSub+ Cache Instances’ configuration file to match your application’s expected message sizes. For example, the following lines added to a PubSub+ Cache Instance configuration file set the buffer sizes to 4096, 8192, 16384, 32768, and 65536 bytes.</p>
    <p class="Code"># Data buffer sizes</p>
    <p class="Code">GLOBAL_DBQUANTA_SIZE_0 4096</p>
    <p class="Code">GLOBAL_DBQUANTA_SIZE_1 8192</p>
    <p class="Code">GLOBAL_DBQUANTA_SIZE_2 16384</p>
    <p class="Code">GLOBAL_DBQUANTA_SIZE_3 32768</p>
    <p class="Code">GLOBAL_DBQUANTA_SIZE_4 65536</p>
    <p>For best performance in terms of CPU utilization, <code>GLOBAL_DBQUANTA_SIZE_4</code> must be larger than most of the expected messages. For example, if 95% of the messages are smaller than 65536 bytes, <code>GLOBAL_DBQUANTA_SIZE_4</code> should be set to 65536.</p>
    <p>Message processing for messages larger than <code>GLOBAL_DBQUANTA_SIZE_4</code> is more CPU-intensive, but when these large messages are freed the associated memory is guaranteed to be freed back to the operating system for use by other processes.</p>
    <p class="Note">A PubSub+ Cache Instance process must be restarted for changes to its buffer sizes to take effect.</p>
    <h2 class="with-rule"><a name="pubsubcache-logging"/>PubSub+ Cache Logging</h2>
    <p>Each PubSub+ Cache Instance generates Message VPN-level events that are published over the event broker message bus. The Cache Manager on the Designated Router listens to these cache events and consolidates them with the event broker’s own events, and then these are redirected to the OpenMAMA logging facility. For more information on how SolOpenMAMA logging, refer to <MadCap:xref href="Solace-Implementation-Considerations.htm#Logging">Logging</MadCap:xref>.</p>
    <p class="Note">Any MAMA logs generated by a SolOpenMAMA Plug-In are included in the PubSub+ Cache Instance’s PubSub+ Cache logs. To differentiate them from other PubSub+ Cache logs, they are prefixed as Mama Logs.</p>
    <p>For a complete list of PubSub+ Cache events, refer to <MadCap:xref href="../../Monitoring/PubSub-Event-Reference.htm">SolOS Event Reference</MadCap:xref>, which lists and describes Solace PubSub+ syslog messages related to system-wide, Message VPN, and local client Solace PubSub+ events.</p>
    <p>For more information on PubSub+ Cache eventing, refer to <MadCap:xref MadCap:unresolvedLink="import-link:monitoring_solcache_2415761215_38232" href="../../Additional-Products/Solace-PubSub-Cache/Monitoring-PubSub-Cache.htm">Monitoring PubSub+ Cache</MadCap:xref>.</p>
  </body>
</html>
