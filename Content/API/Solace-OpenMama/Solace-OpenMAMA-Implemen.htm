<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
  <head/>
  <body>
    <h1>Solace OpenMAMA Implementation</h1>
    <p>Solace PubSub+ can be used to transport OpenMAMA messages between publishers and subscribers.</p>
    <p>The figure below provides a simplified illustration of how Solace PubSub+ inter-operates with client applications that use OpenMAMA and OpenMAMDA APIs to both publish messages to well‑known topics and to submit subscription requests for messages that were published to those topics.</p>
    <p>In a multi-site deployment, the same collection of elements (publishers, subscribers, PubSub+ Cache instances) will be present at many sites across the WAN, and the event brokers they rely on will be connected through multi-node routing.</p>
    <p class="GraphicCaption">OpenMAMA Data Distribution System</p>
    <p class="GraphicCaption">
      <img src="../../Resources/Images/OpenMama/neighbored_overview.jpg" alt=""/>
    </p>
    <p>When deploying SolOpenMAMA you can use interactive publishers and/or use last-value message caching to fulfill subscribers’ requests for initial values and real-time data for symbols and for data dictionaries.</p>
    <ul>
      <li>interactive publishers—Interactive publishers directly provide subscribers with an initial value, real‑time data, or an initial value followed by real-time data for the symbols that the subscribers request. Interactive publishers use a request/reply message exchange pattern (MEP). 
            <p>Subscribers can also get an initial value for a data dictionary from the same interactive publisher.</p></li>
      <li>last-value message caching—The PubSub+ Cache facility can be implemented to provide a last-value caching service for all published topics. When PubSub+ Cache instances are deployed, they allow late-joining subscribing applications to obtain the latest value for a symbol from a cache rather than directly requesting it from a publisher. 
            <p>When PubSub+ Cache is implemented, the publishers send initial value and real‑time data messages for specific symbols defined in the appropriate topic syntax to an event broker. The event broker then distributes those published messages to those PubSub+ Cache Instances that are hosted on Linux servers that subscribe to those topics. This allows a subscriber that is interested in getting an initial value for a symbol to request the latest data from this group of caches (a Cache Cluster) that has a topic subscription for the symbol of interest. When the cache request is received, one of the PubSub+ Cache Instances will return to the subscriber the latest cached initial value.</p></li>
    </ul>
    <p class="Note" MadCap:autonum="&lt;b&gt;Note:  &lt;/b&gt;">The Solace OpenMAMA solution does not implement feed handlers.</p>
  </body>
</html>
