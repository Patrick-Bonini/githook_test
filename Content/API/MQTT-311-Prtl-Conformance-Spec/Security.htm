<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" xml:lang="en-us">
  <head>
    <title/>
    <link href="../../Resources/Stylesheets/mqtt_311_prtcl.css" rel="stylesheet"/>
  </head>
  <body>
    <h1 class="Heading1">5 Security</h1>
    <h2 class="Heading2"><a name="_Toc430864976"/><a name="_Toc430865192"/>5.1 Introduction</h2>
    <p>This Chapter is provided for guidance only and is <span class="Refterm">Non Normative</span>. However, it is strongly recommended that Server implementations that offer TLS <a href="Introduction.htm#RFC5246"><span class="Hyperlink">[RFC5246]</span></a> SHOULD use TCP port 8883 (IANA service name: secure-mqtt).</p>
    <p>There are a number of threats that solution providers should consider. For example:</p>
    <ul>
      <li>Devices could be compromised</li>
      <li>Data at rest in Clients and Servers might be accessible</li>
      <li>Protocol behaviors could have side effects (e.g. “timing attacks”)</li>
      <li>Denial of Service (DoS) attacks</li>
      <li>Communications could be intercepted, altered, re-routed or disclosed</li>
      <li>Injection of spoofed Control Packets</li>
    </ul>
    <p>MQTT solutions are often deployed in hostile communication environments. In such cases, implementations will often need to provide mechanisms for:</p>
    <ul>
      <li>Authentication of users and devices</li>
      <li>Authorization of access to Server resources</li>
      <li>Integrity of MQTT Control Packets and application data contained therein</li>
      <li>Privacy of MQTT Control Packets and application data contained therein</li>
    </ul>
    <p>As a transport protocol, MQTT is concerned only with message transmission and it is the implementer’s responsibility to provide appropriate security features. This is commonly achieved by using TLS <a href="Introduction.htm#RFC5246"><span class="Hyperlink_8">[RFC5246]</span></a>.</p>
    <p>In addition to technical security issues there could also be geographic (e.g. U.S.-EU SafeHarbor <a href="Introduction.htm#USEUSAFEHARB"><span class="Hyperlink">[USEUSAFEHARB]</span></a>), industry specific (e.g. PCI DSS <a href="Introduction.htm#PCIDSS"><span class="Hyperlink_8">[</span><span class="Hyperlink">PCIDSS</span><span class="Hyperlink_8">]</span></a>) and regulatory considerations (e.g. Sarbanes-Oxley <a href="Introduction.htm#SARBANES"><span class="Hyperlink">[SARBANES]</span></a>).</p>
    <h2 class="Heading2"><a name="_Toc430864977"/>5.2 MQTT solutions: security and certification</h2>
    <p>An implementation might want to provide conformance with specific industry security standards such as NIST Cyber Security Framework <a href="Introduction.htm#NISTCSF"><span class="Hyperlink_8">[NISTCSF]</span></a>, PCI-DSS <a href="Introduction.htm#PCIDSS"><span class="Hyperlink_8">[PCIDSS]</span></a>), FIPS-140-2 <a href="Introduction.htm#FIPS1402"><span class="Hyperlink_8">[FIPS1402]</span></a> and NSA Suite B <a href="Introduction.htm#NSAB"><span class="Hyperlink_6">[NSAB]</span></a>.</p>
    <p>Guidance on using MQTT within the NIST Cyber Security Framework <a href="Introduction.htm#NISTCSF"><span class="Hyperlink_8">[NISTCSF]</span></a> can be found in the MQTT supplemental publication, MQTT and the NIST Framework for Improving Critical Infrastructure Cybersecurity <MadCap:xref href="Introduction.htm#MQTT-NIST">[MQTT NIST]</MadCap:xref>. The use of industry proven, independently verified and certified technologies will help meet compliance requirements.</p>
    <h2 class="Heading2"><a name="_Toc430864978"/>5.3 Lightweight cryptography and constrained devices</h2>
    <p>Advanced Encryption Standard <a href="Introduction.htm#AES"><span class="Hyperlink_8">[AES]</span></a> and Data Encryption Standard <a href="Introduction.htm#DES"><span class="Hyperlink_8">[DES]</span></a> are widely adopted.</p>
    <p>ISO 29192 <a href="Introduction.htm#ISO29192"><span class="Hyperlink_8">[ISO29192]</span></a> makes recommendations for cryptographic primitives specifically tuned to perform on constrained “low end” devices.</p>
    <h2 class="Heading2"><a name="_Toc430864979"/>5.4 Implementation notes</h2>
    <p>There are many security concerns to consider when implementing or using MQTT. The following section should not be considered a “check list”.</p>
    <p>An implementation might want to achieve some, or all, of the following:</p>
    <h3 class="Heading3"><a name="_Toc430864980"/>5.4.1 Authentication of Clients by the Server</h3>
    <p>The CONNECT Packet contains Username and Password fields. Implementations can choose how to make use of the content of these fields. They may provide their own authentication mechanism, use an external authentication system such as LDAP <a href="Introduction.htm#RFC4511"><span class="Hyperlink_8">[RFC4511]</span></a> or OAuth <a href="Introduction.htm#RFC6749"><span class="Hyperlink_8">[RFC6749]</span></a> tokens, or leverage operating system authentication mechanisms.</p>
    <p>Implementations passing authentication data in clear text, obfuscating such data elements or requiring no authentication data should be aware this can give rise to Man-in-the-Middle and replay attacks. Section <MadCap:xref href="#_Ref374028308" class="ParaTextOnly">Privacy of Application Messages and Control Packets</MadCap:xref> introduces approaches to ensure data privacy.</p>
    <p>A Virtual Private Network (VPN) between the Clients and Servers can provide confidence that data is only being received from authorized Clients.</p>
    <p>Where TLS <a href="Introduction.htm#RFC5246"><span class="Hyperlink_8">[RFC5246]</span></a> is used, SSL Certificates sent from the Client can be used by the Server to authenticate the Client.</p>
    <p>An implementation might allow for authentication where the credentials are sent in an Application Message from the Client to the Server.</p>
    <div class="div_2">
      <p>
        <span class="span_3">Solace Implementation Note</span>
      </p>
      <p>
        <span class="span_4">A Solace server supports TLS/SSL Client Certificates, OAuth v2 (including OpenID Connect), LDAP, RADIUS, and internal database authentication to authenticate MQTT Clients. See the “User Name” section of this document for more information on authentication.</span>
      </p>
    </div>
    <h3 class="Heading3"><a name="_Toc430864981"/>5.4.2 Authorization of Clients by the Server</h3>
    <p>An implementation may restrict access to Server resources based on information provided by the Client such as User Name, Client Identifier, the hostname/IP address of the Client, or the outcome of authentication mechanisms.</p>
    <div class="div_2">
      <p>
        <span class="span_3">Solace Implementation Note</span>
      </p>
      <p class="p_1">Solace ACLs are applied to MQTT Clients based on the MQTT User Name used to authenticate a connection. ACLs provide:</p>
      <ul>
        <li>Source IP-based connection access control. In the case of WebSocket, the X-Forwarded-For HTTP header field (if present) is used to identify the originating IP address.</li>
        <li>Publisher access controls on a per-topic basis.</li>
        <li>Subscriber access controls on a per-topic basis.</li>
        <li>Subscriber access controls on a per-share-name basis for shared subscriptions.</li>
      </ul>
    </div>
    <h3 class="Heading3"><a name="_Toc430864982"/>5.4.3 Authentication of the Server by the Client</h3>
    <p>The MQTT protocol is not trust symmetrical: it provides no mechanism for the Client to authenticate the Server.</p>
    <p>Where TLS <a href="Introduction.htm#RFC5246"><span class="Hyperlink_8">[RFC5246]</span></a> is used, SSL Certificates sent from the Server can be used by the Client to authenticate the Server. Implementations providing MQTT service for multiple hostnames from a single IP address should be aware of the Server Name Indication extension to TLS defined in section 3 of RFC 6066 <a href="Introduction.htm#RFC6066"><span class="Hyperlink_8">[RFC6066]</span></a>.This allows a Client to tell the Server the hostname of the Server it is trying to connect to.</p>
    <p>An implementation might allow for authentication where the credentials are sent in an Application Message from the Server to the Client.</p>
    <p>A VPN between Clients and Servers can provide confidence that Clients are connecting to the intended Server.</p>
    <h3 class="Heading3"><a name="_Toc430864983"/>5.4.4 Integrity of Application Messages and Control Packets</h3>
    <p>Applications can independently include hash values in their Application Messages. This can provide integrity of the contents of Publish Control Packets across the network and at rest.</p>
    <p>TLS <a href="Introduction.htm#RFC5246"><span class="Hyperlink_8">[RFC5246]</span></a> provides hash algorithms to verify the integrity of data sent over the network.</p>
    <p>The use of VPNs to connect Clients and Servers can provide integrity of data across the section of the network covered by a VPN.</p>
    <h3 class="Heading3"><a name="_Ref374028308"/><a name="_Toc430864984"/>5.4.5 Privacy of Application Messages and Control Packets</h3>
    <p>TLS <a href="Introduction.htm#RFC5246"><span class="Hyperlink_8">[RFC5246]</span></a> can provide encryption of data sent over the network. There are valid TLS cipher suites that include a NULL encryption algorithm that does not encrypt data. To ensure privacy Clients and Servers should avoid these cipher suites.</p>
    <p>An application might independently encrypt the contents of its Application Messages. This could provide privacy of the Application Message both over the network and at rest. This would not provide privacy for other properties of the Application Message such as Topic Name. </p>
    <p>Client and Server implementations can provide encrypted storage for data at rest such as Application Messages stored as part of a Session.</p>
    <p>The use of VPNs to connect Clients and Servers can provide privacy of data across the section of the network covered by a VPN.</p>
    <h3 class="Heading3"><a name="_Toc430864985"/>5.4.6 Proof of Delivery of message transmission</h3>
    <p>Application designers might need to consider appropriate strategies to achieve end to end Proof of Delivery.</p>
    <h3 class="Heading3"><a name="_Toc430864986"/>5.4.7 Detecting compromise of Clients and Servers</h3>
    <p>Client and Server implementations using TLS <a href="Introduction.htm#RFC5246"><span class="Hyperlink_8">[RFC5246]</span></a> should provide capabilities to ensure that any SSL certificates provided when initiating a TLS <a href="Introduction.htm#RFC5246"><span class="Hyperlink_8">[RFC5246]</span></a> connection are associated with the hostname of the Client connecting or Server being connected to.</p>
    <p>Client and Server implementations using TLS <a href="Introduction.htm#RFC5246"><span class="Hyperlink_8">[RFC5246]</span></a> can choose to provide capabilities to check Certificate Revocation Lists (CRLs <a href="Introduction.htm#RFC5280"><span class="Hyperlink_8">[RFC5280]</span></a>) and Online Certificate Status Protocol (OCSP<span class="Refterm_5">)</span> <a href="Introduction.htm#RFC6960"><span class="Hyperlink_8">[RFC6960]</span></a> to prevent revoked certificates from being used.</p>
    <p>Physical deployments might combine tamper-proof hardware with the transmission of specific data in Application Messages. For example a meter might have an embedded GPS to ensure it is not used in an unauthorized location.<a href="Introduction.htm#IEEE8021AR"><span class="Hyperlink_8">IEEE 802.1AR]</span></a> is a standard for implementing mechanisms to authenticate a device’s identity using a cryptographically bound identifier.</p>
    <h3 class="Heading3"><a name="_Toc430864987"/>5.4.8 Detecting abnormal behaviors</h3>
    <p>Server implementations might monitor Client behavior to detect potential security incidents. For example:</p>
    <ul>
      <li>Repeated connection attempts</li>
      <li>Repeated authentication attempts</li>
      <li>Abnormal termination of connections</li>
      <li>Topic scanning (attempts to send or subscribe to many topics)</li>
      <li>Sending undeliverable messages (no subscribers to the topics)</li>
      <li>Clients that connect but do not send data</li>
    </ul>
    <p>Server implementations might disconnect Clients that breach its security rules.</p>
    <p>Server implementations detecting unwelcome behavior might implement a dynamic block list based on identifiers such as IP address or Client Identifier.</p>
    <p>Deployments might use network level controls (where available) to implement rate limiting or blocking based on IP address or other information.</p>
    <h3 class="Heading3"><a name="_Toc430864988"/>5.4.9 Other security considerations</h3>
    <p>If Client or Server SSL certificates are lost or it is considered that they might be compromised they should be revoked (utilizing CRLs <a href="Introduction.htm#RFC5280"><span class="Hyperlink_8">[RFC5280]</span></a> and/or OCSP <a href="Introduction.htm#RFC6960"><span class="Hyperlink_8">[RFC6960]</span></a>).</p>
    <p>Client or Server authentication credentials, such as User Name and Password, that are lost or considered compromised should be revoked and/or reissued.</p>
    <p>In the case of long lasting connections:</p>
    <ul>
      <li>Client and Server implementations using TLS <a href="Introduction.htm#RFC5246"><span class="Hyperlink_8">[RFC5246]</span></a> should allow for session renegotiation to establish new cryptographic parameters (replace session keys, change cipher suites, change authentication credentials).</li>
      <li>Servers may disconnect Clients and require them to re-authenticate with new credentials. </li>
    </ul>
    <p>Constrained devices and Clients on constrained networks can make use of TLS session resumption <a href="Introduction.htm#RFC5077"><span class="Hyperlink_8">[RFC5077]</span></a>, in order to reduce the costs of reconnecting TLS <a href="Introduction.htm#RFC5246"><span class="Hyperlink_8">[RFC5246]</span></a> sessions.</p>
    <div class="div_2">
      <p>
        <span class="span_3">Solace Implementation Note</span>
      </p>
      <p>TLS resumption is  available only on PubSub+ Appliances.</p>
    </div>
    <p>Clients connected to a Server have a transitive trust relationship with other Clients connected to the same Server and who have authority to publish data on the same topics.</p>
    <h3 class="Heading3"><a name="_Toc430864989"/>5.4.10 Use of SOCKS</h3>
    <p>Implementations of Clients should be aware that some environments will require the use of SOCKSv5 <a href="Introduction.htm#RFC1928"><span class="Hyperlink">[RFC1928]</span></a> proxies to make outbound Network Connections. Some MQTT implementations could make use of alternative secured tunnels (e.g. SSH) through the use of SOCKS. Where implementations choose to use SOCKS, they should support both anonymous and user-name password authenticating SOCKS proxies. In the latter case, implementations should be aware that SOCKS authentication might occur in plain-text and so should avoid using the same credentials for connection to a MQTT Server.</p>
    <h3 class="Heading3"><a name="_Toc430864990"/>5.4.11 Security profiles</h3>
    <p>Implementers and solution designers might wish to consider security as a set of profiles which can be applied to the MQTT protocol. An example of a layered security hierarchy is presented below.</p>
    <h4 class="Heading4">5.4.11.1 Clear communication profile</h4>
    <p>When using the clear communication profile, the MQTT protocol runs over an open network with no additional secure communication mechanisms in place.</p>
    <h4 class="Heading4">5.4.11.2 Secured network communication profile</h4>
    <p>When using the secured network communication profile, the MQTT protocol runs over a physical or virtual network which has security controls e.g., VPNs or physically secure network.</p>
    <h4 class="Heading4">5.4.11.3 Secured transport profile</h4>
    <p>When using the secured transport profile, the MQTT protocol runs over a physical or virtual network and using TLS <a href="Introduction.htm#RFC5246"><span class="Hyperlink_8">[RFC5246]</span></a> which provides authentication, integrity and privacy.</p>
    <p>TLS <a href="Introduction.htm#RFC5246"><span class="Hyperlink_8">[RFC5246]</span></a> Client authentication can be used in addition to – or in place of – MQTT Client authentication as provided by the Username and Password fields.</p>
    <h4 class="Heading4">5.4.11.4 Industry specific security profiles</h4>
    <p>It is anticipated that the MQTT protocol will be designed into industry specific application profiles, each defining a threat model and the specific security mechanisms to be used to address these threats.  Recommendations for specific security mechanisms will often be taken from existing works including:</p>
    <p><a href="Introduction.htm#NISTCSF"><span class="Hyperlink_8">[NISTCSF]</span></a> NIST Cyber Security Framework</p>
    <p><a href="Introduction.htm#NIST7628"><span class="Hyperlink_8">[NIST7628]</span></a> NISTIR 7628 Guidelines for Smart Grid Cyber Security</p>
    <p><a href="Introduction.htm#FIPS1402"><span class="Hyperlink_8">[FIPS1402]</span></a> Security Requirements for Cryptographic Modules (FIPS PUB 140-2)</p>
    <p><a href="Introduction.htm#PCIDSS"><span class="Hyperlink_8">[PCIDSS]</span></a> PCI-DSS Payment Card Industry Data Security Standard</p>
    <p><a href="Introduction.htm#NSAB"><span class="Hyperlink_8">[NSAB]</span></a> NSA Suite B Cryptography</p>
  </body>
</html>
