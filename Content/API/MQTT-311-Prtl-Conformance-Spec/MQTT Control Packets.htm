<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" xml:lang="en-us">
    <head><title></title>
        <link href="../../Resources/Stylesheets/mqtt_311_prtcl.css" rel="stylesheet" />
    </head>
    <body>
        <h1 class="Heading1">3 MQTT Control Packets</h1>
        <p MadCap:conditions="Default.HideFromAllOutput"><b>***NOTE&#160;TO&#160;WRITERS:</b> Highlighted content in this topic is that way on purpose. It is intended to show differences in this spec of MQTT. Do not remove the spans.</p>
        <h2 class="Heading2"><a name="_Ref363033523"></a><a name="_Toc430864892"></a><a name="_Toc430865031"></a>3.1 CONNECT – Client requests a connection to a Server</h2>
        <p>After a Network<span class="span_17"> Connection is established by a Client to a Server, the first Packet sent from the Client to the Server MUST be a CONNECT Packet</span> <span class="span_14">[MQTT-3.1.0-1]</span>.</p>
        <p>A Client can only send the CONNECT Packet once over a Network Connection. <span class="span_17">The Server MUST process a second CONNECT Packet sent from a Client as a protocol violation and disconnect the Client</span> <span class="span_14">[MQTT-3.1.0-2]</span>.&#160; See section <MadCap:xref href="Operational_behavior.htm#_Ref381955543" class="ParaTextOnly">Handling errors</MadCap:xref> for information about handling errors.</p>
        <p>The payload contains one or more encoded fields. They specify a unique Client identifier for the Client, a Will topic, Will Message, User Name and Password. All but the Client identifier are optional and their presence is determined based on flags in the variable header.</p>
        <h3 class="Heading3"> <a name="_Toc430864893"></a><a name="_Toc430865032"></a>3.1.1 Fixed header</h3>
        <p class="GraphicCaptionWord"><a name="_Toc430865033"></a>Figure 3.1 – CONNECT Packet fixed header</p>
        <table class="table_1">
            <col style="width: 80pt;" />
            <col style="width: 40pt;" />
            <col style="width: 48pt;" />
            <col style="width: 45pt;" />
            <col style="width: 54pt;" />
            <col style="width: 53pt;" />
            <col style="width: 46pt;" />
            <col style="width: 54pt;" />
            <col style="width: 59pt;" />
            <tr>
                <td class="td_1">
                    <p class="p_5">Bit</p>
                </td>
                <td class="td_2">
                    <p class="p_5">7</p>
                </td>
                <td class="td_2">
                    <p class="p_5">6</p>
                </td>
                <td class="td_2">
                    <p class="p_5">5</p>
                </td>
                <td class="td_2">
                    <p class="p_5">4</p>
                </td>
                <td class="td_2">
                    <p class="p_5">3</p>
                </td>
                <td class="td_2">
                    <p class="p_5">2</p>
                </td>
                <td class="td_2">
                    <p class="p_5">1</p>
                </td>
                <td class="td_2">
                    <p class="p_5">0</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p>byte 1</p>
                </td>
                <td colspan="4" class="td_4">
                    <p class="p_6">MQTT Control Packet type (1)</p>
                </td>
                <td colspan="4" class="td_4">
                    <p class="p_6">Reserved</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p>&#160;</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">1</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p>byte 2…</p>
                </td>
                <td colspan="8" class="td_4">
                    <p class="p_6">Remaining Length</p>
                </td>
            </tr>
        </table>
        <p><span class="Refterm">Remaining Length field</span>
        </p>
        <p>Remaining Length is the length of the variable header (10 bytes) plus the length of the Payload. It is encoded in the manner described in section <MadCap:xref href="MQTT Control Packet format.htm#_Ref355703004" class="ParaTextOnly">Remaining Length</MadCap:xref>.</p>
        <h3 class="Heading3"><a name="_Toc430864894"></a><a name="_Toc430865034"></a>3.1.2 Variable header</h3>
        <p>The variable header for the CONNECT Packet consists of four fields in the following order:&#160;Protocol Name, Protocol Level, Connect Flags, and Keep Alive.</p>
        <h4 class="Heading4"><a name="_Toc430865035"></a>3.1.2.1 Protocol Name</h4>
        <p class="GraphicCaptionWord"><a name="_Toc430865036"></a>Figure 3.2 - Protocol Name bytes</p>
        <table class="table_3">
            <col style="width: 83pt;" />
            <col style="width: 186pt;" />
            <col style="width: 27pt;" />
            <col style="width: 27pt;" />
            <col style="width: 27pt;" />
            <col style="width: 27pt;" />
            <col style="width: 27pt;" />
            <col style="width: 27pt;" />
            <col style="width: 27pt;" />
            <col style="width: 27pt;" />
            <tr>
                <td class="td_1">
                    <p>&#160;</p>
                </td>
                <td class="td_2">
                    <p class="p_5">Description</p>
                </td>
                <td class="td_2">
                    <p class="p_5">7</p>
                </td>
                <td class="td_2">
                    <p class="p_5">6</p>
                </td>
                <td class="td_2">
                    <p class="p_5">5</p>
                </td>
                <td class="td_2">
                    <p class="p_5">4</p>
                </td>
                <td class="td_2">
                    <p class="p_5">3</p>
                </td>
                <td class="td_2">
                    <p class="p_5">2</p>
                </td>
                <td class="td_2">
                    <p class="p_5">1</p>
                </td>
                <td class="td_2">
                    <p class="p_5">0</p>
                </td>
            </tr>
            <tr>
                <td colspan="10" class="td_3">
                    <p>Protocol Name</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p>byte 1</p>
                </td>
                <td class="td_4">
                    <p>Length MSB (0)</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p>byte 2</p>
                </td>
                <td class="td_4">
                    <p>Length LSB (4)</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">1</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p>byte 3</p>
                </td>
                <td class="td_4">
                    <p class="p_6">‘M’</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">1</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">1</p>
                </td>
                <td class="td_4">
                    <p class="p_6">1</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">1</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p>byte 4</p>
                </td>
                <td class="td_4">
                    <p class="p_6">‘Q’</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">1</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">1</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">1</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p>byte 5</p>
                </td>
                <td class="td_4">
                    <p class="p_6">‘T’</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">1</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">1</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">1</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p>byte 6</p>
                </td>
                <td class="td_4">
                    <p class="p_6">‘T’</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">1</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">1</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">1</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
            </tr>
        </table>
        <p>The Protocol Name is a UTF-8 encoded string that represents the protocol name “MQTT”, capitalized as shown. The string, its offset and length will not be changed by future versions of the MQTT specification.</p>
        <p><span class="span_17">If the protocol name is incorrect the Server MAY disconnect the Client, or it MAY continue processing the CONNECT packet in accordance with some other specification. In the latter case, the Server  MUST NOT continue to process the CONNECT packet in line with this specification</span> <span class="span_14">[MQTT-3.1.2-1]</span>.</p>
        <p class="p_9">Non normative comment</p>
        <p class="p_12">Packet inspectors, such as firewalls, could use the Protocol Name to identify MQTT traffic.</p>
        <h4 class="Heading4"><a name="_Toc430865037"></a>3.1.2.2 Protocol Level</h4>
        <p class="GraphicCaptionWord"><a name="_Toc430865038"></a>Figure 3.3 - Protocol Level byte</p>
        <table class="table_3">
            <col style="width: 83pt;" />
            <col style="width: 186pt;" />
            <col style="width: 27pt;" />
            <col style="width: 27pt;" />
            <col style="width: 27pt;" />
            <col style="width: 27pt;" />
            <col style="width: 27pt;" />
            <col style="width: 27pt;" />
            <col style="width: 27pt;" />
            <col style="width: 27pt;" />
            <tr>
                <td class="td_1">
                    <p>&#160;</p>
                </td>
                <td class="td_2">
                    <p class="p_5">Description</p>
                </td>
                <td class="td_2">
                    <p class="p_5">7</p>
                </td>
                <td class="td_2">
                    <p class="p_5">6</p>
                </td>
                <td class="td_2">
                    <p class="p_5">5</p>
                </td>
                <td class="td_2">
                    <p class="p_5">4</p>
                </td>
                <td class="td_2">
                    <p class="p_5">3</p>
                </td>
                <td class="td_2">
                    <p class="p_5">2</p>
                </td>
                <td class="td_2">
                    <p class="p_5">1</p>
                </td>
                <td class="td_2">
                    <p class="p_5">0</p>
                </td>
            </tr>
            <tr>
                <td colspan="10" class="td_3">
                    <p>Protocol Level</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p>byte 7</p>
                </td>
                <td class="td_4">
                    <p>Level(4)</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">1</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
            </tr>
        </table>
        <p>The 8 bit unsigned value that represents the revision level of the protocol used by the Client. The value of the Protocol Level field for the version 3.1.1 of the protocol is 4 (0x04). <span class="span_17">The Server MUST respond to the CONNECT Packet with a CONNACK return code 0x01 (unacceptable protocol level) and then disconnect the Client if the Protocol Level is not supported by the Server</span> <span class="span_14">[MQTT-3.1.2-2]</span>.</p>
        <h4 class="Heading4"><a name="_Toc430865039"></a>3.1.2.3 Connect Flags</h4>
        <p>The Connect Flags byte contains a number of parameters specifying the behavior of the MQTT connection. It also indicates the presence or absence of fields in the payload.</p>
        <p class="GraphicCaptionWord"><a name="_Toc430865040"></a>Figure 3.4 - Connect Flag bits</p>
        <table class="table_1">
            <col style="width: 53pt;" />
            <col style="width: 70pt;" />
            <col style="width: 63pt;" />
            <col style="width: 63pt;" />
            <col style="width: 36pt;" />
            <col style="width: 36pt;" />
            <col style="width: 52pt;" />
            <col style="width: 53pt;" />
            <col style="width: 54pt;" />
            <tr>
                <td class="td_1">
                    <p class="p_5">Bit</p>
                </td>
                <td class="td_2">
                    <p class="p_5">7</p>
                </td>
                <td class="td_2">
                    <p class="p_5">6</p>
                </td>
                <td class="td_2">
                    <p class="p_5">5</p>
                </td>
                <td class="td_2">
                    <p class="p_5">4</p>
                </td>
                <td class="td_2">
                    <p class="p_5">3</p>
                </td>
                <td class="td_2">
                    <p class="p_5">2</p>
                </td>
                <td class="td_2">
                    <p class="p_5">1</p>
                </td>
                <td class="td_2">
                    <p class="p_5">0</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p>&#160;</p>
                </td>
                <td class="td_4">
                    <p class="p_6">User Name Flag</p>
                </td>
                <td class="td_4">
                    <p class="p_6">Password Flag</p>
                </td>
                <td class="td_4">
                    <p class="p_6">Will Retain</p>
                </td>
                <td colspan="2" class="td_4">
                    <p class="p_6">Will QoS</p>
                </td>
                <td class="td_4">
                    <p class="p_6">Will Flag</p>
                </td>
                <td class="td_4">
                    <p class="p_6">Clean Session</p>
                </td>
                <td class="td_4">
                    <p class="p_6">Reserved</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p>byte 8</p>
                </td>
                <td class="td_4">
                    <p class="p_6">X</p>
                </td>
                <td class="td_4">
                    <p class="p_6">X</p>
                </td>
                <td class="td_4">
                    <p class="p_6">X</p>
                </td>
                <td class="td_4">
                    <p class="p_6">X</p>
                </td>
                <td class="td_4">
                    <p class="p_6">X</p>
                </td>
                <td class="td_4">
                    <p class="p_6">X</p>
                </td>
                <td class="td_4">
                    <p class="p_6">X</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
            </tr>
        </table>
        <p><span class="span_17">The Server MUST validate that the reserved flag in the CONNECT Control Packet is set to zero and disconnect the Client if it is not zero</span> <span class="span_14">[MQTT-3.1.2-]</span>.</p>
        <h4 class="Heading4"><a name="_Ref362965194"></a><a name="_Toc430865041"></a>3.1.2.4 Clean Session</h4>
        <p><span class="Refterm">Position:</span> bit 1 of the Connect Flags byte.</p>
        <p class="Footer">This bit specifies the handling of the Session state.<br />The Client and Server can store Session state to enable reliable messaging to continue across a sequence of Network Connections. This bit is used to control the lifetime of the Session state.</p>
        <p class="Footer"><span class="span_17">If CleanSession is set to 0, the Server MUST resume communications with the Client based on state from the current Session (as identified by the Client identifier). If there is no Session associated with the Client identifier the Server MUST create a new Session. The Client and Server MUST store the Session after the Client and Server are disconnected</span> <span class="span_14">[MQTT-3.1.2-4]</span>. <span class="span_17">After the disconnection of a Session that had CleanSession set to 0, the Server MUST store further QoS 1 and QoS 2 messages that match any subscriptions that the client had at the time of disconnection as part of the Session state</span> <a href="https://tools.oasis-open.org/issues/browse/MQTT-3" title="Keep alive interval grace period."><span class="span_14">[MQTT-3</span></a><span class="span_14">.1.2-5].</span> It MAY also store QoS 0 messages that meet the same criteria.</p>
        <p class="Footer">
            <div class="div_2">
                <p><span class="span_3">Solace Implementation Note</span>
                </p>
                <p class="p_1">When a connection with CleanSession set to 0 is disconnected:</p>
                <ul>
                    <li>The Solace server continues to store any currently queued and newly arriving QoS 1 and QoS 2 messages that match QoS 1 subscriptions.</li>
                    <li>The Solace server discards any currently queued QoS 0 messages and does not enqueue any QoS 0 messages that arrive after the session is disconnected.</li>
                </ul>
            </div>
        </p>
        <p><span class="span_17">If CleanSession is set to 1, the Client and Server MUST discard any previous Session and start a new one. This Session lasts as long as the Network Connection. State data associated with this Session MUST NOT be reused in any subsequent Session</span> <span class="span_14">[MQTT-3.1.2-6]</span>.</p>
        <p>The Session state in the Client consists of:</p>
        <ul>
            <li>QoS 1 and QoS 2 messages which have been sent to the Server, but have not been completely acknowledged.</li>
            <li>QoS 2 messages which have been received from the Server, but have not been completely acknowledged.</li>
        </ul>
        <p>The Session state in the Server consists of:</p>
        <ul>
            <li>The existence of a Session, even if the rest of the Session state is empty.</li>
            <li>The Client’s subscriptions.</li>
            <li>QoS 1 and QoS 2 messages which have been sent to the Client, but have not been completely acknowledged.</li>
            <li>QoS 1 and QoS 2 messages pending transmission to the Client.</li>
            <li>QoS 2 messages which have been received from the Client, but have not been completely acknowledged.</li>
            <li>Optionally, QoS 0 messages pending transmission to the Client.</li>
        </ul>
        <p>
            <div class="div_2">
                <p><span class="span_3">Solace Implementation Note</span>
                </p>
                <ul>
                    <li>When a connection is established with CleanSession set to 0, the Solace server stores all new subscriptions for all QoS classes even after the network connection disconnects.</li>
                    <li>When a Session (last connected with CleanSession set to 0) has no active connection, QoS 0 subscriptions are stored in the Session but they are inactive and do not cause messages to be enqueued. QoS 0 subscriptions cause messages to be enqueued automatically to the connection when the Session is re-connected with CleanSession set to 0.</li>
                </ul>
            </div>
        </p>
        <p><span class="span_17">Retained messages do not form part of the Session state in the Server, they MUST NOT be deleted when the Session ends</span> <span class="span_14">[MQTT-3.1.2.7]</span>.</p>
        <p>See Section <MadCap:xref href="Operational_behavior.htm#_Ref369188333" class="ParaTextOnly">Storing state</MadCap:xref> for details and limitations of stored state.</p>
        <p>When CleanSession is set to 1 the Client and Server need not process the deletion of state atomically.</p>
        <p class="p_10"><span class="Refterm">Non normative comment</span>
        </p>
        <p class="p_10">To ensure consistent state in the event of a failure, the Client should repeat its attempts to connect with CleanSession set to 1, until it connects successfully.</p>
        <p class="p_10"><span class="Refterm">Non normative comment</span>
        </p>
        <p class="p_10">Typically, a Client will always connect using CleanSession set to 0 or CleanSession set to 1 and not swap between the two values. The choice will depend on the application. A Client using CleanSession set to 1 will not receive old Application Messages and has to subscribe afresh to any topics that it is interested in each time it connects. A Client using CleanSession set to 0 will receive all QoS 1 or QoS 2 messages that were published while it was disconnected. Hence, to ensure that you do not lose messages while disconnected, use QoS 1 or QoS 2 with CleanSession set to 0.</p>
        <p class="p_12"><span class="Refterm">Non normative comment</span>
        </p>
        <p class="p_12">When a Client connects with CleanSession set to 0, it is requesting that the Server maintain its MQTT session state after it disconnects. Clients should only connect with CleanSession set to 0, if they intend to reconnect to the Server at some later point in time. When a Client has determined that it has no further use for the session it should do a final connect with CleanSession set to 1 and then disconnect.</p>
        <h4 class="Heading4"><a name="_Ref363648298"></a><a name="_Toc430865042"></a>3.1.2.5 Will Flag</h4>
        <p><span class="Refterm">Position:</span> bit 2 of the Connect Flags.</p>
        <p><span class="span_17">If the Will Flag is set to 1 this indicates that, if the Connect request is accepted, a Will Message MUST be stored on the Server and associated with the Network Connection. The Will Message MUST be published when the Network Connection is subsequently closed unless the Will Message has been deleted by the Server on receipt of a DISCONNECT Packet</span><span class="span_14"> [MQTT-3.1.2-8]</span>.
        </p>
        <p>Situations in which the Will Message is published include, but are not limited to:</p>
        <ul class="ul_5">
            <li class="li_3">An I/O error or network failure detected by the Server.</li>
            <li class="li_3">The Client fails to communicate within the Keep Alive time.</li>
            <li class="li_3">The Client closes the Network Connection without first sending a DISCONNECT Packet.</li>
            <li class="li_3">The Server closes the Network Connection because of a protocol error.</li>
        </ul>
        <p><span class="span_17">If the Will Flag is set to 1, the Will QoS and Will Retain fields in the Connect Flags will be used by the Server, and the Will Topic and Will Message fields MUST be present in the payload</span> <span class="span_14">[MQTT-3.1.2-9]</span>.</p>
        <p><span class="span_17">The Will Message MUST be removed from the stored Session state in the Server once it has been published or the Server has received a DISCONNECT packet from the Client</span> <span class="span_14">[MQTT-3.1.2-10]</span>.</p>
        <p><span class="span_17">If the Will Flag is set to 0 the Will QoS and Will Retain fields in the Connect Flags MUST be set to zero and the Will Topic and Will Message fields MUST NOT be present in the payload</span> <span class="span_14">[MQTT-3.1.2-11]</span>.</p>
        <p><span class="span_17">If the Will Flag is set to 0, a Will Message MUST NOT be published when this Network Connection ends</span> <span class="span_14">[MQTT-3.1.2-12].</span></p>
        <p>The Server SHOULD publish Will Messages promptly. In the case of a Server shutdown or failure the server MAY defer publication of Will Messages until a subsequent restart. If this happens there might be a delay between the time the server experienced failure and a Will Message being published.</p>
        <p>
            <div class="div_2">
                <p><span class="span_3">Solace Implementation Note</span>
                </p>
                <p class="p_1">The Solace server supports Will Flag set to 1 and associated procedures as described above. Will messages are limited to 1,600 bytes in size. If a CONNECT packet is received with a Will Message that exceeds this limit, then the connection is rejected and a log is raised.</p>
                <p class="p_1">The Solace server will not send Will messages under the following conditions:</p>
                <ul>
                    <li>an administrative shutdown</li>
                    <li>an event broker HA failover or restart</li>
                </ul>
            </div>
        </p>
        <h4 class="Heading4"><a name="_Toc430865043"></a>3.1.2.6 Will QoS</h4>
        <p><span class="Refterm">Position:</span> bits 4 and 3 of the Connect Flags.</p>
        <p>These two bits specify the QoS level to be used when publishing the Will Message.</p>
        <p><span class="span_17">If the Will Flag is set to 0, then the Will QoS MUST be set to 0</span><span class="apple-converted-space_2">&#160;(0x00)</span> <span class="span_14">[MQTT-3.1.2-13]</span>.</p>
        <p><span class="span_17">If the Will Flag is set to 1, the value of Will QoS can be 0 (0x00), 1 (0x01), or 2 (0x02). It MUST NOT be 3 (0x03) </span><span class="span_14">[MQTT-3.1.2-14]</span>.</p>
        <h4 class="Heading4"><a name="_Toc430865044"></a>3.1.2.7 Will Retain</h4>
        <p><span class="Refterm">Position:</span> bit 5 of the Connect Flags.</p>
        <p>
          This bit specifies if the Will Message is to be Retained when it is published.</p>
        <p><span class="span_17">If the Will Flag is set to 0, then the Will Retain Flag MUST be set to 0</span> <span class="span_14">[MQTT-3.1.2-15]</span>.</p>
        <p class="p_13">If the Will Flag is set to 1:</p>
        <ul>
            <li><span class="span_17">If Will Retain is set to 0, the Server MUST publish the Will Message as a non-retained message</span> <span class="span_14">[MQTT-3.1.2-16]</span>. </li>
            <li><span class="span_17">If Will Retain is set to 1, the Server MUST publish the Will Message as a retained message </span><span class="span_14">[MQTT-3&gt;.1.2-17.</span>
            </li>
        </ul>
        <p MadCap:conditions="Default.HideFromAllOutput">
            <div class="div_2" MadCap:conditions="Default.HideFromAllOutput">
                <p MadCap:conditions="Default.HideFromAllOutput"><span class="span_3">Solace Implementation Note</span>
                </p>
                <p class="p_1" MadCap:conditions="Default.HideFromAllOutput">The Solace server does not implement support for Retained messages. The Will Retain flag is ignored.<br /><br /></p>
            </div>
        </p>
        <h4 class="Heading4"><a name="_Toc430865045"></a>3.1.2.8 User Name Flag</h4>
        <p><span class="Refterm">Position:</span> bit 7 of the Connect Flags.</p>
        <p><span class="span_17">If the User Name Flag is set to 0, a user name MUST NOT be present in the payload</span> <span class="span_14">[MQTT-3.1.2-18]</span>.</p>
        <p><span class="span_17">If the User Name Flag is set to 1, a user name MUST be present in the payload</span> <span class="span_14">[MQTT-3.1.2-19]</span>.</p>
        <h4 class="Heading4"><a name="_Toc430865046"></a>3.1.2.9 Password Flag</h4>
        <p><span class="Refterm">Position:</span> bit 6 of the Connect Flags byte.</p>
        <p><span class="span_17">If the Password Flag is set to 1, a password MUST be present in the payload</span> <span class="span_14">[MQTT-3.1.2-21]</span>.</p>
        <p><span class="span_17">If the User Name Flag is set to 0, the Password Flag MUST be set to 0</span> <span class="span_14">[MQTT-3.1.2-22]</span>.</p>
        <h4 class="Heading4"><a name="_Ref363645900"></a><a name="_Toc430865047"></a>3.1.2.10 Keep Alive</h4>
        <p class="GraphicCaptionWord"><a name="_Toc430865048"></a>Figure 3.5 Keep Alive bytes</p>
        <table class="table_1">
            <col style="width: 53pt;" />
            <col style="width: 56pt;" />
            <col style="width: 54pt;" />
            <col style="width: 54pt;" />
            <col style="width: 54pt;" />
            <col style="width: 50pt;" />
            <col style="width: 52pt;" />
            <col style="width: 53pt;" />
            <col style="width: 54pt;" />
            <tr>
                <td class="td_1">
                    <p class="p_5">Bit</p>
                </td>
                <td class="td_2">
                    <p class="p_5">7</p>
                </td>
                <td class="td_2">
                    <p class="p_5">6</p>
                </td>
                <td class="td_2">
                    <p class="p_5">5</p>
                </td>
                <td class="td_2">
                    <p class="p_5">4</p>
                </td>
                <td class="td_2">
                    <p class="p_5">3</p>
                </td>
                <td class="td_2">
                    <p class="p_5">2</p>
                </td>
                <td class="td_2">
                    <p class="p_5">1</p>
                </td>
                <td class="td_2">
                    <p class="p_5">0</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p>byte 9</p>
                </td>
                <td colspan="8" class="td_4">
                    <p class="p_6">Keep Alive MSB</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p>byte 10</p>
                </td>
                <td colspan="8" class="td_4">
                    <p class="p_6">Keep Alive LSB</p>
                </td>
            </tr>
        </table>
        <p>The Keep Alive is a time interval measured in seconds. Expressed as a 16-bit word, it is the maximum time interval that is permitted to elapse between the point at which the Client finishes transmitting one Control Packet and the point it starts sending the next. <span class="span_17">It is the responsibility of the Client to ensure that the interval between Control Packets being sent does not exceed the Keep Alive value. In the absence of sending any other Control Packets, the Client MUST send a PINGREQ Packet</span> <span class="span_14">[MQTT-3.1.2-23]</span>.</p>
        <p>The Client can send PINGREQ at any time, irrespective of the Keep Alive value, and use the PINGRESP to determine that the network and the Server are working.</p>
        <p><span class="span_17">If the Keep Alive value is non-zero and the Server does not receive a Control Packet from the Client within one and a half times the Keep Alive time period, it MUST disconnect the Network Connection to the Client as if the network had failed</span> <span class="span_14">[MQTT-3.1.2-24]</span>.</p>
        <p>If a Client does not receive a PINGRESP Packet within a reasonable amount of time after it has sent a PINGREQ, it SHOULD close the Network Connection to the Server.</p>
        <p>A Keep Alive value of zero (0) has the effect of turning off the keep alive mechanism. This means that, in this case, the Server is not required to disconnect the Client on the grounds of inactivity.<br />Note that a Server is permitted to disconnect a Client that it determines to be inactive or non-responsive at any time, regardless of the Keep Alive value provided by that Client.</p>
        <p class="p_9">Non normative comment</p>
        <p class="p_10">The actual value of the Keep Alive is application specific; typically this is a few minutes. The maximum value is 18 hours 12 minutes and 15 seconds.</p>
        <p>
            <div class="div_2">
                <p><span class="span_3">Solace Implementation Note</span>
                </p>
                <p>A Solace PubSub+ event broker administrator can configure a minimum keepalive timeout value for clients. In this case, the Keep Alive provided by the client may be ignored in favor of the value configured on the broker. This could result in a client being disconnected after a lengthy period of inactivity even if it requested to be disconnected more aggressively. For more information, see <MadCap:xref href="../../Security/Configuring-Client-Profiles.htm#Configur4">Configuring a Minimum Keepalive Timeout</MadCap:xref>.</p>
            </div>
        </p>
        <h4 class="Heading4">3.1.2.11 Variable header non normative example</h4>
        <p class="GraphicCaptionWord"><a name="_Toc430865050"></a>Figure 3.6 - Variable header non normative example</p>
        <table class="table_1">
            <col style="width: 80pt;" />
            <col style="width: 186pt;" />
            <col style="width: 27pt;" />
            <col style="width: 27pt;" />
            <col style="width: 27pt;" />
            <col style="width: 27pt;" />
            <col style="width: 27pt;" />
            <col style="width: 27pt;" />
            <col style="width: 27pt;" />
            <col style="width: 27pt;" />
            <tr>
                <td class="td_1">
                    <p>&#160;</p>
                </td>
                <td class="td_2">
                    <p class="p_5">Description</p>
                </td>
                <td class="td_2">
                    <p class="p_5">7</p>
                </td>
                <td class="td_2">
                    <p class="p_5">6</p>
                </td>
                <td class="td_2">
                    <p class="p_5">5</p>
                </td>
                <td class="td_2">
                    <p class="p_5">4</p>
                </td>
                <td class="td_2">
                    <p class="p_5">3</p>
                </td>
                <td class="td_2">
                    <p class="p_5">2</p>
                </td>
                <td class="td_2">
                    <p class="p_5">1</p>
                </td>
                <td class="td_2">
                    <p class="p_5">0</p>
                </td>
            </tr>
            <tr>
                <td colspan="10" class="td_3">
                    <p>Protocol Name</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p>byte 1</p>
                </td>
                <td class="td_4">
                    <p>Length MSB (0)</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p>byte 2</p>
                </td>
                <td class="td_4">
                    <p>Length LSB (4)</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">1</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p>byte 3</p>
                </td>
                <td class="td_4">
                    <p class="p_6">‘M’</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">1</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">1</p>
                </td>
                <td class="td_4">
                    <p class="p_6">1</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">1</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p>byte 4</p>
                </td>
                <td class="td_4">
                    <p class="p_6">‘Q’</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">1</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">1</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">1</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p>byte 5</p>
                </td>
                <td class="td_4">
                    <p class="p_6">‘T’</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">1</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">1</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">1</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p>byte 6</p>
                </td>
                <td class="td_4">
                    <p class="p_6">‘T’</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">1</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">1</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">1</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
            </tr>
            <tr>
                <td colspan="10" class="td_3">
                    <p>Protocol Level</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p>&#160;</p>
                </td>
                <td class="td_4">
                    <p class="p_5">Description</p>
                </td>
                <td class="td_4">
                    <p class="p_5">7</p>
                </td>
                <td class="td_4">
                    <p class="p_5">6</p>
                </td>
                <td class="td_4">
                    <p class="p_5">5</p>
                </td>
                <td class="td_4">
                    <p class="p_5">4</p>
                </td>
                <td class="td_4">
                    <p class="p_5">3</p>
                </td>
                <td class="td_4">
                    <p class="p_5">2</p>
                </td>
                <td class="td_4">
                    <p class="p_5">1</p>
                </td>
                <td class="td_4">
                    <p class="p_5">0</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p>byte 7</p>
                </td>
                <td class="td_4">
                    <p>Level (4)</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">1</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
            </tr>
            <tr>
                <td colspan="10" class="td_3">
                    <p>Connect Flags</p>
                </td>
            </tr>
            <tr style="height: 140pt;">
                <td class="td_3">
                    <p>&#160;</p>
                    <p>&#160;</p>
                    <p>&#160;</p>
                    <p>&#160;</p>
                    <p>byte 8</p>
                </td>
                <td class="td_4">
                    <p>User Name Flag (1)</p>
                    <p>Password Flag (1)</p>
                    <p>Will Retain (0)</p>
                    <p>Will QoS (01)</p>
                    <p>Will Flag (1)</p>
                    <p>Clean Session (1)</p>
                    <p><span class="span_2">Reserved</span> (0)</p>
                </td>
                <td class="td_4">
                    <p class="p_6">&#160;</p>
                    <p class="p_6">&#160;</p>
                    <p class="p_6">&#160;</p>
                    <p class="p_6">&#160;</p>
                    <p class="p_6">1</p>
                </td>
                <td class="td_4">
                    <p class="p_6">&#160;</p>
                    <p class="p_6">&#160;</p>
                    <p class="p_6">&#160;</p>
                    <p class="p_6">&#160;</p>
                    <p class="p_6">1</p>
                </td>
                <td class="td_4">
                    <p class="p_6">&#160;</p>
                    <p class="p_6">&#160;</p>
                    <p class="p_6">&#160;</p>
                    <p class="p_6">&#160;</p>
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">&#160;</p>
                    <p class="p_6">&#160;</p>
                    <p class="p_6">&#160;</p>
                    <p class="p_6">&#160;</p>
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">&#160;</p>
                    <p class="p_6">&#160;</p>
                    <p class="p_6">&#160;</p>
                    <p class="p_6">&#160;</p>
                    <p class="p_6">1</p>
                </td>
                <td class="td_4">
                    <p class="p_6">&#160;</p>
                    <p class="p_6">&#160;</p>
                    <p class="p_6">&#160;</p>
                    <p class="p_6">&#160;</p>
                    <p class="p_6">1</p>
                </td>
                <td class="td_4">
                    <p class="p_6">&#160;</p>
                    <p class="p_6">&#160;</p>
                    <p class="p_6">&#160;</p>
                    <p class="p_6">&#160;</p>
                    <p class="p_6">1</p>
                </td>
                <td class="td_4">
                    <p class="p_6">&#160;</p>
                    <p class="p_6">&#160;</p>
                    <p class="p_6">&#160;</p>
                    <p class="p_6">&#160;</p>
                    <p class="p_6">0</p>
                </td>
            </tr>
            <tr>
                <td colspan="10" class="td_3">
                    <p>Keep Alive</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p>byte 9</p>
                </td>
                <td class="td_4">
                    <p>Keep Alive MSB (0)</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p>byte 10</p>
                </td>
                <td class="td_4">
                    <p>Keep Alive LSB (10)</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">1</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">1</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
            </tr>
        </table>
        <h3 class="Heading3"><a name="_Toc430864895"></a><a name="_Toc430865051"></a>3.1.3 Payload</h3>
        <p>The payload of the CONNECT Packet contains one or more length-prefixed fields, whose presence is determined by the flags in the variable header. <span class="span_17">These fields, if present, MUST appear in the order Client Identifier, Will Topic, Will Message, User Name, Password</span> <span class="span_14">[MQTT-3.1.3-1].</span></p>
        <h4 class="Heading4"><a name="_Toc430865052"></a>3.1.3.1 Client Identifier</h4>
        <p>The Client Identifier (ClientId) identifies the Client to the Server. <span class="span_17">Each Client connecting to the Server has a unique ClientId. The ClientId MUST be used by Clients and by Servers to identify state that they hold relating to this MQTT Session between the Client and the Server</span> <span class="span_14">[MQTT-3.1.3-2].</span></p>
        <p><span class="span_17">The Client Identifier (ClientId) MUST be present and MUST be the first field in the CONNECT packet payload</span> <span class="span_14">[MQTT-3.1.3-3]</span>.</p>
        <p><span class="span_17">The ClientId MUST be a UTF-8 encoded string as defined in Section </span>
            <MadCap:xref href="Introduction.htm#_Ref374438163" class="ParaTextOnly">UTF-8 encoded strings</MadCap:xref> <span class="span_14">[MQTT-3.1.3-4].</span>&#160;<br /><br /><span class="span_17">The Server MUST allow ClientIds which are between 1 and 23 UTF-8 encoded bytes in length, and that contain only the characters</span></p>
        <p><span class="span_17">"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"</span> <span class="span_14">[MQTT-3.1.3-5].</span></p>
        <p>The Server MAY allow ClientId’s that contain more than 23 encoded bytes. The Server MAY allow ClientId’s that contain characters not included in the list given above. <br /><br /><span class="span_17">A Server MAY allow a Client to supply a ClientId that has a length of zero bytes, however if it does so the Server MUST treat this as a special case and assign a unique ClientId to that Client. It MUST then process the CONNECT packet as if the Client had provided that unique ClientId</span> <span class="span_14">[MQTT-3.1.3-6].</span><br /><br /><span class="span_17">If the Client supplies a zero-byte ClientId, the Client MUST also set CleanSession to 1</span> <span class="span_14">[MQTT-3.1.3-7]</span>.<br /><br /><span class="span_17">If the Client supplies a zero-byte ClientId with CleanSession set to 0, the Server MUST respond to the CONNECT Packet with a CONNACK return code 0x02 (Identifier rejected) and then close the Network Connection</span> <span class="span_14">[MQTT-3.1.3-8].</span><br /><br /><span class="span_17">If the Server rejects the ClientId it MUST respond to the CONNECT Packet with a CONNACK return code 0x02 (Identifier rejected) and then close the Network Connection</span> <span class="span_14">[MQTT-3.1.3-9].</span></p>
        <p class="p_12"><span class="Refterm">Non normative comment</span>
        </p>
        <p class="p_10">A Client implementation could provide a convenience method to generate a random ClientId. Use of such a method should be actively discouraged when the CleanSession is set to 0.</p>
        <p>
            <div class="div_2">
                <p><span class="span_3">Solace Implementation Note</span>
                </p>
                <ul>
                    <li>ClientIds can be up to 128 bytes in length</li>
                    <li>ClientIds can contain any UTF-8 characters as allowed by Section 1.5.3</li>
                </ul>
            </div>
        </p>
        <h4 class="Heading4"><a name="_Toc430865053"></a>3.1.3.2 Will Topic</h4>
        <p>If the Will Flag is set to 1, the Will Topic is the next field in the payload. <span class="span_17">The Will Topic MUST be a UTF-8 encoded string as defined in Section </span><MadCap:xref href="Introduction.htm#_Ref374438163" class="ParaTextOnly">UTF-8 encoded strings</MadCap:xref> <span class="span_14">[MQTT-3.1.3-10]</span>.</p>
        <p>
            <div class="div_2">
                <p><span class="span_3">Solace Implementation Note</span>
                </p>
                <p><span class="span_4">A Will Topic must be valid as per Solace limitations described in section 2.7. Invalid topics will cause the CONNECT to be rejected or the Will message to be discarded if published.</span>
                </p>
            </div>
        </p>
        <h4 class="Heading4"><a name="_Toc430865054"></a>3.1.3.3 Will Message</h4>
        <p>If the Will Flag is set to 1 the Will Message is the next field in the payload. The Will Message defines the Application Message that is to be published to the Will Topic as described in Section <MadCap:xref href="#_Ref363648298" class="ParaTextOnly">Will Flag</MadCap:xref>. This field consists of a two byte length followed by the payload for the Will Message expressed as a sequence of zero or more bytes. The length gives the number of bytes in the data that follows and does not include the 2 bytes taken up by the length itself.</p>
        <p>When the Will Message is published to the Will Topic its payload consists only of the data portion of this field, not the first two length bytes.</p>
        <h4 class="Heading4"><a name="_Toc430865055"></a>3.1.3.4 User Name</h4>
        <p>If the User Name Flag is set to 1, this is the next field in the payload. <span class="span_17">The User Name MUST be a UTF-8 encoded string as defined in Section </span><MadCap:xref href="Introduction.htm#_Ref374438163" class="ParaTextOnly">UTF-8 encoded strings</MadCap:xref> <span class="span_14">[MQTT-3.1.3-11].</span> It can be used by the Server for authentication and authorization.</p>
        <p>
            <div class="div_2">
                <p><span class="span_3">Solace Implementation Note</span>
                </p>
                <p>If OAuth is used to authenticate the MQTT&#160;Client, then the Solace client user name used to establish connection policy is taken from an OAuth token (or introspection thereof) and the MQTT&#160;User Name in the CONNECT&#160;packet is ignored.</p>
                <p>If an SSL Client Certificate is used by the MQTT Client to authenticate, then the Solace client user name used to establish connection policy is taken from the certificate and the MQTT User Name in the CONNECT packet is ignored. This behavior is consistent across all Solace-supported protocols. MQTT is silent about the handling of the user name in the certificate versus user name in the CONNECT packet.</p>
                <p class="p_14">Otherwise </p>
                <ul>
                    <li>The Solace server maps the MQTT User Name to the Solace Client User Name for authentication purposes.</li>
                    <li>The Solace server supports the ability for MQTT User Names (that is,&#160; Solace Client User Names) to be predefined on the appliance and to map directly to a client profile and Access Control List (ACL) profile for authorization purposes.</li>
                    <li>The Solace server supports the ability for MQTT User Names to NOT be predefined on the appliance.&#160; In this case, the MQTT connection is associated with a client profile and ACL profile either through the default client user name (named “default”) or through an LDAP lookup of an LDAP group based on the MQTT User Name, which then maps to a client&#160; profile and an ACL profile.</li>
                    <li>The maximum supported length of the MQTT User Name is 189 characters – same as the Solace client user name.&#160; If the MQTT client provides a longer User Name, then the connection is rejected because the full user name cannot be passed to the appropriate authentication and authorization service.</li>
                </ul>
            </div>
        </p>
        <h4 class="Heading4"><a name="_Toc430865056"></a>3.1.3.5 Password</h4>
        <p>If the Password Flag is set to 1, this is the next field in the payload. The Password field contains 0 to 65535 bytes of binary data prefixed with a two byte length field which indicates the number of bytes used by the binary data (it does not include the two bytes taken up by the length field itself).</p>
        <p>
            <div class="div_2">
                <p><span class="span_3">Solace Implementation Note</span>
                </p>
                <p>The length of passwords that may be used are limited as follows:</p>
                <ul>
                    <li>For Solace PubSub+ software event brokers using software version 8.4.0 or greater, and for appliances using software version 8.3.0 or greater, MQTT clients that use LDAP servers to authenticate can use passwords that contain up to 64,000 characters, including null characters. Clients that use RADIUS authentication are limited to 128 characters.</li>
                    <li>For Solace Solace PubSub+ software event brokers using software versions prior to 8.4.0, and appliances using software versions prior to 8.3.0, the maximum supported password length for LDAP&#160;and RADIUS authentication is 128 characters. If the MQTT client provides a longer password, then the connection will be rejected because the full password cannot be passed to the appropriate authentication service. Passwords cannot contain binary data because null characters were treated as string terminators. </li>
                    <li>For clients that use the Solace internal database for authentication, the length of a password is limited to 128 characters.</li>
                </ul>
                <p>For broker versions 9.2.0 or greater, the password field is allowed to contain OAuth v2 tokens.  These tokens must be supplied in a very specific format:</p>
                <p>OAUTH~&lt;Provider&gt;~access_token</p>
                <p>For broker versions 9.3.0 or greater, the password field can also contain OpenID Connect tokens:</p>
                <p>OPENID~&lt;Provider&gt;~id_token~access_token</p>
                <p>In both cases, the password must start with a literal string "OAUTH~" or "OPENID~" and be followed by the name of the provider (which must match one of the configured providers on the broker, or it can be zero-length which indicates that we should use the configured default-provider on the broker), and then another tilde and then the tokens (separated by yet-another tilde).</p>
                <p>The access_token must be either a JWT (for broker versions 9.3.0 or greater) or a URL-encoded opaque token.</p>
            </div>
        </p>
        <p class="GraphicCaptionWord"><a name="_Toc430865057"></a>Figure 3.7 - Password bytes</p>
        <table class="table_1">
            <col style="width: 160pt;" />
            <col style="width: 40pt;" />
            <col style="width: 40pt;" />
            <col style="width: 40pt;" />
            <col style="width: 40pt;" />
            <col style="width: 40pt;" />
            <col style="width: 40pt;" />
            <col style="width: 40pt;" />
            <col style="width: 40pt;" />
            <tr>
                <td class="td_1">
                    <p class="p_5">Bit</p>
                </td>
                <td class="td_2">
                    <p class="p_5">7</p>
                </td>
                <td class="td_2">
                    <p class="p_5">6</p>
                </td>
                <td class="td_2">
                    <p class="p_5">5</p>
                </td>
                <td class="td_2">
                    <p class="p_5">4</p>
                </td>
                <td class="td_2">
                    <p class="p_5">3</p>
                </td>
                <td class="td_2">
                    <p class="p_5">2</p>
                </td>
                <td class="td_2">
                    <p class="p_5">1</p>
                </td>
                <td class="td_2">
                    <p class="p_5">0</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p>byte 1</p>
                </td>
                <td colspan="8" class="td_4">
                    <p class="p_6">Data length MSB</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p>byte 2</p>
                </td>
                <td colspan="8" class="td_4">
                    <p class="p_6">Data length LSB</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p>byte 3 ….</p>
                </td>
                <td colspan="8" class="td_4">
                    <p class="p_6">Data, if length &gt; 0.</p>
                </td>
            </tr>
        </table>
        <h3 class="Heading3"><a name="_Toc430864896"></a><a name="_Toc430865058"></a>3.1.4 Response</h3>
        <p>Note that a Server MAY support multiple protocols (including earlier versions of this protocol) on the same TCP port or other network endpoint. If the Server determines that the protocol is MQTT 3.1.1 then it validates the connection attempt as follows.</p>
        <ol>
            <li>If the Server does not receive a CONNECT Packet within a reasonable amount of time after the Network Connection is established, the Server SHOULD close the connection.</li>
            <li><span class="span_17">The Server MUST validate that the CONNECT Packet conforms to section </span>
                <MadCap:xref href="#_Ref363033523" class="ParaTextOnly">CONNECT – Client requests a connection to a Server </MadCap:xref><span class="span_17"> and close the Network Connection without sending a CONNACK if it does not conform</span> <span class="span_14">[MQTT-3.1.4-1].</span> <br /></li>
            <li>The Server MAY check that the contents of the CONNECT Packet meet any further restrictions and MAY perform authentication and authorization checks. If any of these checks fail, it SHOULD send an appropriate CONNACK response with a non-zero return code as described in section <MadCap:xref href="#_Ref362964779" class="ParaTextOnly">CONNACK – Acknowledge connection request</MadCap:xref> and it MUST close the Network Connection.</li>
        </ol>
        <p>If validation is successful the Server performs the following steps. </p>
        <ol>
            <li><span class="span_17">If the ClientId represents a Client already connected to the Server then the Server MUST disconnect the existing Client</span> <span class="span_14">[MQTT-3.1.4-2]</span>.
        <div class="div_2"><p><span class="span_3">Solace Implementation Note</span></p><p>By default, if the ClientId represents a Client already connected to the Solace PubSub+ event broker, then the existing Client connection will be disconnected. However, an administrator can use the no replace-duplicate-client-connections Authentication Config command in the Solace CLI to override this behavior to leave the existing client connected.</p></div></li>
            <li><span class="span_17">The Server MUST perform the processing of CleanSession that is described in section </span>
                <MadCap:xref href="#_Ref362965194" class="ParaTextOnly">Clean Session</MadCap:xref> <span class="span_14">[MQTT-3.1.4-3]</span>.</li>
            <li><span class="span_17">The Server MUST acknowledge the CONNECT Packet with a CONNACK Packet containing a zero return code</span> <span class="span_14">[MQTT-3.1.4-4]</span>.</li>
            <li>Start message delivery and keep alive monitoring.</li>
        </ol>
        <p>Clients are allowed to send further Control Packets immediately after sending a CONNECT Packet; Clients need not wait for a CONNACK Packet to arrive from the Server. <span class="span_17">If the Server rejects the CONNECT, it MUST NOT process any data sent by the Client after the CONNECT Packet</span> <span class="span_14">[MQTT-3.1.4-5]</span>.<br /></p>
        <p class="p_15"><span class="Refterm">Non normative comment</span>
            <br />Clients typically wait for a CONNACK Packet, However, if the Client exploits its freedom to send Control Packets before it receives a CONNACK,&#160;it might simplify the Client implementation as it does not have to police the connected state. The Client accepts that any data that it sends before it receives a CONNACK packet from the Server&#160;will not be processed if the Server rejects the connection.</p>
        <h2 class="Heading2"><a name="_Ref362964779"></a><a name="_Toc430864897"></a><a name="_Toc430865059"></a>3.2 CONNACK – Acknowledge connection request</h2>
        <p>The CONNACK Packet is the packet sent by the Server in response to a CONNECT Packet received from a Client. <span class="span_17">The first packet sent from the Server to the Client MUST be a CONNACK Packet</span> <span class="span_14">[MQTT-3.2.0-1]</span>.</p>
        <p>If the Client does not receive a CONNACK Packet from the Server within a reasonable amount of time, the Client SHOULD close the Network Connection. A "reasonable" amount of time depends on the type of application and the communications infrastructure.</p>
        <h3 class="Heading3"><a name="_Toc430864898"></a><a name="_Toc430865060"></a>3.2.1 Fixed header</h3>
        <p>The fixed header format is illustrated in <a href="#_Figure_3.8_%E2%80%93"><span class="Hyperlink">Figure 3.8 – CONNACK Packet fixed header</span></a>.</p>
        <p class="GraphicCaptionWord"><a name="_Figure_3.8_–"></a><a name="_Toc430865061"></a>Figure 3.8 – CONNACK Packet fixed header</p>
        <table class="table_1">
            <col style="width: 72pt;" />
            <col style="width: 51pt;" />
            <col style="width: 51pt;" />
            <col style="width: 51pt;" />
            <col style="width: 51pt;" />
            <col style="width: 51pt;" />
            <col style="width: 51pt;" />
            <col style="width: 51pt;" />
            <col style="width: 51pt;" />
            <tr>
                <td class="td_1">
                    <p class="p_5">Bit</p>
                </td>
                <td class="td_2">
                    <p class="p_5">7</p>
                </td>
                <td class="td_2">
                    <p class="p_5">6</p>
                </td>
                <td class="td_2">
                    <p class="p_5">5</p>
                </td>
                <td class="td_2">
                    <p class="p_5">4</p>
                </td>
                <td class="td_2">
                    <p class="p_5">3</p>
                </td>
                <td class="td_2">
                    <p class="p_5">2</p>
                </td>
                <td class="td_2">
                    <p class="p_5">1</p>
                </td>
                <td class="td_2">
                    <p class="p_5">0</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p>byte 1</p>
                </td>
                <td colspan="4" class="td_4">
                    <p class="p_6">MQTT Control Packet Type (2)</p>
                </td>
                <td colspan="4" class="td_4">
                    <p class="p_6">Reserved</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p>&#160;</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">1</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p>byte 2</p>
                </td>
                <td colspan="8" class="td_4">
                    <p class="p_6">Remaining Length (2)</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p>&#160;</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">1</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
            </tr>
        </table>
        <p><span class="Refterm">Remaining Length field</span>
        </p>
        <p>This is the length of the variable header. For the CONNACK Packet this has the value 2.</p>
        <h3 class="Heading3"><a name="_Toc430864899"></a><a name="_Toc430865062"></a>3.2.2 Variable header</h3>
        <p>The variable header format is illustrated in <MadCap:xref href="#_Ref383984522" class="ParaTextOnly">Figure 3.9 – CONNACK Packet variable header</MadCap:xref>.</p>
        <p class="GraphicCaptionWord"><a name="_Ref383984522"></a><a name="_Toc430865063"></a>Figure 3.9 – CONNACK Packet variable header</p>
        <table class="table_1">
            <col style="width: 80pt;" />
            <col style="width: 186pt;" />
            <col style="width: 27pt;" />
            <col style="width: 27pt;" />
            <col style="width: 27pt;" />
            <col style="width: 27pt;" />
            <col style="width: 27pt;" />
            <col style="width: 27pt;" />
            <col style="width: 27pt;" />
            <col style="width: 28pt;" />
            <tr>
                <td class="td_1">
                    <p class="p_6">&#160;</p>
                </td>
                <td class="td_2">
                    <p class="p_5">Description</p>
                </td>
                <td class="td_2">
                    <p class="p_5">7</p>
                </td>
                <td class="td_2">
                    <p class="p_5">6</p>
                </td>
                <td class="td_2">
                    <p class="p_5">5</p>
                </td>
                <td class="td_2">
                    <p class="p_5">4</p>
                </td>
                <td class="td_2">
                    <p class="p_5">3</p>
                </td>
                <td class="td_2">
                    <p class="p_5">2</p>
                </td>
                <td class="td_2">
                    <p class="p_5">1</p>
                </td>
                <td class="td_2">
                    <p class="p_5">0</p>
                </td>
            </tr>
            <tr>
                <td colspan="2" class="td_3">
                    <p>Connect Acknowledge Flags</p>
                </td>
                <td colspan="7" class="td_4">
                    <p>Reserved</p>
                </td>
                <td class="td_4">
                    <p>SP1</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p class="p_6">byte 1</p>
                </td>
                <td class="td_4">
                    <p>&#160;</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">X</p>
                </td>
            </tr>
            <tr>
                <td colspan="10" class="td_3">
                    <p>Connect Return code</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p class="p_6">byte 2</p>
                </td>
                <td class="td_4">
                    <p>&#160;</p>
                </td>
                <td class="td_4">
                    <p class="p_6">X</p>
                </td>
                <td class="td_4">
                    <p class="p_6">X</p>
                </td>
                <td class="td_4">
                    <p class="p_6">X</p>
                </td>
                <td class="td_4">
                    <p class="p_6">X</p>
                </td>
                <td class="td_4">
                    <p class="p_6">X</p>
                </td>
                <td class="td_4">
                    <p class="p_6">X</p>
                </td>
                <td class="td_4">
                    <p class="p_6">X</p>
                </td>
                <td class="td_4">
                    <p class="p_6">X</p>
                </td>
            </tr>
        </table>
        <h4 class="Heading4"><a name="_Toc430865064"></a>3.2.2.1 Connect Acknowledge Flags</h4>
        <p>Byte 1 is the "Connect Acknowledge Flags". Bits 7-1 are reserved and MUST be set to 0.<br />Bit 0 (SP<sup>1</sup>) is the Session Present Flag.</p>
        <h4 class="Heading4"><a name="_Toc430865065"></a>3.2.2.2 Session Present</h4>
        <p>Position: bit 0 of the Connect Acknowledge Flags.&#160;<br /><span class="span_17">If the Server accepts a connection with CleanSession set to 1, the Server MUST set Session Present to 0 in the CONNACK packet in addition to setting a zero return code in the CONNACK packet</span> <span class="span_14">[MQTT-3.2.2-1]</span>.<br /><span class="span_17">If the Server accepts a connection with CleanSession set to 0, the value set in Session Present depends on whether the Server already has stored Session state for the supplied client ID. If the Server has stored Session state, it MUST set Session&#160;Present to 1 in the CONNACK packet</span> <span class="span_14">[MQTT-3.2.2-2].</span> <span class="span_17">If the Server does not have stored Session state, it MUST set Session Present to 0 in the CONNACK packet. This is in addition to setting a zero return code in the CONNACK packet</span> <span class="span_14">[MQTT-3.2.2-3].</span><br />The Session Present flag enables a Client to establish whether the Client and Server have a consistent view about whether there is already stored Session state.&#160;<br /><br />Once the initial setup of a Session is complete, a Client with stored Session state will expect the Server to maintain its stored Session state. In the event that the value of Session Present received by the Client from the Server is not as expected, the Client can choose whether to proceed with the Session or to disconnect. The Client can discard the Session state on both Client and Server by disconnecting, connecting with Clean Session set to 1 and then disconnecting again.&#160;<br /><span class="span_17">If a server sends a CONNACK packet containing a non-zero return code it MUST set Session Present to 0</span> <span class="span_14">[MQTT-3.2.2-4].</span></p>
        <h4 class="Heading4"><a name="_Toc430865066"></a>3.2.2.3 Connect Return code</h4>
        <p>Byte 2 in the Variable header.</p>
        <p>The values for the one byte unsigned Connect Return code field are listed in <a href="#_Table_3.1_-"><span class="Hyperlink">Table 3.1 – Connect Return code values</span></a>. If a well formed CONNECT Packet is received by the Server, but the Server is unable to process it for some reason, then the Server SHOULD attempt to send a CONNACK packet containing the appropriate non-zero Connect return code from this table. <span class="span_17">If a server sends a CONNACK packet containing a non-zero return code it MUST then close the Network Connection</span> <span class="span_14">[MQTT-3.2.2-5]</span>.</p>
        <p class="GraphicCaptionWord"><a name="_Table_3.1_-"></a><a name="_Ref383985930"></a><a name="_Toc430865067"></a>Table 3.1 – Connect Return code values</p>
        <table class="table_1">
            <col style="width: 51pt;" />
            <col style="width: 215pt;" />
            <col style="width: 212pt;" />
            <tr>
                <td class="td_1">
                    <p class="p_5">Value</p>
                </td>
                <td class="td_5">
                    <p class="p_5">Return Code Response</p>
                </td>
                <td class="td_2">
                    <p class="p_5">Description</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p>0</p>
                </td>
                <td class="td_6">
                    <p>0x00 Connection Accepted</p>
                </td>
                <td class="td_4">
                    <p>Connection accepted</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p>1</p>
                </td>
                <td class="td_6">
                    <p>0x01 Connection Refused, unacceptable protocol version</p>
                </td>
                <td class="td_4">
                    <p>The Server does not support the level of the MQTT protocol requested by the Client</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p>2</p>
                </td>
                <td class="td_6">
                    <p>0x02 Connection Refused, identifier rejected</p>
                </td>
                <td class="td_4">
                    <p>The Client identifier is correct UTF-8 but not allowed by the Server</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p>3</p>
                </td>
                <td class="td_6">
                    <p>0x03 Connection Refused, Server unavailable</p>
                </td>
                <td class="td_4">
                    <p>The Network Connection has been made but the MQTT service is unavailable</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p>4</p>
                </td>
                <td class="td_6">
                    <p>0x04 Connection Refused, bad user name or password</p>
                </td>
                <td class="td_4">
                    <p>The data in the user name or password is malformed</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p>5</p>
                </td>
                <td class="td_6">
                    <p>0x05 Connection Refused, not authorized</p>
                </td>
                <td class="td_4">
                    <p>The Client is not authorized to connect</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p>6-255</p>
                </td>
                <td class="td_6">
                    <p>&#160;</p>
                </td>
                <td class="td_4">
                    <p>Reserved for future use</p>
                </td>
            </tr>
        </table>
        <p><span class="span_17">If none of the return codes listed in </span>
            <MadCap:xref href="#_Ref383985930" class="ParaTextOnly">Table 3.1 – Connect Return code values</MadCap:xref> <span class="span_17">are deemed applicable, then the Server MUST close the Network Connection without sending a CONNACK</span> <span class="span_14">[MQTT-3.2.2-6].</span></p>
        <h3 class="Heading3"><a name="_Toc430864900"></a><a name="_Toc430865068"></a>3.2.3 Payload</h3>
        <p>The CONNACK Packet has no payload.</p>
        <h2 class="Heading2"><a name="_Toc430864901"></a><a name="_Toc430865069"></a>3.3 PUBLISH – Publish message</h2>
        <p>A PUBLISH Control Packet is sent from a Client to a Server or from Server to a Client to transport an Application Message.</p>
        <h3 class="Heading3"><a name="_Ref384201650"></a><a name="_Toc430864902"></a><a name="_Toc430865070"></a>3.3.1 Fixed header</h3>
        <p>
            <MadCap:xref href="#_Ref383984666" class="ParaTextOnly">Figure 3.10 – PUBLISH Packet fixed header</MadCap:xref> illustrates the fixed header format:</p>
        <h5 class="Heading5"><a name="_Ref383984666"></a><a name="_Toc430865071"></a><span class="span_18">Figure 3.10 – PUBLISH Packet fixed header</span>
        </h5>
        <table class="table_1">
            <col style="width: 77pt;" />
            <col style="width: 39pt;" />
            <col style="width: 46pt;" />
            <col style="width: 52pt;" />
            <col style="width: 43pt;" />
            <col style="width: 51pt;" />
            <col style="width: 45pt;" />
            <col style="width: 52pt;" />
            <col style="width: 57pt;" />
            <tr>
                <td class="td_1">
                    <p class="p_5">Bit</p>
                </td>
                <td class="td_2">
                    <p class="p_5">7</p>
                </td>
                <td class="td_2">
                    <p class="p_5">6</p>
                </td>
                <td class="td_2">
                    <p class="p_5">5</p>
                </td>
                <td class="td_2">
                    <p class="p_5">4</p>
                </td>
                <td class="td_2">
                    <p class="p_5">3</p>
                </td>
                <td class="td_2">
                    <p class="p_5">2</p>
                </td>
                <td class="td_2">
                    <p class="p_5">1</p>
                </td>
                <td class="td_2">
                    <p class="p_5">0</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p>byte 1</p>
                </td>
                <td colspan="4" class="td_4">
                    <p class="p_6">MQTT Control Packet type (3)</p>
                </td>
                <td class="td_4">
                    <p class="p_6">DUP flag</p>
                </td>
                <td colspan="2" class="td_4">
                    <p class="p_6">QoS level</p>
                </td>
                <td class="td_4">
                    <p class="p_6">RETAIN</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p>&#160;</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">1</p>
                </td>
                <td class="td_4">
                    <p class="p_6">1</p>
                </td>
                <td class="td_4">
                    <p class="p_6">X</p>
                </td>
                <td class="td_4">
                    <p class="p_6">X</p>
                </td>
                <td class="td_4">
                    <p class="p_6">X</p>
                </td>
                <td class="td_4">
                    <p class="p_6">X</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p>byte 2</p>
                </td>
                <td colspan="8" class="td_4">
                    <p class="p_6">Remaining Length</p>
                </td>
            </tr>
        </table>
        <h4 class="Heading4"><a name="_Toc430865072"></a>3.3.1.1 DUP</h4>
        <p><span class="Refterm">Position:</span> byte 1, bit 3.</p>
        <p>If the DUP flag is set to 0, it indicates that this is the first occasion that the Client or Server has attempted to send this MQTT PUBLISH Packet. If the DUP flag is set to 1, it indicates that this might be re-delivery of an earlier attempt to send the Packet.</p>
        <p><span class="span_17">The DUP flag MUST be set to 1 by the Client or Server when it attempts to re-deliver a PUBLISH Packet</span> <span class="span_14">[MQTT-3.3.1.-1]</span>. <span class="span_17">The DUP flag MUST be set to 0 for all QoS 0 messages</span> <span class="span_14">[MQTT-3.3.1-2]</span>.</p>
        <p><span class="span_17">The value of the DUP flag from an incoming PUBLISH packet is not propagated when the PUBLISH Packet is sent to subscribers by the Server. The DUP flag in the outgoing PUBLISH packet is set independently to the incoming PUBLISH packet, its value MUST be determined solely by whether the outgoing PUBLISH packet is a retransmission</span> <span class="span_14">[MQTT-3.3.1-3]</span>.</p>
        <p class="p_12"><span class="Refterm">Non normative comment</span>
        </p>
        <p class="p_12">The recipient of a Control Packet that contains the DUP flag set to 1 cannot assume that it has seen an earlier copy of this packet.</p>
        <p class="p_12"><span class="Refterm">Non normative comment</span>
        </p>
        <p class="p_12">It is important to note that the DUP flag refers to the Control Packet itself and not to the Application Message that it contains. When using QoS 1, it is possible for a Client to receive a PUBLISH Packet with DUP flag set to 0 that contains a repetition of an Application Message that it received earlier, but with a different Packet Identifier. Section <MadCap:xref href="MQTT Control Packet format.htm#_Ref363041167" class="ParaTextOnly">Packet Identifier</MadCap:xref> provides more information about Packet Identifiers.</p>
        <h4 class="Heading4"><a name="_Toc430865073"></a>3.3.1.2 QoS</h4>
        <p><span class="Refterm">Position:</span> byte 1, bits 2-1.</p>
        <p>This field indicates the level of assurance for delivery of an Application Message. The QoS levels are listed in the <a href="#_Table_3.11_-"><span class="Hyperlink">Table 3.2 - QoS definitions</span></a>, below.</p>
        <p class="GraphicCaptionWord"><a name="_Table_3.11_-"></a><a name="_Toc430865074"></a>Table 3.2 - QoS definitions</p>
        <table class="table_1">
            <col style="width: 80pt;" />
            <col style="width: 38pt;" />
            <col style="width: 36pt;" />
            <col style="width: 185pt;" />
            <tr>
                <td class="td_1">
                    <p class="p_5">QoS value</p>
                </td>
                <td class="td_2">
                    <p class="p_5">Bit 2</p>
                </td>
                <td class="td_2">
                    <p class="p_5">bit 1</p>
                </td>
                <td class="td_2">
                    <p class="p_5">Description</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p>At most once delivery</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p class="p_6">1</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">1</p>
                </td>
                <td class="td_4">
                    <p>At least once delivery</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p class="p_6">2</p>
                </td>
                <td class="td_4">
                    <p class="p_6">1</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p>Exactly once delivery</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p class="p_6">-</p>
                </td>
                <td class="td_4">
                    <p class="p_6">1</p>
                </td>
                <td class="td_4">
                    <p class="p_6">1</p>
                </td>
                <td class="td_4">
                    <p>Reserved – must not be used</p>
                </td>
            </tr>
        </table>
        <p><span class="span_12">A PUBLISH Packet MUST NOT have both QoS bits set to 1. If a Server or Client receives a PUBLISH Packet which has both QoS bits set to 1 it MUST close the Network Connection</span>&#160;<span class="span_14">[MQTT-3.3.1-4]</span>.</p>
        <h4 class="Heading4"><a name="_Toc430865075"></a>3.3.1.3 RETAIN</h4>
        <p><span class="Refterm">Position:</span> byte 1, bit 0.</p>
        <p><span class="span_17">If the RETAIN flag is set to 1, in a PUBLISH Packet sent by a Client to a Server, the Server MUST store the Application Message and its QoS, so that it can be delivered to future subscribers whose subscriptions match its topic name</span> <span class="span_14">[MQTT-3.3.1-5]. When a new subscription is established, the last retained message, if any, on each matching topic name MUST be sent to the subscriber[MQTT-3.3.1-6]</span><span class="span_4">. If the Server receives a QoS 0 message with the RETAIN flag set to 1 it MUST discard any message previously retained for that topic. It SHOULD store the new QoS 0 message as the new retained message for that topic, but MAY choose to discard it at any time - if this happens there will be no retained message for that topic</span> <span class="span_14">[MQTT-3.3.1-7]</span>. See Section <MadCap:xref href="Operational_behavior.htm#_Ref369188333" class="ParaTextOnly">Storing state</MadCap:xref> for more information on storing state.</p>
        <p><span class="span_17">When sending a PUBLISH Packet to a Client the Server MUST set the RETAIN flag to 1 if a message is sent as a result of a new subscription being made by a Client</span> <span class="span_14">[MQTT-3.3.1-8]</span><span class="span_4">. It MUST set the RETAIN flag to 0 when a PUBLISH Packet is sent to a Client because it matches an established subscription regardless of how the flag was set in the message it received</span> <span class="span_14">[MQTT-3.3.1-9]</span>. </p>
        <p><span class="span_17">A PUBLISH Packet with a RETAIN flag set to 1 and a payload containing zero bytes will be processed as normal by the Server and sent to Clients with a subscription matching the topic name. Additionally any existing retained message with the same topic name MUST be removed and any future subscribers for the topic will not receive a retained message</span> <span class="span_14">[MQTT-3.3.1-10].</span> “As normal” means that the RETAIN flag is not set in the message received by existing Clients. <span class="span_17">A zero byte retained message MUST NOT be stored as a retained message on the Server</span> <span class="span_14">[MQTT-3.3.1-11]</span>.</p>
        <p><span class="span_17">If the RETAIN flag is 0, in a PUBLISH Packet sent by a Client to a Server, the Server MUST NOT store the message and MUST NOT remove or replace any existing retained message</span> <span class="span_14">[MQTT-3.3.1-12].</span></p>
        <p class="p_9">Non normative comment</p>
        <p class="p_10">Retained messages are useful where publishers send state messages on an irregular basis. A new subscriber will receive the most recent state.</p>
        <p class="p_9">Remaining Lenght field</p>
        <p class="p_10">This is the length of variable header plus the length of the payload.</p>
        <p class="p_10">&#160;</p>
        <div class="div_2">
            <p><span class="span_3">Solace Implementation Note</span>
            </p>
            <p>Support for MQTT&#160;Retained Messages is a Controlled Availability (CA) feature. Please <a href="../../get-support.htm" class="link-internal">contact Solace</a> to find out if this feature is supported for your use case.</p>
        </div>
        <h3 class="Heading3"><a name="_Toc430864903"></a><a name="_Toc430865076"></a>3.3.2 Variable header</h3>
        <p>The variable header contains the following fields in the order: Topic Name, Packet Identifier.</p>
        <h4 class="Heading4"><a name="_Toc430865077"></a>3.3.2.1 Topic Name</h4>
        <p>The Topic Name identifies the information channel to which payload data is published.</p>
        <p><span class="span_17">The Topic Name MUST be present as the first field in the PUBLISH Packet Variable header. It MUST be a UTF-8 encoded string</span> <span class="span_14">[MQTT-3.3.2-1]</span> as defined in section <MadCap:xref href="Introduction.htm#_Ref374438163" class="ParaTextOnly">UTF-8 encoded strings</MadCap:xref>.</p>
        <p><span class="span_17">The Topic Name in the PUBLISH Packet MUST NOT contain wildcard characters</span> <span class="span_14">[MQTT-3.3.2-2].</span></p>
        <p><span class="span_17">The Topic Name in a PUBLISH Packet sent by a Server to a subscribing Client MUST match the Subscription’s Topic Filter according to the matching process defined in Section </span>
            <MadCap:xref href="Operational_behavior.htm#_Ref374621403" class="ParaTextOnly">Topic Names and Topic Filters</MadCap:xref><span class="span_14">[MQTT-3.3.2-3].</span> However, since the Server is permitted to override the Topic Name, it might not be the same as the Topic Name in the original PUBLISH Packet.</p>
        <p>
            <div class="div_2">
                <p><span class="span_3">Solace Implementation Note</span>
                </p>
                <p class="p_1">Topics must comply with the limits discussed in <MadCap:xref href="../../Messaging/SMF-Topics.htm">SMF Topics</MadCap:xref>.&#160;Topics outside these bounds cause the connection to be closed.</p>
            </div>
        </p>
        <h4 class="Heading4"><a name="_Toc430865078"></a>3.3.2.2 Packet Identifier</h4>
        <p>The Packet Identifier field is only present in PUBLISH Packets where the QoS level is 1 or 2. Section <MadCap:xref href="MQTT Control Packet format.htm#_Ref363041167" class="ParaTextOnly">Packet Identifier</MadCap:xref> provides more information about Packet Identifiers.</p>
        <h4 class="Heading4"><a name="_Toc430865079"></a>3.3.2.3 Variable header non normative example</h4>
        <p><a href="#_Figure_3.11_-"><span class="Hyperlink">Figure 3.11 - Publish Packet variable header non normative example</span></a> illustrates an example variable header for the PUBLISH Packet briefly described in <a href="#_Table_3.2_-"><span class="Hyperlink">Table 3.3 - Publish Packet non normative example</span></a>.</p>
        <p class="GraphicCaptionWord"><a name="_Table_3.2_-"></a><a name="_Toc430865080"></a>Table 3.3 - Publish Packet non normative example</p>
        <table class="table_1">
            <col style="width: 95pt;" />
            <col style="width: 41pt;" />
            <tr>
                <td class="td_1">
                    <p class="p_5">Field</p>
                </td>
                <td class="td_2">
                    <p class="p_5">Value</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p>Topic Name</p>
                </td>
                <td class="td_4">
                    <p>a/b</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p>Packet Identifier</p>
                </td>
                <td class="td_4">
                    <p>10</p>
                </td>
            </tr>
        </table>
        <p class="GraphicCaptionWord"><a name="_Figure_3.11_-"></a><a name="_Toc430865081"></a>Figure 3.11 - Publish Packet variable header non normative example</p>
        <table class="table_1">
            <col style="width: 80pt;" />
            <col style="width: 186pt;" />
            <col style="width: 27pt;" />
            <col style="width: 27pt;" />
            <col style="width: 27pt;" />
            <col style="width: 27pt;" />
            <col style="width: 27pt;" />
            <col style="width: 27pt;" />
            <col style="width: 27pt;" />
            <col style="width: 27pt;" />
            <tr>
                <td class="td_1">
                    <p>&#160;</p>
                </td>
                <td class="td_2">
                    <p class="p_5">Description</p>
                </td>
                <td class="td_2">
                    <p class="p_5">7</p>
                </td>
                <td class="td_2">
                    <p class="p_5">6</p>
                </td>
                <td class="td_2">
                    <p class="p_5">5</p>
                </td>
                <td class="td_2">
                    <p class="p_5">4</p>
                </td>
                <td class="td_2">
                    <p class="p_5">3</p>
                </td>
                <td class="td_2">
                    <p class="p_5">2</p>
                </td>
                <td class="td_2">
                    <p class="p_5">1</p>
                </td>
                <td class="td_2">
                    <p class="p_5">0</p>
                </td>
            </tr>
            <tr>
                <td colspan="10" class="td_3">
                    <p class="p_6">Topic Name</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p>byte 1</p>
                </td>
                <td class="td_4">
                    <p>Length MSB (0)</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_7">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p>byte 2</p>
                </td>
                <td class="td_4">
                    <p>Length LSB (3)</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">1</p>
                </td>
                <td class="td_4">
                    <p class="p_6">1</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p>byte 3</p>
                </td>
                <td class="td_4">
                    <p>‘a’ (0x61)</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">1</p>
                </td>
                <td class="td_4">
                    <p class="p_6">1</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">1</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p>byte 4</p>
                </td>
                <td class="td_4">
                    <p>‘/’ (0x2F)</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">1</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">1</p>
                </td>
                <td class="td_4">
                    <p class="p_6">1</p>
                </td>
                <td class="td_4">
                    <p class="p_6">1</p>
                </td>
                <td class="td_4">
                    <p class="p_6">1</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p>byte 5</p>
                </td>
                <td class="td_4">
                    <p>‘b’ (0x62)</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">1</p>
                </td>
                <td class="td_4">
                    <p class="p_6">1</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">1</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
            </tr>
            <tr>
                <td colspan="10" class="td_3">
                    <p class="p_6">Packet Identifier</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p>byte 6</p>
                </td>
                <td class="td_4">
                    <p>Packet Identifier MSB (0)</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p>byte 7</p>
                </td>
                <td class="td_4">
                    <p>Packet Identifier LSB (10)</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">1</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">1</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
            </tr>
        </table>
        <h3 class="Heading3"><a name="_Toc430864904"></a><a name="_Toc430865082"></a>3.3.3 Payload</h3>
        <p>The Payload contains the Application Message that is being published. The content and format of the data is application specific. The length of the payload can be calculated by subtracting the length of the variable header from the Remaining Length field that is in the Fixed Header. It is valid for a PUBLISH Packet to contain a zero length payload.</p>
        <p>
            <div class="div_2">
                <p><span class="span_3">Solace Implementation Note</span>
                </p>
                <p>Solace has limits to the size of a message, depending on the message QoS and the type of event broker.</p>
                <p><span class="span_4">When a Solace server receives a message whose length + QoS combination exceeds these limits the connection is closed and an appropriate log is raised. Note that the Solace PubSub+ event broker administrator may configure lower limits than these.</span>
                </p>
            </div>
        </p>
        <h3 class="Heading3"><a name="_Toc430864905"></a><a name="_Toc430865083"></a>3.3.4 Response</h3>
        <p><span class="span_17">The receiver of a PUBLISH Packet MUST respond according to <a href="#_Table_3.3_-">Table 3.4 - Expected Publish Packet response</a> as determined by the QoS in the PUBLISH Packet</span> <span class="span_14">[MQTT-3.3.4-1].</span></p>
        <p class="GraphicCaptionWord"><a name="_Table_3.3_-"></a><a name="_Toc430865084"></a>Table 3.4 - Expected Publish Packet response</p>
        <table class="table_1">
            <col style="width: 77pt;" />
            <col style="width: 158pt;" />
            <tr>
                <td class="td_1">
                    <p class="p_5">QoS Level</p>
                </td>
                <td class="td_2">
                    <p class="p_5">Expected Response</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p>QoS 0</p>
                </td>
                <td class="td_4">
                    <p>None</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p>QoS 1</p>
                </td>
                <td class="td_4">
                    <p>PUBACK Packet</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p>QoS 2</p>
                </td>
                <td class="td_4">
                    <p>PUBREC Packet</p>
                </td>
            </tr>
        </table>
        <h3 class="Heading3"><a name="_Toc430864906"></a><a name="_Toc430865085"></a>3.3.5 Actions</h3>
        <p>The Client uses a PUBLISH Packet to send an Application Message to the Server, for distribution to Clients with matching subscriptions.</p>
        <p>The Server uses a PUBLISH Packet to send an Application Message to each Client which has a matching subscription.</p>
        <p>When Clients make subscriptions with Topic Filters that include wildcards, it is possible for a Client’s subscriptions to overlap so that a published message might match multiple filters. In this case <span class="span_17">the Server MUST deliver the message to the Client respecting the maximum QoS of all the matching subscriptions</span> <span class="span_14">[MQTT-3.3.5-1]</span>. In addition, the Server MAY deliver further copies of the message, one for each additional matching subscription and respecting the subscription’s QoS in each case.</p>
        <p>
            <div class="div_2">
                <p><span class="span_3">Solace Implementation Note</span>
                </p>
                <p class="p_1">When the Solace server delivers the message to the Client, it will respect the maximum QoS of all the matching subscriptions. In addition, if there is one or more QoS 1 subscriptions and one or more QoS 0 subscriptions that overlap, then the Solace server will deliver two instances of the message – one for each QoS level.</p>
            </div>
        </p>
        <p>The action of the recipient when it receives a PUBLISH Packet depends on the QoS level as described in Section <MadCap:xref href="Operational_behavior.htm#_Ref363045966" class="ParaTextOnly">Quality of Service levels and protocol flows</MadCap:xref>.</p>
        <p><span class="span_17">If a Server implementation does not authorize a PUBLISH to be performed by a Client; it has no way of informing that Client. It MUST either make a positive acknowledgement, according to the normal QoS rules, or close the Network Connection</span> <span class="span_14">[MQTT-3.3.5-2].</span> <div class="div_2"><p><span class="span_3">Solace Implementation Note</span></p><p class="p_1">The Solace server does not fully support the two-phase commit semantics of receiving a PUBLISH packet with QoS 2.&#160; However, to provide maximum interoperability, as allowed by the above section, the Solace server will respond to a PUBLISH packet with QoS 2 (that is, the Solace server will respond to a received QoS 2 PUBLISH packet with a PUBREC packet, and will respond to a received PUBREL packet with a PUBCOMP packet). This response effectively provides the same quality of service treatment as a QoS 1 message.</p></div></p>
        <h2 class="Heading2"><a name="_Toc430864907"></a><a name="_Toc430865086"></a>3.4 PUBACK – Publish acknowledgement </h2>
        <p>A PUBACK Packet is the response to a PUBLISH Packet with QoS level 1.</p>
        <h3 class="Heading3"><a name="_Toc430864908"></a><a name="_Toc430865087"></a>3.4.1 Fixed header</h3>
        <p class="GraphicCaptionWord"><a name="_Toc430865088"></a>Figure 3.12 - PUBACK Packet fixed header</p>
        <table class="table_1">
            <col style="width: 73pt;" />
            <col style="width: 51pt;" />
            <col style="width: 51pt;" />
            <col style="width: 51pt;" />
            <col style="width: 51pt;" />
            <col style="width: 51pt;" />
            <col style="width: 51pt;" />
            <col style="width: 51pt;" />
            <col style="width: 51pt;" />
            <tr>
                <td class="td_1">
                    <p class="p_5">Bit</p>
                </td>
                <td class="td_2">
                    <p class="p_5">7</p>
                </td>
                <td class="td_2">
                    <p class="p_5">6</p>
                </td>
                <td class="td_2">
                    <p class="p_5">5</p>
                </td>
                <td class="td_2">
                    <p class="p_5">4</p>
                </td>
                <td class="td_2">
                    <p class="p_5">3</p>
                </td>
                <td class="td_2">
                    <p class="p_5">2</p>
                </td>
                <td class="td_2">
                    <p class="p_5">1</p>
                </td>
                <td class="td_2">
                    <p class="p_5">0</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p>byte 1</p>
                </td>
                <td colspan="4" class="td_4">
                    <p class="p_6">MQTT Control Packet type (4)</p>
                </td>
                <td colspan="4" class="td_4">
                    <p class="p_6">Reserved</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p>&#160;</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">1</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p>byte 2</p>
                </td>
                <td colspan="8" class="td_4">
                    <p class="p_6">Remaining Length (2)</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p>&#160;</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">1</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
            </tr>
        </table>
        <p><span class="Refterm">Remaining Length field</span>
        </p>
        <p>This is the length of the variable header. For the PUBACK Packet this has the value 2.</p>
        <h3 class="Heading3"><a name="_Toc430864909"></a><a name="_Toc430865089"></a>3.4.2 Variable header</h3>
        <p>This contains the Packet Identifier from the PUBLISH Packet that is being acknowledged. </p>
        <p class="GraphicCaptionWord"><a name="_Toc430865090"></a>Figure 3.13 – PUBACK Packet variable header</p>
        <table class="table_1">
            <col style="width: 131pt;" />
            <col style="width: 44pt;" />
            <col style="width: 44pt;" />
            <col style="width: 44pt;" />
            <col style="width: 44pt;" />
            <col style="width: 44pt;" />
            <col style="width: 44pt;" />
            <col style="width: 44pt;" />
            <col style="width: 44pt;" />
            <tr>
                <td class="td_1">
                    <p class="p_5">Bit</p>
                </td>
                <td class="td_2">
                    <p class="p_5">7</p>
                </td>
                <td class="td_2">
                    <p class="p_5">6</p>
                </td>
                <td class="td_2">
                    <p class="p_5">5</p>
                </td>
                <td class="td_2">
                    <p class="p_5">4</p>
                </td>
                <td class="td_2">
                    <p class="p_5">3</p>
                </td>
                <td class="td_2">
                    <p class="p_5">2</p>
                </td>
                <td class="td_2">
                    <p class="p_5">1</p>
                </td>
                <td class="td_2">
                    <p class="p_5">0</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p>byte 1</p>
                </td>
                <td colspan="8" class="td_4">
                    <p class="p_6">Packet Identifier MSB</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p>byte 2</p>
                </td>
                <td colspan="8" class="td_4">
                    <p class="p_6">Packet Identifier LSB</p>
                </td>
            </tr>
        </table>
        <h3 class="Heading3"><a name="_Toc430864910"></a><a name="_Toc430865091"></a>3.4.3 Payload</h3>
        <p>The PUBACK Packet has no payload.</p>
        <h3 class="Heading3"><a name="_Toc430864911"></a><a name="_Toc430865092"></a>3.4.4 Actions</h3>
        <p>This is fully described in Section <MadCap:xref href="Operational_behavior.htm#_Ref384138490" class="ParaTextOnly">QoS 1: At least once delivery</MadCap:xref>.</p>
        <h2 class="Heading2"><a name="_Toc430864912"></a><a name="_Toc430865093"></a>3.5 PUBREC – Publish received (QoS 2 publish received, part 1)</h2>
        <p>A PUBREC Packet is the response to a PUBLISH Packet with QoS 2. It is the second packet of the QoS 2 protocol exchange.</p>
        <h3 class="Heading3"><a name="_Toc430864913"></a><a name="_Toc430865094"></a>3.5.1 Fixed header</h3>
        <p class="GraphicCaptionWord"><a name="_Toc430865095"></a>Figure 3.14 – PUBREC Packet fixed header</p>
        <table class="table_1">
            <col style="width: 77pt;" />
            <col style="width: 50pt;" />
            <col style="width: 50pt;" />
            <col style="width: 50pt;" />
            <col style="width: 50pt;" />
            <col style="width: 50pt;" />
            <col style="width: 50pt;" />
            <col style="width: 50pt;" />
            <col style="width: 50pt;" />
            <tr>
                <td class="td_1">
                    <p class="p_5">Bit</p>
                </td>
                <td class="td_2">
                    <p class="p_5">7</p>
                </td>
                <td class="td_2">
                    <p class="p_5">6</p>
                </td>
                <td class="td_2">
                    <p class="p_5">5</p>
                </td>
                <td class="td_2">
                    <p class="p_5">4</p>
                </td>
                <td class="td_2">
                    <p class="p_5">3</p>
                </td>
                <td class="td_2">
                    <p class="p_5">2</p>
                </td>
                <td class="td_2">
                    <p class="p_5">1</p>
                </td>
                <td class="td_2">
                    <p class="p_5">0</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p>byte 1</p>
                </td>
                <td colspan="4" class="td_4">
                    <p class="p_6">MQTT Control Packet type (5)</p>
                </td>
                <td colspan="4" class="td_4">
                    <p class="p_6">Reserved</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p>&#160;</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">1</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">1</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p>byte 2</p>
                </td>
                <td colspan="8" class="td_4">
                    <p class="p_6">Remaining Length (2)</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p class="p_6">&#160;</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">1</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
            </tr>
        </table>
        <p><span class="Refterm">Remaining Length field</span>
        </p>
        <p>This is the length of the variable header. For the PUBREC Packet this has the value 2.</p>
        <h3 class="Heading3"><a name="_Toc430864914"></a><a name="_Toc430865096"></a>3.5.2 Variable header</h3>
        <p>The variable header contains the Packet Identifier from the PUBLISH Packet that is being acknowledged. </p>
        <p class="GraphicCaptionWord"><a name="_Toc430865097"></a>Figure 3.15 – PUBREC Packet variable header</p>
        <table class="table_1">
            <col style="width: 131pt;" />
            <col style="width: 44pt;" />
            <col style="width: 44pt;" />
            <col style="width: 44pt;" />
            <col style="width: 44pt;" />
            <col style="width: 44pt;" />
            <col style="width: 44pt;" />
            <col style="width: 44pt;" />
            <col style="width: 44pt;" />
            <tr>
                <td class="td_1">
                    <p class="p_6"><span class="Refterm">Bit</span>
                    </p>
                </td>
                <td class="td_2">
                    <p class="p_5">7</p>
                </td>
                <td class="td_2">
                    <p class="p_5">6</p>
                </td>
                <td class="td_2">
                    <p class="p_5">5</p>
                </td>
                <td class="td_2">
                    <p class="p_5">4</p>
                </td>
                <td class="td_2">
                    <p class="p_5">3</p>
                </td>
                <td class="td_2">
                    <p class="p_5">2</p>
                </td>
                <td class="td_2">
                    <p class="p_5">1</p>
                </td>
                <td class="td_2">
                    <p class="p_5">0</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p>byte 1</p>
                </td>
                <td colspan="8" class="td_4">
                    <p class="p_6">Packet Identifier MSB</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p>byte 2</p>
                </td>
                <td colspan="8" class="td_4">
                    <p class="p_6">Packet Identifier LSB</p>
                </td>
            </tr>
        </table>
        <h3 class="Heading3"><a name="_Toc430864915"></a><a name="_Toc430865098"></a>3.5.3 Payload</h3>
        <p>The PUBREC Packet has no payload.</p>
        <h3 class="Heading3"><a name="_Toc430864916"></a><a name="_Toc430865099"></a>3.5.4 Actions</h3>
        <p>This is fully described in Section <MadCap:xref href="Operational_behavior.htm#_Ref384138602" class="ParaTextOnly">QoS 2: Exactly once delivery</MadCap:xref>.</p>
        <h2 class="Heading2"><a name="_Toc430864917"></a><a name="_Toc430865100"></a>3.6 PUBREL – Publish release (QoS 2 publish received, part 2)</h2>
        <p>A PUBREL Packet is the response to a PUBREC Packet. It is the third packet of the QoS 2 protocol exchange.</p>
        <h3 class="Heading3"><a name="_Toc430864918"></a><a name="_Toc430865101"></a>3.6.1 Fixed header</h3>
        <p class="GraphicCaptionWord"><a name="_Toc430865102"></a>Figure 3.16 – PUBREL Packet fixed header</p>
        <table class="table_1">
            <col style="width: 80pt;" />
            <col style="width: 50pt;" />
            <col style="width: 1pt;" />
            <col style="width: 50pt;" />
            <col style="width: 1pt;" />
            <col style="width: 50pt;" />
            <col style="width: 1pt;" />
            <col style="width: 50pt;" />
            <col style="width: 1pt;" />
            <col style="width: 50pt;" />
            <col style="width: 1pt;" />
            <col style="width: 50pt;" />
            <col style="width: 1pt;" />
            <col style="width: 50pt;" />
            <col style="width: 50pt;" />
            <tr>
                <td class="td_1">
                    <p class="p_5">Bit</p>
                </td>
                <td class="td_2">
                    <p class="p_5">7</p>
                </td>
                <td colspan="2" class="td_2">
                    <p class="p_5">6</p>
                </td>
                <td colspan="2" class="td_2">
                    <p class="p_5">5</p>
                </td>
                <td colspan="2" class="td_2">
                    <p class="p_5">4</p>
                </td>
                <td colspan="2" class="td_2">
                    <p class="p_5">3</p>
                </td>
                <td colspan="2" class="td_2">
                    <p class="p_5">2</p>
                </td>
                <td colspan="2" class="td_2">
                    <p class="p_5">1</p>
                </td>
                <td class="td_2">
                    <p class="p_5">0</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p>byte 1</p>
                </td>
                <td colspan="8" class="td_4">
                    <p class="p_6">MQTT Control Packet type (6)</p>
                </td>
                <td colspan="6" class="td_4">
                    <p class="p_6">Reserved</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p>&#160;</p>
                </td>
                <td colspan="2" class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td colspan="2" class="td_4">
                    <p class="p_6">1</p>
                </td>
                <td colspan="2" class="td_4">
                    <p class="p_6">1</p>
                </td>
                <td colspan="2" class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td colspan="2" class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td colspan="2" class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">1</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p>byte 2</p>
                </td>
                <td colspan="14" class="td_4">
                    <p class="p_6">Remaining Length (2)</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p>&#160;</p>
                </td>
                <td colspan="2" class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td colspan="2" class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td colspan="2" class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td colspan="2" class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td colspan="2" class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td colspan="2" class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">1</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
            </tr>
        </table>
        <p><span class="span_17">Bits 3,2,1 and 0 of the fixed header in the PUBREL Control Packet are reserved and MUST be set to 0,0,1 and 0 respectively. The Server MUST treat any other value as malformed and close the Network Connection</span> <span class="span_14">[MQTT-3.6.1-1].</span></p>
        <p><span class="Refterm">Remaining Length field</span>
        </p>
        <p>This is the length of the variable header. For the PUBREL Packet this has the value 2.</p>
        <h3 class="Heading3"><a name="_Toc430864919"></a><a name="_Toc430865103"></a>3.6.2 Variable header</h3>
        <p>The variable header contains the same Packet Identifier as the PUBREC Packet that is being acknowledged. </p>
        <p class="GraphicCaptionWord"><a name="_Toc430865104"></a>Figure 3.17 – PUBREL Packet variable header</p>
        <table class="table_1">
            <col style="width: 131pt;" />
            <col style="width: 44pt;" />
            <col style="width: 44pt;" />
            <col style="width: 44pt;" />
            <col style="width: 44pt;" />
            <col style="width: 44pt;" />
            <col style="width: 44pt;" />
            <col style="width: 44pt;" />
            <col style="width: 44pt;" />
            <tr>
                <td class="td_1">
                    <p class="p_5">Bit</p>
                </td>
                <td class="td_2">
                    <p class="p_5">7</p>
                </td>
                <td class="td_2">
                    <p class="p_5">6</p>
                </td>
                <td class="td_2">
                    <p class="p_5">5</p>
                </td>
                <td class="td_2">
                    <p class="p_5">4</p>
                </td>
                <td class="td_2">
                    <p class="p_5">3</p>
                </td>
                <td class="td_2">
                    <p class="p_5">2</p>
                </td>
                <td class="td_2">
                    <p class="p_5">1</p>
                </td>
                <td class="td_2">
                    <p class="p_5">0</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p>byte 1</p>
                </td>
                <td colspan="8" class="td_4">
                    <p class="p_6">Packet Identifier MSB</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p>byte 2</p>
                </td>
                <td colspan="8" class="td_4">
                    <p class="p_6">Packet Identifier LSB</p>
                </td>
            </tr>
        </table>
        <h3 class="Heading3"><a name="_Toc430864920"></a><a name="_Toc430865105"></a>3.6.3 Payload</h3>
        <p>The PUBREL Packet has no payload.</p>
        <h3 class="Heading3"><a name="_Toc430864921"></a><a name="_Toc430865106"></a>3.6.4 Actions</h3>
        <p>This is fully described in <MadCap:xref href="Operational_behavior.htm#_Ref384138602" class="ParaTextOnly">4.3.3 QoS 2: Exactly once delivery</MadCap:xref>.</p>
        <h2 class="Heading2"><a name="_Toc430864922"></a><a name="_Toc430865107"></a>3.7 PUBCOMP – Publish complete (QoS 2 publish received, part 3)</h2>
        <p>The PUBCOMP Packet is the response to a PUBREL Packet. It is the fourth and final packet of the QoS 2 protocol exchange.</p>
        <h3 class="Heading3"><a name="_Toc430864923"></a><a name="_Toc430865108"></a>3.7.1 Fixed header</h3>
        <p class="GraphicCaptionWord"><a name="_Toc430865109"></a>Figure 3.18 – PUBCOMP Packet fixed header</p>
        <table class="table_1">
            <col style="width: 72pt;" />
            <col style="width: 51pt;" />
            <col style="width: 51pt;" />
            <col style="width: 51pt;" />
            <col style="width: 51pt;" />
            <col style="width: 51pt;" />
            <col style="width: 51pt;" />
            <col style="width: 51pt;" />
            <col style="width: 51pt;" />
            <tr>
                <td class="td_1">
                    <p class="p_5">Bit</p>
                </td>
                <td class="td_2">
                    <p class="p_5">7</p>
                </td>
                <td class="td_2">
                    <p class="p_5">6</p>
                </td>
                <td class="td_2">
                    <p class="p_5">5</p>
                </td>
                <td class="td_2">
                    <p class="p_5">4</p>
                </td>
                <td class="td_2">
                    <p class="p_5">3</p>
                </td>
                <td class="td_2">
                    <p class="p_5">2</p>
                </td>
                <td class="td_2">
                    <p class="p_5">1</p>
                </td>
                <td class="td_2">
                    <p class="p_5">0</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p>byte 1</p>
                </td>
                <td colspan="4" class="td_4">
                    <p class="p_6">MQTT Control Packet type (7)</p>
                </td>
                <td colspan="4" class="td_4">
                    <p class="p_6">Reserved</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p>&#160;</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">1</p>
                </td>
                <td class="td_4">
                    <p class="p_6">1</p>
                </td>
                <td class="td_4">
                    <p class="p_6">1</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p>byte 2</p>
                </td>
                <td colspan="8" class="td_4">
                    <p class="p_6">Remaining Length (2)</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p>&#160;</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">1</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
            </tr>
        </table>
        <p><span class="Refterm">Remaining Length field</span>
        </p>
        <p>This is the length of the variable header. For the PUBCOMP Packet this has the value 2.</p>
        <h3 class="Heading3"><a name="_Toc430864924"></a><a name="_Toc430865110"></a>3.7.2 Variable header</h3>
        <p>The variable header contains the same Packet Identifier as the PUBREL Packet that is being acknowledged.</p>
        <p class="GraphicCaptionWord"><a name="_Toc430865111"></a>Figure 3.19 – PUBCOMP Packet variable header</p>
        <table class="table_1">
            <col style="width: 131pt;" />
            <col style="width: 44pt;" />
            <col style="width: 44pt;" />
            <col style="width: 44pt;" />
            <col style="width: 44pt;" />
            <col style="width: 44pt;" />
            <col style="width: 44pt;" />
            <col style="width: 44pt;" />
            <col style="width: 44pt;" />
            <tr>
                <td class="td_1">
                    <p class="p_5">Bit</p>
                </td>
                <td class="td_2">
                    <p class="p_5">7</p>
                </td>
                <td class="td_2">
                    <p class="p_5">6</p>
                </td>
                <td class="td_2">
                    <p class="p_5">5</p>
                </td>
                <td class="td_2">
                    <p class="p_5">4</p>
                </td>
                <td class="td_2">
                    <p class="p_5">3</p>
                </td>
                <td class="td_2">
                    <p class="p_5">2</p>
                </td>
                <td class="td_2">
                    <p class="p_5">1</p>
                </td>
                <td class="td_2">
                    <p class="p_5">0</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p>byte 1</p>
                </td>
                <td colspan="8" class="td_4">
                    <p class="p_6">Packet Identifier MSB</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p>byte 2</p>
                </td>
                <td colspan="8" class="td_4">
                    <p class="p_6">Packet Identifier LSB</p>
                </td>
            </tr>
        </table>
        <h3 class="Heading3"><a name="_Toc430864925"></a><a name="_Toc430865112"></a>3.7.3 Payload</h3>
        <p>The PUBCOMP Packet has no payload.</p>
        <h3 class="Heading3"><a name="_Toc430864926"></a><a name="_Toc430865113"></a>3.7.4 Actions</h3>
        <p>This is fully described in Section <MadCap:xref href="Operational_behavior.htm#_Ref384138602" class="ParaTextOnly">4.3.3 QoS 2: Exactly once delivery</MadCap:xref>.</p>
        <h2 class="Heading2"><a name="_Toc430864927"></a><a name="_Toc430865114"></a>3.8 SUBSCRIBE - Subscribe to topics</h2>
        <p>The SUBSCRIBE Packet is sent from the Client to the Server to create one or more Subscriptions. Each Subscription registers a Client’s interest in one or more Topics. The Server sends PUBLISH Packets to the Client in order to forward Application Messages that were published to Topics that match these Subscriptions. The SUBSCRIBE Packet also specifies (for each Subscription) the maximum QoS with which the Server can send Application Messages to the Client.</p>
        <h3 class="Heading3"><a name="_Toc430864928"></a><a name="_Toc430865115"></a>3.8.1 Fixed header</h3>
        <p class="GraphicCaptionWord"><a name="_Toc430865116"></a>Figure 3.20 – SUBSCRIBE Packet fixed header</p>
        <table class="table_1">
            <col style="width: 80pt;" />
            <col style="width: 50pt;" />
            <col style="width: 50pt;" />
            <col style="width: 50pt;" />
            <col style="width: 50pt;" />
            <col style="width: 50pt;" />
            <col style="width: 50pt;" />
            <col style="width: 50pt;" />
            <col style="width: 50pt;" />
            <tr>
                <td class="td_1">
                    <p class="p_5">Bit</p>
                </td>
                <td class="td_2">
                    <p class="p_5">7</p>
                </td>
                <td class="td_2">
                    <p class="p_5">6</p>
                </td>
                <td class="td_2">
                    <p class="p_5">5</p>
                </td>
                <td class="td_2">
                    <p class="p_5">4</p>
                </td>
                <td class="td_2">
                    <p class="p_5">3</p>
                </td>
                <td class="td_2">
                    <p class="p_5">2</p>
                </td>
                <td class="td_2">
                    <p class="p_5">1</p>
                </td>
                <td class="td_2">
                    <p class="p_5">0</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p>byte 1</p>
                </td>
                <td colspan="4" class="td_4">
                    <p class="p_6">MQTT Control Packet type (8)</p>
                </td>
                <td colspan="4" class="td_4">
                    <p class="p_17">Reserved</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p>&#160;</p>
                </td>
                <td class="td_4">
                    <p class="p_6">1</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">1</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p>byte 2</p>
                </td>
                <td colspan="8" class="td_4">
                    <p class="p_6">Remaining Length</p>
                </td>
            </tr>
        </table>
        <p>&#160;</p>
        <p><span class="span_17">Bits 3,2,1 and 0 of the fixed header of the SUBSCRIBE Control Packet are reserved and MUST be set to 0,0,1 and 0 respectively. The Server MUST treat any other value as malformed and close the Network Connection</span> <span class="span_14">[MQTT-3.8.1-1].</span></p>
        <p>&#160;</p>
        <p><span class="Refterm">Remaining Length field</span>
        </p>
        <p class="p_18">This is the length of variable header (2 bytes) plus the length of the payload.</p>
        <h3 class="Heading3"><a name="_Toc430864929"></a><a name="_Toc430865117"></a>3.82 Variable header</h3>
        <p>The variable header contains a Packet Identifier. Section <MadCap:xref href="MQTT Control Packet format.htm#_Ref363041167" class="ParaTextOnly">Packet Identifier</MadCap:xref> provides more information about Packet Identifiers.</p>
        <h4 class="Heading4"><a name="_Toc430865118"></a>3.8.2.1 Variable header non normative example</h4>
        <p class="p_19"><a href="#_Figure_3.21_-" class="Hyperlink">Figure 3.21</a> shows a variable header with Packet Identifier set to 10.</p>
        <p class="GraphicCaptionWord"><a name="_Figure_3.21_-"></a><a name="_Toc430865119"></a>Figure 3.21 - Variable header with a Packet Identifier of 10, Non normative example</p>
        <table class="table_1">
            <col style="width: 60pt;" />
            <col style="width: 179pt;" />
            <col style="width: 30pt;" />
            <col style="width: 30pt;" />
            <col style="width: 30pt;" />
            <col style="width: 30pt;" />
            <col style="width: 30pt;" />
            <col style="width: 30pt;" />
            <col style="width: 30pt;" />
            <col style="width: 30pt;" />
            <tr>
                <td class="td_1">
                    <p>&#160;</p>
                </td>
                <td class="td_2">
                    <p class="p_5">Description</p>
                </td>
                <td class="td_2">
                    <p class="p_5">7</p>
                </td>
                <td class="td_2">
                    <p class="p_5">6</p>
                </td>
                <td class="td_2">
                    <p class="p_5">5</p>
                </td>
                <td class="td_2">
                    <p class="p_5">4</p>
                </td>
                <td class="td_2">
                    <p class="p_5">3</p>
                </td>
                <td class="td_2">
                    <p class="p_5">2</p>
                </td>
                <td class="td_2">
                    <p class="p_5">1</p>
                </td>
                <td class="td_2">
                    <p class="p_5">0</p>
                </td>
            </tr>
            <tr>
                <td colspan="10" class="td_3">
                    <p>Packet Identifier</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p>byte 1 </p>
                </td>
                <td class="td_4">
                    <p>Packet Identifier MSB (0)</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p>byte 2</p>
                </td>
                <td class="td_4">
                    <p>Packet Identifier LSB (10)</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">1</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">1</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
            </tr>
        </table>
        <h3 class="Heading3"><a name="_Toc430864930"></a><a name="_Toc430865120"></a>3.8.3 Payload</h3>
        <p>The payload of a SUBSCRIBE Packet contains a list of Topic Filters indicating the Topics to which the Client wants to subscribe. <span class="span_17">The Topic Filters in a SUBSCRIBE packet payload MUST be UTF-8 encoded strings as defined in Section </span><MadCap:xref href="Introduction.htm#_Ref374438163" class="ParaTextOnly">UTF-8 encoded strings</MadCap:xref> <span class="span_14">[MQTT-3.8.3-1]</span>. A Server SHOULD support Topic filters that contain the wildcard characters defined in Section <a href="Operational_behavior.htm#_Topic_wildcards"><span class="Hyperlink">4.7.1</span></a>. <span class="span_17">If it chooses not to support topic filters that contain wildcard characters it MUST reject any Subscription request whose filter contains them</span> <span class="span_14">[MQTT-3.8.3-2]</span>. Each filter is followed by a byte called the Requested QoS. This gives the maximum QoS level at which the Server can send Application Messages to the Client. </p>
        <p><span class="span_17">The payload of a SUBSCRIBE packet MUST contain at least one Topic Filter / QoS pair. A SUBSCRIBE packet with no payload is a protocol violation</span> <span class="span_14">[MQTT-3.8.3-3]</span>. See section <MadCap:xref href="Operational_behavior.htm#_Ref381955543" class="ParaTextOnly">Handling errors </MadCap:xref> for information about handling errors. </p>
        <p>The requested maximum QoS field is encoded in the byte following each UTF-8 encoded topic name, and these Topic Filter / QoS pairs are packed contiguously.</p>
        <p class="GraphicCaptionWord"><a name="_Toc430865121"></a>Figure 3.22 – SUBSCRIBE Packet payload format</p>
        <table class="table_1">
            <col style="width: 95pt;" />
            <col style="width: 48pt;" />
            <col style="width: 48pt;" />
            <col style="width: 48pt;" />
            <col style="width: 48pt;" />
            <col style="width: 48pt;" />
            <col style="width: 48pt;" />
            <col style="width: 48pt;" />
            <col style="width: 48pt;" />
            <tr>
                <td class="td_1">
                    <p class="p_5">Description</p>
                </td>
                <td class="td_2">
                    <p class="p_5">7</p>
                </td>
                <td class="td_2">
                    <p class="p_5">6</p>
                </td>
                <td class="td_2">
                    <p class="p_5">5</p>
                </td>
                <td class="td_2">
                    <p class="p_5">4</p>
                </td>
                <td class="td_2">
                    <p class="p_5">3</p>
                </td>
                <td class="td_2">
                    <p class="p_5">2</p>
                </td>
                <td class="td_2">
                    <p class="p_5">1</p>
                </td>
                <td class="td_2">
                    <p class="p_5">0</p>
                </td>
            </tr>
            <tr>
                <td colspan="9" class="td_3">
                    <p>Topic Filter</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p>byte 1</p>
                </td>
                <td colspan="8" class="td_4">
                    <p class="p_6">Length MSB</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p>byte 2</p>
                </td>
                <td colspan="8" class="td_4">
                    <p class="p_6">Length LSB</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p>bytes 3..N</p>
                </td>
                <td colspan="8" class="td_4">
                    <p class="p_6">Topic Filter</p>
                </td>
            </tr>
            <tr>
                <td colspan="9" class="td_3">
                    <p>Requested QoS</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p>&#160;</p>
                </td>
                <td colspan="6" class="td_4">
                    <p class="p_6">Reserved</p>
                </td>
                <td colspan="2" class="td_4">
                    <p class="p_6">QoS</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p>byte N+1</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">X</p>
                </td>
                <td class="td_4">
                    <p class="p_6">X</p>
                </td>
            </tr>
        </table>
        <p>The upper 6 bits of the Requested QoS byte are not used in the current version of the protocol. They are reserved for future use. <span class="span_17">The Server MUST treat a SUBSCRIBE packet as malformed and close the Network Connection if any of Reserved bits in the payload are non-zero, or QoS is not 0,1 or 2</span> <span class="span_14">[MQTT-3-8.3-4].</span></p>
        <p>
            <div class="div_2">
                <p><span class="span_3">Solace Implementation Note</span>
                </p>
                <ul>
                    <li>Topics must comply with the limits discussed in <MadCap:xref href="../../Messaging/SMF-Topics.htm">SMF Topics</MadCap:xref>. Topics outside these bounds are rejected with a SUBACK containing the value 0x80 to indicate failure.</li>
                    <li>SUBSCRIBE packets can contain at most 1,024 Topic Filters. Exceeding this limit will cause the connection to be closed.</li>
                </ul>
            </div>
        </p>
        <h4 class="Heading4"><a name="_Toc430865122"></a>3.8.3.1 Payload non normative example</h4>
        <p class="p_20"><a href="#_Figure_3.23_-"><span class="Hyperlink">Figure 3.23 - Payload byte format non normative example</span></a> <span class="span_4">shows the payload for the SUBSCRIBE Packet briefly described in</span> <a href="#_Table_3.4_-"><span class="Hyperlink">Table 3.5 - Payload non normative example.</span></a></p>
        <p class="GraphicCaptionWord"><a name="_Table_3.4_-"></a><a name="_Toc430865123"></a>Table 3.5 - Payload non normative example</p>
        <table class="table_1">
            <col style="width: 91pt;" />
            <col style="width: 41pt;" />
            <tr>
                <td class="td_1">
                    <p>Topic Name</p>
                </td>
                <td class="td_2">
                    <p>“a/b”</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p>Requested QoS</p>
                </td>
                <td class="td_4">
                    <p>0x01</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p>Topic Name</p>
                </td>
                <td class="td_4">
                    <p>“c/d”</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p>Requested QoS</p>
                </td>
                <td class="td_4">
                    <p>0x02</p>
                </td>
            </tr>
        </table>
        <p class="GraphicCaptionWord"><a name="_Figure_3.23_-"></a><a name="_Toc430865124"></a>Figure 3.23 - Payload byte format non normative example</p>
        <table class="table_1">
            <col style="width: 90pt;" />
            <col style="width: 150pt;" />
            <col style="width: 30pt;" />
            <col style="width: 30pt;" />
            <col style="width: 30pt;" />
            <col style="width: 30pt;" />
            <col style="width: 30pt;" />
            <col style="width: 30pt;" />
            <col style="width: 30pt;" />
            <col style="width: 30pt;" />
            <tr>
                <td class="td_1">
                    <p class="p_6">&#160;</p>
                </td>
                <td class="td_2">
                    <p class="p_5">Description</p>
                </td>
                <td class="td_2">
                    <p class="p_5">7</p>
                </td>
                <td class="td_2">
                    <p class="p_5">6</p>
                </td>
                <td class="td_2">
                    <p class="p_5">5</p>
                </td>
                <td class="td_2">
                    <p class="p_5">4</p>
                </td>
                <td class="td_2">
                    <p class="p_5">3</p>
                </td>
                <td class="td_2">
                    <p class="p_5">2</p>
                </td>
                <td class="td_2">
                    <p class="p_5">1</p>
                </td>
                <td class="td_2">
                    <p class="p_5">0</p>
                </td>
            </tr>
            <tr>
                <td colspan="10" class="td_3">
                    <p>Topic Filter</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p>byte 1</p>
                </td>
                <td class="td_4">
                    <p class="p_6">Length MSB (0)</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p>byte 2</p>
                </td>
                <td class="td_4">
                    <p class="p_6">Length LSB (3)</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">1</p>
                </td>
                <td class="td_4">
                    <p class="p_6">1</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p>byte 3</p>
                </td>
                <td class="td_4">
                    <p class="p_6">‘a’ (0x61)</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">1</p>
                </td>
                <td class="td_4">
                    <p class="p_6">1</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">1</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p>byte 4</p>
                </td>
                <td class="td_4">
                    <p class="p_6">‘/’ (0x2F)</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">1</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">1</p>
                </td>
                <td class="td_4">
                    <p class="p_6">1</p>
                </td>
                <td class="td_4">
                    <p class="p_6">1</p>
                </td>
                <td class="td_4">
                    <p class="p_6">1</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p>byte 5</p>
                </td>
                <td class="td_4">
                    <p class="p_6">‘b’ (0x62)</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">1</p>
                </td>
                <td class="td_4">
                    <p class="p_6">1</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">1</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
            </tr>
            <tr>
                <td colspan="10" class="td_3">
                    <p>Requested QoS</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p>byte 6</p>
                </td>
                <td class="td_4">
                    <p class="p_6">Requested QoS(1)</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">1</p>
                </td>
            </tr>
            <tr>
                <td colspan="10" class="td_3">
                    <p>Topic Filter</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p>byte 7</p>
                </td>
                <td class="td_4">
                    <p class="p_6">Length MSB (0)</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p>byte 8</p>
                </td>
                <td class="td_4">
                    <p class="p_6">Length LSB (3)</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">1</p>
                </td>
                <td class="td_4">
                    <p class="p_6">1</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p>byte 9</p>
                </td>
                <td class="td_4">
                    <p class="p_6">‘c’ (0x63)</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">1</p>
                </td>
                <td class="td_4">
                    <p class="p_6">1</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">1</p>
                </td>
                <td class="td_4">
                    <p class="p_6">1</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p>byte 10</p>
                </td>
                <td class="td_4">
                    <p class="p_6">‘/’ (0x2F)</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">1</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">1</p>
                </td>
                <td class="td_4">
                    <p class="p_6">1</p>
                </td>
                <td class="td_4">
                    <p class="p_6">1</p>
                </td>
                <td class="td_4">
                    <p class="p_6">1</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p>byte 11</p>
                </td>
                <td class="td_4">
                    <p class="p_6">‘d’ (0x64)</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">1</p>
                </td>
                <td class="td_4">
                    <p class="p_6">1</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">1</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
            </tr>
            <tr>
                <td colspan="10" class="td_3">
                    <p>Requested QoS</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p>byte 12</p>
                </td>
                <td class="td_4">
                    <p class="p_6">Requested QoS(2)</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">1</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
            </tr>
        </table>
        <h3 class="Heading3"><a name="_Toc430864931"></a><a name="_Toc430865125"></a>3.8.4 Response</h3>
        <p><span class="span_17">When the Server receives a SUBSCRIBE Packet from a Client, the Server MUST respond with a SUBACK Packet</span> <span class="span_14">[MQTT-3.8.4-1]</span>. <span class="span_17">The SUBACK Packet MUST have the same Packet Identifier as the SUBSCRIBE Packet that it is acknowledging</span> <span class="span_14">[MQTT-3.8.4-2]</span>.</p>
        <p>The Server is permitted to start sending PUBLISH packets matching the Subscription before the Server sends the SUBACK Packet.</p>
        <p><span class="span_17">If a Server receives a SUBSCRIBE Packet containing a Topic Filter that is identical to an existing Subscription’s Topic Filter then it MUST completely replace that existing Subscription with a new Subscription. The Topic Filter in the new Subscription will be identical to that in the previous Subscription, although its maximum QoS value could be different. Any existing retained messages matching the Topic Filter MUST be re-sent, but the flow of publications MUST NOT be interrupted</span> <span class="span_14">[MQTT-3.8.4-3]</span>.</p>
        <p>Where the Topic Filter is not identical to any existing Subscription’s filter, a new Subscription is created and all matching retained messages are sent.</p>
        <p><span class="span_17">If a Server receives a SUBSCRIBE packet that contains multiple Topic Filters it MUST handle that packet as if it had received a sequence of multiple SUBSCRIBE packets, except that it combines their responses into a single SUBACK response</span> <span class="span_14">[MQTT-3.8.4-4]</span>.</p>
        <p><span class="span_17">The SUBACK Packet sent by the Server to the Client MUST contain a return code for each Topic Filter/QoS pair. This return code MUST either show the maximum QoS that was granted for that Subscription or indicate that the subscription failed</span> <span class="span_14">[MQTT-3.8.4-5].</span> <span class="span_17">The Server might grant a lower maximum QoS than the subscriber requested. The QoS of Payload Messages sent in response to a Subscription MUST be the minimum of the QoS of the originally published message and the maximum QoS granted by the Server. The server is permitted to send duplicate copies of a message to a subscriber in the case where the original message was published with QoS 1 and the maximum QoS granted was QoS 0</span> <span class="span_14">[MQTT-3.8.4-6]</span>.</p>
        <p class="p_12"><span class="Refterm">Non normative examples</span>
        </p>
        <p class="p_12">If a subscribing Client has been granted maximum QoS 1 for a particular Topic Filter, then a QoS 0 Application Message matching the filter is delivered to the Client at QoS 0. This means that at most one copy of the message is received by the Client. On the other hand a QoS 2 Message published to the same topic is downgraded by the Server to QoS 1 for delivery to the Client, so that Client might receive duplicate copies of the Message.&#160;<br /></p>
        <p class="p_12">If the subscribing Client has been granted maximum QoS 0, then an Application Message originally published as QoS 2 might get lost on the hop to the Client, but the Server should never send a duplicate of that Message. A QoS 1 Message published to the same topic might either get lost or duplicated on its transmission to that Client.</p>
        <p class="p_21">Non normative comment</p>
        <p class="p_12">Subscribing to a Topic Filter at QoS 2 is equivalent to saying "I would like to receive Messages matching this filter at the QoS with which they were published". This means a publisher is responsible for determining the maximum QoS a Message can be delivered at, but a subscriber is able to require that the Server downgrades the QoS to one more suitable for its usage. </p>
        <h2 class="Heading2"><a name="_Toc430864932"></a><a name="_Toc430865126"></a>3.9 SUBACK – Subscribe acknowledgement</h2>
        <p>A SUBACK Packet is sent by the Server to the Client to confirm receipt and processing of a SUBSCRIBE Packet.</p>
        <p>A SUBACK Packet contains a list of return codes, that specify the maximum QoS level that was granted in each Subscription that was requested by the SUBSCRIBE.</p>
        <h3 class="Heading3"><a name="_Toc430864933"></a><a name="_Toc430865127"></a>3.9.1 Fixed header</h3>
        <p class="GraphicCaptionWord"><a name="_Toc430865128"></a>Figure 3.24 – SUBACK Packet fixed header</p>
        <table class="table_1">
            <col style="width: 77pt;" />
            <col style="width: 50pt;" />
            <col style="width: 50pt;" />
            <col style="width: 50pt;" />
            <col style="width: 50pt;" />
            <col style="width: 50pt;" />
            <col style="width: 50pt;" />
            <col style="width: 50pt;" />
            <col style="width: 50pt;" />
            <tr>
                <td class="td_1">
                    <p class="p_5">Bit</p>
                </td>
                <td class="td_2">
                    <p class="p_5">7</p>
                </td>
                <td class="td_2">
                    <p class="p_5">6</p>
                </td>
                <td class="td_2">
                    <p class="p_5">5</p>
                </td>
                <td class="td_2">
                    <p class="p_5">4</p>
                </td>
                <td class="td_2">
                    <p class="p_5">3</p>
                </td>
                <td class="td_2">
                    <p class="p_5">2</p>
                </td>
                <td class="td_2">
                    <p class="p_5">1</p>
                </td>
                <td class="td_2">
                    <p class="p_5">0</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p>byte 1</p>
                </td>
                <td colspan="4" class="td_4">
                    <p class="p_6">MQTT Control Packet type (9)</p>
                </td>
                <td colspan="4" class="td_4">
                    <p class="p_6">Reserved</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p>&#160;</p>
                </td>
                <td class="td_4">
                    <p class="p_6">1</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">1</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p>byte 2</p>
                </td>
                <td colspan="8" class="td_4">
                    <p class="p_6">Remaining Length</p>
                </td>
            </tr>
        </table>
        <p><span class="Refterm">Remaining Length field</span>
        </p>
        <p class="p_18">This is the length of variable header (2 bytes) plus the length of the payload.</p>
        <h3 class="Heading3"><a name="_Toc430864934"></a><a name="_Toc430865129"></a>3.9.2 Variable header</h3>
        <p>The variable header contains the Packet Identifier from the SUBSCRIBE Packet that is being acknowledged. Figure 3.25 - variable header format below illustrates the format of the variable header.</p>
        <p class="GraphicCaptionWord"><a name="_Figure_3.25_-"></a><a name="_Toc430865130"></a>Figure 3.25 – SUBACK Packet variable header</p>
        <table class="table_1">
            <col style="width: 131pt;" />
            <col style="width: 44pt;" />
            <col style="width: 44pt;" />
            <col style="width: 44pt;" />
            <col style="width: 44pt;" />
            <col style="width: 44pt;" />
            <col style="width: 44pt;" />
            <col style="width: 44pt;" />
            <col style="width: 44pt;" />
            <tr>
                <td class="td_1">
                    <p class="p_5">Bit</p>
                </td>
                <td class="td_2">
                    <p class="p_5">7</p>
                </td>
                <td class="td_2">
                    <p class="p_5">6</p>
                </td>
                <td class="td_2">
                    <p class="p_5">5</p>
                </td>
                <td class="td_2">
                    <p class="p_5">4</p>
                </td>
                <td class="td_2">
                    <p class="p_5">3</p>
                </td>
                <td class="td_2">
                    <p class="p_5">2</p>
                </td>
                <td class="td_2">
                    <p class="p_5">1</p>
                </td>
                <td class="td_2">
                    <p class="p_5">0</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p>byte 1</p>
                </td>
                <td colspan="8" class="td_4">
                    <p class="p_6">Packet Identifier MSB</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p>byte 2</p>
                </td>
                <td colspan="8" class="td_4">
                    <p class="p_6">Packet Identifier LSB</p>
                </td>
            </tr>
        </table>
        <h3 class="Heading3"><a name="_Toc430864935"></a><a name="_Toc430865131"></a>3.9.3 Payload</h3>
        <p>The payload contains a list of return codes. Each return code corresponds to a Topic Filter in the SUBSCRIBE Packet being acknowledged. <span class="span_17">The order of return codes in the SUBACK Packet MUST match the order of  SUBSCRIBE Packet</span><span class="span_14">[MQTT-3.9.3-1]</span>.</p>
        <p>Figure 3.26 - Payload format below illustrates the Return Code field encoded in a byte in the Payload.</p>
        <p class="GraphicCaptionWord"><a name="_Figure_3.26_-"></a><a name="_Toc430865132"></a>Figure 3.26 – SUBACK Packet payload format</p>
        <table class="table_1">
            <col style="width: 95pt;" />
            <col style="width: 48pt;" />
            <col style="width: 48pt;" />
            <col style="width: 48pt;" />
            <col style="width: 48pt;" />
            <col style="width: 48pt;" />
            <col style="width: 48pt;" />
            <col style="width: 48pt;" />
            <col style="width: 48pt;" />
            <tr>
                <td class="td_1">
                    <p class="p_5">Bit</p>
                </td>
                <td class="td_2">
                    <p class="p_5">7</p>
                </td>
                <td class="td_2">
                    <p class="p_5">6</p>
                </td>
                <td class="td_2">
                    <p class="p_5">5</p>
                </td>
                <td class="td_2">
                    <p class="p_5">4</p>
                </td>
                <td class="td_2">
                    <p class="p_5">3</p>
                </td>
                <td class="td_2">
                    <p class="p_5">2</p>
                </td>
                <td class="td_2">
                    <p class="p_5">1</p>
                </td>
                <td class="td_2">
                    <p class="p_5">0</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p>&#160;</p>
                </td>
                <td colspan="8" class="td_4">
                    <p class="p_6">Return Code</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p>byte 1</p>
                </td>
                <td class="td_4">
                    <p class="p_6">X</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">X</p>
                </td>
                <td class="td_4">
                    <p class="p_6">X</p>
                </td>
            </tr>
        </table>
        <p>Allowed return codes:</p>
        <p>0x00 - Success - Maximum QoS 0&#160;<br />0x01 - Success - Maximum QoS 1&#160;<br />0x02 - Success - Maximum QoS 2&#160;<br />0x80 - Failure&#160;</p>
        <p><span class="span_17">SUBACK return codes other than 0x00, 0x01, 0x02 and 0x80 are reserved and MUST NOT be used</span>&#160;<span class="span_14">[MQTT-3.9.3-2].</span></p>
        <p>
            <div class="div_2">
                <p> <b>Solace Implementation Note</b></p>
                <p class="p_1">The Solace server grants a Maximum QoS of 1 when a client requests a QoS 2 subscription.&#160; The Solace server never returns a QoS 2 in a SUBACK packet. </p>
            </div>
        </p>
        <h4 class="Heading4"><a name="_Toc430865133"></a>3.9.3.1 Payload non normative example</h4>
        <p class="p_20"><a href="#_Figure_3.27_-"><span class="Hyperlink">Figure 3.27 - Payload byte format non normative example</span></a><span class="span_4"> shows the payload for the SUBACK Packet briefly described in</span> Table 3.6 - Payload non normative example.</p>
        <p class="GraphicCaptionWord"><a name="_Table_3.5_-"></a><a name="_Toc430865134"></a>Table 3.6 - Payload non normative example</p>
        <table class="table_1">
            <col style="width: 149pt;" />
            <col style="width: 45pt;" />
            <tr>
                <td class="td_1">
                    <p>Success - Maximum QoS 0&#160;</p>
                </td>
                <td class="td_2">
                    <p class="p_6">0</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p>Success - Maximum QoS 2&#160; </p>
                </td>
                <td class="td_4">
                    <p class="p_6">2</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p>Failure&#160;</p>
                </td>
                <td class="td_4">
                    <p class="p_6">128</p>
                </td>
            </tr>
        </table>
        <p class="GraphicCaptionWord"><a name="_Figure_3.27_-"></a><a name="_Toc430865135"></a>Figure 3.27 - Payload byte format non normative example</p>
        <table class="table_1">
            <col style="width: 64pt;" />
            <col style="width: 160pt;" />
            <col style="width: 32pt;" />
            <col style="width: 32pt;" />
            <col style="width: 32pt;" />
            <col style="width: 32pt;" />
            <col style="width: 32pt;" />
            <col style="width: 32pt;" />
            <col style="width: 32pt;" />
            <col style="width: 32pt;" />
            <tr>
                <td class="td_1">
                    <p>&#160;</p>
                </td>
                <td class="td_2">
                    <p class="p_5">Description</p>
                </td>
                <td class="td_2">
                    <p class="p_5">7</p>
                </td>
                <td class="td_2">
                    <p class="p_5">6</p>
                </td>
                <td class="td_2">
                    <p class="p_5">5</p>
                </td>
                <td class="td_2">
                    <p class="p_5">4</p>
                </td>
                <td class="td_2">
                    <p class="p_5">3</p>
                </td>
                <td class="td_2">
                    <p class="p_5">2</p>
                </td>
                <td class="td_2">
                    <p class="p_5">1</p>
                </td>
                <td class="td_2">
                    <p class="p_5">0</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p>byte 1</p>
                </td>
                <td class="td_4">
                    <p>Success - Maximum QoS 0&#160;</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p>byte 2</p>
                </td>
                <td class="td_4">
                    <p>Success - Maximum QoS 2&#160;</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">1</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p>byte 3</p>
                </td>
                <td class="td_4">
                    <p>Failure</p>
                </td>
                <td class="td_4">
                    <p class="p_6">1</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
            </tr>
        </table>
        <h2 class="Heading2"><a name="_Toc430864936"></a><a name="_Toc430865136"></a>3.10 UNSUBSCRIBE – Unsubscribe from topics</h2>
        <p>An UNSUBSCRIBE Packet is sent by the Client to the Server, to unsubscribe from topics.</p>
        <h3 class="Heading3"><a name="_Toc430864937"></a><a name="_Toc430865137"></a>3.10.1 Fixed header</h3>
        <p class="GraphicCaptionWord"><a name="_Toc430865138"></a>Figure 3.28 – UNSUBSCRIBE Packet Fixed header</p>
        <table class="table_1">
            <col style="width: 68pt;" />
            <col style="width: 51pt;" />
            <col style="width: 51pt;" />
            <col style="width: 51pt;" />
            <col style="width: 49pt;" />
            <col style="width: 54pt;" />
            <col style="width: 51pt;" />
            <col style="width: 51pt;" />
            <col style="width: 51pt;" />
            <tr>
                <td class="td_1">
                    <p class="p_5">Bit</p>
                </td>
                <td class="td_2">
                    <p class="p_5">7</p>
                </td>
                <td class="td_2">
                    <p class="p_5">6</p>
                </td>
                <td class="td_2">
                    <p class="p_5">5</p>
                </td>
                <td class="td_2">
                    <p class="p_5">4</p>
                </td>
                <td class="td_2">
                    <p class="p_5">3</p>
                </td>
                <td class="td_2">
                    <p class="p_5">2</p>
                </td>
                <td class="td_2">
                    <p class="p_5">1</p>
                </td>
                <td class="td_2">
                    <p class="p_5">0</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p>byte 1</p>
                </td>
                <td colspan="4" class="td_4">
                    <p class="p_6">MQTT Control Packet type (10)</p>
                </td>
                <td colspan="4" class="td_4">
                    <p class="p_17">Reserved</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p>&#160;</p>
                </td>
                <td class="td_4">
                    <p class="p_6">1</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">1</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">1</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p>byte 2</p>
                </td>
                <td colspan="8" class="td_4">
                    <p class="p_6">Remaining Length</p>
                </td>
            </tr>
        </table>
        <p><span class="span_17">Bits 3,2,1 and 0 of the fixed header of the UNSUBSCRIBE Control Packet are reserved and MUST be set to 0,0,1 and 0 respectively. The Server MUST treat any other value as malformed and close the Network Connection</span> <span class="span_14">[MQTT-3.10.1-1]</span>.</p>
        <p><span class="Refterm">Remaining Length field</span>
        </p>
        <p>This is the length of variable header (2 bytes) plus the length of the payload.</p>
        <h3 class="Heading3"><a name="_Toc430864938"></a><a name="_Toc430865139"></a>3.10.2 Variable header</h3>
        <p>The variable header contains a Packet Identifier. Section <MadCap:xref href="MQTT Control Packet format.htm#_Ref363041167" class="ParaTextOnly">Packet Identifier</MadCap:xref> provides more information about Packet Identifiers.</p>
        <p class="GraphicCaptionWord"><a name="_Toc430865140"></a>Figure 3.29 – UNSUBSCRIBE Packet variable header</p>
        <table class="table_1">
            <col style="width: 131pt;" />
            <col style="width: 44pt;" />
            <col style="width: 44pt;" />
            <col style="width: 44pt;" />
            <col style="width: 44pt;" />
            <col style="width: 44pt;" />
            <col style="width: 44pt;" />
            <col style="width: 44pt;" />
            <col style="width: 44pt;" />
            <tr>
                <td class="td_1">
                    <p class="p_5">Bit</p>
                </td>
                <td class="td_2">
                    <p class="p_5">7</p>
                </td>
                <td class="td_2">
                    <p class="p_5">6</p>
                </td>
                <td class="td_2">
                    <p class="p_5">5</p>
                </td>
                <td class="td_2">
                    <p class="p_5">4</p>
                </td>
                <td class="td_2">
                    <p class="p_5">3</p>
                </td>
                <td class="td_2">
                    <p class="p_5">2</p>
                </td>
                <td class="td_2">
                    <p class="p_5">1</p>
                </td>
                <td class="td_2">
                    <p class="p_5">0</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p>byte 1</p>
                </td>
                <td colspan="8" class="td_4">
                    <p class="p_6">Packet Identifier MSB</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p>byte 2</p>
                </td>
                <td colspan="8" class="td_4">
                    <p class="p_6">Packet Identifier LSB</p>
                </td>
            </tr>
        </table>
        <h3 class="Heading3"><a name="_Toc430864939"></a><a name="_Toc430865141"></a>3.10.3 Payload</h3>
        <p>The payload for the UNSUBSCRIBE Packet contains the list of Topic Filters that the Client wishes to unsubscribe from. <span class="span_17">The Topic Filters in an UNSUBSCRIBE packet MUST be UTF-8 encoded strings as defined in Section </span><MadCap:xref href="Introduction.htm#_Ref374438163" class="ParaTextOnly">UTF-8 encoded strings</MadCap:xref><span class="span_17">, packed contiguously</span> <span class="span_14">[MQTT-3.10.3-1]</span>.</p>
        <p><span class="span_17">The Payload of an UNSUBSCRIBE packet MUST contain at least one Topic Filter. An</span> <span class="span_17">UNSUBSCRIBE packet with no payload is a protocol violation</span> <span class="span_14">[MQTT-3.10.3-2]</span>. See section <MadCap:xref href="Operational_behavior.htm#_Ref381955543" class="ParaTextOnly">Handling errors </MadCap:xref> for information about handling errors. </p>
        <p>
            <div class="div_2">
                <p><span class="span_3">Solace Implementation Note</span>
                </p>
                <ul>
                    <li>Topics must comply with the limits discussed in <MadCap:xref href="../../Messaging/SMF-Topics.htm">SMF Topics</MadCap:xref>. Topics outside these bounds will cause the connection to be closed.</li>
                    <li>UNSUBSCRIBE packets can contain at most 1024 Topic Filters. Exceeding this limit will cause the connection to be closed.</li>
                </ul>
            </div>
        </p>
        <h4 class="Heading4"><a name="_Toc430865142"></a>3.10.3 .1Payload non normative example</h4>
        <p class="p_20"><a href="#_Figure_3.30_-"><span class="Hyperlink">Figure 3.30 - Payload byte format non normative example</span></a> <span class="span_4">show the payload for the UNSUBSCRIBE Packet briefly described in</span> <a href="#_Table3.6_-_Payload"><span class="Hyperlink">Table3.</span><span class="Hyperlink">7</span><span class="Hyperlink"> - Payload non normative example</span></a><span class="span_4">.</span></p>
        <p class="GraphicCaptionWord"><a name="_Table3.6_-_Payload"></a><a name="_Toc430865143"></a>Table3.7 - Payload non normative example</p>
        <table class="table_1">
            <col style="width: 73pt;" />
            <col style="width: 31pt;" />
            <tr>
                <td class="td_1">
                    <p>Topic Filter</p>
                </td>
                <td class="td_2">
                    <p class="p_6">“a/b”</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p>Topic Filter</p>
                </td>
                <td class="td_4">
                    <p class="p_6">“c/d”</p>
                </td>
            </tr>
        </table>
        <p class="GraphicCaptionWord"><a name="_Figure_3.30_-"></a><a name="_Toc430865144"></a>Figure 3.30 - Payload byte format non normative example</p>
        <table class="table_1">
            <col style="width: 90pt;" />
            <col style="width: 150pt;" />
            <col style="width: 30pt;" />
            <col style="width: 30pt;" />
            <col style="width: 30pt;" />
            <col style="width: 30pt;" />
            <col style="width: 30pt;" />
            <col style="width: 30pt;" />
            <col style="width: 30pt;" />
            <col style="width: 30pt;" />
            <tr>
                <td class="td_1">
                    <p class="p_6">&#160;</p>
                </td>
                <td class="td_2">
                    <p class="p_5">Description</p>
                </td>
                <td class="td_2">
                    <p class="p_5">7</p>
                </td>
                <td class="td_2">
                    <p class="p_5">6</p>
                </td>
                <td class="td_2">
                    <p class="p_5">5</p>
                </td>
                <td class="td_2">
                    <p class="p_5">4</p>
                </td>
                <td class="td_2">
                    <p class="p_5">3</p>
                </td>
                <td class="td_2">
                    <p class="p_5">2</p>
                </td>
                <td class="td_2">
                    <p class="p_5">1</p>
                </td>
                <td class="td_2">
                    <p class="p_5">0</p>
                </td>
            </tr>
            <tr>
                <td colspan="10" class="td_3">
                    <p>Topic Filter</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p>byte 1</p>
                </td>
                <td class="td_4">
                    <p class="p_6">Length MSB (0)</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p>byte 2</p>
                </td>
                <td class="td_4">
                    <p class="p_6">Length LSB (3)</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">1</p>
                </td>
                <td class="td_4">
                    <p class="p_6">1</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p>byte 3</p>
                </td>
                <td class="td_4">
                    <p class="p_6">‘a’ (0x61)</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">1</p>
                </td>
                <td class="td_4">
                    <p class="p_6">1</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">1</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p>byte 4</p>
                </td>
                <td class="td_4">
                    <p class="p_6">‘/’ (0x2F)</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">1</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">1</p>
                </td>
                <td class="td_4">
                    <p class="p_6">1</p>
                </td>
                <td class="td_4">
                    <p class="p_6">1</p>
                </td>
                <td class="td_4">
                    <p class="p_6">1</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p>byte 5</p>
                </td>
                <td class="td_4">
                    <p class="p_6">‘b’ (0x62)</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">1</p>
                </td>
                <td class="td_4">
                    <p class="p_6">1</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">1</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
            </tr>
            <tr>
                <td colspan="10" class="td_3">
                    <p>Topic Filter</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p>byte 6</p>
                </td>
                <td class="td_4">
                    <p class="p_6">Length MSB (0)</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p>byte 7</p>
                </td>
                <td class="td_4">
                    <p class="p_6">Length LSB (3)</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">1</p>
                </td>
                <td class="td_4">
                    <p class="p_6">1</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p>byte 8</p>
                </td>
                <td class="td_4">
                    <p class="p_6">‘c’ (0x63)</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">1</p>
                </td>
                <td class="td_4">
                    <p class="p_6">1</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">1</p>
                </td>
                <td class="td_4">
                    <p class="p_6">1</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p>byte 9</p>
                </td>
                <td class="td_4">
                    <p class="p_6">‘/’ (0x2F)</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">1</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">1</p>
                </td>
                <td class="td_4">
                    <p class="p_6">1</p>
                </td>
                <td class="td_4">
                    <p class="p_6">1</p>
                </td>
                <td class="td_4">
                    <p class="p_6">1</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p>byte 10</p>
                </td>
                <td class="td_4">
                    <p class="p_6">‘d’ (0x64)</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">1</p>
                </td>
                <td class="td_4">
                    <p class="p_6">1</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">1</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
            </tr>
        </table>
        <h3 class="Heading3"><a name="_Toc430864940"></a><a name="_Toc430865145"></a>3.10.4 Response</h3>
        <p><span class="span_17">The Topic Filters (whether they contain wildcards or not) supplied in an UNSUBSCRIBE packet MUST be compared character-by-character with the current set of Topic Filters held by the Server for the Client. If any filter matches exactly then its owning Subscription is deleted, otherwise no additional processing occurs</span> <span class="span_14">[MQTT-3.10.4-1]</span>.<br /></p>
        <p>If a Server deletes a Subscription:</p>
        <ul>
            <li><span class="span_17">It MUST stop adding any new messages for delivery to the Client</span> <span class="span_14">[MQTT-3.10.4-2]</span>.</li>
            <li><span class="span_17">It MUST complete the delivery of any QoS 1 or QoS 2 messages which it has started to send to the Client</span> <span class="span_14">[MQTT-3.10.4-3]</span>.</li>
            <li>It MAY continue to deliver any existing messages buffered for delivery to the Client.</li>
        </ul>
        <p>
            <br /><span class="span_17">The Server MUST respond to an UNSUBSUBCRIBE request by sending an UNSUBACK packet. The UNSUBACK Packet MUST have the same Packet Identifier as the UNSUBSCRIBE Packet</span> <span class="span_14">[MQTT-3.10.4-4]</span>. <span class="span_17">Even where no Topic Subscriptions are deleted, the Server MUST respond with an UNSUBACK</span> <span class="span_14">[MQTT-3.10.4-5]</span>.</p>
        <p><span class="span_17">If a Server receives an UNSUBSCRIBE packet that contains multiple Topic Filters it MUST handle that packet as if it had received a sequence of multiple UNSUBSCRIBE packets, except that it sends just one UNSUBACK response</span> <span class="span_14">[MQTT-3.10.4-6]</span>.&#160;</p>
        <h2 class="Heading2"><a name="_Toc430864941"></a><a name="_Toc430865146"></a>3.11 UNSUBACK – Unsubscribe acknowledgement</h2>
        <p>The UNSUBACK Packet is sent by the Server to the Client to confirm receipt of an UNSUBSCRIBE Packet.</p>
        <h3 class="Heading3"><a name="_Toc430864942"></a><a name="_Toc430865147"></a>3.11.1Fixed header</h3>
        <p class="GraphicCaptionWord"><a name="_Toc430865148"></a>Figure 3.31 – UNSUBACK Packet fixed header</p>
        <table class="table_1">
            <col style="width: 73pt;" />
            <col style="width: 50pt;" />
            <col style="width: 54pt;" />
            <col style="width: 54pt;" />
            <col style="width: 54pt;" />
            <col style="width: 54pt;" />
            <col style="width: 54pt;" />
            <col style="width: 45pt;" />
            <col style="width: 41pt;" />
            <tr>
                <td class="td_1">
                    <p class="p_5">Bit</p>
                </td>
                <td class="td_2">
                    <p class="p_5">7</p>
                </td>
                <td class="td_2">
                    <p class="p_5">6</p>
                </td>
                <td class="td_2">
                    <p class="p_5">5</p>
                </td>
                <td class="td_2">
                    <p class="p_5">4</p>
                </td>
                <td class="td_2">
                    <p class="p_5">3</p>
                </td>
                <td class="td_2">
                    <p class="p_5">2</p>
                </td>
                <td class="td_2">
                    <p class="p_5">1</p>
                </td>
                <td class="td_2">
                    <p class="p_5">0</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p>byte 1</p>
                </td>
                <td colspan="4" class="td_4">
                    <p class="p_6">MQTT Control Packet type (11)</p>
                </td>
                <td colspan="4" class="td_4">
                    <p class="p_6">Reserved</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p>&#160;</p>
                </td>
                <td class="td_4">
                    <p class="p_6">1</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">1</p>
                </td>
                <td class="td_4">
                    <p class="p_6">1</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p>byte 2</p>
                </td>
                <td colspan="8" class="td_4">
                    <p class="p_6">Remaining Length (2)</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p>&#160;</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">1</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
            </tr>
        </table>
        <p><span class="Refterm">Remaining Length field</span>
        </p>
        <p>This is the length of the variable header. For the UNSUBACK Packet this has the value 2.</p>
        <h3 class="Heading3"><a name="_Toc430864943"></a><a name="_Toc430865149"></a>3.11.2 Variable header</h3>
        <p>The variable header contains the Packet Identifier of the UNSUBSCRIBE Packet that is being acknowledged.</p>
        <p class="GraphicCaptionWord"><a name="_Toc430865150"></a>Figure 3.32 – UNSUBACK Packet variable header</p>
        <table class="table_1">
            <col style="width: 131pt;" />
            <col style="width: 44pt;" />
            <col style="width: 44pt;" />
            <col style="width: 44pt;" />
            <col style="width: 44pt;" />
            <col style="width: 44pt;" />
            <col style="width: 44pt;" />
            <col style="width: 44pt;" />
            <col style="width: 44pt;" />
            <tr>
                <td class="td_1">
                    <p class="p_5">Bit</p>
                </td>
                <td class="td_2">
                    <p class="p_5">7</p>
                </td>
                <td class="td_2">
                    <p class="p_5">6</p>
                </td>
                <td class="td_2">
                    <p class="p_5">5</p>
                </td>
                <td class="td_2">
                    <p class="p_5">4</p>
                </td>
                <td class="td_2">
                    <p class="p_5">3</p>
                </td>
                <td class="td_2">
                    <p class="p_5">2</p>
                </td>
                <td class="td_2">
                    <p class="p_5">1</p>
                </td>
                <td class="td_2">
                    <p class="p_5">0</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p>byte 1</p>
                </td>
                <td colspan="8" class="td_4">
                    <p class="p_6">Packet Identifier MSB</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p>byte 2</p>
                </td>
                <td colspan="8" class="td_4">
                    <p class="p_6">Packet Identifier LSB</p>
                </td>
            </tr>
        </table>
        <h3 class="Heading3"><a name="_Toc430864944"></a><a name="_Toc430865151"></a>3.11.3 Payload</h3>
        <p>The UNSUBACK Packet has no payload.</p>
        <h2 class="Heading2"><a name="_Toc430864945"></a><a name="_Toc430865152"></a>3.12 PINGREQ – PING request</h2>
        <p>The PINGREQ Packet is sent from a Client to the Server. It can be used to: </p>
        <ol start="1" class="ol_2">
            <li>Indicate to the Server that the Client is alive in the absence of any other Control Packets being sent from the Client to the Server.</li>
            <li>Request that the Server responds to confirm that it is alive.</li>
            <li>Exercise the network to indicate that the Network Connection is active.</li>
        </ol>
        <p>This Packet is used in Keep Alive processing, see Section <MadCap:xref href="#_Ref363645900" class="ParaTextOnly">Keep Alive</MadCap:xref> for more details.</p>
        <ol start="3121" class="ol_2">
            <h3 class="Heading3"><a name="_Toc430864946"></a><a name="_Toc430865153"></a>3.12.1 Fixed header</h3>
        </ol>
        <p class="GraphicCaptionWord"><a name="_Toc430865154"></a>Figure 3.33 – PINGREQ Packet fixed header</p>
        <table class="table_1">
            <col style="width: 73pt;" />
            <col style="width: 50pt;" />
            <col style="width: 54pt;" />
            <col style="width: 45pt;" />
            <col style="width: 54pt;" />
            <col style="width: 54pt;" />
            <col style="width: 54pt;" />
            <col style="width: 45pt;" />
            <col style="width: 50pt;" />
            <tr>
                <td class="td_1">
                    <p class="p_5">Bit</p>
                </td>
                <td class="td_2">
                    <p class="p_5">7</p>
                </td>
                <td class="td_2">
                    <p class="p_5">6</p>
                </td>
                <td class="td_2">
                    <p class="p_5">5</p>
                </td>
                <td class="td_2">
                    <p class="p_5">4</p>
                </td>
                <td class="td_2">
                    <p class="p_5">3</p>
                </td>
                <td class="td_2">
                    <p class="p_5">2</p>
                </td>
                <td class="td_2">
                    <p class="p_5">1</p>
                </td>
                <td class="td_2">
                    <p class="p_5">0</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p>byte 1</p>
                </td>
                <td colspan="4" class="td_4">
                    <p class="p_6">MQTT Control Packet type (12)</p>
                </td>
                <td colspan="4" class="td_4">
                    <p class="p_6">Reserved</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p>&#160;</p>
                </td>
                <td class="td_4">
                    <p class="p_6">1</p>
                </td>
                <td class="td_4">
                    <p class="p_6">1</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p>byte 2</p>
                </td>
                <td colspan="8" class="td_4">
                    <p class="p_6">Remaining Length (0)</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p>&#160;</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
            </tr>
        </table>
        <h3 class="Heading3"><a name="_Toc430864947"></a><a name="_Toc430865155"></a>3.12.2 Variable header</h3>
        <p>The PINGREQ Packet has no variable header.</p>
        <h3 class="Heading3"><a name="_Toc430864948"></a><a name="_Toc430865156"></a>3.12.3 Payload</h3>
        <p>The PINGREQ Packet has no payload.</p>
        <h3 class="Heading3"><a name="_Toc430864949"></a><a name="_Toc430865157"></a>3.12.4 Response</h3>
        <p><span class="span_17">The Server MUST send a PINGRESP Packet in response to a PINGREQ Packet</span> <span class="span_14">[MQTT-3.12.4-1]</span>.</p>
        <h2 class="Heading2"><a name="_Toc430864950"></a><a name="_Toc430865158"></a>3.13 PINGRESP – PING response</h2>
        <p>A PINGRESP Packet is sent by the Server to the Client in response to a PINGREQ Packet. It indicates that the Server is alive.</p>
        <p>This Packet is used in Keep Alive processing, see Section <MadCap:xref href="#_Ref363645900" class="ParaTextOnly">Keep Alive</MadCap:xref> for more details.</p>
        <h3 class="Heading3"><a name="_Toc430864951"></a><a name="_Toc430865159"></a>3.13.1 Fixed header</h3>
        <p class="GraphicCaptionWord"><a name="_Toc430865160"></a>Figure 3.34 – PINGRESP Packet fixed header</p>
        <table class="table_1">
            <col style="width: 73pt;" />
            <col style="width: 51pt;" />
            <col style="width: 51pt;" />
            <col style="width: 51pt;" />
            <col style="width: 51pt;" />
            <col style="width: 51pt;" />
            <col style="width: 51pt;" />
            <col style="width: 51pt;" />
            <col style="width: 51pt;" />
            <tr>
                <td class="td_1">
                    <p class="p_5">Bit</p>
                </td>
                <td class="td_2">
                    <p class="p_5">7</p>
                </td>
                <td class="td_2">
                    <p class="p_5">6</p>
                </td>
                <td class="td_2">
                    <p class="p_5">5</p>
                </td>
                <td class="td_2">
                    <p class="p_5">4</p>
                </td>
                <td class="td_2">
                    <p class="p_5">3</p>
                </td>
                <td class="td_2">
                    <p class="p_5">2</p>
                </td>
                <td class="td_2">
                    <p class="p_5">1</p>
                </td>
                <td class="td_2">
                    <p class="p_5">0</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p>byte 1</p>
                </td>
                <td colspan="4" class="td_4">
                    <p class="p_6">MQTT Control Packet type (13)</p>
                </td>
                <td colspan="4" class="td_4">
                    <p class="p_6">Reserved</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p>&#160;</p>
                </td>
                <td class="td_4">
                    <p class="p_6">1</p>
                </td>
                <td class="td_4">
                    <p class="p_6">1</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">1</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p>byte 2</p>
                </td>
                <td colspan="8" class="td_4">
                    <p class="p_6">Remaining Length (0)</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p>&#160;</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
            </tr>
        </table>
        <h3 class="Heading3"><a name="_Toc430864952"></a><a name="_Toc430865161"></a>3.13.2 Variable header</h3>
        <p>The PINGRESP Packet has no variable header.</p>
        <h3 class="Heading3"><a name="_Toc430864953"></a><a name="_Toc430865162"></a>3.13.3 Payload</h3>
        <p>The PINGRESP Packet has no payload.</p>
        <h2 class="Heading2"><a name="_Toc430864954"></a><a name="_Toc430865163"></a>3.14 DISCONNECT – Disconnect notification</h2>
        <p>The DISCONNECT Packet is the final Control Packet sent from the Client to the Server. It indicates that the Client is disconnecting cleanly. </p>
        <h3 class="Heading3"><a name="_Toc430864955"></a><a name="_Toc430865164"></a>3.14.1 Fixed header</h3>
        <p class="GraphicCaptionWord"><a name="_Toc430865165"></a>Figure 3.35 – DISCONNECT Packet fixed header</p>
        <table class="table_1">
            <col style="width: 73pt;" />
            <col style="width: 50pt;" />
            <col style="width: 45pt;" />
            <col style="width: 54pt;" />
            <col style="width: 54pt;" />
            <col style="width: 54pt;" />
            <col style="width: 54pt;" />
            <col style="width: 45pt;" />
            <col style="width: 50pt;" />
            <tr>
                <td class="td_1">
                    <p class="p_5">Bit</p>
                </td>
                <td class="td_2">
                    <p class="p_5">7</p>
                </td>
                <td class="td_2">
                    <p class="p_5">6</p>
                </td>
                <td class="td_2">
                    <p class="p_5">5</p>
                </td>
                <td class="td_2">
                    <p class="p_5">4</p>
                </td>
                <td class="td_2">
                    <p class="p_5">3</p>
                </td>
                <td class="td_2">
                    <p class="p_5">2</p>
                </td>
                <td class="td_2">
                    <p class="p_5">1</p>
                </td>
                <td class="td_2">
                    <p class="p_5">0</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p>byte 1</p>
                </td>
                <td colspan="4" class="td_4">
                    <p class="p_6">MQTT Control Packet type (14)</p>
                </td>
                <td colspan="4" class="td_4">
                    <p class="p_6">Reserved</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p>&#160;</p>
                </td>
                <td class="td_4">
                    <p class="p_6">1</p>
                </td>
                <td class="td_4">
                    <p class="p_6">1</p>
                </td>
                <td class="td_4">
                    <p class="p_6">1</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p>byte 2</p>
                </td>
                <td colspan="8" class="td_4">
                    <p class="p_6">Remaining Length (0)</p>
                </td>
            </tr>
            <tr>
                <td class="td_3">
                    <p>&#160;</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
                <td class="td_4">
                    <p class="p_6">0</p>
                </td>
            </tr>
        </table>
        <p><span class="span_17">The Server MUST validate that reserved bits are set to zero and disconnect the Client if they are not zero</span> <span class="span_14">[MQTT-3.14.1-1]</span>.</p>
        <h3 class="Heading3"><a name="_Toc430864956"></a><a name="_Toc430865166"></a>3.14.2 Variable header</h3>
        <p>The DISCONNECT Packet has no variable header.</p>
        <h3 class="Heading3"><a name="_Toc430864957"></a><a name="_Toc430865167"></a>3.14.3 Payload</h3>
        <p>The DISCONNECT Packet has no payload.</p>
        <h3 class="Heading3"><a name="_Toc430864958"></a><a name="_Toc430865168"></a>3.14.4 Response</h3>
        <p><span class="span_17">After sending a DISCONNECT Packet the Client:</span>
        </p>
        <ul>
            <li><span class="span_17">MUST close the Network Connection</span> <span class="span_14">[MQTT-3.14.4-1]</span>.</li>
            <li><span class="span_17">MUST NOT send any more Control Packets on that Network Connection</span> <span class="span_14">[MQTT-3.14.4-2]</span>.</li>
        </ul>
        <p><span class="span_17">On receipt of DISCONNECT the Server:</span>
        </p>
        <ul>
            <li><span class="span_17">MUST discard any Will Message associated with the current connection without publishing it, as described in Section </span>
                <MadCap:xref href="#_Ref363648298" class="ParaTextOnly">Will Flag</MadCap:xref> <span class="span_14">[MQTT-3.14.4-3]</span>.</li>
            <li>SHOULD close the Network Connection if the Client has not already done so.</li>
        </ul>
    </body>
</html>