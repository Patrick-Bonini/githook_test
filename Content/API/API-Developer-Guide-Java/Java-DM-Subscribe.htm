<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
  <head>
    </head>
  <body>
    <h1><a name="Consuming-Direct-Messages-Java-API"/>Consuming Direct Messages Using the Java API </h1>
    <p> Direct messaging is useful in scenarios where high-throughput and low-latency is required.  It is possible with the use of direct messages that some  message loss may occur due to external factors, such as network congestion or occasional client disconnections. Direct messages are suitable for applications that need the latest information but not necessarily every single message. Examples of these applications may be weather applications, price checkers, GPS tracking, and so on.</p>
    <p>  No additional event broker configuration is required for direct messaging. If your application cannot tolerate message loss, we recommend that you use persistent messaging. </p>
    <p>To consume direct messages using our Java API, use the following steps:</p>
    <ol>
      <li><a href="#Creating-A-DirectMessageReceiver-Object" class="link-internal">Create a DirectMessageReceiver Object</a>.</li>
      <li><a href="#Receiving-A-Direct-Message-Synchronously" class="link-internal">Receive a Direct Message Synchronously</a>.</li>
      <li><a href="#Receiving-A-Direct-Message-Asynchronously" class="link-internal">Receive a Direct Message Asynchronously</a>.</li>
      <li><a href="#Extract-Message-Props" class="link-internal">Extract Properties from an Inbound Message</a>.</li>
    </ol>
    <p>In some use cases, the API receives messages from the event broker faster than your application can process them. Messages can fill in the API's internal buffers causing <i>back-pressure</i>. If this scenario is possible, you may want to consider changing the default back-pressure settings to meet your requirements. For more information, see  <MadCap:xref href="#Configuring-Back-Pressure">Configuring Back-pressure</MadCap:xref>.</p>
    <p>To see a sample application that consumes direct messages, see the <a href="https://tutorials.solace.dev/java" target="_blank" class="link-offsite"><MadCap:variable name="Variables.CompanyName"/> Developer Hub</a>.</p>
    <h2><a name="Creating-A-DirectMessageReceiver-Object"/>Creating a DirectMessageReceiver Object </h2>
    <p>After a <code>MessagingService</code> object has established a connection to an event broker, use a <code>DirectMessageReceiver</code> object  to consume direct messages from the event broker.</p>
    <p>As with the <code>MessagingService</code> object, the <code>DirectMessageReceiver</code> object can be configured to use certain features of the API. The following list of methods can be used to configure the  <code>DirectMessageReceiverBuilder</code> object. The  <code>build()</code> method returns a <code>DirectMessageReceiver</code> object. To enable your <code>DirectMessageReceiver</code> to start receiving messages, call <code>start()</code> on it.</p>
    <ul>
      <li>
        <code>DirectMessageReceiverBuilder</code>
      </li>
      <ul>
        <li>
          <code>createDirectMessageReceiverBuilder()</code>
        </li>
      </ul>
      <ul>
        <li>
          <code>withSubscriptions(Topic SubScriptions subscriptions)</code>
        </li>
      </ul>
      <ul>
        <li>
          <code>build()</code>
        </li>
      </ul>
      <li style="font-size: 11pt;">
        <code>DirectMessageReceiver</code>
      </li>
      <ul>
        <li>
          <code>start()</code>
        </li>
      </ul>
    </ul>
    <p>For more information about the preceding methods, see the <a href="../../API-Developer-Online-Ref-Documentation/pubsubplus-java/index.html" class="link-internal"><MadCap:variable name="Product-Names.pubsub_brand_only"/> Messaging API for Java reference</a>.</p>
    <p>The following is an example that shows how to add subscriptions to topics to a  <code>DirectMessageReceiver</code> object and connect to the event broker:</p>
    <pre xml:space="preserve">
/* Creates an instance of DirectMessageReceiverBuilder, which is used to create DirectMessageReceiver objects. */        
final DirectMessageReceiver receiver = messagingService.createDirectMessageReceiverBuilder()        
    .withSubscriptions(TopicSubscription.of("Solace/Example/direct/&gt;"))   // Allows an SMF topic to be added to the message receiver
                                                                          // <b>&lt;--</b><b style="font-style: italic;">Add more subscriptions here if you want.</b>
    .build();                                                             // Creates a DirectMessageReceiver object  based on the provided configuration.
    .start();                                                             // Causes the service to resume regular duties. Before this method is called, the service is considered off-duty.</pre>
    <h3>Asynchronous Receivers </h3>
    <p>It is also possible to start a direct message receiver using a callback listener to allow for asynchronous notifications after the start operation is complete.</p>
    <p>The following example shows you how to invoke <code>CompletionListener</code>, which is a callback method for listening for the results of a future computation. This handler also notifies the application when the start operation is complete. </p>
    <pre xml:space="preserve">final CompletionListener&lt;DirectMessageReceiver&gt; receiverStartupListener = (receiver, throwable) -&gt; {
        if (throwable == null) {
                             // Started successfully, can receive messages.
        } else {
                             // Deal with an exception during start.
            }
        };
receiverToBeStarted.startAsync(receiverStartupListener);    </pre>
    <p class="Note"> Your receiver application is not operational until you call <code>start()</code> or <code>startAsync()</code> on it</p>
    <h2 class="with-rule"><a name="Configuring-Back-Pressure"/>Handling Back-Pressure When Subscribing to Direct Messages</h2>
    <MadCap:snippetBlock src="../../Resources/Snippets/API-Guide/NG-API/backpressureintro-consumer-direct-messages.flsnp"/>
    <p>In our Java API, the <code>DirectMessageReceiver</code> has the following mechanisms to handle back-pressure:</p>
    <ul>
      <li>
        <a href="#drop-latest" class="link-internal">drop the latest message</a>
      </li>
      <li>
        <a href="#drop-oldest" class="link-internal">drop the oldest message</a>
      </li>
      <li>
        <a href="#no-limit" class="link-internal">ignore the limit (default)</a>
      </li>
    </ul>
    <p>
      <h3><a name="drop-latest"/>Dropping the Latest Message</h3>
    </p>
    <p>You can configure the API to drop the latest message that arrives when a specified capacity has been reached in the API's internal buffer. When this capacity is reached, the most recent messages are not placed on the internal buffer because it is full and are instead dropped (lost). </p>
    <p> To configure this mechanism, call the <code>onBackPressureDropLatest(int bufferCapacity)</code> method on the <code>DirectMessageReceiver</code> object and then set the maximum number of messages that can accumulate ( <code>bufferCapacity</code>) before messages are dropped. </p>
    <p>The following example shows how to configure the application to drop messages if there are a thousand messages queued in the API's internal buffer:</p>
    <pre xml:space="preserve">/* Creates an instance of DirectMessageReceiverBuilder, which is used to create DirectMessageReceiver objects. */
final DirectMessageReceiver receiver = service.createDirectMessageReceiverBuilder()
    .fromProperties(receiverConfiguration)         // Uses authentication properties passed in through command line or hard-coded into program.
    .onBackPressureDropLatest(1000)                // Sets back-pressure capacity of 1000 messages, at which point the newest messages in the buffer are dropped 
    .build()                                       // Builds a DirectMessageReceiver object based on the provided configuration.    
    .start();                                      // Causes the service to resume regular duties. Before this method is called, the service is considered off-duty.    </pre>
    <p>
      <h3><a name="drop-oldest"/>Dropping the Oldest Message</h3>
    </p>
    <p>You can configure the API to drop the oldest message when a specified capacity is reached in the API's internal buffer. When this capacity is reached, the oldest item is removed from the internal buffer to make room to receive the newer message. When the specified capacity is reached,  the oldest items in the receiver buffer are removed to allow for more recent messages to be queued.</p>
    <p>To configure this mechanism, call the <code>onBackPressureDropOldest(int bufferCapacity)</code> method on the <code>DirectMessageReceiver</code> object and then set the maximum number of messages that can accumulate ( <code>bufferCapacity</code>) before the oldest messages are removed from the internal buffer. </p>
    <p>The following example shows how to configure the application to drop the oldest message in the API's internal buffer if there are a thousand messages queued:</p>
    <pre xml:space="preserve">/* Creates an instance of DirectMessageReceiverBuilder, which is used to create DirectMessageReceiver objects. */
final DirectMessageReceiver receiver = service.createDirectMessageReceiverBuilder()
        .<span>fromProperties</span>(receiverConfiguration)         // Uses authentication properties passed in through command line or hard-coded into program.
        .onBackPressureDropOldest(1000)                // Sets back-pressure capacity of 1000 messages, at which point the oldest messages in the buffer are dropped.
        .build()                                       // Builds a DirectMessageReceiver object based on the provided configuration.    
        .start();                                      // Causes the service to resume regular duties. Before this method is called, the service is considered off-duty.    </pre>
    <h3><a name="no-limit"/> Configuring an Unlimited Internal Buffer </h3>
    <MadCap:snippetBlock src="../../Resources/Snippets/API-Guide/NG-API/subscribe-unlimited-buffer.flsnp"/>
    <p>When you use an unlimited buffer, the Java API continuously  puts messages it receives from the event broker onto its internal buffer. The following example shows an explicit call to the  <code>onBackPressureElastic()</code> method, which is not required because it is the default behavior:</p>
    <pre xml:space="preserve">/* Creates an instance of DirectMessageReceiverBuilder, which is used to create DirectMessageReceiver objects. */
final DirectMessageReceiver receiver = service.createDirectMessageReceiverBuilder()
        .fromProperties(receiverConfiguration)  // Uses authentication properties passed in through command line or hard-coded into program.
        .onBackPressureElastic()                // Allows for an unlimited buffer capacity for the receiver object.
        .build()                                // Builds a DirectMessageReceiver object based on the provided configuration.    
        .start();                               // Causes the service to resume regular duties. Before this method is called, the service is considered off-duty.    </pre>
    <h2 class="with-rule"><a name="Receiving-A-Direct-Message-Synchronously"/>Receiving a Direct Message Synchronously </h2>
    <p>After you have established a connection to the event broker using a <code>MessagingService</code> object, you can use a <code>DirectMessageReceiver</code> object to subscribe to messages. The <code>DirectMessageReceiver</code> object must be subscribed to at least one topic for it to begin receiving messages. </p>
    <p>The following   example shows how an  <code>InboundMessage</code> object is received by the <code>DirectMessageReceiver</code> object, and how the <code>receiveMessage()</code> method blocks the thread until the next message has been received:            </p>
    <pre xml:space="preserve">final DirectMessageReceiver receiver = messagingService
            .createDirectMessageReceiverBuilder()
            .withSubscriptions(TopicSubscription.of("setSubscriptionExpressionHere"))
            .build().start(); .
        
final InboundMessage message = receiver.receiveMessage();// Receive an InboundMessage object. 
</pre>
    <p>For more information about the methods, see the<a href="../../API-Developer-Online-Ref-Documentation/pubsubplus-java/index.html" class="link-internal"><MadCap:variable name="Product-Names.pubsub_brand_only"/> Messaging API for Java reference</a>.
      </p>
    <h2 class="with-rule"><a name="Receiving-A-Direct-Message-Asynchronously"/>Receiving a Direct Message Asynchronously </h2>
    <p>After you have established a connection to the event broker using a <code>MessagingService</code> object, you can consume direct messages and handle them asynchronously using a <code>DirectMessageReceiver</code> object . To handle direct messages asynchronously, you use  a <code>MessageHandler</code> object to act as a callback method to let the application know when a message has been received.</p>
    <p> The following example shows how to receive messages asynchronously:</p>
    <pre xml:space="preserve">
/* Create a receiver object and add subscription(s). */
final DirectMessageReceiver receiver = messagingService.createDirectMessageReceiverBuilder()
    .withSubscriptions(TopicSubscription.of("setSubscriptionExpressionHere"))    // Allows an SMF topic to be added to the message receiver.
    .build()                                                   // Builds a DirectMessageReceier object based on the provided configuration.    
    .start();                                                  // Causes the service to resume regular duties. Before this method is called, the service is considered off-duty.

final MessageHandler messageHandler = (message) -&gt; {       // Interface for the listener of message handlers for inbound messages.
byte[] bytes = message.getPayloadAsBytes();                // Do something with a message, i.e access raw payload.
};
receiver.receiveAsync(messageHandler);                     // This method represents a push-based non-blocking interface. 
                                                           // Callback method of a messageHandler is executed on an internal API thread.</pre>
    <h2 class="with-rule"><a name="Extract-Message-Props"/>Extracting Properties from an Inbound Message</h2>
    <p>After you establish a connection to the event broker, you can subscribe to messages using the <MadCap:variable name="Product-Names.pubsub_brand_only"/> Java API. As part of the API, it implicitly creates the inbound messages on matching delivery.


After your application receives an <code>InboundMessage</code> object, you can extract a number of properties from that message, such as the message payload (as bytes or a string), sender ID and class of service. The following example shows how to extract properties from a message:</p>
    <pre xml:space="preserve">
/* Using a messageHandler */
final MessageHandler messageHandler = (inboundMessage) -&gt; {           
    byte[] bytes = inboundMessage.getPayloadAsBytes();      // Gets the raw payload of the message as a byte array.		
    String senderID = indboundMessage.getSenderId();        // Returns the Sender's ID.
    int serviceClass = inboundMessage.getClassOfService();  // Retrieves the Class of Service level of a given message.       
};
receiver.receiveAsync(messageHandler);                  
			
/* using the receiveMessage() method */
final InboundMessage inboundMessage= receiver.receiveMessage();    
String msgPayload = inboundMessage.getPayloadAsString();  // Gets the payload as a UTF-8 decoded as a String.		
String senderID = indboundMessage.getSenderId();          // Returns the Sender's ID.
int serviceClass = inboundMessage.getClassOfService();    // Retrieves the Class of Service level of a given message.			     		</pre>
    <p>For a complete list of methods that you can use to extract properties from an <code>InboundMessage</code>, see the <a href="../../API-Developer-Online-Ref-Documentation/pubsubplus-java/index.html" class="link-internal"><a href="../../API-Developer-Online-Ref-Documentation/pubsubplus-java/index.html" class="link-internal"><MadCap:variable name="Product-Names.pubsub_brand_only"/> Messaging API for Java reference</a>.</a></p>
  </body>
</html>
