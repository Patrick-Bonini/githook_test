<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
  <head>
    <link href="../../Resources/TableStyles/Table_Num.css" rel="stylesheet" MadCap:stylesheetType="table"/>
  </head>
  <body>
    <h1><a name="Java-API-Logging"/>Configuring Logging in the <MadCap:variable name="Manifest-Products-APIs.api-product-java-short"/></h1>
    <p>The <MadCap:variable name="Manifest-Products-APIs.api-product-java-short"/> uses Jakarta Commons Logging (JCL), also known as Apache Commons Logging, to support different logging frameworks. <MadCap:variable name="Manifest-Products-APIs.api-product-java-short"/> applications can choose either log4j2 or <code>java.util.logging</code> as their logging framework.</p>
    <h2><a name="log-levels"/>Supported Log Levels</h2>
    <p>This section shows the different levels of logging severity that the logging framework recognizes and allows you to use when generating log messages. Each log level indicates a different degree of importance or severity for the log messages. When you use different log levels, you can filter and prioritize log messages based on their importance, which helps you efficiently monitor and troubleshoot your applications.</p>
    <p class="Note">To turn on logging of Kerberos events, set the Java system property to the following: -<code>Dsun.security.krb5.debug=true</code>.</p>
    <table xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd" class="TableStyle-Table_Num" style="width: 528px;caption-side: top;mc-table-style: url('../../Resources/TableStyles/Table_Num.css');" cellspacing="0">
      <caption valign="top" style="padding-bottom: 3pt;">
        <p class="TblCaption">Supported Log Levels for Java</p>
      </caption>
      <thead>
        <tr class="TableStyle-Table_Num-Head-Header1">
          <th class="TableStyle-Table_Num-HeadE-Column1-Header1">Level</th>
          <th class="TableStyle-Table_Num-HeadD-Column1-Header1">Description</th>
        </tr>
      </thead>
      <tbody>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">Fatal</p>
          </td>
          <td rowspan="2" class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_Body">These log levels are reserved for internal errors and should be a cause for investigation. Contact Solace customer support for log events at this level. </p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">Error</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">Warn</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_Body">Indicates an application error (for example, invalid parameters passed in or unsupported use of the APIs).</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyE-Column1-Body1">
            <p class="Tbl_Body">Info</p>
          </td>
          <td class="TableStyle-Table_Num-BodyD-Column1-Body1">
            <p class="Tbl_Body">Typically used for state changes at a high level (for example, connect/disconnect/reconnect).</p>
            <p class="Tbl_Body">It is also used for unusual events that do not indicate any error, but they are unexpected and might need investigation.</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <p class="Tbl_Body">Debug</p>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p class="Tbl_Body">This log level is voluminous and typically requires Solace customer support to interpret.</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyB-Column1-Body1">
            <p class="Tbl_Body">Trace</p>
          </td>
          <td class="TableStyle-Table_Num-BodyA-Column1-Body1">
            <p class="Tbl_Body">Not used.</p>
          </td>
        </tr>
      </tbody>
    </table>
    <p>When a log level is set at a given level, all log events with log levels less severe than the selected level are filtered out, all log levels equally or more severe are included. For example, if the <code>Error</code> log filter level is selected, only <code>Error</code> and <code>Fatal</code> events are included.</p>
    <p>Java designers should be familiar with such logging frameworks because they are an established standard for Java-based systems. However, you should consider the following points:</p>
    <ul>
      <li>When using log4j, the directory in which the <code>log4j.properties</code> file and <code>log4j.jar</code> file exist is on the classpath.</li>
      <li>When using log4j, including the <code>log4j.jar</code> library file without <code>log4j.properties</code> in the classpath negatively impacts performance.</li>
    </ul>
    <p>To see an example of logging in the <MadCap:variable name="Manifest-Products-APIs.api-product-java-short"/>, see <a href="https://github.com/SolaceSamples/solace-samples-java/blob/main/src/main/java/com/solace/samples/java/patterns/GuaranteedReceiver.java" class="link-offsite">GuaranteedSubscriber.java</a> on the <MadCap:variable name="Variables.CompanyName"/> Developer's Hub.</p>
    <h2><a name="logging-example"/>Logging Example in the <MadCap:variable name="Manifest-Products-APIs.api-product-java-short"/></h2>
    <p> The following example shows how to use log4j in your application:</p>
    <ol>
      <li value="1">
				Add log4j as a dependency in your application: <ul><li>Maven example:<pre xml:space="preserve">&lt;dependencies&gt; 
    &lt;dependency&gt;
        &lt;groupId&gt;com.solace&lt;/groupId&gt;
        &lt;artifactId&gt;solace-messaging-client&lt;/artifactId&gt;
        &lt;version&gt;<MadCap:variable name="Manifest-Products-APIs.SDK-NEWJAVAAPI"/>.0&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt;
        &lt;artifactId&gt;log4j-api&lt;/artifactId&gt;
        &lt;version&gt;2.17.2&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt;
        &lt;artifactId&gt;log4j-core&lt;/artifactId&gt;
        &lt;version&gt;2.17.2&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt;
        &lt;artifactId&gt;log4j-jcl&lt;/artifactId&gt;
        &lt;version&gt;2.17.2&lt;/version&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;
</pre></li><li>  Gradle example:<pre xml:space="preserve">
dependencies {
    implementation group: 'com.solace', name: 'solace-messaging-client', version: '1.+'
	...
    implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.+'
    implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.+'
    implementation group: 'org.apache.logging.log4j', name: 'log4j-jcl', version: '2.+'
}
</pre></li></ul></li>
      <li value="2">In the <code>src/dist/config</code> directory, configure your <code>log4j2.xml</code> file. The following example sets up console logging for specific packages and classes in a <MadCap:variable name="Manifest-Products-APIs.api-product-java-short"/> application, with a consistent log message format and <code>info</code>, <code>debug</code>, and <code>warn</code> level log messages:<pre xml:space="preserve">
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;Configuration status="warn" monitorInterval="30"&gt;
    &lt;Appenders&gt;
        &lt;Console name="Console" target="SYSTEM_OUT"&gt;
            &lt;PatternLayout pattern="--LOG-- %d{HH:mm:ss.SSS} [%t] %-5level %logger{5.} - %msg%n"/&gt;
        &lt;/Console&gt;
    &lt;/Appenders&gt;
    &lt;Loggers&gt;
        &lt;Logger name="com.solacesystems" level="info" additivity="false"&gt;
            &lt;AppenderRef ref="Console"/&gt;
        &lt;/Logger&gt;
        &lt;Logger name="com.solace.samples" level="debug" additivity="false"&gt;
            &lt;AppenderRef ref="Console"/&gt;
        &lt;/Logger&gt;
        &lt;Logger name="com.solace.samples.GuaranteedPublisher" level="warn" additivity="false"&gt;
            &lt;AppenderRef ref="Console"/&gt;
        &lt;/Logger&gt;
        &lt;Root level="info"&gt;
            &lt;AppenderRef ref="Console"/&gt;
        &lt;/Root&gt;
    &lt;/Loggers&gt;
&lt;/Configuration&gt;
</pre></li>
      <li value="3">Import the <code>LogManager</code> class and <code>Logger</code> interface from the Apache Log4j library to enable logging functionality in your application. Next, create a static logger instance enable logging capabilities:<pre xml:space="preserve">
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
// ...
// ...
private static final Logger logger = LogManager.getLogger();			</pre></li>
      <li value="4">Add logging to your program to provide detailed logging of key events, such as service interruptions and reconnection attempts. The example below shows how to log a warning message when a service interruption occurs, including the cause of the interruption, an informational message when a reconnection attempt is made, and an informational message when the service successfully reconnects:<pre xml:space="preserve">
final MessagingService messagingService = MessagingService.builder(ConfigurationProfile.V1)
    .fromProperties(properties)
    .build();
messagingService.connect();
messagingService.addServiceInterruptionListener(serviceEvent -&gt; {
    logger.warn("### SERVICE INTERRUPTION: " + serviceEvent.getCause());
});
messagingService.addReconnectionAttemptListener(serviceEvent -&gt; {
    logger.info("### RECONNECTING ATTEMPT: " + serviceEvent);
});
messagingService.addReconnectionListener(serviceEvent -&gt; {
    logger.info("### RECONNECTED: " + serviceEvent);
});	</pre></li>
      <li value="5">The following console output shows example log messages for a successful reconnection attempt after a service interruption:<pre xml:space="preserve">
--LOG-- 13:58:20.720 [Context_1_Thread_reconnect_service] INFO  com.solac.sampl.java.patte.GuaranteedPublisher - ### RECONNECTING ATTEMPT: ServiceEventImpl{timestamp=1721843900720, brokerURI='...', message='null', cause=com.solace.messaging.PubSubPlusClientException: com.solacesystems.jcsmp.JCSMPTransportException: Channel is closed by peer} peer}
--LOG-- 13:58:20.720 [Context_1_Thread_reconnect_service] INFO  com.solac.jcsmp.proto.impl.TcpClientChannel - Client-1: Connecting to host 'orig=..., host=...' (host 1 of 1, smfclient 1, attempt 3 of 20, this_host_attempt: 4 of 6)
--LOG-- 13:58:20.737 [Context_1_Thread_reconnect_service] INFO  com.solac.jcsmp.proto.impl.TcpClientChannel - Client-1: Connected to host 'orig=..., host=...' (smfclient 1) local(/...) remote(.../...)
--LOG-- 13:58:20.754 [Context_1_Thread_reconnect_notify_service] INFO  com.solac.sampl.java.patte.GuaranteedPublisher - ### RECONNECTED: ServiceEventImpl{timestamp=1721843900754, brokerURI='...', message='null', cause=null}	</pre></li>
    </ol>
  </body>
</html>
