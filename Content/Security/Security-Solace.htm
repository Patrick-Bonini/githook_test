<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
  <head>
    <link href="../Resources/TableStyles/Table_Num.css" rel="stylesheet" MadCap:stylesheetType="table"/>
  </head>
  <body>
    <h1>Security Overview</h1>
    <p>This section provides a high-level overview of security with <MadCap:variable name="Product-Names.pubsub_brand_only"/> event brokers, along with links to further reading on related topics. Specifically, we discuss the following aspects of security:</p>
    <ul>
      <li>the goals for achieving secure systems—restricting data access, preventing data loss or damage, role separation, and establishing audit trails</li>
      <li> how these goals can be achieved through secure system capabilities such as authentication, authorization, auditing, and encryption</li>
      <li>considerations when securing the event broker's operating environment</li>
    </ul>
    <p class="Note">To determine whether your system complies with <MadCap:variable name="Variables.CompanyName"/>'s best practices, contact our <a href="mailto:services@solace.com?subject=Security Best Practices Evaluation" class="link-internal">Professional Services Group</a> to arrange a security evaluation.</p>
    <p class="Note">To obfuscate passwords, <MadCap:variable name="Variables.CompanyName"/> recommends setting up the admin password and redundancy pre-shared keys using file paths (which allow you to configure these passwords using secrets) or the <code>encryptedpassword</code> configuration key. For more on using file paths, see <a href="../Software-Broker/Container-Tasks/Config-Secrets.htm" class="link-internal">Configuring Secrets</a>. </p>
    <h2 class="with-rule"><a name="Goals"/>Goals for a Secure System</h2>
    <p>There are many descriptions of secure system, from Trusted Computer System Evaluation Criteria (TCSEC) of the US Department of Defense to modern PCI, HIPAA, or SOC-2 compliance requirements. Despite the differences, all these descriptions can be reduced to the following secure system goals:</p>
    <p>
      <img src="../Resources/Images/Security/security-concepts-overview.jpg" style="max-width: 50%;display: block;margin-left: auto;margin-right: auto;float: right;vertical-align: middle;" alt=""/>
    </p>
    <ul>
      <li>Restricting data access to users with predefined privileges and security level access. <p>Every user accessing the system must be correctly identified and matched to predefined security policies. As well, every piece of data and infrastructure must be guarded with matching security policies.</p></li>
      <li>Preventing malicious access or accidental loss of or damage to data. <p>This includes restricting access, as previously mentioned, as well as protecting data from loss or unauthorized access both while it is being transmitted and while it is at rest. Loss prevention also requires the ability to recover data in the event of localized disasters, such as earthquakes, fires, or floods. In addition, any remotely stored  data must have the same level of secure access as the original copies.</p></li>
      <li>Separating access roles.<p> System operators must have distinct roles from users and applications that require data access.</p></li>
      <li>Auditing the activities of users, applications, and administrators.<p>To make sure it authenticates and authorizes the right individuals, the system needs to be self-monitoring and log information about both malicious activity (such as brute force password attacks) and expected activity (data processing and configuration changes).</p></li>
    </ul>
    <h3><a name="Achievin"/>Capabilities for Meeting Security Requirements</h3>
    <p>To achieve the security goals discussed above, a system must be able to:</p>
    <ul>
      <li>Authenticate each user and administrator accessing the system.</li>
      <li>
                Authorize the access to data and system settings against policies that restrict that access to predefined sets of activities, both for administrators and users.
            </li>
      <li>
              Audit the access for administrators and users, including the data they accessed and the changes they made.
            </li>
      <li>Encrypt data both in motion and at rest and ensure encryption keys are disseminated only to authorized entities.</li>
      <li>
                Monitor and restrict environmental changes and have processes in place to authorize system-level changes.
            </li>
    </ul>
    <h2 class="with-rule"><a name="Authenti"/>Authentication</h2>
    <p>Authentication is a foundational technology in modern messaging systems; authentication mechanisms are built into most messaging protocols, with  username and password combinations standard in their wireline headers. However, a secure system must have authentication checks that detect and prevent incorrect identification. Various mechanisms can be used to achieve this, including passwords, identification tokens, or security certificates, all of which are supported by <MadCap:variable name="Product-Names.pubsub_brand_only"/> event brokers. The authentication mechanism for <MadCap:variable name="Product-Names.pubsub_brand_only"/> event brokers can be as basic as an internal database configured with usernames and passwords, or a more robust mechanism using LDAP, RADIUS, Kerberos, Client Certificates, or OAuth Open ID Connect.</p>
    <h4>Authentication in Wireline</h4>
    <p><MadCap:variable name="Variables.CompanyName"/> Messaging Format (SMF) protocol and <MadCap:variable name="Product-Names.pubsub_brand_only"/> supported open-source messaging protocols all support a "connect" message as the first message of a client session. This connect message contains the username and authorization credentials. If the <MadCap:variable name="Variables.CompanyName"/> Broker receives a connect message with valid credentials, then an authenticated bi-directional session is established, and messages can flow in either direction. If the event broker does not receive a connect message with valid credentials, it disconnects the session. For REST producers, there is no authenticated session; therefore, the username and credentials must be sent with each message.</p>
    <h4>  Basic Authentication</h4>
    <p>A basic authentication scheme allows a connecting client to authenticate with an event broker by providing a valid client username and password as its credentials.   Basic authentication using an internal database with username and password is suitable for small deployments or testing, but it has potential limitations.  Managing many usernames and passwords in an event broker configuration is difficult and error-prone, especially over a fleet of brokers. Event brokers can perform basic authentication using look-up validation against LDAP (Active Directory) or RADIUS services, thereby eliminating the need to manage passwords internally. However, this solution requires the end application or user to store or remember the password for authenticating.</p>
    <p> Single sign-on (SSO) with Kerberos, certificate authentication with a client certificates, or token-based authentication with OAuth Open ID Connect are all options  that solve the username/password retention problem on the client side.</p>
    <h4>Certificate Authentication and Revocation Checking</h4>
    <p>For most organization, having a secure tool to manage the lifecycle of usernames and passwords is a hard requirement. Some common options are Active Directory, a cloud identity service, or client certificates. If a client connecting via TLS provides an X.509 certificate, the messaging system can validate the client's identity using the common name (CN) and encrypted signature. In addition, although certificates are issued and managed outside the messaging system, the messaging system itself can perform certificate revocation checking. Revocation checking allows a central administrator the ability to deny access based on revoked certificates, thereby maintaining positive control over authentication.</p>
    <p>For details on how to use client certificates, see <MadCap:xref href="Client-Authentication-Overview.htm#Client-Certificate">Client Certificate Authentication</MadCap:xref>.</p>
    <p>To learn how revocation checking is performed in <MadCap:variable name="Product-Names.pubsub_brand_only"/> event brokers, see <MadCap:xref href="Configuring-OCSP-CRL-Certificate-Revocation.htm">Configuring OCSP-CRL Certificate Revocation Checking</MadCap:xref> .</p>
    <h4>Authenticating Administrators</h4>
    <p>Just as the messaging protocol users must be authenticated, so should system administrators. All the techniques mentioned above can be applied to managing and securing your administrator users. It might seem simplest to have a common username and password for all administrators and administrative tasks, but this makes it impossible to know exactly who changing the system and why.  For a more secure system:</p>
    <ul>
      <li>Use a distinct single sign-on for each administrator so that every change can be linked to a specific person.</li>
      <li> Have a change management system in place so that every system update is initiated through a change request that provides detailed information about the reason for the change.</li>
    </ul>
    <p>For more information about event broker authentication, refer to <MadCap:xref href="Client-Authentication.htm">Client Authentication</MadCap:xref> and <MadCap:xref href="../Admin/Mgmt-User-Authen-Auth-Overview.htm">Management User Authentication / Authorization Overview</MadCap:xref>.</p>
    <h2 class="with-rule"><a name="Authoriz"/>Authorization</h2>
    <p> After (or in conjunction with) authentication, the user must be authorized to access the system's data and resources. Your configuration must handle authorizing users at many levels. The following sections discuss some of the common authorization requirements and how <MadCap:variable name="Product-Names.pubsub_brand_only"/>  event brokers handle these requirements.</p>
    <p>If you would like to read about the event broker's authorization process, you can find that in the <MadCap:xref href="Client-Authorization-Overview.htm">Client Authorization Overview</MadCap:xref>.</p>
    <h4>Authorization to Connect</h4>
    <p>External users can connect to the broker only via a firewall or a load balancer. In many cases, these intermediate devices re-write the source IP address, making it difficult or impossible to determine the original source address. To solve this problem, the system should be configured so that the firewall or load balancer accepts external connections only from trusted address ranges and  <MadCap:variable name="Product-Names.pubsub_brand_only"/>  event brokers accept external connections only from the firewall or load balancer addresses. This configuration prevents bypassing the firewall as a vector of attack. With event brokers, you can <a href="ACL-Overview.htm#Control-Connect" class="link-internal">control which clients can connect</a> to your event broker using Access Control Lists (ACLs).</p>
    <p>It might also be worth considering limiting the maximum number of connections for external users to one or two to prevent compromised usernames from making thousands of connections and consuming all the broker resources. For more information, see <MadCap:xref href="Configuring-Client-Profiles.htm#Config-Max-Connects-Username">Configuring Max Connections Per Username</MadCap:xref>.</p>
    <h4>Authorization to Consume Resources</h4>
    <p>You can limit the resources each group of users can consume. Limits you can enforce include:</p>
    <ul>
      <li> the number of client egress queues groups can access</li>
      <li>the ability of groups to read or write persistent messages</li>
    </ul>
    <p>Take a look at <MadCap:xref href="Configuring-Client-Profiles.htm">Client Profile Configuration</MadCap:xref> to learn how you can apply common configurations to groups of clients.</p>
    <h4>Authorization to Access VPN-Level Resources</h4>
    <p>Each client connection is associated with a single Message VPN. Within each VPN, a topic namespace  limits the dissemination of data across the broker, as well as the system resources clients can consume.  This segregation of data is useful in multi-tenant situations. For more information, refer to <MadCap:xref href="../Features/VPN/Managing-Message-VPNs.htm">Message VPNs</MadCap:xref>.</p>
    <h4>Authorization to Send and Receive Data</h4>
    <p>You can place restrictions on the addressable data each authenticated user can produce and consume. Using ACLs, you can control the topics to which clients are allowed to publish or subscribe. </p>
    <p>For more information about configuring ACLs, see <a href="ACL-Overview.htm#Control-Pub" class="link-internal">Controlling what clients can publish to</a> and <a href="ACL-Overview.htm#Control-Sub" class="link-internal">Controlling what topics a client can subscribe to</a>.</p>
    <p>You can also individually configure each queue to modify:</p>
    <ul>
      <li> which clients can publish messages to the queue </li>
      <li> which clients can read messages from the queue </li>
      <li>which messages the queue attracts</li>
    </ul>
    <p>Refer to <MadCap:xref href="../Messaging/Guaranteed-Msg/Endpoints.htm#Endpoint_Permissions">Endpoint Permissions and Access Control</MadCap:xref> for details about configuring endpoint permissions.</p>
    <p> There are environments where real-time data access control and monitoring (auditing capability) is required. This is beyond the capability of relatively static permission lists. In these situations, you can offload subscription control to an on-behalf-of subscription manager that contains specific business logic to restrict data access.</p>
    <p>For more information about event broker managed subscriptions, see  <MadCap:xref href="../API/API-Developer-Guide/Managing-Subscriptions.htm#Manage-On-Behalf">Managing Topic Subscriptions on Behalf of Other Clients</MadCap:xref> in this documentation and <a href="https://solace.com/blog/obo-managed-subscriptions-solace/" target="_blank" class="link-internal">An Architectural Look at Managed Subscriptions in <MadCap:variable name="Variables.CompanyName"/></a> in the <MadCap:variable name="Variables.CompanyName"/> Blog.</p>
    <h4>Authorization to Change System- and VPN-Level Configuration</h4>
    <p>You can limit the access of your administrator users to read and write specific VPN configurations and system-level configurations.  As previously discussed, it is a best practice to provision individual administrative accounts to enable auditing of configuration changes.</p>
    <p>For further information on managing your event broker administrator users, refer to <MadCap:xref href="../Admin/Mgmt-User-Authen-Auth-Overview.htm">Management User Authentication / Authorization Overview</MadCap:xref> and <MadCap:xref href="../Admin/CLI-User-Access-Levels.htm">CLI User Access Levels</MadCap:xref>.</p>
    <h2 class="with-rule"><a name="Audit"/>Audit</h2>
    <p>With correctly authenticated and authorized users and administrators, you have a system that provides access  to only those individuals who have the correct predefined privileges. However, to ensure that the system authenticates and authorizes the right individuals, the system must be self-monitoring and log events such as brute force password attacks as well as expected accesses to data and configuration changes. Logging this information is not enough; it needs to be expertly analyzed to gain insights into whether the system is operating in a secure manner. </p>
    <p>Refer to <MadCap:xref href="../Monitoring/Displaying-Logs.htm">Displaying and Clearing Logs </MadCap:xref> for general information about <MadCap:variable name="Variables.CompanyName"/>  <MadCap:variable name="Product-Names.pubsub_brand_only"/> event broker logs.</p>
    <h4>Auditing Configuration Changes</h4>
    <p>Each configuration change can be logged on a command-by-command basis, irrespective of whether the change was done using the CLI or through one of the programmatic interfaces (SEMPv1 or SEMPv2). As previously discussed, to ensure auditing capability, each administrator or change management request should have its own login account.</p>
    <p>See  <MadCap:xref href="../Monitoring/Monitoring-Events-Using-Syslog.htm#Managing2">Managing Command Logging</MadCap:xref> for details about the command log format.</p>
    <h4>Auditing Data Access</h4>
    <p>The event broker logs show every client connection and disconnection event, including the queues the client has bound to and the number of messages they have received. It is also possible to log every topic subscribe and unsubscribe event, but doing this impacts the performance of subscription changes. Therefore, we recommend receiving this information over the messaging interface and not through logs or Syslog.</p>
    <p>To learn more about logging events generated by the broker itself, see the following:</p>
    <ul>
      <li>
        <MadCap:xref href="../Monitoring/Subscribing-to-MBus-Events.htm">Subscribing to Message Bus Events</MadCap:xref>
      </li>
      <li>
        <MadCap:xref href="../Monitoring/Subscribing-to-MBus-Events.htm#subscribing_to_message_bus_events_1651767527_299241">Subscribe Event Topics</MadCap:xref>
      </li>
      <li>
        <a href="https://docs.solace.com/Solace-PubSub-Event-Reference/event_ref_boiler.html#CLIENT_CLIENT_CONNECT" class="link-internal">CLIENT_CLIENT_CONNECT</a>
      </li>
      <li>
        <a href="https://docs.solace.com/Solace-PubSub-Event-Reference/event_ref_boiler.html#CLIENT_CLIENT_BIND_SUCCESS" class="link-internal">CLIENT_CLIENT_BIND_SUCCESS</a>
      </li>
      <li>
        <a href="https://docs.solace.com/Solace-PubSub-Event-Reference/event_ref_boiler.html#CLIENT_CLIENT_DISCONNECT" class="link-internal">CLIENT_CLIENT_DISCONNECT</a>
      </li>
    </ul>
    <h2 class="with-rule"><a name="Encrypti"/>Encryption</h2>
    <p>Encryption prevents  unauthorized data access (both intentional and unintentional) and ensures data integrity. If an unauthorized individual gets access to your data  during transfer, not only they can steal it, but they can also manipulate it to force  your system to achieve their desired outcome.</p>
    <h4>Encryption in Closed Systems</h4>
    <p>In closed systems, where the producers and consumers of data are managed by one entity, and the security requirements are homogeneous across all producers and consumers, data should be encrypted as close as possible to the data origin and decrypted only during data consumption. The result would be an opaque encrypted byte stream flowing through the messaging system, with plain-text headers used for routing the data to the correct destinations and time-to-live behaviors. Application teams would manage the encryption keys.</p>
    <h4>Encryption in Open Systems </h4>
    <p>In a more open system, where it may not be practical for all consumers and producers to share the encryption keys or have the same level of security, encrypting data hop-by-hop in the messaging layer  is an option. For example, in a system that has internal and external users, the external users could have their own encryption keys, and the internal users may not require encryption at all. The data could be decrypted at each broker hop and re-encrypted for next-hop peers that require encryption. While there is no need for end-to-end key sharing, and the producer application also cannot dictate that the encrypted data it has sent will remain encrypted throughout the system.  System administrators would have to ensure that the authorization policies would prevent data transmission over an unencrypted link (if that is required).</p>
    <p>This class of application requires  encryption in the following areas:</p>
    <ul>
      <li>
        <b>Encryption of the administrator connection</b>
        <p>Securing the management interface is vital in creating a secure system. Event broker management interfaces are secured through the following implementation:</p>
        <ul>
          <li>Control plane access is secured by SSH</li>
          <li><MadCap:variable name="Product-Names.pubsubmanager_short"/> is accessible over HTTPS</li>
          <li>SEMP / SEMPv2 is accessible over HTTPS</li>
        </ul>
        <p>For further information, refer to <MadCap:xref href="TLS-SSL-Service-Connections.htm#managing_tls_ssl_service_1762742558_317096">TLS/SSL Encryption Configuration for SEMP Service</MadCap:xref>.</p>
      </li>
      <li>
        <b>Network encryption between brokers and clients</b>
        <p>The <MadCap:xref href="TLS-SSL-Message-Encryption-Overview.htm">TLS / SSL Encryption Overview</MadCap:xref>
 and <MadCap:xref href="Monitoring-TLS-SSL-Service.htm">Monitoring TLS/SSL Configuration and Connections</MadCap:xref> sections provide overviews of event broker network encryption. These discussions cover various TLS options, setting cipher suites and signature algorithms for each connection type, as well as information on server and client certificate revocation. </p>
      </li>
      <li>
        <b>Encryption of bridges and message routing</b>
        <p>Event broker encryption ensures that data being transmitted across a wider network, even a global public network, is safe from unauthorized access and manipulation. Take a look at <MadCap:xref href="../Features/VPN/Configuring-VPN-Bridges.htm#Config-SSL">Configuring TLS/SSL</MadCap:xref> and <MadCap:xref href="../Features/VPN/Configuring-VPN-Bridges.htm#Config-Client-Cert">Configuring Client Certificate Authentication</MadCap:xref> to learn about Message VPN bridge configuration for a secure system.</p>
      </li>
      <li>
        <b>Disaster recovery link encryption</b>
        <p>Just like bridge encryption, disaster recovery (DR) link encryption, including encryption into the DR site, ensures denial of unauthorized access and manipulation of data across a wider network. To read more about the event broker's disaster recovery link encryption, see <MadCap:xref href="TLS-SSL-Service-Connections.htm#managing_tls_ssl_service_1762742558_359372">TLS/SSL Encryption Configuration for Replication Config-Sync Bridges</MadCap:xref>.</p>
      </li>
      <li>
        <b>Encryption of disks and data at rest </b>
        <p><MadCap:variable name="Variables.CompanyName"/><MadCap:variable name="Product-Names.pubsub_brand_only"/> event brokers do not encrypt the disks directly but instead rely on the underlying infrastructure to encrypt data at rest.</p>
      </li>
    </ul>
    <p>We discussed the <MadCap:variable name="Product-Names.pubsub_brand_only"/> event broker's security features and how they can be used to achieve secure systems. Now let's look at how you can secure the event broker itself. There are three main areas to consider when securing the event broker's operating environment:</p>
    <h2 class="with-rule"><a name="Network2"/>Securing the Network</h2>
    <p>The network interfaces are usually the primary access points and points of attack from outside entities. If the event broker is servicing only internal applications and clients, then no specific network security consideration  is warranted beyond corporate policy. However, in the following scenarios, you should consider additional network security:</p>
    <ul>
      <li>external clients (mobile or web clients) accessing internal services</li>
      <li>a hybrid or multi-cloud environment, where some work is offloaded to the public cloud and sensitive work is kept in private data centers</li>
    </ul>
    <p>When external clients are allowed to access internal resources, a Defense in Depth (DiD) approach is standard practice. In this approach,  defensive mechanisms are layered to protect valuable data and information. Typically,  an external firewall handles threats such as SYN floods and other denial-of-service (DoS) attacks, and may also restrict incoming protocols and IP addresses. The traffic then moves to an internal firewall that protects internal services, for example using policies that limit externally initiated connections. </p>
    <p>Internal hosts that do need to accept external connections sit between these two firewalls (that is,  between the public internet and the corporate network) in a network commonly called a Demilitarized Zone (DMZ). Using an event broker in the DMZ allows external clients to connect to and access internal services without requiring those internal services to accept external connections, as shown in the diagram below. While it is possible to have separate network interfaces for internal- and external-facing traffic, it's not needed. </p>
    <p class="Note"> We recommend that you do not place the event broker directly on the public network; it should be placed behind the external firewalls. </p>
    <p>
      <img src="../Resources/Images/Security/pubsub-network-dmz.png" alt=""/>
    </p>
    <h3><MadCap:variable name="Product-Names.pubsub_brand_only"/>  Event Broker: Appliance </h3>
    <p>The <MadCap:variable name="Product-Names.pubsub_brand_only"/>  <MadCap:variable name="Product-Names.broker_appliance_short"/> has hardened data interfaces with no standard OS receiving data and no TCP forwarding directly to backend applications.  This has the advantage of limiting the effects of network attacks like SYN floods and reducing attack vectors for standard open ports and buffer overflow vulnerabilities. However, the broker is not a firewall; it does not have all the configuration and auditing capability that you would expect from a firewall.</p>
    <p>The<MadCap:variable name="Product-Names.pubsub_brand_only"/>  <MadCap:variable name="Product-Names.broker_appliance_short"/> does not have a standard operating system (OS) in the data path for most messages; it has an OS on the control plane for <MadCap:variable name="Product-Names.broker_appliance_short"/> management. This management OS is exposed through a separate network interface that can be restricted to a different trusted network.</p>
    <p>
      <img src="../Resources/Images/Security/pubsub-appliance-network.png" style="max-width: 80%;" alt=""/>
    </p>
    <h3><MadCap:variable name="Product-Names.pubsub_brand_only"/>  Event Broker: Software</h3>
    <p>The same model also applies when <MadCap:variable name="Product-Names.broker_sw_short"/>s are placed in a public cloud infrastructure. It is generally recommended that you place publicly accessible resources behind a firewall or a load balancer to mitigate DDoS attacks. Refer to the <a href="https://d1.awsstatic.com/whitepapers/Security/DDoS_White_Paper.pdf" target="_blank" class="link-offsite">AWS Best Practices for DDoS Resiliency</a> document for additional recommendations.</p>
    <p>The diagram below illustrates a high-availability (HA) event broker set up in AWS public cloud infrastructure. The Internet Gateway at the top is the exterior connection to the Internet. Below the Internet Gateway is the DMZ layer that contains NATs, Bastion Hosts, and ELB. The DMZ layer prevents direct connections to and from underlying resources—in this case, the event brokers. The ELB acts as a load balancer/traffic director and a firewall, thus mitigating and preventing any denial of service and TCP level attacks.  Below the DMZ layer are the <MadCap:variable name="Variables.CompanyName"/> <MadCap:variable name="Product-Names.pubsub_brand_only"/> event brokers; they are protected by the upper layer and are not directly addressable from the Internet. The event brokers terminate the NAT’ed TCP connections, do authentication and authorization, and may terminate TLS connections.    They do not directly forward IP or TCP traffic to applications but instead re-encapsulate data in internally addressed connections.  The final layer at the bottom is where the applications sit.  They are only reachable from the event brokers and possibly from the Bastion jump boxes.</p>
    <p>
      <img src="../Resources/Images/Security/Solace-AWS-HA-Prod-3AZ.png" style="max-width: 80%;" alt=""/>
    </p>
    <p>To learn more about setting up this configuration in the AWS public cloud infrastructure, check out the <a href="https://github.com/SolaceProducts/solace-aws-ha-quickstart" class="link-offsite">quickstart in GitHub</a>.</p>
    <h3><MadCap:variable name="Product-Names.pubsub_brand_only"/>  Event Broker: Cloud</h3>
    <p>For <MadCap:variable name="Product-Names.cloud_product_long"/> , all best practices for public cloud service placement are implemented. Refer to the <a href="https://solace.com/products/event-broker/cloud/security/" class="link-offsite"><MadCap:variable name="Product-Names.pubsub_brand_only"/> Cloud security</a> page for more information.</p>
    <h2 class="with-rule"><a name="Host"/>Securing the Host</h2>
    <p>Once the network is secure, the next thing to look at is the physical host or base OS, because tampering at this level can circumvent all other security measures.</p>
    <h3><MadCap:variable name="Product-Names.pubsub_brand_only"/>  Event Broker: Appliance </h3>
    <p>As described above, the <MadCap:variable name="Product-Names.broker_appliance_short"/> does not have a standard OS in the datapath for most messages, but they have an OS on the control plane for management.  The host OS is limited to expose only the functions needed to perform its tasks, all non-essential processes and applications are removed, and a minimal set of ports are exposed.  The host OS is rigorously patched for security vulnerability fixes and regularly tested for vulnerabilities.</p>
    <h3><MadCap:variable name="Product-Names.pubsub_brand_only"/>  Event Broker: Software</h3>
    <p>The <MadCap:variable name="Product-Names.broker_sw_short"/> is packaged in two ways:</p>
    <ul>
      <li>Linux machine image<p>The Linux machine image is a stripped-down Linux host, like the <MadCap:variable name="Product-Names.broker_appliance_short"/> control plane, with the <MadCap:variable name="Product-Names.broker_sw_short"/> running inside a container.  With each release, the host OS is patched for security fixes and tested for vulnerabilities.</p></li>
      <li>Linux container<p> The Linux container consists of the <MadCap:variable name="Product-Names.broker_sw_short"/> is used in the machine image, but without the Linux host OS. The customer is responsible for all host OS hardening, patching, and testing.   This task can be mitigated in cloud environments by using a base Linux OS from the cloud service provider .</p></li>
    </ul>
    <p>Given that the software event broker is deployed as a Linux container, securing the broker centers around two activities: securing the container and deploying the container in a secure host environment. Once these activities are completed, sensitive information such as passwords and certificates must also be protected by bootstrapping the software event broker. </p>
    <h4>Securing the container </h4>
    <p>Many of the vulnerability patching and testing activities for <MadCap:variable name="Product-Names.broker_appliance_short"/> are also carried out on the software event broker container.   The container is developed based on the best practices outlined in the Center for Internet Security (CIS) guidelines and tested on each release with the <a href="https://github.com/docker/docker-bench-security" class="link-offsite">derived benchmark</a>. The software event broker performs self-checks to validate the integrity of critical system files, which detects corruption and may detect tampering.</p>
    <h4>Deploying the container in a secure host environment</h4>
    <p>Avoid using elevated privileges within a container. If a root user can break out of the container, they will have those same elevated privileges on the host node. For example, if you have, root access in the container and then mount the host OS partition, you will also have root access on that partition, and therefore will be able to edit system files. This would allow you to enable services or change user configuration and passwords.</p>
    <h5>Default Ports</h5>
    <p>Starting with the 9.4.0 release, root capabilities are required to listen on ports below 1024. To listen to a port below 1024, the user ID must be set to 0 (root), and the container must be created with the <code>NET_BIND_SERVICE</code> capability. For production deployments, we recommend running containers with a non-zero user ID. The default ports for the new installs are as follows:</p>
    <table style="width: 60%;margin-left: 0;margin-right: auto;mc-table-style: url('../Resources/TableStyles/Table_Num.css');" class="TableStyle-Table_Num" cellspacing="0">
      <col class="TableStyle-Table_Num-Column-Column1"/>
      <col class="TableStyle-Table_Num-Column-Column1"/>
      <col class="TableStyle-Table_Num-Column-Column1"/>
      <thead>
        <tr class="TableStyle-Table_Num-Head-Header1">
          <th class="TableStyle-Table_Num-HeadE-Column1-Header1">Port</th>
          <th class="TableStyle-Table_Num-HeadE-Column1-Header1">Traffic</th>
          <th class="TableStyle-Table_Num-HeadD-Column1-Header1">Previous Port Assignment</th>
        </tr>
      </thead>
      <tbody>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">8008</td>
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">Web transport</td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">80</td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">1443</td>
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">Web transport over TLS</td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">443</td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyB-Column1-Body1">1943</td>
          <td class="TableStyle-Table_Num-BodyB-Column1-Body1">SEMP over TLS</td>
          <td class="TableStyle-Table_Num-BodyA-Column1-Body1">843</td>
        </tr>
      </tbody>
    </table>
    <h5>Docker</h5>
    <p>To avoid allowing elevated privileges within a container, we recommend the following <code>docker create</code> settings:</p>
    <table style="margin-left: 0;margin-right: auto;mc-table-style: url('../Resources/TableStyles/Table_Num.css');" class="TableStyle-Table_Num" cellspacing="0">
      <col class="TableStyle-Table_Num-Column-Column1" style="width: 30%;"/>
      <col class="TableStyle-Table_Num-Column-Column1" style="width: 70%;"/>
      <thead>
        <tr class="TableStyle-Table_Num-Head-Header1">
          <th class="TableStyle-Table_Num-HeadE-Column1-Header1">Option</th>
          <th class="TableStyle-Table_Num-HeadD-Column1-Header1">Description</th>
        </tr>
      </thead>
      <tbody>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
            <pre>--privileged=false</pre>
          </td>
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
            <p>This  option denies extended privileges to the container. While this option can mean different things on different systems, it should restrict the ability to modify host files, devices, and network stack.</p>
            <p>In OpenShift this setting corresponds to the <code>restricted</code> Security Context Constraint (SCC).</p>
          </td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyB-Column1-Body1">
            <pre>--security-opt no-new-privileges</pre>
          </td>
          <td class="TableStyle-Table_Num-BodyA-Column1-Body1">
            <p>Use this option to prevent the container processes from gaining additional privileges (for example, using  sudo to gain higher permissions within the container).</p>
          </td>
        </tr>
      </tbody>
    </table>
    <h5>Kubernetes</h5>
    <p>The <a href="https://kubernetes.io/docs/tasks/configure-pod-container/security-context/" class="link-offsite">Kubernetes documentation</a> explains in detail how to properly set up your security context. </p>
    <p>We recommend the following settings:</p>
    <pre class="Code" xml:space="preserve">apiVersion: v1

...

spec:
    securityContext:
        runAsUser: <span style="color: #ff0000;">[non zero]</span>
        runAsGroup: <span style="color: #ff0000;">[non zero]</span>
        fsGroup: <span style="color: #ff0000;">[non zero]</span>
	
        ...	

    containers:

		...

        securityContext:
            privileged: <span style="color: #ff0000;">false</span>
            allowPrivilegeEscalation: <span style="color: #ff0000;">false</span></pre>
    <h5>OpenShift</h5>
    <p>The Openshift <code>restricted</code> SCC implements the Kubernetes security context settings list above and more.  Running your containers with the Openshift <code>restricted</code> SCC should be sufficient.</p>
    <h4>Bootstrapping the software event broker</h4>
    <p>Once the container has been configured to deploy without elevated privileges, sensitive information such as passwords and certificates must also be protected. This can be done by bootstrapping the software event broker during container creation. </p>
    <p><a href="../Software-Broker/Configuration-Keys-Reference.htm" class="link-internal">Configuration keys</a> are the bootstrapping tool for the software event broker. For configuring sensitive information, you can use secrets. A secret is a mechanism used by automated deployment tools (for example, Kubernetes) to store and transfer sensitive data to a host and make it available inside a container running on that host. Secrets are created in the controller application and then shared with the hosts that need them when the containers are deployed.  To implement secrets, you create a secret (password or private key) and then attach the secret to your container. The automation environment then  transfers the secret data securely to the instance and inserts it in the container through a file in a <code>tmpfs</code> (that is, in RAM, not on disk). Finally, a configuration key points to the location of the secret data inside the container.</p>
    <p><MadCap:variable name="Product-Names.pubsub_brand_only"/>software event brokers support secrets for:</p>
    <ul>
      <li>Redundancy group passwords, server certificates, and CLI user passwords</li>
      <li>Anything else required to get a broker to the point where it can be managed via CLI or <MadCap:variable name="Product-Names.pubsubmanager_short"/> (over TLS)</li>
    </ul>
    <p>For more information on using secrets in the software event broker, see <MadCap:xref href="../Software-Broker/Container-Tasks/Config-Secrets.htm">Secrets Configuration</MadCap:xref>.</p>
    <h3><MadCap:variable name="Product-Names.pubsub_brand_only"/>  Event Broker: Cloud</h3>
    <p>In <MadCap:variable name="Product-Names.pubsub_brand_only"/> Cloud, all the above-mentioned security concerns are addressed by the managed service as well as security-minded integration into cloud provider environments and services. For more information, refer to the <a href="https://solace.com/products/event-broker/cloud/security/" class="link-offsite"><MadCap:variable name="Product-Names.pubsub_brand_only"/> Cloud security</a> page.</p>
    <h2 class="with-rule"><a name="Disks"/>Securing Data at Rest</h2>
    <p>  If the network or host is compromised, a proper level of protection for data at rest might well be the last line of defense against unauthorized data access. As discussed previously, if you are using TLS on the messaging layer, data is decrypted as it passes through the broker; this also means it is stored unencrypted in non-volatile disks by the event broker. For this reason, we recommend using self-encrypting disks.</p>
    <h3><MadCap:variable name="Product-Names.pubsub_brand_only"/>  Event Broker: Appliance </h3>
    <p>For high-availability (HA) pairs, all persistent data is stored on the attached SAN, and configuration and logs are stored in internal redundant solid-state drives. The HA pair can only connect to one SAN at a time; this means that a complete SAN failure would trigger a Disaster Recover (DR) event. If this setup is not suitable for your enterprise HA and DR strategy for applications, then SAN replication with data center and SAN failover in the fibre channel infrastructure might be required. Keep in mind that if you are using SAN disk encryption, the <MadCap:variable name="Product-Names.broker_appliance_short"/>s must be able to mount and read/write to SAN partitions in the primary and DR sites.</p>
    <p>For a discussion on  SAN requirements for an <MadCap:variable name="Product-Names.broker_appliance_short"/>, see <MadCap:xref href="../Appliance/3560-Hardware-Installation/External-Disk-Storage-Ar.htm">External Disk Storage Array Requirements</MadCap:xref>.</p>
    <h3><MadCap:variable name="Product-Names.pubsub_brand_only"/>  Event Broker: Software</h3>
    <p>The software event broker was designed with a shared-nothing disk strategy for data storage. Each software event broker mounts its own partitions for data configuration and logs. If the data points are sufficiently placed—through mechanisms such as AWS availability zones, spread placement group, or Azure Availability Sets—there should be no further requirement for disk replication beyond the messaging layer of HA and DR. Although software event brokers do not provide disk encryption, they interoperate with standard cloud-provider disk encryption, as well as standard Linux block device encryption.</p>
    <h3><MadCap:variable name="Product-Names.pubsub_brand_only"/>  Event Broker: Cloud</h3>
    <p>All the security concerns discussed above are addressed by the managed service as well as security-minded integration into cloud provider environments and services.  For more information, see the <a href="https://solace.com/products/security/" class="link-offsite" target="_blank">Trust, Compliance &amp; Security Center</a> page.</p>
  </body>
</html>
