<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
  <head>
    <link href="../Resources/TableStyles/Table_Num.css" rel="stylesheet" MadCap:stylesheetType="table"/>
    <title/>
  </head>
  <body>
    <h1>Client Authentication</h1>
    <p>When an application or device connects to a particular Message VPN, the resulting client connection must be authenticated before any client requests can be processed. A connecting client is authenticated on a per-Message VPN‑basis through one of the following client authentication schemes:</p>
    <ul>
      <li>
        <MadCap:xref href="#Basic-Authentication">Basic Authentication</MadCap:xref>
      </li>
      <li>
        <MadCap:xref href="#Client-Certificate">Client Certificate Authentication</MadCap:xref>
      </li>
      <li>
        <MadCap:xref href="#Kerberos">Kerberos Authentication</MadCap:xref>
      </li>
      <li>
        <MadCap:xref href="#OAuth">OAuth Authentication</MadCap:xref>
      </li>
    </ul>
    <p class="Note">More than one type of authentication scheme can be configured and enabled for a Message VPN, but a client can only be configured to use one type of authentication scheme.</p>
    <h2 class="with-rule"><a name="Basic-Authentication"/>Basic Authentication</h2>
    <p>A basic authentication scheme allows a connecting client to authenticate with an event broker by providing a valid client username and password as its credentials.</p>
    <p>Basic authentication is the default client authentication scheme for a Message VPN. It's available for client applications using any Solace messaging API. It's also available for client applications using OpenMAMA API, REST, AMQP, or MQTT.</p>
    <p>Clients can use Basic authentication for either a plain-text or a Transport Layer Security (TLS) / Secure Sockets Layer (SSL)-encrypted client connection to the event broker.</p>
    <p>This authentication scheme uses one of the following authentication types:</p>
    <ul>
      <li>
        <u>Internal</u>
      </li>
      <p>The client username and password provided by the client are verified against an internal event broker database.</p>
      <li>
        <u>RADIUS</u>
      </li>
      <p>The client username and password are sent to an external RADIUS server for authentication.</p>
      <li>
        <u>LDAP</u>
      </li>
      <p>The client username and password are sent to an external LDAP server for authentication.</p>
      <li>
        <u>None</u>
      </li>
      <p>No client authentication is performed for the client. Solace strongly recommends against using no client authentication.</p>
    </ul>
    <h3><a name="Provbasic"/>Provisioning &amp; Configuration Information</h3>
    <p>To use basic authentication to authenticate connecting clients, the following configuration is required for the following areas:</p>
    <ul>
      <li>
        <u>Client configuration</u>
        <ul>
          <li>For clients using Solace messaging APIs, their client username and password are provided as configurable session properties. </li>
          <li>For information on using Basic Authentication with Solace APIs, see:</li>
          <ul>
            <li><MadCap:xref href="../API/API-Developer-Guide/Defining-Client-Authentication.htm#Basic-Auth">Basic Authentication</MadCap:xref> for Solace enterprise APIs.</li>
            <li><MadCap:xref href="../API/Solace-JMS-API/Connection-Factories.htm#establishing_connections_577400906_338667">Basic Authentication</MadCap:xref> for Solace's JMS API.</li>
          </ul>
          <li>For OpenMAMA clients, basic authentication parameters are configured for the Solace Middleware Bridge that is used to establish a connection to the event broker.For more information, see the <MadCap:xref href="../API/Solace-OpenMama/Configuring-Solace-OpenMAMA-Bridges.htm#configuring_solace_openmama_bridges_1242721495_262244">Authentication Scheme</MadCap:xref> section in <MadCap:xref href="../API/Solace-OpenMama/Configuring-Solace-OpenMAMA-Bridges.htm#Per">Per-Transport Properties</MadCap:xref>.</li>
          <li>For REST clients, the client username and password are provided as a string in an HTTP standard header. See <MadCap:xref href="../API/RESTMessagingPrtl/Solace-Router-Interactions.htm#Client">Client Authentication</MadCap:xref>.</li>
          <li>For MQTT clients, the connect packet contains username and password fields. The CONNECT Packet contains Username and Password fields. These are mapped to a Solace client username and password. For more information, see <MadCap:xref href="../API/MQTT-311-Prtl-Conformance-Spec/MQTT Control Packets.htm#_Toc430865055">3.1.3.4 User Name</MadCap:xref> in the Solace MQTT 3.1.1 Messaging Protocol Conformance section.</li>
        </ul>
      </li>
      <li>
        <u>Event broker configuration</u>
        <ul>
          <li>A client username and password combination must be configured and enabled for internal authentication. </li>
          <p>For information on the system and Message VPN-level configurations that are required on an event broker to implement a basic authentication scheme, refer  <MadCap:xref href="Configuring-Client-Authentication.htm#Basic">Basic Authentication Configuration</MadCap:xref>.</p>
        </ul>
      </li>
    </ul>
    <h4>For REST and MQTT clients</h4>
    <p>For REST and MQTT clients, there are some additional Message VPN configurations, such as enabling the appropriate listen ports, are required. For more information, see <MadCap:xref href="../Services/Configuring-EventBroker-for-REST.htm">Configuring Event Brokers for REST Messaging</MadCap:xref> and <MadCap:xref href="../API/MQTT/Using-MQTT.htm">Using MQTT</MadCap:xref>.</p>
    <h2 class="with-rule"><a name="Client-Certificate"/>Client Certificate Authentication</h2>
    <p>A client certificate authentication (also referred to as mutual TLS or mTLS) scheme allows a client to prove its identity to the event broker by providing a valid X509v3 client certificate from a recognized Certificate Authority (CA).</p>
    <p>For this authentication scheme, the common name (CN) of the certificate provided to the event broker is mapped to the client’s assigned client username, which can be used for subsequent client authorization. Alternatively, you can configure a different source for  the client username. For details, see <MadCap:xref href="Configuring-Client-Authentication.htm#Username-Source">Configuring Client Username Sources</MadCap:xref>.</p>
    <p>If your deployment cannot guarantee that the username extracted from the certificate is unique across certificates issued by all of the CAs configured on the broker, you may want to configure client certificate to Message VPN matching to restrict the types of certificates that can be used as credentials in a Message VPN. For details, see <MadCap:xref href="Configuring-Client-Authentication.htm#Configur">Configuring Client Certificate to Message VPN Matching</MadCap:xref>.</p>
    <p>Client certificate authentication is available for clients using Solace enterprise messaging APIs. It's also available for client applications using OpenMAMA API, REST, AMQP, or MQTT.</p>
    <h3><a name="ProvClient"/>Provisioning &amp; Configuration Information</h3>
    <p>To use client certificates to authenticate connecting clients, the following configuration is required for the following areas:</p>
    <ul>
      <li>
        <u>Client configuration</u>
        <ul>
          <li>For clients using Solace messaging APIs, secure sessions must be used to establish TLS/SSL-encrypted client connections to the event broker. To create a secure session, a client certificate authentication scheme, client certificate, and a private key (depending on the API used, these could be separate files or be contained in a single keystore file) must be specified.</li>
          <li>For information on using Client Certificate Authentication with Solace APIs, see:
                    <ul><li><MadCap:xref href="../API/API-Developer-Guide/Defining-Client-Authentication.htm#Client-Cert">Client Certificate Authentication</MadCap:xref> for Solace enterprise APIs.</li><li><MadCap:xref href="../API/Solace-JMS-API/Connection-Factories.htm#establishing_connections_577400906_338010">Client Certificate Authentication</MadCap:xref> for Solace's JMS API.</li></ul></li>
          <li>For OpenMAMA clients, client certificate authentication parameters are configured for the Solace Middleware Bridge that is used to establish a connection to the event broker. For more information, see the <MadCap:xref href="../API/Solace-OpenMama/Configuring-Solace-OpenMAMA-Bridges.htm#configuring_solace_openmama_bridges_1242721495_262244">Authentication Scheme</MadCap:xref> section in <MadCap:xref href="../API/Solace-OpenMama/Configuring-Solace-OpenMAMA-Bridges.htm#Per">Per-Transport Properties</MadCap:xref>.</li>
          <li>TLS/SSL authentication is supported for REST clients. For information, see <MadCap:xref href="../API/RESTMessagingPrtl/Solace-Router-Interactions.htm#Client">Client Authentication</MadCap:xref>.</li>
          <li>TLS/SSL authentication is supported for MQTT clients. For information, see MQTT Protocol Conformance, Section <MadCap:xref href="../API/MQTT-311-Prtl-Conformance-Spec/Security.htm">5 Security</MadCap:xref>.</li>
        </ul>
      </li>
      <li>
        <u>Event broker configuration</u>
        <ol>
          <li>PubSub+ 6.1 or greater must be used.</li>
          <li>CA certificates must be loaded onto the event broker. Client certificate authentication must be configured and enabled for any Message VPNs that the clients will connect to.</li>
          <li>To enable the required secure client connections, TLS/SSL service must be configured and enabled.</li>
          <p>For further information about event broker configuration refer to <MadCap:xref href="Configuring-Client-Authentication.htm#Client-Cert">Client Certificate Authentication Configuration</MadCap:xref>.</p>
        </ol>
      </li>
    </ul>
    <h4>For REST and MQTT clients</h4>
    <p>For REST and MQTT clients, some additional Message VPN configurations, such as enabling the appropriate listen ports, are required. For more information, see <MadCap:xref href="../Services/Configuring-EventBroker-for-REST.htm">Configuring Event Brokers for REST Messaging</MadCap:xref> and <MadCap:xref href="../API/MQTT/Using-MQTT.htm">Using MQTT</MadCap:xref>.</p>
    <h4>For Message VPN bridges, Message VPN replication bridges, and Replication Config-Sync bridges</h4>
    <p>Client certificate authentication can be used on Message VPN bridges, Message VPN replication bridges, and Replication Config-Sync bridges. For more information, see <MadCap:xref MadCap:unresolvedLink="import-link:managing_tls_ssl_service_2542923039_15157" href="TLS-SSL-Service-Connections.htm">TLS/SSL Service Connections</MadCap:xref>.</p>
    <h4>For DMR clusters</h4>
    <p>Client certificate authentication can also be used on DMR clusters. For more information, see <MadCap:xref href="../Features/DMR/DMR-Mgmt-Cluster-Config.htm#Client-Cert-Auth">Configuring Authentication Using Client Certificates</MadCap:xref>.</p>
    <div class="Note">
      <p>Client certificates for Message VPN bridges,  Message VPN replication bridges, Rest delivery points (RDP)s,and DMR clusters are not synchronized by config-sync. If the event broker is being used in a high-availability (HA) configuration or in a replicated site, you must manually configure the certificates on each mate event broker or replicated Message VPN.
</p>
      <p>If the event broker is deployed such that management access to an HA group is accessible only through a load balancer, and there is no way for you to fully configure the client certificates on both active and inactive brokers, you can use the Synchronize Certificates wizard in PubSub+ Broker Manager to configure the certificates on both brokers of the HA group.</p>
    </div>
    <h2 class="with-rule"><a name="Kerberos"/>Kerberos Authentication</h2>
    <p>A Kerberos authentication scheme allows clients that have been granted a valid Kerberos ticket to connect to an event broker.</p>
    <p>Kerberos authentication is only available for clients using Solace enterprise messaging APIs or the OpenMAMA API.</p>
    <p>When a Kerberos authentication scheme is used for client authentication, a client must first authenticate with a Kerberos Authentication Server (AS) which grants the client a Ticket Granting Ticket (TGT) for a specified Kerberos User Principal. The TGT is typically obtained as part of a Single Sign-on procedure, such as logging into a Windows domain. With a valid TGT, a client can attempt to log onto an event broker using a service ticket that is in the client’s local ticket cache or has been obtained from the Ticket Granting Service (TGS). The AS and TGS (components of a Key Distribution Center (KDC)) are hosted on an external server or servers—not on an event broker.</p>
    <p>The client then provides this time-stamped "Kerberos" ticket to the event broker. If the ticket is successfully validated, the client’s connection to the Message VPN is granted.</p>
    <p>For this authentication scheme, the client’s assigned client username, which is used for subsequent client authorization, is the user principal name in the ticket provided to the event broker.</p>
    <h3><a name="ProvKeberos"/>Provisioning &amp; Configuration Information</h3>
    <p>To use Kerberos to authenticate clients connecting to an event broker, the following configurations are required:</p>
    <ul>
      <li>
        <u>Client-side configuration</u>
        <ul>
          <li>For clients using Solace messaging APIs, the appropriate Java distribution must be used or the appropriate Kerberos libraries must be installed for the Solace messaging API used, and the client session must use a Kerberos authentication scheme.</li>
          <li>For information on setting a Kerberos authentication scheme using Solace APIs, see:
                    <ul><li><MadCap:xref href="../API/API-Developer-Guide/Defining-Client-Authentication.htm#Kerberos">Kerberos Authentication</MadCap:xref> for Solace messaging APIs.</li><li><MadCap:xref href="../API/Solace-JMS-API/Connection-Factories.htm#establishing_connections_577400906_343102">Kerberos Authentication</MadCap:xref> for Solace's JMS API.</li></ul></li>
          <p MadCap:conditions="Default.HideFromAllOutput">For information on development requirements for creating Kerberos-compatible applications, see:</p>
          <ul MadCap:conditions="Default.HideFromAllOutput">
            <li MadCap:conditions="Default.HideFromAllOutput"><MadCap:xref MadCap:unresolvedLink="import-link:quick_start_887961477_21638"><MadCap:xref MadCap:unresolvedLink="import-link:creating_client_sessions_709508648_58151" href="../API/API-Developer-Guide/Quick-Start.htm">Quick Start</MadCap:xref></MadCap:xref> for Solace messaging APIs,</li>
            <li MadCap:conditions="Default.HideFromAllOutput"><MadCap:xref MadCap:unresolvedLink="import-link:establishing_connections_3593981552_65295" href="../API/Solace-JMS-API/Establishing-Connections.htm"><MadCap:xref MadCap:unresolvedLink="import-link:establishing_connections_3593981552_65295" href="../API/Solace-JMS-API/Quick-Start.htm">Quick Start</MadCap:xref></MadCap:xref> for the Solace JMS API</li>
          </ul>
          <li>For OpenMAMA clients, Kerberos authentication parameters are configured for the Solace Middleware Bridge used to establish a connection to the event broker. For more information, see the <MadCap:xref href="../API/Solace-OpenMama/Configuring-Solace-OpenMAMA-Bridges.htm#configuring_solace_openmama_bridges_1242721495_262244">Authentication Scheme</MadCap:xref> section in <MadCap:xref href="../API/Solace-OpenMama/Configuring-Solace-OpenMAMA-Bridges.htm#Per">Per-Transport Properties</MadCap:xref>.</li>
        </ul>
      </li>
      <li>
        <u>Event broker configuration</u>
        <ol>
          <li>PubSub+ 7.0 or greater must be used.</li>
          <li>A Kerberos Keytab must be loaded on the event broker.</li>
          <li>Kerberos authentication must be configured and enabled for any Message VPNs that Kerberos-authenticated clients will connect to.</li>
          <li><u>Optional</u>: A Kerberos Service Principal Name (SPN) can be assigned to the IP address for the message backbone VRF that will be used for Kerberos‑authenticated clients. For information, see <MadCap:xref MadCap:unresolvedLink="import-link:managing_client_authentication_and_authorization_526830633_56884" href="Configuring-Client-Authentication.htm#Config-Kerberos">Configuring Kerberos Authentication</MadCap:xref>.</li>
        </ol>
      </li>
    </ul>
    <h3><a name="Supporte"/>Supported Encryption Types</h3>
    <p>The following table shows the supported encryption types.</p>
    <table style="border-left-style: solid;border-left-width: 2px;border-left-color: #e1e1e1;border-right-style: solid;border-right-width: 2px;border-right-color: #e1e1e1;border-top-style: solid;border-top-width: 2px;border-top-color: #e1e1e1;border-bottom-style: solid;border-bottom-width: 2px;border-bottom-color: #e1e1e1;width: 40%;margin-left: 0;margin-right: auto;caption-side: top;mc-table-style: url('../Resources/TableStyles/Table_Num.css');" class="TableStyle-Table_Num" cellspacing="0">
      <col class="TableStyle-Table_Num-Column-Column1"/>
      <thead>
        <tr class="TableStyle-Table_Num-Head-Header1">
          <th class="TableStyle-Table_Num-HeadD-Column1-Header1">Encryption Type<br/></th>
        </tr>
      </thead>
      <tbody>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">aes256-cts-hmac-sha1-96</td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">aes128-cts-hmac-sha1-96</td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyG-Column1-Body1">des3-cbc-sha1</td>
        </tr>
        <tr class="TableStyle-Table_Num-Body-Body1">
          <td class="TableStyle-Table_Num-BodyA-Column1-Body1">arcfour-hmac-md5</td>
        </tr>
      </tbody>
    </table>
    <h2 class="with-rule"><a name="OAuth"/>OAuth Authentication</h2>
    <p>OAuth is an open standard for access delegation, commonly used as a way for users to grant websites or applications access to their information on other websites without giving them access to their passwords. It specifies a process for resource owners to authorize third-party access to their server resources without sharing their credentials. More specifically, an OAuth authentication scheme allows access tokens issued to third-party clients by an authorization server to be used to access Message VPNs on PubSub+ event brokers.</p>
    <p>For this authentication scheme, the client's assigned client username, which is used for subsequent client authorization, is extracted from the token provided to the event broker.</p>
    <h4><a name="ProvOauth"/>Provisioning &amp; Configuration Information</h4>
    <p>To use OAuth to authenticate clients connecting to an event broker, the following configurations are required:</p>
    <ul>
      <li>
        <u>Client-side configuration</u>
        <ul>
          <li>
            <p>For SMF clients, each API has specific methods or functions for passing Access or ID tokens to the event broker. See <MadCap:xref href="../API/API-Developer-Guide/Defining-Client-Authentication.htm">Defining Client Authentication Info</MadCap:xref>.</p>
          </li>
          <li>
            <p>For MQTT clients, passwords must adhere to  one of the following forms:</p>
            <p>If the OAuth profile is configured with the <code>oauth-role</code> set to <code>resource-server</code>: </p>
            <p>
              <code>OAUTH~&lt;profile&gt;~&lt;access_token&gt;</code>
            </p>
            <p>If the OAuth profile is configured with the <code>oauth-role</code> set to <code>client</code>: </p>
            <p>
              <code>OPENID~&lt;profile&gt;~&lt;id_token&gt;~&lt;access_token&gt;</code>
            </p>
            <p>
              <u>Where:</u>
            </p>
            <p><code>&lt;profile&gt;</code> must match an OAuth profile configured on the event broker. If no profile is provided, the <code>iss</code> claim in the ID token (for OpenID) or access token (for OAuth), if present, is used to identify which OAuth profile to use. If no profile with a matching issuer is found, the default profile is used.</p>
            <p><code>&lt;access_token&gt;</code> is the access token given to the client by the authorization server. For OpenID, the access token is optional and can be omitted if it is not needed.</p>
            <p><code>&lt;id_token&gt;</code> is the OpenID Connect ID token represented as a JWT  given to the client by the authorization server.</p>
            <p>In addition, the maximum length of the password is 8192 bytes and the maximum length for each token is 4096 bytes.</p>
          </li>
          <li>
            <p>For REST producers, requests must include one or more OAuth tokens in the HTTP Authorization header as a bearer token in one of the following forms: </p>
            <p>If the OAuth profile is configured with the <code>oauth-role</code> set to <code>resource-server</code>:</p>
            <p>
              <code>Bearer &lt;access_token&gt;</code>
            </p>
            <p>If the OAuth profile is configured with the <code>oauth-role</code> set to <code>client</code>:</p>
            <p>
              <code>Bearer &lt;id_token&gt;/&lt;access_token&gt;</code>
            </p>
            <p>
              <u>Where:</u>
            </p>
            <p><code>&lt;access_token&gt;</code> is the access token given to the client by the authorization server. For OpenID, the access token is optional and can be omitted if it is not needed.</p>
            <p><code>&lt;id_token&gt;</code> is the OpenID Connect ID token represented as a JWT  given to the client by the authorization server.</p>
            <p>The maximum header length supported is 8KiB; the maximum ID token or access token size is 4KiB.</p>
            <p>The bearer token in the Authorization header must be provided on every request.</p>
            <p>In general, the <code>iss</code> claim in the ID token (for OpenID Connect) or access token (for OAuth 2.0), if present, is used by the event broker to identify which OAuth profile to use.</p>
            <p>A specific OAuth profile can also be selected by adding ~base64(&lt;issuer&gt;)~ to the beginning of the bearer token. Base64 padding should not be used. For example, to use an OAuth profile called <code>solace</code> that has an issuer of <code>https://www.solace.com</code> with an access token:</p>
            <p>
              <code>Bearer ~aHR0cHM6Ly93d3cuc29sYWNlLmNvbQ~&lt;access_token&gt;</code>
            </p>
            <p>If a profile cannot be identified from the <code>iss</code> claim in the token, and no issuer prefix is provided in the Authorization header, the default profile is used.</p>
            <p class="Note">If your deployment also uses REST consumers,  and you want them to authenticate with REST hosts using OAuth, you must configure the appropriate authentication scheme. See <MadCap:xref href="../Services/Managing-RDPs.htm#managing_rest_messaging_1948951837_1004979">Configuring REST Consumer Authentication Schemes</MadCap:xref>.</p>
          </li>
          <li>
            <p>For AMQP clients, PubSub+ event brokers support the XOAUTH2 SASL authentication mechanism. In this case, the  AMQP URL must be <code>amqps://&lt;host&gt;:&lt;port&gt;?amqp.saslMechanisms=XOAUTH2</code>.</p>
            <p>The XOAUTH2 authentication mechanism allows an AMQP client to specify an OAuth 2.0 bearer token in the password field of the connection as a Base64 encoded token without any prefix, in other words:</p>
            <p>
              <code>user=&lt;username&gt;</code>
            </p>
            <p>
              <code>password=&lt;access token&gt;</code>
            </p>
            <p>
              <u>Where:</u>
            </p>
            <p><code>&lt;username&gt;</code> is a placeholder. The client username is derived from the access token. </p>
            <p><code>&lt;access token&gt;</code> is the same value that would be used in an HTTP Authorization header with a bearer token without the <code>Bearer</code> prefix.</p>
            <p>The bearer token  must be provided on every request. In many cases, the token will be a JSON web token (JWT) with an issuer claim that matches an OAuth profile. The event broker will verify the token and automatically select the correct profile. If the token is not a JWT or if the issuer does not match, the default OAuth profile is used. If there are multiple profiles for which the issuer cannot be automatically determined from the token, an OAuth profile can also be explicitly specified in the token.</p>
          </li>
        </ul>
      </li>
      <li>
        <u>Event broker configuration</u>
        <ol>
          <li>PubSub+ 9.12.1 or greater must be used.</li>
          <li>OAuth authentication must be configured and enabled for any Message VPNs that OAuth-authenticated clients will connect to. See <MadCap:xref href="Configuring-Client-Authentication.htm#Enabling">Enabling OAuth Client Authentication</MadCap:xref>.</li>
          <li>An OAuth profile must be  configured and enabled on the message broker. See <MadCap:xref href="Configuring-Client-Authentication.htm#Managing-OAuth-Profiles">Managing Message VPN OAuth Profiles</MadCap:xref>.</li>
        </ol>
      </li>
    </ul>
  </body>
</html>
