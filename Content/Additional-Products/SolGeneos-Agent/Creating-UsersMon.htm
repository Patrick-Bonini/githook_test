<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
  <head/>
  <body>
    <h1>Creating UsersMonitor</h1>
    <p>The sample project <code>solgeneossample</code> comes with a sample data view called <code>Users</code>, which is generated by <code>UsersMonitor</code>. The <code>Users</code> view displays the currently configured CLI users on the event broker.</p>
    <p>To create <code>UsersMonitor</code>, do the following:</p>
    <ol>
      <li>Untar the example package, named <code>sol-geneossample-&lt;version&gt;.tar.gz</code>.</li>
      <li>Create a monitor class called <code>UsersMonitor.java</code> that extends <code>BaseMonitor</code>, and place it under the <code>src</code> directory with the proper package structure. 
                <p>For this sample, the package structure for <code>UsersMonitor.java</code> is <code>com/solacesystems/solgeneos/sample/monitor</code>.</p></li>
      <li>In <code>UsersMonitor.java</code>, override <code>onPostInitialize()</code> method. The sample does the following:
				
				
				<ol style="list-style-type: lower-alpha;"><li>Retrieve management IP address, port, username, and password properties from Solace Geneos Agent’s global properties:</li><p class="Code">// retrieve SEMP over HTTP properties from global properties<br/>Properties props = SolGeneosAgent.onlyInstance.getGlobalProperties();<br/>String host = props.getProperty(MGMT_IP_ADDRESS_PROPERTY_NAME);<br/>int port = Integer.parseInt(props.getProperty(MGMT_PORT_PROPERTY_NAME));<br/>String username = props.getProperty(MGMT_USERNAME_PROPERTY_NAME);<br/>String password = SolGeneosAgent.onlyInstance.getEncryptedProperty(MGMT_ENCRYPTED_PASSWORD_PROPERTY_NAME,MGMT_PASSWORD_PROPERTY_NAME);</p><li>Initialize an HTTP client, which will be used for polling data using SEMP:<p class="Code">// create a http client<br/>m_httpClient = new HttpClient(new SimpleHttpConnectionManager());<br/> <br/>// set connection host configuration<br/>HostConfiguration hostConfig = new HostConfiguration();<br/>hostConfig.setHost(host, port);<br/>m_httpClient.setHostConfiguration(hostConfig);<br/> <br/>// set connection credential<br/>m_httpClient.getState().setCredentials(<br/>new AuthScope(host, port),<br/>new UsernamePasswordCredentials(username, password))</p></li><li>Initialize a SAX parser <code>UsersSEMPParser</code> used for parsing SEMP reply. A sample parser implementation is under <code>com/solacesystems/solgeneos/sample/util</code>. <code>UsersSEMPParser.java</code> is located in <code>src/com/solacesystems/solgeneos/sample/monitor</code>.<p class="Code">// create SEMP parser<br/>m_parser = new UsersSEMPParser();</p></li></ol></li>
      <li>In <code>UsersMonitor.java</code>, override <code>onCollect()</code> method to collect data from the event broker using SEMP, format SEMP reply into NetProbe acceptable format, populate the <code>Users</code> view’s content and return the monitor's next valid state (<code>State.REPORTING_QUEUE</code>). The sample does the following:
            <ol style="list-style-type: lower-alpha;"><li>Create view headlines by reading properties from <code>user_samples.properties</code> as the example to show how to use user‑defined properties:
						
						
						
<p class="Code">String viewCreator = "";<br/>UserPropertiesConfig userPropsConfig = SolGeneosAgent.onlyInstance.<br/>                      getUserPropertiesConfig(USER_PROPERTIES_FILE_NAME);<br/>if (userPropsConfig != null &amp;&amp; userPropsConfig.getProperties() != null) {<br/>       viewCreator = <br/>       userPropsConfig.getProperties().getProperty(VIEW_CREATOR);<br/>}<br/> <br/>LinkedHashMap&lt;String, Object&gt; headlines = <br/>       new LinkedHashMap&lt;String, Object&gt;();<br/>headlines.put("Creator", viewCreator);</p></li><li>Send a SEMP request over HTTP using the http client created in step 2:
       <p class="Code">PostMethod post = new PostMethod(HTTP_REQUEST_URI);<br/>post.setRequestHeader(HEADER_CONTENT_TYPE_UTF8);<br/>post.setRequestEntity(new 	        ByteArrayRequestEntity(SHOW_USERS_REQUEST.getBytes("UTF-8")));<br/>String respBody = "";<br/>try {<br/>       int result = m_httpClient.executeMethod(post);<br/>       String statusText = post.getStatusText();<br/>       if (result != 200) {<br/>         throw new Exception("Error occurred while sending request: "<br/>           + result + " - " + statusText);<br/> <br/>       respBody = post.getResponseBodyAsString();<br/>} finally {<br/>       post.releaseConnection();<br/>}</p></li><li>Use the SAX parser created in step 2 to parse the SEMP reply inside the HTTP response: 
        <p class="Code">m_parser.parse(respBody);<br/>Vector&lt;Object&gt; tableContent = m_parser.getTableContent();</p></li><li>Populate the view content:<p class="Code">TreeMap&lt;String, View&gt; viewMap = getViewMap();<br/>if (viewMap != null &amp;&amp; viewMap.size() &gt; 0) {<br/>    for (Iterator&lt;String&gt; viewIt = viewMap.keySet().iterator();<br/>       viewIt.hasNext();) {<br/>              view view = viewMap.get(viewIt.next());<br/>             if (view.isActive()) {<br/>                     view.setHeadlines(headlines);<br/>                     view.setTableContent(tableContent);<br/>              <br/>       }<br/>}</p></li></ol><ol style="list-style-type: lower-alpha;"><li>Return next monitor state <code>State.REPORTING_QUEUE</code>.</li></ol></li>
      <li>Create a monitor property file called <code>UsersMonitor.properties</code>, and place it in the <code>config</code> directory. A sample monitor property file called <code>monitor.properties.template</code> is bundled with the agent distribution under the <code>templates</code> directory. Monitor developers can reference this file for all the monitor level and view level property names supported by the agent.<ol style="list-style-type: lower-alpha;"><li>Set <code>monitorClassName</code> to the full class name of the monitor class, for example: <code>monitorClassName=com.solacesystems.solgeneos.sample.monitor.UsersMonitor</code>.</li><li>Set <code>samplingRate</code> to a reasonable value (for example, <code>samplingRate=30</code>).</li><li>Set view name to <code>view.v0.viewName=Users</code>.</li></ol></li>
      <li>Run “<code>ant dist</code>”.</li>
      <li>Copy property files from the target event broker directory <code>_antDist/config</code> directory to <code>/usr/sw/solgeneos/config</code>.</li>
      <li>Copy Jar files from <code>_antDist/lib</code> directory to the target event broker directory <code>/usr/sw/solgeneos/monitors</code>.</li>
      <li>Restart Solace Geneos Agent. The <code>Users</code> view should show up in the Active Console.</li>
    </ol>
  </body>
</html>
