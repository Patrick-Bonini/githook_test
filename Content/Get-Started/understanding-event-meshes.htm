<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
  <head>
    </head>
  <body>
    <h1><MadCap:concept term="Cloud;Appliance;Software"/>Understanding Event Meshes</h1>
    <p>As you expand event-driven architecture (EDA) through your enterprise, you may find that individual event brokers are not sufficient and that large scale deployments work best when configured as an event mesh. An event mesh is a network of event brokers  that allows events from one application to be dynamically routed and received by any other application, no matter where these applications are deployed within your infrastructure, your private cloud, or in a public cloud.  In an event mesh, multiple event brokers function as nodes. Multiple nodes can be connected together to allow publishers and subscribers to reside in multiple public and private clouds<MadCap:conditionalText MadCap:conditions="SAP.SapHideFromOutput">, as well as legacy data centers,</MadCap:conditionalText> and service loads far in excess of that possible by a single one.</p>
    <p>In a good EDA, you want applications to publish events to any event broker and be assured that subscribing applications  receive those events in reliable and seamless fashion.  An <i>event mesh</i> provides this capability. </p>
    <p>An event mesh permits you to:</p>
    <ul>
      <li>build a software architecture that ensures that event messages are securely and reliably received by subscribing applications using interconnected event brokers</li>
      <li>share information between distributed, decoupled applications, which means that a publishing application can send events  and a subscribing application can consume those events without the applications knowing about each other</li>
      <li>scale a mesh using event brokers that span multiple data centers</li>
      <li>trace topic flows</li>
    </ul>
    <p> To help solidify your understanding, consider this simple scenario to see how an event mesh works:</p>
    <p> Imagine that you have multiple applications connected to different event brokers in different geographic regions. The applications are distributed in separate clouds or data centers. In this example <b>Subscriber A</b> is connected to the event broker <b>Broker-One</b>, and is interested in events from both <b>Publisher D</b> and <b>Publisher E</b>. Because  <b>Publisher E</b> is connected to a different event broker, <b>Subscriber A</b> receives events from <b>Publisher D</b> but not from <b>Publisher E</b>.</p>
    <p>
      <img src="../Resources/Images/Getting-Started/no-event-mesh.png" title="" alt="Illustration depicting the concepts described in the surrounding text."/>
    </p>
    <p>However, if the event brokers were configured as an <b>event mesh</b>, events sent to any event broker in the mesh can be forwarded to other event brokers in the mesh. <b>Subscriber A</b> can still connect only to <b>Broker-One</b> and receive all subscribed events from the publishing applications that are connected to a different event broker. As a result, subscribed events from both <b>Publisher D</b> and <b>Publisher E</b> are received by <b>Subscriber A</b> in a seamless manner.</p>
    <p>
      <img src="../Resources/Images/Getting-Started/simple-event-mesh.png" title="" alt="Illustration depicting the concepts described in the surrounding text."/>
    </p>
    <p>For more in-depth information about event meshes, see <MadCap:xref href="../Cloud/Event-Mesh/about_event_meshes.htm" target="_blank">Understanding Event Meshes and [%=Product-Names.mesh_manager%]</MadCap:xref>.</p>
    <p class="with-rule">Now that you understand what an event mesh does, let's learn more about one of the technologies that makes it possible: <MadCap:xref href="dynamic-message-routing.htm">Dynamic Message Routing</MadCap:xref>.</p>
  </body>
</html>
