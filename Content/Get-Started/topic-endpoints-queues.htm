<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:conditions="Default.ContentProductLink">
  <head/>
  <body>
    <h1><MadCap:concept term="Cloud;Appliance;Software"/>Topic Endpoints and Queues</h1>
    <p>Guaranteed messages are stored in endpoints on the event broker. There are two types of endpoints:</p>
    <ul>
      <li style="text-decoration: none;">Queues—A queue is an endpoint configured with topic subscriptions that clients can publish messages to and consume messages from. Queues can subscribe to more than one topic and receive messages for all topics matching their subscriptions. Queues can provide exclusive access to one consumer or access to multiple consumers where messages are distributed among the consumers.<br/></li>
      <li style="text-decoration: none;">Topic Endpoints—A topic endpoint attracts messages published to a single topic for which the topic endpoint has a matching subscription. Any topic endpoint whose topic subscription matches the topic on the incoming messages will receive those messages.</li>
    </ul>
    <p> Queues are significantly more flexible than topic endpoints and are the recommended approach for most applications. Queues support multiple topic subscriptions and they are highly configurable with a variety of options to match different application needs. Topic endpoints should be used only with JMS applications.</p>
    <p>Queues on an event broker work very much like queues in all message queuing systems:</p>
    <ol>
      <li>Producers send Guaranteed messages to the event broker.</li>
      <li>The messages are saved in the queue and delivered to consuming clients if they are online and connected or held in the queue until the consumer connects.</li>
      <li>The consumer acknowledges the message once it has completed processing it</li>
      <li>The event broker removes the message from the queue.</li>
    </ol>
    <p>
      <img src="../Resources/Images/Getting-Started/guaranteed-queue.png" alt="Illustration depicting the concepts described in the surrounding text." style="max-width: 700px;"/>
    </p>
    <p>Queues can be durable or non-durable:</p>
    <ul>
      <li>Durable queues exist until they are removed by an administrative action. They accumulate messages whether clients are online or offline. When offline clients reconnect, they receive all of the messages that accumulated while they were offline.</li>
      <li>Temporary (or non-durable) queues follow the lifecycle of the client connection and are useful for ensuring message persistence while clients are online. Temporary queues and topic endpoints last only as long as the client’s session is connected. If a client disconnects for a period of time, the event broker automatically removes the temporary queues and messages do not accumulate while clients are offline.</li>
    </ul>
    <p MadCap:conditions="SAP.SapHideFromOutput">For more information, see <MadCap:xref href="../Messaging/Guaranteed-Msg/Endpoints.htm" target="_blank">Endpoints</MadCap:xref> and <a href="https://solace.com/blog/queues-vs-topic-endpoints/" target="_blank" class="link-internal">Understanding Solace Endpoints: Queues vs. Topic Endpoints</a> in the Solace Blog.</p>
    <h2>Message Replay</h2>
    <p>Message replay allows an event broker to resend messages to new or existing clients that request them, hours or even days after those messages were first received by the event broker. Replay can be performed on a queue or topic endpoint. If you enable message replay, event brokers store Guaranteed messages in a replay log. These messages are kept until the log is full, after which the oldest messages are removed to free-up space for new messages. For more information, see <MadCap:xref href="../Features/Replay/Message-Replay-Overview.htm" target="_blank">Message Replay Overview</MadCap:xref></p>
    <p class="with-rule" MadCap:conditions="SAP.SapOnlyOutput">Now that we've covered the basics of how event brokers get event data from the publishing application to the clients that want to know about it, learn more about how an event mesh can expand this functionality for enterprises in <MadCap:xref href="understanding-event-meshes.htm">Understanding Event Meshes</MadCap:xref>.</p>
    <p class="with-rule" MadCap:conditions="SAP.SapHideFromOutput">Now that we've covered the basics of how event brokers get event data from the publishing application to the clients that want to know about it, you can learn about <MadCap:xref href="message-vpn.htm">Message VPNs</MadCap:xref> on <MadCap:variable name="Product-Names.broker_sw_short"/>s and <MadCap:variable name="Product-Names.broker_appliance_short"/>s, or jump ahead to learn more about how an event mesh can expand EDA functionality for enterprises in <MadCap:xref href="understanding-event-meshes.htm">Understanding Event Meshes</MadCap:xref>.</p>
  </body>
</html>
