<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
  <head/>
  <body>
    <h1><MadCap:concept term="Cloud;Appliance;Software"/>What Is Messaging?</h1>
    <p>In technology terms,  messaging lets computer systems share information without requiring direct connections or awareness of each others location. Messaging is analogous to postal and shipping services. Just as you would hand letters or packages to a carrier and trust that they will get to where you want them to go, so it is with messaging — your applications hand off information to a messaging system that routes it to whatever other applications it needs to get to.</p>
    <p>At its most basic, messaging involves the following participants:</p>
    <ul>
      <li>Publisher—the entity that sends or publishes a message (also called a producer)</li>
      <li>Message—the information the publisher wants to send. Messages often contain event data, but can also carry queries, commands, and other information.</li>
      <li>Messaging system—the infrastructure that transmits the message</li>
      <li>Subscriber—the ultimate receiver of the message (also called a consumer)</li>
    </ul>
    <p>In an event-driven architecture (EDA), a message typically has a destination that separates the publisher from the subscriber. In <MadCap:conditionalText MadCap:conditions="SAP.SapHideFromOutput">the <MadCap:variable name="Product-Names.pubsub_brand_only"/> platform</MadCap:conditionalText><MadCap:variable name="Product-Names.cloud_product_long" MadCap:conditions="SAP.SapOnlyOutput"/>, a destination is generally a  <a href="topic-endpoints-queues.htm" class="link-internal">topic endpoint or a queue</a>. Topic endpoints and queues are managed by event brokers.</p>
    <p> The following diagram illustrates event messages disseminating to multiple subscribers through a topic endpoint.</p>
    <p>
      <img src="../Resources/Images/Getting-Started/pub-sub-concept.png" alt="Illustration depicting the concepts described in the surrounding text."/>
    </p>
    <h2><a name="Message_Types"/>Message Types</h2>
    <p> </p>
    <p MadCap:conditions="SAP.SapHideFromOutput">The <MadCap:variable name="Product-Names.pubsub_brand_only"/> Platform supports three types of messages:</p>
    <p MadCap:conditions="SAP.SapOnlyOutput"><MadCap:variable name="Product-Names.cloud_product_titlecase"/> supports three types of messages</p>
    <ul>
      <li>An event message describes something that an application needs to tell other applications about. An event stream is a series of event messages published as events occur. Pricing streams and trade streams in capital markets are examples of event streams.
Events and the messages that describe them are so closely tied together that we often use the terms event and message interchangeably in this documentation.</li>
      <li>A query is a message that retrieves information (for example, using HTTP GET and HEAD methods). A query requires a response.</li>
      <li>A command instructs another application to perform an action or change a state (for example, using HTTP POST, PUT, and DELETE methods). Commands, like queries, require a response.
            </li>
    </ul>
    <h2 class="with-rule"><a name="Message-structre"/>Message Structure</h2>
    <p>A message has three parts: Header, Properties, and Body, as shown in the following diagram:</p>
    <p>
      <img src="../Resources/Images/Getting-Started/event-msg-properties.png" style="max-width: 500px;" alt="Illustration depicting the concepts described in the surrounding text."/>
    </p>
    <h3><a name="Header"/>Header</h3>
    <p>The header is the part of the message used by the event broker for routing messages through the system. Some header fields, such as Destination and Delivery Mode, are required, while others are optional. For example, Reply-to-Topic is only needed for Request-Reply messaging where the Replier needs to know where to send its responses.
		</p>
    <h3><a name="Properti"/>Properties</h3>
    <p>In addition to the header fields, application-specific properties can also be included as part of the message. These application-specified properties are unmodified by the event broker, and can be used to facilitate communication between applications.  Some APIs define their own standard properties. For instance, JMS has defined properties such as JMSXUserID and JMSXAppID which can be used to identify the user or application sending the message. In addition to API-defined standard properties, applications can also specify properties. An example of an application-specified property is an Order ID in an Order Management System used as a unique identifier to track all messages related to a given purchase.</p>
    <h3><a name="Body"/>Body</h3>
    <p>The body of a message is often called the payload, or the attachment. It contains data in an application-specified format and is transported unmodified by the event broker. The body is made up of raw binary data, or structured data such as text, streams, or maps. Regardless, producers and consumers must agree upon the payload format so that the data can be properly interpreted. Event messages use a schema to define the payload format.
</p>
    <p class="with-rule">		Want to know more about messaging? Move on to <MadCap:xref href="message-exchange-patterns.htm">Message Exchange Patterns</MadCap:xref>.</p>
    <p>Or jump ahead and learn <MadCap:xref href="what-are-event-brokers.htm">What are Event Brokers?</MadCap:xref></p>
  </body>
</html>
