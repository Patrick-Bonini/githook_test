define({"881":{y:0,u:"../API/Connectors/Self-Contained-Connectors/Snowflake/Snowflake-Overview.htm",l:-1,t:"Connector for Snowflake",i:0.000208752858159353,a:"The  Solace PubSub+ Connector for Snowflake bridges data between a Solace PubSub+ event broker and   Snowflake . The Connector for Snowflake provides you (as an operator) a flexible and efficient way to load  Snowflake application data from your Solace-backed, event-driven architecture and the event ..."},"882":{y:0,u:"../API/Connectors/Self-Contained-Connectors/Snowflake/Snowflake-Getting-Started.htm",l:-1,t:"Getting Started With the Connector for Snowflake",i:0.000361249183607234,a:"Presuming you’re using the default application.yml file provided within the download, follow one of the quick starts below to connect a PubSub+ event broker and a  Snowflake broker . The quick starts use  specified  credentials as examples to get started with two workflows enabled, workflow 0 and ..."},"883":{y:0,u:"../API/Connectors/Self-Contained-Connectors/Snowflake/Snowflake-container-configuration.htm",l:-1,t:"Modifying the Container Configuration",i:0.00338241857079569,a:"You can further configure the connector container. You can either modify the provided sample or create a custom application.yml or application.properties file in the configdirectory containing the properties required for the connector. To use the connector in a container:  Ensure you have the  ..."},"884":{y:0,u:"../API/Connectors/Self-Contained-Connectors/Snowflake/Snowflake-Datapath-Configuration-Overview.htm",l:-1,t:"Configuring the Datapath for the Connector for Snowflake",i:0.000230370993649764,a:"You can configure data flows between Snowflake broker and a PubSub+ event broker. The following aspects to configure are as follows: The connection details of the event broker and the Snowflake broker, see  Configuring Connection Details  . The input and output details, and the number of workflows, ..."},"885":{y:0,u:"../API/Connectors/Self-Contained-Connectors/Snowflake/Snowflake-Configuring-Connection-Details.htm",l:-1,t:"Configuring Connection Details ",i:0.000356052236191286,a:" Solace PubSub+ Connection Details The Spring Cloud Stream Binder for PubSub+ uses  Spring Boot Auto-Configuration for the Solace Java API  to configure its session. In the application.yml, this typically is configured as follows: \nsolace:\n  java:\n    host: tcp://localhost:55555\n    msg-vpn: ..."},"886":{y:0,u:"../API/Connectors/Self-Contained-Connectors/Snowflake/Snowflake-Enabling-Workflows.htm",l:-1,t:"Enabling Workflows",i:0.000225174046233816,a:"The provided application.yml enables workflow 0 and 1. To enable additional workflows, define the following properties in the application.yml, where \u003cworkflow-id\u003e is a value between [0-19]: \nspring:\n  cloud:\n    stream:\n      bindings: # Workflow bindings\n\t input-\u003cworkflow-id\u003e:\n\t   destination: ..."},"887":{y:0,u:"../API/Connectors/Self-Contained-Connectors/Snowflake/User-configured-header-transforms.htm",l:-1,t:"User-Configured Header Transforms",i:0.000416572968568692,a:"Generally, the consumed message’s headers are propagated through the connector to the output message. If you want to transform the headers, then you can do so as follows: \n# \u003cworkflow-id\u003e : The workflow ID ([0-19])\n# \u003cheader\u003e : The key for the outbound header\n# \u003cexpression\u003e : A SpEL expression which ..."},"888":{y:0,u:"../API/Connectors/Self-Contained-Connectors/Snowflake/User-configured-Payload-Transforms.htm",l:-1,t:"User-Configured Payload Transforms",i:0.000225174046233816,a:"Message payloads going through a workflow can be transformed using a Spring Expression Language (SpEL) expression as follows: # \u003cworkflow-id\u003e : The workflow ID ([0-19])\n# \u003cexpression\u003e : A SpEL expression\n                ..."},"889":{y:0,u:"../API/Connectors/Self-Contained-Connectors/Snowflake/Snowflake-Message-Headers.htm",l:-1,t:"Message Headers",i:0.000225174046233816,a:"Solace and Snowflake message headers can be created or manipulated using the  User-Configured Header Transforms   feature. Solace Headers Solace headers exposed to the connector are documented within the  Spring Cloud Stream Binder for Solace PubSub+   documentation. Reserved Message Headers The ..."},"890":{y:0,u:"../API/Connectors/Self-Contained-Connectors/Snowflake/Snowflake-Connector-Management-Deployment-Overview.htm",l:-1,t:"Configuring the Management and Deployment of the Connector for Snowflake",i:0.000230370993649764,a:"You can configure how management and deployment details of the Connector for Snowflake. You can choose to use a centralized configuration source for  the connector using  PubSub+ Connector Manager for PubSub+ Self-Contained Connectors  or configure the source locally. As part of configuring the ..."},"891":{y:0,u:"../API/Connectors/Self-Contained-Connectors/Snowflake/Management-and-Monitoring.htm",l:-1,t:"Management and Monitoring the Connector",i:0.000205592409997241,a:"Monitoring the Connector’s States The PubSub+ connector provides an ability to monitor its internal states through exposed endpoints provided by  Spring Boot Actuator . An actuator shares information through the endpoints reachable over HTTP/HTTPS. The endpoints that are available are configured in ..."},"892":{y:0,u:"../API/Connectors/Self-Contained-Connectors/Snowflake/Snowflake-Health.htm",l:-1,t:"Health",i:0.000205592409997241,a:"The connector reports its health status using the  Spring Boot Actuator health endpoint . To configure the information returned by the health endpoint, configure the following properties: management.endpoint.health.show-details management.endpoint.health.show-components  For more information about ..."},"893":{y:0,u:"../API/Connectors/Self-Contained-Connectors/Snowflake/Leader-Election.htm",l:-1,t:"Redundancy Configuration",i:0.000205592409997241,a:"The connector has three leader election modes for redundancy: Operators can configure the leader election mode by setting the following configuration: \nsolace.connector.management.leader-election.mode\n=(standalone|active_active|active_standby)\n Leader Election Modes: Standalone and Active-Active ..."},"894":{y:0,u:"../API/Connectors/Self-Contained-Connectors/Snowflake/Workflow-Management.htm",l:-1,t:"Workflow Management",i:0.000205592409997241,a:"Workflow Management Endpoint A custom workflows management endpoint using  Spring Actuator  is provided to manage workflows.  To enable the workflows management endpoint: management: \n  endpoints:\n    web:\n      exposure:\n        include: \"workflows\"\n Once the workflows management endpoint is ..."},"895":{y:0,u:"../API/Connectors/Self-Contained-Connectors/Snowflake/Metrics.htm",l:-1,t:"Managing Metrics",i:0.000205592409997241,a:"This connector uses  Spring Boot Metrics  that leverages Micrometer to manage its metrics. Connector Meters In addition to the meters already provided by the Spring framework, this connector introduces the following custom meters: The solace.connector.process meter with result=failure is not a ..."},"896":{y:0,u:"../API/Connectors/Self-Contained-Connectors/Snowflake/Security.htm",l:-1,t:"Security",i:0.000756661345363449,a:"Securing Endpoints Exposed Management Web Endpoints There are many endpoints that are automatically enabled for this connector. For a comprehensive list, see  Management and Monitoring Connector .  The health endpoint only returns the root status by default–basically there no health details ..."},"897":{y:0,u:"../API/Connectors/Self-Contained-Connectors/Snowflake/Consuming-Object-Messages.htm",l:-1,t:"Consuming Object Messages",i:0.000205592409997241,a:"For the connector to process object messages, it requires access to the classes that define the object payloads. Assuming that your payload classes are in their own projects, and are packaged into their own JAR files, place these JAR files and their dependencies (if any) onto the connector’s ..."},"898":{y:0,u:"../API/Connectors/Self-Contained-Connectors/Snowflake/Adding-External-Libraries.htm",l:-1,t:"Adding External Libraries",i:0.000205592409997241,a:"The connector\u0027s JAR file uses the loader.path property as the recommended mechanism for adding external libraries to the connector’s classpath. See  Spring Boot - PropertiesLauncher Features  for more information. To add libraries to the connector’s container image, see  Modifying the Container ..."},"899":{y:0,u:"../API/Connectors/Self-Contained-Connectors/Snowflake/Snowflake-Configuration.htm",l:-1,t:"Connector Configuration",i:0.000307946937085638,a:"Providing Configuration For information about  about how the connector detects configuration properties, see  Spring Boot: Externalized Configuration . Converting Canonical Spring Property Names to Environment Variables For information about converting the Spring property names to environment ..."},"900":{y:0,u:"../API/Connectors/Self-Contained-Connectors/Message-Processor/Message-Processor-Overview.htm",l:-1,t:"Connector for Message Transformations",i:0.000208752858159353,a:"The Solace PubSub+ Connector for Message Transformations provides you (as an operator) a flexible and efficient way to  transform data on PubSub+ queues and topic endpoints, or transform and move data to another PubSub+ event broker. The connector is deployable standalone or in redundancy modes of ..."},"901":{y:0,u:"../API/Connectors/Self-Contained-Connectors/Message-Processor/Message-Processor-Getting-Started.htm",l:-1,t:"Getting Started With the Connector for Message Transformations",i:0.000531654148191583,a:"Presuming you’re using the default application.yml file provided within the download, follow one of the quick starts below to connect a PubSub+ event broker and an  PubSub+ . The quick starts use default credentials as examples to get started with two workflows enabled, workflow 0 and workflow 1.  ..."},"902":{y:0,u:"../API/Connectors/Self-Contained-Connectors/Message-Processor/Message-Processor-container-configuration.htm",l:-1,t:"Modifying the Container Configuration",i:0.00369409152715054,a:"You can further configure the connector container. You can either modify the provided sample or create a custom application.yml or application.properties file in the configdirectory containing the properties required for the connector. To use the connector in a container:  Ensure you have the  ..."},"903":{y:0,u:"../API/Connectors/Self-Contained-Connectors/Message-Processor/Message-Processor-Datapath-Configuration-Overview.htm",l:-1,t:"Configuring the Datapath for the Connector for Message Transformations",i:0.000230370993649764,a:"You can configure data flows on a single or multiple  PubSub+ event brokers. The following aspects to configure are as follows: The connection details of the event broker, see   Configuring Connection Details . The input and output details, and the number of workflows, see   Enabling Workflows The ..."},"904":{y:0,u:"../API/Connectors/Self-Contained-Connectors/Message-Processor/Message-Processor-Configuring-Connection-Details.htm",l:-1,t:"Configuring Connection Details",i:0.000218646834154958,a:"Solace PubSub+ Connection Details The Spring Cloud Stream Binder for PubSub+ uses  Spring Boot Auto-Configuration for the Solace Java API  to configure its session. In the application.yml, this typically is configured as follows: \nsolace:\n  java:\n    host: tcp://localhost:55555\n    msg-vpn: default\n ..."},"905":{y:0,u:"../API/Connectors/Self-Contained-Connectors/Message-Processor/Message-Processor-Enabling-Workflows.htm",l:-1,t:"Enabling Workflows",i:0.000218646834154958,a:"The provided application.yml enables workflow 0 and 1. To enable additional workflows, define the following properties in the application.yml, where \u003cworkflow-id\u003e is a value between [0-19]: \nspring:\n  cloud:\n    stream:\n      bindings: # Workflow bindings\n\t input-\u003cworkflow-id\u003e:\n\t   destination: ..."},"906":{y:0,u:"../API/Connectors/Self-Contained-Connectors/Message-Processor/User-configured-header-transforms.htm",l:-1,t:"User-Configured Header Transforms",i:0.000590348348996624,a:"Generally, the consumed message’s headers are propagated through the connector to the output message. If you want to transform the headers, then you can do so as follows: \n# \u003cworkflow-id\u003e : The workflow ID ([0-19])\n# \u003cheader\u003e : The key for the outbound header\n# \u003cexpression\u003e : A SpEL expression which ..."},"907":{y:0,u:"../API/Connectors/Self-Contained-Connectors/Message-Processor/User-configured-payload-transforms.htm",l:-1,t:"User-Configured Payload Transforms",i:0.000218646834154958,a:"Message payloads going through a workflow can be transformed using a Spring Expression Language (SpEL) expression as follows: # \u003cworkflow-id\u003e : The workflow ID ([0-19])\n# \u003cexpression\u003e : A SpEL expression\n                ..."},"908":{y:0,u:"../API/Connectors/Self-Contained-Connectors/Message-Processor/Message-Processor-Message-Headers.htm",l:-1,t:"Message Headers",i:0.000218646834154958,a:"Solace message headers can be created or manipulated using the  User-Configured Header Transforms   feature. Solace Headers Solace headers exposed to the connector are documented within the  Spring Cloud Stream Binder for Solace . Reserved Message Headers The following are reserved header spaces: ..."},"909":{y:0,u:"../API/Connectors/Self-Contained-Connectors/Message-Processor/Message-Processor-Dynamic-Producer-Destinations.htm",l:-1,t:"Dynamic Producer Destinations",i:0.000218646834154958,a:"To route messages to dynamic destinations at runtime, use the  User-Configured Header Transforms   feature to set the following headers: Setting the scst_targetDestination header under solace.connector.default.workflow.transform-headers may not be possible if all workflows do not follow the same ..."},"910":{y:0,u:"../API/Connectors/Self-Contained-Connectors/Message-Processor/Message-Processor-Connector-Management-Deployment-Overview.htm",l:-1,t:"Configuring the Management and Deployment of the Connector for Message Transformations",i:0.000230370993649764,a:"You can configure how management and deployment details of the Connector for Message Transformations. You can choose to use a centralized configuration source for  the connector using  PubSub+ Connector Manager for PubSub+ Self-Contained Connectors  or configure the source locally. As part of ..."},"911":{y:0,u:"../API/Connectors/Self-Contained-Connectors/Message-Processor/Management-and-Monitoring.htm",l:-1,t:"Management and Monitoring the Connector",i:0.000203812261248461,a:"Monitoring the Connector’s States The PubSub+ connector provides an ability to monitor its internal states through exposed endpoints provided by  Spring Boot Actuator . An actuator shares information through the endpoints reachable over HTTP/HTTPS. The endpoints that are available are configured in ..."},"912":{y:0,u:"../API/Connectors/Self-Contained-Connectors/Message-Processor/Message-Processor-Health.htm",l:-1,t:"Health",i:0.000203812261248461,a:"The connector reports its health status using the  Spring Boot Actuator health endpoint . To configure the information returned by the health endpoint, configure the following properties: management.endpoint.health.show-details management.endpoint.health.show-components  For more information about ..."},"913":{y:0,u:"../API/Connectors/Self-Contained-Connectors/Message-Processor/Leader-Election.htm",l:-1,t:"Redundancy Configuration",i:0.000203812261248461,a:"The connector has three leader election modes for redundancy: Operators can configure the leader election mode by setting the following configuration: \nsolace.connector.management.leader-election.mode\n=(standalone|active_active|active_standby)\n Leader Election Modes: Standalone and Active-Active ..."},"914":{y:0,u:"../API/Connectors/Self-Contained-Connectors/Message-Processor/Workflow-Management.htm",l:-1,t:"Workflow Management",i:0.000203812261248461,a:"Workflow Management Endpoint A custom workflows management endpoint using  Spring Actuator  is provided to manage workflows.  To enable the workflows management endpoint: management: \n  endpoints:\n    web:\n      exposure:\n        include: \"workflows\"\n Once the workflows management endpoint is ..."},"915":{y:0,u:"../API/Connectors/Self-Contained-Connectors/Message-Processor/Metrics.htm",l:-1,t:"Managing Metrics",i:0.000203812261248461,a:"This connector uses  Spring Boot Metrics  that leverages Micrometer to manage its metrics. Connector Meters In addition to the meters already provided by the Spring framework, this connector introduces the following custom meters: The solace.connector.process meter with result=failure is not a ..."},"916":{y:0,u:"../API/Connectors/Self-Contained-Connectors/Message-Processor/Security.htm",l:-1,t:"Security",i:0.000354448577020692,a:"Securing Endpoints Exposed Management Web Endpoints There are many endpoints that are automatically enabled for this connector. For a comprehensive list, see  Management and Monitoring Connector .  The health endpoint only returns the root status by default–basically there no health details ..."},"917":{y:0,u:"../API/Connectors/Self-Contained-Connectors/Message-Processor/Consuming-Object-Messages.htm",l:-1,t:"Consuming Object Messages",i:0.000203812261248461,a:"For the connector to process object messages, it requires access to the classes that define the object payloads. Assuming that your payload classes are in their own projects, and are packaged into their own JAR files, place these JAR files and their dependencies (if any) onto the connector’s ..."},"918":{y:0,u:"../API/Connectors/Self-Contained-Connectors/Message-Processor/Adding-External-Libraries.htm",l:-1,t:"Adding External Libraries",i:0.000203812261248461,a:"The connector\u0027s JAR file uses the loader.path property as the recommended mechanism for adding external libraries to the connector’s classpath. See  Spring Boot - PropertiesLauncher Features  for more information. To add libraries to the connector’s container image, see  Modifying the Container ..."},"919":{y:0,u:"../API/Connectors/Self-Contained-Connectors/Message-Processor/Message-Processor-Configuration.htm",l:-1,t:"Connector Configuration",i:0.000354448577020692,a:"Providing Configuration For information about  about how the connector detects configuration properties, see  Spring Boot: Externalized Configuration . Converting Canonical Spring Property Names to Environment Variables For information about converting the Spring property names to environment ..."},"920":{y:0,u:"../API/Connectors/Self-Contained-Connectors/Message-Processor/Message-Processor-Asynchronous-Publishing.htm",l:-1,t:"Asynchronous Publishing",i:0.000203812261248461,a:"This connector does not support asynchronous publishing. Publish acknowledgments are resolved synchronously for all workflows regardless of the configuration option that you set:  \u003cworkflow-id\u003e : The workflow ID ..."},"921":{y:0,u:"../API/Connectors/Self-Contained-Connectors/TibcoEMS/TibcoEMS-Overview.htm",l:-1,t:"Connector for TIBCO EMS",i:0.000208752858159353,a:"The Solace PubSub+ Connector for TIBCO EMS bridges data between a Solace PubSub+ event broker and a  Tibco Enterprise Messaging Service (TIBCO EMS)  broker. The Connector for TIBCO EMS provides you (as an operator) a flexible and efficient way to integrate  TIBCO EMS   application data with your ..."},"922":{y:0,u:"../API/Connectors/Self-Contained-Connectors/TibcoEMS/TibcoEMS-Getting-Started.htm",l:-1,t:"Getting Started With the Connector for TIBCO EMS",i:0.000489713212975676,a:"Presuming you’re using the default application.yml file provided within the download, follow one of the quick starts below to connect a PubSub+ event broker and a   TIBCO EMS broker . The quick starts use default credentials as examples to get started with with two workflows enabled, workflow 0 and ..."},"923":{y:0,u:"../API/Connectors/Self-Contained-Connectors/TibcoEMS/TibcoEMS-container-configuration.htm",l:-1,t:"Modifying the Container Configuration",i:0.00397321088198901,a:"You can further configure the connector container. You can either modify the provided sample or create a custom application.yml or application.properties file in the configdirectory containing the properties required for the connector. To use the connector in a container:  Ensure you have the  ..."},"924":{y:0,u:"../API/Connectors/Self-Contained-Connectors/TibcoEMS/TibcoEMS-Datapath-Configuration-Overview.htm",l:-1,t:"Configuring the Datapath for the Connector for TIBCO EMS",i:0.000230370993649764,a:"You can configure data flows between a TIBCO EMS broker and a PubSub+ event broker. The following aspects to configure are as follows: The connection details of the event broker and the TIBCO EMS broker, see   Configuring Connection Details  . The input and output details, and the number of ..."},"925":{y:0,u:"../API/Connectors/Self-Contained-Connectors/TibcoEMS/TibcoEMS-Configuring-Connection-Details.htm",l:-1,t:"Configuring Connection Details ",i:0.003010828964924,a:" Solace PubSub+ Connection Details The Spring Cloud Stream Binder for PubSub+ uses  Spring Boot Auto-Configuration for the Solace Java API  to configure its session. In the application.yml, this typically is configured as follows: \nsolace:\n  java:\n    host: tcp://localhost:55555\n    msg-vpn: ..."},"926":{y:0,u:"../API/Connectors/Self-Contained-Connectors/TibcoEMS/TibcoEMS-Enabling-Workflows.htm",l:-1,t:"Enabling Workflows",i:0.00020776814735686,a:"The provided application.yml enables workflow 0 and 1. To enable additional workflows, define the following properties in the application.yml, where \u003cworkflow-id\u003e is a value between [0-19]: \nspring:\n  cloud:\n    stream:\n      bindings: # Workflow bindings\n\t input-\u003cworkflow-id\u003e:\n\t   destination: ..."},"927":{y:0,u:"../API/Connectors/Self-Contained-Connectors/TibcoEMS/TibcoEMS-Message-Batching.htm",l:-1,t:"Message Batching",i:0.00020776814735686,a:"Messages are processed in batches with the transactions possible on the consumer side, producer side, or both. The optimal configuration depends on your specific use case. The main considerations are: A larger batch size can improve throughput but could lead to higher number of duplicates if ..."},"928":{y:0,u:"../API/Connectors/Self-Contained-Connectors/TibcoEMS/User-configured-header-transforms.htm",l:-1,t:"User-Configured Header Transforms",i:0.000560975779151716,a:"Generally, the consumed message’s headers are propagated through the connector to the output message. If you want to transform the headers, then you can do so as follows: \n# \u003cworkflow-id\u003e : The workflow ID ([0-19])\n# \u003cheader\u003e : The key for the outbound header\n# \u003cexpression\u003e : A SpEL expression which ..."},"929":{y:0,u:"../API/Connectors/Self-Contained-Connectors/TibcoEMS/User-configured-Payload-Transforms.htm",l:-1,t:"User-Configured Payload Transforms",i:0.00020776814735686,a:"Message payloads going through a workflow can be transformed using a Spring Expression Language (SpEL) expression as follows: # \u003cworkflow-id\u003e : The workflow ID ([0-19])\n# \u003cexpression\u003e : A SpEL expression\n                ..."},"930":{y:0,u:"../API/Connectors/Self-Contained-Connectors/TibcoEMS/TibcoEMS-Message-Headers.htm",l:-1,t:"Message Headers",i:0.00020776814735686,a:"Solace and JMS message headers can be created or manipulated using the  User-Configured Header Transforms    feature. Solace Headers Solace headers exposed to the connector are documented in the  Spring Cloud Stream Binder for Solace PubSub+   documentation. JMS Message Headers The JMS headers ..."},"931":{y:0,u:"../API/Connectors/Self-Contained-Connectors/TibcoEMS/TibcoEMS-JMS-Destination-Types.htm",l:-1,t:"JMS Destination Types",i:0.0014873183971732,a:"JMS binding destinations can be configured as physical destination names or as JNDI destination names. The spring.cloud.stream.jms.bindings.\u003cbinding_name\u003e.\u003cconsumer | producer\u003e.destination-type binding property specifies whether the destination value is a physical destination name or a JNDI ..."},"932":{y:0,u:"../API/Connectors/Self-Contained-Connectors/TibcoEMS/JMS-Shared-Durable-Subscribers.htm",l:-1,t:"JMS Shared Durable Subscribers",i:0.00020776814735686,a:"A JMS consumer binding can bind to a shared durable subscription, enabling multiple consumers to share the load of messages published to the subscription. Durable subscriptions accumulate messages even when all consumers are offline, ensuring that no messages are lost. To consume from a shared ..."},"933":{y:0,u:"../API/Connectors/Self-Contained-Connectors/TibcoEMS/TibcoEMS-Dynamic-Producer-Destinations.htm",l:-1,t:"Dynamic Producer Destinations",i:0.00020776814735686,a:"To route messages to dynamic destinations at runtime, use the  User-Configured Header Transforms   feature described above to set the following headers: Setting the scst_targetDestination header under solace.connector.default.workflow.transform-headers may  not  be  possible if  not  all workflows ..."},"934":{y:0,u:"../API/Connectors/Self-Contained-Connectors/TibcoEMS/TibcoEMS-Connector-Management-Deploymentment-Overview.htm",l:-1,t:"Configuring the Management and Deployment of the Connector for TIBCO EMS",i:0.000230370993649764,a:"You can configure how management and deployment details of the Connector for TIBCO EMS. You can choose to use a centralized configuration source for  the connector using  PubSub+ Connector Manager for PubSub+ Self-Contained Connectors  or configure the source locally. As part of configuring the ..."},"935":{y:0,u:"../API/Connectors/Self-Contained-Connectors/TibcoEMS/Management-and-Monitoring.htm",l:-1,t:"Management and Monitoring the Connector",i:0.000203812261248461,a:"Monitoring the Connector’s States The PubSub+ connector provides an ability to monitor its internal states through exposed endpoints provided by  Spring Boot Actuator . An Actuator shares information through the endpoints reachable over HTTP/HTTPS. The endpoints that are available are configured in ..."},"936":{y:0,u:"../API/Connectors/Self-Contained-Connectors/TibcoEMS/TibcoEMS-Health.htm",l:-1,t:"Health",i:0.000203812261248461,a:"The connector reports its health status using the  Spring Boot Actuator health endpoint . To configure the information returned by the health endpoint, configure the following properties: management.endpoint.health.show-details management.endpoint.health.show-components  For more information about ..."},"937":{y:0,u:"../API/Connectors/Self-Contained-Connectors/TibcoEMS/Leader-Election.htm",l:-1,t:"Redundancy Configuration",i:0.000203812261248461,a:"The connector has three leader election modes for redundancy: Operators can configure the leader election mode by setting the following configuration: \nsolace.connector.management.leader-election.mode\n=(standalone|active_active|active_standby)\n Leader Election Modes: Standalone and Active-Active ..."},"938":{y:0,u:"../API/Connectors/Self-Contained-Connectors/TibcoEMS/Workflow-Management.htm",l:-1,t:"Workflow Management",i:0.000203812261248461,a:"Workflow Management Endpoint A custom workflows management endpoint using  Spring Actuator  is provided to manage workflows.  To enable the workflows management endpoint: management: \n  endpoints:\n    web:\n      exposure:\n        include: \"workflows\"\n Once the workflows management endpoint is ..."},"939":{y:0,u:"../API/Connectors/Self-Contained-Connectors/TibcoEMS/Metrics.htm",l:-1,t:"Managing Metrics",i:0.000292114169197175,a:"This connector uses  Spring Boot Metrics  that leverages Micrometer to manage its metrics. Connector Meters In addition to the meters already provided by the Spring framework, this connector introduces the following custom meters: The solace.connector.process meter with result=failure is not a ..."},"940":{y:0,u:"../API/Connectors/Self-Contained-Connectors/TibcoEMS/Security.htm",l:-1,t:"Security",i:0.000307876968985883,a:"Securing Endpoints Exposed Management Web Endpoints For versions  2.0.0 and later , there are many endpoints that are automatically enabled for this connector. For a comprehensive list, see  Management and Monitoring Connector .  For versions earlier than 2.0.0, the connector only enables the health ..."},"941":{y:0,u:"../API/Connectors/Self-Contained-Connectors/TibcoEMS/Consuming-Object-Messages.htm",l:-1,t:"Consuming Object Messages",i:0.000203812261248461,a:"For the connector to process object messages, it requires access to the classes that define the object payloads. Assuming that your payload classes are in their own projects, and are packaged into their own JAR files, place these JAR files and their dependencies (if any) onto the connector’s ..."},"942":{y:0,u:"../API/Connectors/Self-Contained-Connectors/TibcoEMS/Adding-External-Libraries.htm",l:-1,t:"Adding External Libraries",i:0.000307876968985883,a:"The connector\u0027s JAR file uses the loader.path property as the recommended mechanism for adding external libraries to the connector’s classpath. See  Spring Boot - PropertiesLauncher Features  for more information. To add libraries to the connector’s container image, see  Modifying the Container ..."},"943":{y:0,u:"../API/Connectors/Self-Contained-Connectors/TibcoEMS/TibcoEMS-Configuration.htm",l:-1,t:"Connector Configuration",i:0.000915320011821671,a:"Providing Configuration For information about  about how the connector detects configuration properties, see  Spring Boot: Externalized Configuration . Converting Canonical Spring Property Names to Environment Variables For information about converting the Spring property names to environment ..."},});