define({"1085":{y:0,u:"../API/API-Developer-Guide-Java/Java-Messaging-Service.htm",l:-1,t:"Messaging Service",i:0.000390157528744056,a:"The PubSub+ Messaging API for Java provides the MessagingService interface, which allows you to connect to an event broker. The MessagingService interface handles all the functionality for interacting with a PubSub+ event broker. To create a MessagingService object, you must first configure a ..."},"1086":{y:0,u:"../API/API-Developer-Guide-Java/Java-API-Proxy-Connection.htm",l:-1,t:"Using Proxy Connections in the Java API",i:0.000186010773760665,a:"You can establish a connection to an  event broker within your private network via an HTTP or SOCKS5 proxy server, which avoids the need for individual firewall exceptions. The proxy configuration is set with system properties, that are usually set on the java command line or JVM. It is important to ..."},"1087":{y:0,u:"../API/API-Developer-Guide-Java/Publishing.htm",l:-1,t:"Publishing Messages",i:0.000186010773760665,a:"The PubSub+ Messaging API for Java  allows client applications to publish messages to an SMF (Solace Message Format) topic via the event broker. The message are then consumed by receivers subscribed to that topic.  You can publish messages to the event broker in the following ways: Publishing Direct ..."},"1088":{y:0,u:"../API/API-Developer-Guide-Java/Java-DM-Publish.htm",l:-1,t:"Publishing Direct Messages Using the Java API",i:0.00059668365007181,a:"Direct messages are useful when high-throughput and low-latency is required. We recommend that you publish events using direct messages if some message loss can be tolerated without negatively impacting client applications. Message loss can occur  due to external factors, such as network congestion ..."},"1089":{y:0,u:"../API/API-Developer-Guide-Java/Java-PM-Publish.htm",l:-1,t:"Publishing Persistent Messages Using the Java API",i:0.000482260494868898,a:"When your applications require confirmation handling and exactly once delivery, we recommend that you use persistent messages instead of  direct messages. To publish persistent messages in the PubSub+ Java API,  you first set up a message queue on the PubSub+ event broker.   For information about ..."},"1090":{y:0,u:"../API/API-Developer-Guide-Java/Subscribing.htm",l:-1,t:"Receiving Messages",i:0.000186010773760665,a:"The PubSub+ Messaging API for Java  allows clients to  consume messages published to any topics they are subscribed to. Receivers can consume messages from the event broker in the following ways: Consuming Direct Messages Using the Java API  Direct messaging provides a reliable, but not guaranteed ..."},"1091":{y:0,u:"../API/API-Developer-Guide-Java/Java-DM-Subscribe.htm",l:-1,t:"Consuming Direct Messages Using the Java API ",i:0.000505186802237147,a:"  Direct messaging is useful in scenarios where high-throughput and low-latency is required.  It is possible with the use of direct messages that some  message loss may occur due to external factors, such as network congestion or occasional client disconnections. Direct messages are suitable for ..."},"1092":{y:0,u:"../API/API-Developer-Guide-Java/Java-PM-Subscribe.htm",l:-1,t:"Consuming Persistent Messages Using the Java API ",i:0.000435337405484968,a:" Receiver applications that cannot tolerate message loss can use persistent messaging (referred to as  guaranteed messages in other parts of this documentation) instead of direct messaging. When persistent messaging is used, messages are stored on a queue on the event broker. Messages are not ..."},"1093":{y:0,u:"../API/API-Developer-Guide-Java/Java-API-Create-Queues.htm",l:-1,t:"Creating Queues with the Java API",i:0.000330867177005725,a:"You can create non-durable queues using the PubSub+ Java API when you create a PersistentMessageReceiver. To create a non-durable queue, pass Queue.nonDureableExclusiveQueue(queueName) into the parameters of the build() method. The queue is  provisioned on the PubSub+ event broker when you call the ..."},"1094":{y:0,u:"../API/API-Developer-Guide-Java/Java-API-Browse-Queues.htm",l:-1,t:"Browsing Queues with the Java API",i:0.000330867177005725,a:" Queue browsing allows your client applications to look at guaranteed messages, from oldest to newest, without removing them from a queue. You may optionally remove browsed messages from a queue or leave them as needed. For more information see  Browsing Guaranteed Messages . The following steps ..."},"1095":{y:0,u:"../API/API-Developer-Guide-Java/Java-API-Request-Reply.htm",l:-1,t:"Request-Reply Messaging in the Java API",i:0.000309469477400656,a:"Request-reply messaging is method of data transmission where applications simulate separate point-to-point channels: one for requests, and another for replies. In request-reply messaging, each request sent from a message requestor requires a reply from a message replier. When a message replier ..."},"1096":{y:0,u:"../API/Messaging-APIs/JavaRTO-API/java-rto-home.htm",l:-1,t:"Java RTO API",i:0.00053685453668033,a:"The Solace PubSub+ Messaging API for Java RTO, version 10.7 (also referred to as solclientj) is a low-latency Java Native Interface (JNI) wrapper for the C API. Message Exchange Patterns The PubSub+ Messaging API for Java RTO supports all common message exchange patterns. Publish / Subscribe ..."},"1097":{y:0,u:"../API/Messaging-APIs/JavaScript-API/js-home.htm",l:-1,t:"JavaScript API",i:0.000387808610710069,a:"The Solace PubSub+ Messaging API for JavaScript (version 10.17) allows web browsers and mobile client applications to send and receive  messages with Solace PubSub+ event brokers. The JavaScript, Node.js, Python, and Go Messaging APIs from Solace share the same asynchronous and non-blocking ..."},"1098":{y:0,u:"../API/Messaging-APIs/JavaScript-API/Web-Messaging-Concepts/Web-Messaging-Intro-js.htm",l:-1,t:"Web Messaging Concepts",i:0.000186010773760665,a:" If you are a system architect or developer, this section is intended to help you understand the architecture, features and deployment of Solace PubSub+ when used for Web Messaging. It\u0027s assumed you\u0027re familiar with messaging system concepts such as application messaging, topics, subscriptions and ..."},"1099":{y:0,u:"../API/Messaging-APIs/JavaScript-API/Web-Messaging-Concepts/Web-Messaging-Concepts.htm",l:-1,t:"Web Messaging Overview",i:0.000335276183813646,a:"Solace Web messaging provides the ability for applications in browsers and mobile devices to receive real-time updates of information pushed to them asynchronously from server applications in a data center over a web infrastructure composed of HTTP proxies, load balancers, and firewalls. It also ..."},"1100":{y:0,u:"../API/Messaging-APIs/JavaScript-API/Web-Messaging-Concepts/Web-Messaging-Architectures.htm",l:-1,t:"Web Messaging Architectures",i:0.00118466604999552,a:"This section describes the architecture of typical Solace Web Messaging systems. Internal Web Application Deployment Architecture In the following figure, server applications within the data center communicate with each other through an internal messaging system—the Solace PubSub+ messaging ..."},"1101":{y:0,u:"../API/Messaging-APIs/JavaScript-API/Web-Messaging-Concepts/Useful-Solace-PubSub-Features.htm",l:-1,t:"Useful Features for Web Messaging",i:0.000186010773760665,a:"This section describes the following key messaging features from Solace PubSub+ that are useful for Web Messaging use cases. This is neither a complete list of features from Solace PubSub+ nor is it a detailed presentation of each feature. The intent is to introduce the reader to key messaging ..."},"1102":{y:0,u:"../API/Messaging-APIs/JavaScript-API/Web-Messaging-Concepts/Network-Level-DMZ-Connectivity.htm",l:-1,t:"Network-Level DMZ Connectivity Architecture",i:0.000521674776107075,a:"This section provides information for network engineering teams responsible for the deployment of Solace PubSub+ appliances in the DMZ to provide high-availability connectivity into the underlying Layer 2 switch infrastructure. If there is no requirement for physical separation between ..."},"1103":{y:0,u:"../API/Messaging-APIs/JavaScript-API/Web-Messaging-Concepts/Using-F5-Big-IP-as-a-Load.htm",l:-1,t:"Using F5 Big-IP as a Load Balancer for External Internet Connectivity",i:0.000521674776107075,a:"This section describes how to configure an N+1 redundancy configuration using the F5 Big-IP appliance as a load balancer for external internet connectivity through Solace Web messaging, as follows: Create a pool for web servers and add the internet-facing web server interface addresses to it. Create ..."},"1104":{y:0,u:"../API/Messaging-APIs/JCSMP-API/jcsmp-api-home.htm",l:-1,t:"JCSMP API",i:0.000475048445703153,a:"The Solace PubSub+ Messaging API for Java (JCSMP), version 10.24, uses the Java Content Subscription Management Protocol (JCSMP) and is a 100% pure Java implementation. This API  delivers message-throughput with low-latency using legacy Java language features and programming models. All applications ..."},"1105":{y:0,u:"../API/Solace-JMS-API/jms-get-started-open.htm",l:-1,t:"JMS API",i:0.000962224359336238,a:"The PubSub+ Messaging API for JMS uses the standard JMS interface to provide JMS service for Java-based applications through a PubSub+  event broker. For information about version support in the PubSub+ JMS API see  Supported Environments . Resource Adapters To use the Solace JMS implementation in a ..."},"1106":{y:0,u:"../API/Solace-JMS-API/Managing-Solace-JNDI-Objects.htm",l:-1,t:"Solace JNDI Objects",i:0.000757045785107563,a:"Java Messaging Service (JMS) provides a common way for an enterprise’s Java applications to create, send, receive, and read messages. As of version 10.20, the PubSub+ JMS API supports the JMS 2.0 standard. Java messaging applications can use the Solace implementation of the JMS Application ..."},"1107":{y:0,u:"../API/Solace-JMS-API/Viewing-JNDI-Object-Schemas.htm",l:-1,t:"Viewing JNDI Object Schemas",i:0.000323498375129266,a:"You can use the following show commands to list and view details on what properties and property list parameters can be configured for the JNDI objects contained on the Solace JNDI store: Show JNDI Schema Connection Factory Show JNDI Schema Queue Show JNDI Schema Topic Show JNDI Schema Connection ..."},"1108":{y:0,u:"../API/Solace-JMS-API/Configuring-JNDI-Objects.htm",l:-1,t:"Configuring JNDI Objects",i:0.0024079516912791,a:"This section provides procedures for using the Solace CLI to configure administered JNDI object properties and property lists that are provisioned in the JNDI store on the Solace PubSub+ event broker.  A listing of configurable properties and property lists can be displayed through the show jndi ..."},"1109":{y:0,u:"../API/Solace-JMS-API/Monitoring-JNDI-Objects.htm",l:-1,t:"Monitoring JNDI Objects",i:0.0012398315788192,a:"You can use show User EXEC level commands to monitor and validate the configurations and status of JNDI objects stored on the Solace PubSub+ event broker: Viewing JNDI Connection Factory Configurations Viewing JNDI Objects Viewing JNDI Queues Viewing JNDI Summaries Viewing JNDI Topics Viewing JNDI ..."},"1110":{y:0,u:"../API/Solace-JMS-API/JMS-Dev-Guide-Intro.htm",l:-1,t:"Developer Guide for Solace JMS API\n",i:0.000288248593992912,a:"Developer Guide for Solace JMS API\n The PubSub+ Messaging API for JMS uses the standard JMS interface to provide JMS service for Java-based applications through a PubSub+ event broker. For information about version support in the PubSub+ JMS API, see  Supported Environments . To use the Solace JMS ..."},"1111":{y:0,u:"../API/Solace-JMS-API/Solace-JMS-Overview.htm",l:-1,t:"Solace JMS Overview\n",i:0.000186010773760665,a:"Solace JMS Overview\n The Solace JMS implementation allows Java applications to access an event broker using the standard JMS Application Programming Interface (API). JMS provides a common way for Java applications to create, send, receive, and read an enterprise messaging system\u0027s messages. For ..."},"1112":{y:0,u:"../API/Solace-JMS-API/Extensions-to-Standard-JMS.htm",l:-1,t:"Extensions to Standard JMS API",i:0.000209326172957015,a:"Solace JMS uses the following extensions to the standard JMS API. These extensions include JMS properties and utility functions. For information on the various property sources through which a JMS property can be set, how they are defined, and how each potential property source is prioritized, refer ..."},"1113":{y:0,u:"../API/Solace-JMS-API/Messaging-Models.htm",l:-1,t:"Messaging Models",i:0.000186010773760665,a:"The JMS API supports the following messaging models: Publish-and-subscribe Publish-and-subscribe messaging uses topics. JMS clients can publish messages to topics, and they can use topic subscriptions to consume messages that are published to specific topics. Topic subscriptions act as targets for ..."},"1114":{y:0,u:"../API/Solace-JMS-API/Message-Transport-Modes.htm",l:-1,t:"Message Transport Modes",i:0.000622907026881559,a:"The Solace JMS implementation allows clients to use either a Guaranteed Transport or Direct Transport mode to send and receive JMS messages. These transport modes allow JMS clients to utilize either the Guaranteed Messaging or Direct Messaging capabilities of the event broker, and they offer ..."},"1115":{y:0,u:"../API/Solace-JMS-API/Message-Types.htm",l:-1,t:"Message Types",i:0.000186010773760665,a:"The Solace JMS implementation supports the following message types: Persistent Persistent messages are received by a consumer once-and-only-once and in the same order that they were originally published. In addition, Persistent messages sent to durable endpoints must not be lost.  In the Solace JMS ..."},"1116":{y:0,u:"../API/Solace-JMS-API/Message-Components.htm",l:-1,t:"Message Components",i:0.000186010773760665,a:"Solace PubSub+ uses the Solace Message Format (SMF) protocol for client and event broker communications. SMF uses a proprietary binary message format that provides an efficient method of encapsulating messages for transmission over the platform. Messages exchanged between clients using the Solace ..."},"1117":{y:0,u:"../API/Solace-JMS-API/Considerations-for-Repli.htm",l:-1,t:"Considerations for Replicated Event Broker Deployments",i:0.0012398315788192,a:"The Solace Replication facility provides a data center redundancy and disaster recovery solution for Solace PubSub+. When Replication is implemented, Guaranteed messages that are published to Message VPNs with Replication active states at one site are automatically propagated to matching Message ..."},"1118":{y:0,u:"../API/Solace-JMS-API/Quick-Start.htm",l:-1,t:"Quick Start",i:0.000558518146210739,a:"This section provides details for experienced developers to quickly start using the Solace JMS API. The Solace System JMS implementation supports JMS 1.1, which is backward compatible with JMS 1.0.2b. It also supports Java applications in standalone mode only.  For JMS clients to successfully send ..."},"1119":{y:0,u:"../API/Solace-JMS-API/Installation.htm",l:-1,t:"Installation",i:0.000186010773760665,a:"To install the JMS API, unzip the sol-jms-\u003cversion_number\u003e.zip file on any supported platform. (For information on supported platforms, refer to JMS Messaging API Release Notes.) The resulting sdk‑jms directory contains the following directories: docs—Contains the JMS Javadoc API documentation in an ..."},"1120":{y:0,u:"../API/Solace-JMS-API/JMS-API-supported-environments.htm",l:-1,t:"Supported Environments",i:0.00058652890716541,a:"The PubSub+  Messaging API for JMS  is compatible with any version of the Oracle JDK or OpenJDK   that is in active support and also has security update support. For information about the supported versions, see the  Oracle Java SE Support Roadmap . As of version 10.20, the PubSub+ Messaging API for ..."},"1121":{y:0,u:"../API/Solace-JMS-API/OSGi-Support.htm",l:-1,t:"OSGI Support",i:0.000344120706611283,a:"The sol-jms jar library file includes metadata conforming to the OSGi standards and can be deployed as an OSGi bundle. The Solace JCSMP has also implemented a semantic versioning system that uses a numbering pattern of MAJOR.MINOR.PATCH. With this system, increments to each of these numbers has ..."},"1122":{y:0,u:"../API/Solace-JMS-API/Building-JMS-Projects-With-Maven.htm",l:-1,t:"Building JMS Projects with Maven",i:0.000435288368629051,a:"Apache Maven is a software management tool that can be used to build, install, and distribute Java-based projects. With Apache Maven, you can: obtain PubSub+ Messaging API for JMS artifacts from Maven Central install PubSub+ Messaging API for JMS artifacts in a local corporate Maven repository ..."},"1123":{y:0,u:"../API/Solace-JMS-API/Solace-JMS-in-JEE-Environments.htm",l:-1,t:"Using Solace JMS in JEE Environments",i:0.000446358526843529,a:"To use the Solace Solace implementation in a Java Platform, Enterprise Edition (Java EE) application server environment, you can deploy a Solace‑provided, Java Connector Architecture (JCA) 1.5-compliant resource adapter for the particular Application Server platform being used to provide enterprise ..."},"1124":{y:0,u:"../API/Solace-JMS-API/Code-and-Compile-Guideli.htm",l:-1,t:"Code and Compile Guidelines",i:0.000209326172957015,a:"To begin working with the standard Solace JMS API, import the required packages: com.solacesystems.jms.*; The Solace JMS API requires the use of standard Java distribution 1.8 or greater. The JMS sample applications include a sample Ant build script that shows how to include Solace libraries on the ..."},"1125":{y:0,u:"../API/Solace-JMS-API/Building-JMS-Samples.htm",l:-1,t:"Building JMS Samples",i:0.000186010773760665,a:"Building JMS Samples You can access JMS samples and use them as a reference. To access the samples, click Sample Code on  the  JMS Tutorials  page. You can see  the README.md file for information about how to build the sample code."},"1126":{y:0,u:"../API/Solace-JMS-API/Establishing-Connections.htm",l:-1,t:"Establishing Connections",i:0.00156210974798535,a:"This section describes how a JMS client can establish Java Naming and Directory Interface (JNDI) and JMS data connections. It also describes how a connected client can establish a Session through which a JMS client can produce and consume messages. Working with JMS-Administered Objects Client ..."},"1127":{y:0,u:"../API/Solace-JMS-API/Connection-Factories.htm",l:-1,t:"Connection Factories",i:0.0003565842741179,a:"A client must use a SolConnectionFactory object to create a JMS connection to the Solace PubSub+ event broker that acts as the JMS broker. A JMS connection establishes a data channel between the event broker and the JMS application. A Connection Factory provides a number of configuration parameters ..."},"1128":{y:0,u:"../API/Solace-JMS-API/Obtaining-Connection-Fac.htm",l:-1,t:"Obtaining Connection Factories",i:0.000941370763473479,a:"A Connection Factory, or an XA Connection Factory, can be obtained through one of the following ways: Programmatically Creating Connection Factories . Looking Up Connection Factories from Solace JNDI Stores Looking Up Connection Factories from External JNDI Stores Programmatically Creating ..."},"1129":{y:0,u:"../API/Solace-JMS-API/Creating-JMS-Connections.htm",l:-1,t:"Creating JMS Connections",i:0.000209326172957015,a:"When the appropriate JMS property values are set, call one of the following methods to create a JMS connection: createConnection()—creates a JMS connection with the client authentication credentials provided through the System, Initial Context, JNDI, URL, and/or Connection Factory property sources.  ..."},"1130":{y:0,u:"../API/Solace-JMS-API/JMS-API-Proxy-Connection.htm",l:-1,t:"Using Proxy Connections in the JMS API",i:0.000186010773760665,a:"You can establish a connection to an  event broker within your private network via an HTTP or SOCKS5 proxy server, which avoids the need for individual firewall exceptions. The proxy configuration is set with system properties, that are usually set on the java command line or JVM. It is important to ..."},"1131":{y:0,u:"../API/Solace-JMS-API/Managing-Sessions.htm",l:-1,t:"Managing Sessions",i:0.00110890136183976,a:"A Session is a single‑threaded context through which a JMS client application can create producers and consumers. JMS applications can create one or more Session per connection. The Solace JMS API supports transacted and non‑transacted Sessions  For information on working with XA Sessions, see  ..."},"1132":{y:0,u:"../API/Solace-JMS-API/Publishing-Messages.htm",l:-1,t:"Publishing Messages",i:0.000186010773760665,a:"This section describes how to publish messages using the JMS API. It also discusses creating Destination objects that messages can be published to and consumed from. Related Event Broker Provisioning and Configuration Information For JMS clients to publish messages within the Message VPN they are ..."},"1133":{y:0,u:"../API/Solace-JMS-API/Supported-Message-Types.htm",l:-1,t:"Supported Message Types",i:0.000186010773760665,a:"The table below lists the standard JMS message types that are supported as well as the corresponding information about how to create them and how to set data to and get data from the message body. For a comprehensive list of the available methods that can be used for get/set or read/write ..."},"1134":{y:0,u:"../API/Solace-JMS-API/Setting-Message-Properties.htm",l:-1,t:"Setting Message Properties",i:0.000799567102214614,a:"The following sections discuss some important message properties that can be set for messages to be published. These properties can affect how messages are routed. Time-to-Live Dead Message Queue Eligibility Eliding Eligibility Partition Key Time-to-Live To ensure that stale messages are not ..."},"1135":{y:0,u:"../API/Solace-JMS-API/Creating-Message-Produce.htm",l:-1,t:"Creating Message Producers",i:0.000265065740185974,a:"JMS applications use a MessageProducer object to send messages to destinations. To create a MessageProducer, call session.createProducer(Destination destination). You can also configure default properties for a producer instance through the following methods: MessageProducer.setDeliveryMode(int ..."},"1136":{y:0,u:"../API/Solace-JMS-API/Working-with-Destination.htm",l:-1,t:"Working with Destinations",i:0.000540989811963939,a:"A destination object is a JMS‑administered object that provides a destination that clients can publish messages to and consume messages from. Destinations can be temporary (TemporaryTopic or TemporaryQueue) or durable (Topic or Queue). Durable destination objects are provisioned on the event broker ..."},"1137":{y:0,u:"../API/Solace-JMS-API/Sending-Messages.htm",l:-1,t:"Sending Messages",i:0.000186010773760665,a:"To send a message to a destination, call send() from an acquired MessageProducer object, and pass in the message to be sent. The following parameters for the message can be also passed in with a send(...) method or they can be set when the MessageProducer is created: destination—The destination to ..."},"1138":{y:0,u:"../API/Solace-JMS-API/Delivering-Messages-to-single-consumer.htm",l:-1,t:"Delivering Messages to Single Consumers",i:0.000289304050232586,a:"Solace PubSub+ event brokers support a Deliver‑To‑One feature that allows a producer to specify that if a message it sends matches subscriptions for multiple Direct Transport clients on an event broker, it can only be delivered to at most one of them. This feature is useful for implementing load ..."},"1139":{y:0,u:"../API/Solace-JMS-API/Using-Topic-Requestors.htm",l:-1,t:"Using Topic Requestors",i:0.000186010773760665,a:"The TopicRequestor class provides a simple synchronous request/reply mechanism that a client can use to publish a message to a specific topic and wait for a reply to that message. To create a Topic Requestor, call javax.jms.TopicRequestor() and pass in a non‑transacted Session and a topic ..."},"1140":{y:0,u:"../API/Solace-JMS-API/Using-Queue-Requestors.htm",l:-1,t:"Using Queue Requestors",i:0.000186010773760665,a:"The QueueRequestor class provides a simple synchronous request/reply mechanism that a client can use to publish a message to a queue destination and wait for a reply to that message. To create a Queue Requestor, call javax.jms.QueueRequestor(QueueSession session, Queue queue) and pass in a ..."},"1141":{y:0,u:"../API/Solace-JMS-API/Receiving-Messages.htm",l:-1,t:"Receiving Messages",i:0.000186010773760665,a:"            Receiving Messages This section describes how clients can use the JMS API to receive messages. Related Event Broker Provisioning and Configuration Information For JMS clients to consume messages from the Message VPN they are connected to, they must be assigned appropriately configured ..."},"1142":{y:0,u:"../API/Solace-JMS-API/Creating-Message-Consume.htm",l:-1,t:"Creating Message Consumers",i:0.000281307530877148,a:"A MessageConsumer object can be used to receive messages from a queue or for a specific topic. The common MessageConsumer interface behaves in the same manner as its respective sub‑interfaces QueueReceiver and TopicSubscriber, which are PTP- and pub/sub-specific interfaces. To create a message ..."},"1143":{y:0,u:"../API/Solace-JMS-API/Receiving-Messages-Synch.htm",l:-1,t:"Receiving Messages Synchronously or Asynchronously",i:0.00229365238387774,a:"Message consumers can receive messages from destinations using one of the following modes: Synchronous —A message consumer must call a receive method to explicitly fetch a message from a destination. Asynchronous                —A message listener is registered with a message consumer. When messages ..."},"1144":{y:0,u:"../API/Solace-JMS-API/Creating-Durable-Topic-S.htm",l:-1,t:"Creating Durable Topic Subscribers",i:0.000388883185256168,a:"TopicSubscriber, a subinterface of MessageConsumer, is a publish and subscribe form of a message consumer. A client can use a durable TopicSubscriber object to receive messages that have been published to a Topic destination. Even if that client is not connected, the durable topic subscriber ensures ..."},"1145":{y:0,u:"../API/Solace-JMS-API/Selectors.htm",l:-1,t:"Selectors",i:0.00269087794490959,a:"Selectors enable client applications to specify which messages they are interested in receiving, as determined by the messages’ header field and property values. A selector is a string up to a maximum of 2,000 bytes that uses a conditional expression syntax that is a subset of SQL92. For detailed ..."},"1146":{y:0,u:"../API/Solace-JMS-API/Message-Discard-Notifica.htm",l:-1,t:"Message Discard Notification",i:0.000289304050232586,a:"A client application receiving messages through non-durable consumers that use Direct Transport can test whether the event broker has discarded any non‑persistent messages previous to the current received message. To test a non-persistent message sent using Direct Transport for its discard ..."},"1147":{y:0,u:"../API/Solace-JMS-API/Browsing-Messages.htm",l:-1,t:"Browsing Messages",i:0.00142018247273139,a:"Client applications can use a QueueBrowser to look at messages spooled for a queue without consuming them. The delivery restrictions imposed by a queue’s access type (that is, exclusive or non-exclusive) only affect consuming messages from a queue. They do not affect browsing messages on a queue.  ..."},"1148":{y:0,u:"../API/Solace-JMS-API/Using-Transacted-Sessions.htm",l:-1,t:"Using Transacted Sessions",i:0.00152582163586033,a:"Transacted Sessions enable client applications to group multiple message send and/or receive operations together in single, atomic units known as local transactions. Each transacted Session can support a single series of transactions. Note:  Only Guaranteed messages (that is, messages with a ..."},"1149":{y:0,u:"../API/Solace-JMS-API/Creating-Transacted-Sess.htm",l:-1,t:"Creating Transacted Sessions",i:0.000186010773760665,a:"To create a transacted Session, call Connection.createSession(boolean transacted, int acknowledgeMode) and pass in true for the transacted parameter. Within a transacted Session, a client can create a maximum of one producer flow to publish messages  and a maximum of 256 consumer flows to consume ..."},"1150":{y:0,u:"../API/Solace-JMS-API/Publishing-Messages-in-T.htm",l:-1,t:"Publishing Messages in Transactions",i:0.000360919985928663,a:"To publish messages in a transaction, a MessageProducer must be acquired from the transacted Session. To then publish messages in transactions, call MessageProducer.send(...). In a transaction, the event broker stages the published messages, and they are not delivered to their destinations on the ..."},"1151":{y:0,u:"../API/Solace-JMS-API/Consuming-Messages-in-Tr.htm",l:-1,t:"Consuming Messages in Transactions",i:0.000186010773760665,a:"To consume messages in transactions, a client must acquire a MessageConsumer or TopicSubscriber from the transacted Session.  After acquiring a MessageConsumer or TopicSubscriber, messages can then be received either: asynchronously, through a defined MessageListener synchronously, through ..."},"1152":{y:0,u:"../API/Solace-JMS-API/Complete-or-Cancel-Transactions.htm",l:-1,t:"Completing or Canceling Transactions",i:0.000323498375129266,a:"Messages that are published and received on a transaction are staged on the Solace PubSub+ event broker. The transaction can either be: completed through a commit operation (refer to  Committing Transactions ) canceled through a rollback operation (refer to  Rolling Back Transactions ) Committing ..."},"1153":{y:0,u:"../API/Solace-JMS-API/Using-XA-Transactions.htm",l:-1,t:"Using XA Transactions",i:0.000452509687665245,a:" This section is primarily intended for application architects and intermediate to advanced programmers who intend to build their own XA solution rather than using the available Solace JEE Connector Architecture (JCA) Resource Adapter. It is also provided for those application architects and ..."},});