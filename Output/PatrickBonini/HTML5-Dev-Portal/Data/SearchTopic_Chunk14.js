define({"944":{y:0,u:"../API/Connectors/Self-Contained-Connectors/TibcoEMS/TibcoEMS-Asynchronous-Publishing.htm",l:-1,t:"Asynchronous Publishing",i:0.000203812261248461,a:"Asynchronous publishing allows the connector to process new messages without the need to wait for the previous message’s publish acknowledgment. While this can boost performance, it does come with a trade-off, as it may increase the chances and volume of duplicate messages. A workflow can be ..."},"945":{y:0,u:"../API/Integration-Guides.htm",l:-1,t:"Integration Guides",i:0.000267551919865584,a:"Integration guides that help you make the most of Solace PubSub+."},"946":{y:0,u:"../API/Component-Maps.htm",l:-1,t:"Overview: How Apps Interact with PubSub+ Messaging Components",i:0.000770780332921258,a:"In this section we\u0027ll take you on a tour of the PubSub+ event broker\u0027s messaging components, and explain at a high level how they make data move from producers to the event broker, and from the event broker to consumers.   The PubSub+ event broker provides a foundation for multi-protocol and ..."},"947":{y:0,u:"../API/Core-Concepts-Solace-API-Concepts.htm",l:-1,t:"PubSub+ API Concepts",i:0.000311442740063062,a:"In this section we\u0027ll provide you with an overview of PubSub+ messaging API fundamentals. Contexts \n\t\tThe PubSub+ APIs use processing Contexts for organizing communication between an application and a PubSub+ event broker. Contexts act as containers in which zero or more sessions are created and ..."},"948":{y:0,u:"../API/API-Developer-Guide/Developer-Guide-Home.htm",l:-1,t:"Solace Messaging API Developer Guide",i:0.000228225040892072,a:"Solace Messaging API Developer Guide The purpose of this Solace Messaging API Developer Guide is to provide you with the information you need to use the messaging API of your choice."},"949":{y:0,u:"../API/API-Developer-Guide/Core-Messaging-API-Concepts.htm",l:-1,t:"Messaging API Concepts",i:0.000186010773760665,a:"Messaging API Concepts\n The Solace Messaging Application Programming Interfaces (APIs) are designed with the same core concepts, and they use the same fundamental components to process messages and data. Understanding how the APIs use these components, and how they relate to each other, is necessary ..."},"950":{y:0,u:"../API/API-Developer-Guide/Message-Delivery-Modes.htm",l:-1,t:"Message Delivery Modes",i:0.000417594412765922,a:"PubSub+ event brokers   support the following message delivery modes:     At-most-once delivery PubSub+ event brokers   provide two options:  Direct  and  Non-Persistent  message delivery. Non-Persistent message delivery mode is  used to fulfill JMS specification requirements. For Solace Messaging ..."},"951":{y:0,u:"../API/API-Developer-Guide/Messages.htm",l:-1,t:"Messages",i:0.000186010773760665,a:"A message is a packet of information sent from producers to consumers. Messages are the central units of information that clients exchange over Solace PubSub+. Solace PubSub+ uses the Solace Message Format (SMF) protocol for client and event broker communications. SMF uses a proprietary binary ..."},"952":{y:0,u:"../API/API-Developer-Guide/Factories.htm",l:-1,t:"Factories",i:0.000186010773760665,a:"As programming interfaces for object-oriented languages, the Java, Java RTO, JavaScript, Node.js, and .NET APIs use a singleton factory as the first point of contact to the APIs. A factory is used to obtain instances of messaging system entities such as Contexts, Sessions, non-temporary ..."},"953":{y:0,u:"../API/API-Developer-Guide/Contexts.htm",l:-1,t:"Contexts",i:0.000274253772355006,a:"The messaging APIs use processing Contexts for organizing communication between an application and a Solace PubSub+ event broker."},"954":{y:0,u:"../API/API-Developer-Guide/Sessions.htm",l:-1,t:"Sessions",i:0.000280048867131227,a:"When a Context is established, one or more Sessions can be created within that Context. A Session creates a single, client connection to an event broker for sending and receiving messages. A Session provides the following primary services: client connection update and retrieve Session properties ..."},"955":{y:0,u:"../API/API-Developer-Guide/Guaranteed-Message-Flows.htm",l:-1,t:"Guaranteed Message Flows",i:0.000274253772355006,a:"For a client application to publish Guaranteed messages to or consume Guaranteed messages from Solace PubSub+, it must create one or more Flows within a Session. A Flow is an API object that allows applications to send or receive Guaranteed messages. A subscriber Flow allows applications to receive ..."},"956":{y:0,u:"../API/API-Developer-Guide/Cache-Sessions.htm",l:-1,t:"Cache Sessions",i:0.000186010773760665,a:"If you want your application to be able to send and receive requests for cached messages for a Topic of interest, you must create one or more cache session objects in a Session. A Session can support multiple cache session objects. The PubSub+ Cache feature is only available to Sessions connected to ..."},"957":{y:0,u:"../API/API-Developer-Guide/Destinations-Subscripti.htm",l:-1,t:"Destinations, Subscriptions, and Endpoints",i:0.000186010773760665,a:"The following figure shows the basic relationship between destinations, subscriptions, and endpoints. Session and its Aggregates Destinations A Destination is an API encapsulation of an address that messages can be published to. A message can be published to one of the following: Topic—In a ..."},"958":{y:0,u:"../API/API-Developer-Guide/Supported-Environments.htm",l:-1,t:"Supported Environments",i:0.000436979342965666,a:"The PubSub+ Messaging APIs are compatible with many different operating systems and platforms. The following table summarizes the major operating systems and environments supported for each PubSub+ Messaging API. For the complete list of operating systems and platforms supported for each API, see ..."},"959":{y:0,u:"../API/API-Developer-Guide/Quick-Start.htm",l:-1,t:"Quick Start",i:0.000600732413342145,a:"This section provides the details required for experienced developers to quickly get started using the enterprise messaging APIs that you have downloaded from a secure Solace server. Once you have completed the tasks in this section successfully, you should have a clean build of the examples in the ..."},"960":{y:0,u:"../API/API-Developer-Guide/API-Versioning.htm",l:-1,t:"API Versioning",i:0.000186010773760665,a:"The Solace JCSMP, JavaScript, and Node.js APIs have  implemented a semantic versioning system that uses a numbering pattern of MAJOR.MINOR.PATCH. With this system, increments to each of these numbers has a specific meaning: MAJOR Incompatible API changes were made MINOR Backwards-compatible ..."},"961":{y:0,u:"../API/API-Developer-Guide/Building-JCSMP-Projects-With-Maven.htm",l:-1,t:"Building Java Projects with Maven",i:0.000186010773760665,a:"Apache Maven is a software management tool that can be used to build, install, and distribute Java-based projects. You can build Java-based projects with either the Java API, JCSMP, or Java RTO API from Solace. Only version 10.0.0 and later, isSolace JCSMP compatible with Apache Maven.  For the Java ..."},"962":{y:0,u:"../API/API-Developer-Guide/Building-Projects-With-NuGet.htm",l:-1,t:"Building .NET Projects with NuGet",i:0.000186010773760665,a:"This section provides information on how to consume the Solace .NET messaging API NuGet package using the NuGet Visual Studio extension version v3.5.0 or NuGet Commandline v3.5.0. NuGet is a package manager for the Microsoft development platform, that is distributed as a Microsoft Visual Studio ..."},"963":{y:0,u:"../API/API-Developer-Guide/Getting-Node.js-API-Library-Using-npm.htm",l:-1,t:"Getting the Node.js API Library Module",i:0.000186010773760665,a:"Node.js applications load the Solace Node.js API library module to make use of the API. The Solace Node.js API library module is available from the npmjs.org registry, and npm is used to retrieve it. npm is a package manager for Node.js packages and modules and is installed on your computer when you ..."},"964":{y:0,u:"../API/API-Developer-Guide/Installation.htm",l:-1,t:"Installation",i:0.000186010773760665,a:"To install a messaging API, unzip the archive file for your supported platform. JCSMP The extracted package contains the following subdirectories in /Release: docs — JCSMP developer online reference documentation lib —  JCSMP libraries license —  contains the Apache license version 2.0 agreement and ..."},"965":{y:0,u:"../API/Messaging-APIs/Code-and-Compile-Guideli.htm",l:-1,t:"Code and Compile Guidelines",i:0.000471259751629524,a:"As you start creating and updating your application code, consider the following guidelines for the messaging API that you are using: JCSMP  To begin working with JCSMP , import the required packages: com.solacesystems.jcsmp.* The Solace JCSMP  requires the use of standard Java distribution 1.8 or ..."},"966":{y:0,u:"../API/API-Developer-Guide/Run-Guidelines.htm",l:-1,t:"Run Guidelines",i:0.000186010773760665,a:"Before running your compiled application, consider the following guidelines for the messaging API that you are using. Java RTO API For applications running on UNIX or Linux systems, set the LD_LIBRARY_PATH environment variable to specify the run-time path needed to find the appropriate RTO API ..."},"967":{y:0,u:"../API/API-Developer-Guide/Building-Messaging-API-S.htm",l:-1,t:"Building Messaging API Samples",i:0.000186010773760665,a:"Each PubSub+ Messaging API has online documentation and samples for application developers to reference. The sample code can be found for each API from the  Developer Tutorials  page, where you can navigate to Github, and see the README.md file. The README.md file contains information about how to ..."},"968":{y:0,u:"../API/API-Developer-Guide/Initializing-and-Monitoring-APIs.htm",l:-1,t:"Initializing and Monitoring APIs",i:0.000572721237349398,a:"This section describes how to initialize the messaging APIs and provides information for using messaging API logging and Session statistics. Initializing APIs To work with a messaging API, it must first be initialized. JCSMP No specific method call is required; JCSMP is initialized the first time a ..."},"969":{y:0,u:"../API/API-Developer-Guide/Creating-Contexts.htm",l:-1,t:"Creating Contexts",i:0.000186010773760665,a:"Contexts are used for organizing communications between applications and a Solace PubSub+ event broker. Each client application must use a minimum of one Context. A Context acts as a container in which one or more Sessions can be configured and Session‑related events can be handled. It encapsulates ..."},"970":{y:0,u:"../API/API-Developer-Guide/Configuring-Logging.htm",l:-1,t:"Configuring Logging",i:0.000499845100276209,a:"This section provides information for using messaging API logging, and includes the following APIs: JCSMP Java RTO API C and .NET APIs JavaScript and Node.js APIs For information on logging in the PubSub+ Java API, see  Configuring Logging in the PubSub+ Java API .  JCSMP JCSMP uses Apache Commons ..."},"971":{y:0,u:"../API/API-Developer-Guide/Working-with-Session-Sta.htm",l:-1,t:"Working with Session Statistics",i:0.000186010773760665,a:"Working with Session Statistics The messaging APIs provide various statistics for each Session, which can be useful when debugging applications. For a list of all supported Session statistics, refer to  PubSub+ Messaging APIs  to access the documentation for your messaging API."},"972":{y:0,u:"../API/API-Developer-Guide/Creating-Client-Sessions.htm",l:-1,t:"Creating Client Sessions",i:0.000615871676919325,a:"A Session creates a single, client connection to a Solace PubSub+ event broker for sending and receiving messages. The Solace Message Format (SMF) is used to facilitate the communication between a client and an event broker, and this SMF communication is then encapsulated through a single TCP ..."},"973":{y:0,u:"../API/API-Developer-Guide/Session-Props-Required.htm",l:-1,t:"Session Properties Required to Establish a Connection",i:0.00154977691708877,a:"When a Session is created, default values are assigned to its settings, but can be modified if required. How to modify the  following settings are explained in this section.  Authentication Scheme Client Name Host Local Host Message VPN For a complete list of Session properties, valid parameters, ..."},"974":{y:0,u:"../API/API-Developer-Guide/Configuring-Connection-T.htm",l:-1,t:"Configuring Connection Time-Outs and Retries",i:0.00127652605071478,a:"You can configure the connection time-outs and the number of retries for client applications to connect to event brokers. You can use channel properties for the JCSMP API, or session properties for Java RTO , C, and .NET APIs. For information on how to set these properties, see: Connection Time-Out ..."},"975":{y:0,u:"../API/API-Developer-Guide/Defining-Client-Authentication.htm",l:-1,t:"Defining Client Authentication Info",i:0.000698212026324046,a:"The authentication scheme session property specifies whether Basic, Client Certificate, Kerberos, or OAuth authentication is to be used to authenticate a client’s connection to the Solace PubSub+ event broker. In addition to indicating in the session properties the authentication scheme that will be ..."},"976":{y:0,u:"../API/API-Developer-Guide/Creating-Secure-Sessions.htm",l:-1,t:"Creating Secure Sessions",i:0.000535872298304578,a:"Clients can optionally create secure Sessions that require trusted server certificates to establish a TLS/SSL-encrypted client connection to a PubSub+ event broker. When a secure Session is created, SMF information is transported using TLS/SSL over TCP instead of plain-text over TCP. To create a ..."},"977":{y:0,u:"../API/API-Developer-Guide/Detecting-Msg-Broker-Capabil.htm",l:-1,t:"Detecting Event Broker Capabilities",i:0.000186010773760665,a:"Configuration changes that affect event broker capabilities made after a client has successfully connected to the event broker are not communicated to the client asynchronously. A client will only learn of the changed capabilities if it disconnects and reconnects to the event broker. Related Samples ..."},"978":{y:0,u:"../API/API-Developer-Guide/Enabling-Channel-Compres.htm",l:-1,t:"Enabling Channel Compression for a Session",i:0.000245505071886996,a:"Valid values for the compression level to be applied to messages published by a client are 0 (no compression), or 1 through 9 (where 1 offers the least amount of compression and fastest data throughput, and 9 offers the most compression and slowest data throughput). The default value is 0. The ..."},"979":{y:0,u:"../API/API-Developer-Guide/Enabling-No-Local-Delive.htm",l:-1,t:"Enabling No Local Delivery for a Session",i:0.000404769320552555,a:"The No Local Session property only affects the delivery of Direct messages to the client on the same Session that the messages were published on. It does not affect the delivery of Guaranteed messages. The No Local property can also be enabled for a Flow. When enabled at the Flow level, the No Local ..."},"980":{y:0,u:"../API/API-Developer-Guide/Setting-Client-Keepalive.htm",l:-1,t:"Setting Client Keepalives",i:0.000186010773760665,a:"The APIs have built-in Keepalive mechanisms that are used to monitor the status of client connections. Keepalive messages are sent to the event broker over those connections at timed intervals (the minimum valid value is 50 milliseconds). If a response is not received after the maximum number of ..."},"981":{y:0,u:"../API/API-Developer-Guide/Handling-Session-Events.htm",l:-1,t:"Handling Session Events",i:0.000290710632654743,a:"JCSMP Session Events\n         An application can register an implementation of the SessionEventHandler interface when creating a Session through JCSMPFactory#createSession(JCSMPProperties, Context, SessionEventHandler). This handler receives callbacks for Session events defined in SessionEvent. ..."},"982":{y:0,u:"../API/API-Developer-Guide/Manage-Message-Properties.htm",l:-1,t:"Managing Messages in the PubSub+ Messaging APIs",i:0.000222305767219318,a:"The following sections discuss how you can manage messages when you use the PubSub+ Messaging APIs. Getting Message Properties Setting Message Properties Duplicating Messages Displaying Messages Freeing Messages Getting Message Properties A client can obtain message properties from a created message ..."},"983":{y:0,u:"../API/API-Developer-Guide/Message-Payload-Compression.htm",l:-1,t:"End-to-End Payload Compression",i:0.000309469477400656,a:"The PubSub+ APIs can perform end-to-end payload compression to allow for:  faster message throughput  reduced bandwidth usage improved performance in your applications While end-to-end payload compression creates more work for individual PubSub+ APIs, it enables faster aggregate rates of message ..."},"984":{y:0,u:"../API/API-Developer-Guide/Publishing-Direct-Messages.htm",l:-1,t:"Publishing Direct Messages",i:0.00124176882743963,a:"This section describes how to publish Direct messages using the Solace messaging APIs. Direct Messaging, also known as Reliable Messaging, allows a client to use a Publish and Subscribe (Pub/Sub) messaging model to publish messages. Direct messages are published to a Topic destination and are routed ..."},"985":{y:0,u:"../API/API-Developer-Guide/Creating-Topics-1.htm",l:-1,t:"Creating Topics",i:0.000186010773760665,a:"When using the JCSM, Java RTO, and Javascript, Node.js, or .NET APIs (which are object-oriented), a client must create a Topic instance to encapsulate a topic name that can be used as a destination to publish messages to. Topic instances can also be used by consumers to indicate through ..."},"986":{y:0,u:"../API/API-Developer-Guide/Creating-Messages.htm",l:-1,t:"Creating Messages",i:0.000438169464320883,a:"Messages are explicitly created by client applications when publishing and are implicitly created by the messaging APIs on matching message delivery. JCSMP Creates an object of the specified class  to encapsulate a message. Java RTO API Creates an object within the native library and provides a ..."},"987":{y:0,u:"../API/API-Developer-Guide/Setting-Message-Properti.htm",l:-1,t:"Setting Message Properties",i:0.00055222804624127,a:"The following sections discuss some important message properties that can be set for messages to be published. These properties can affect how messages are routed. Delivery Mode Destination Deliver-To-One Subscriber Class of Service Message Eliding Eligibility Message Priority For a complete list of ..."},"988":{y:0,u:"../API/API-Developer-Guide/Adding-Data-Payloads-1.htm",l:-1,t:"Adding Data Payloads",i:0.000186010773760665,a:"You can add the following types of payloads to a message: XML content—XML data can be added to the XML content part of a message. Binary content—Binary data can be added to a message as a binary attachment. A message can only contain a single attachment.  When this attachment is sent through the ..."},"989":{y:0,u:"../API/API-Developer-Guide/Sending-Messages.htm",l:-1,t:"Sending Direct Messages",i:0.000496844239504824,a:"When sending a Direct message, client applications must consider the following factors: When using JCSMP, whether you want to send messages using a streaming or non-streaming mode. Refer to  Streaming and Non-Streaming Sends in JCSMP . When using the Java RTO, C, or .NET APIs, whether you want to ..."},"990":{y:0,u:"../API/API-Developer-Guide/Publishing-Messages-that.htm",l:-1,t:"Publishing Messages that Request Replies",i:0.000679975020212088,a:"The enterprise messaging APIs enable clients to use convenience functions and methods to publish Direct messages that request replies from receiving clients. This differs from a traditional publish and subscribe scenario where a message is published to a particular Topic and clients interested in ..."},"991":{y:0,u:"../API/API-Developer-Guide/Receiving-Direct-Messages.htm",l:-1,t:"Receiving Direct Messages",i:0.000277118433364833,a:"This section describes how to receive and manage Direct messages using the enterprise messaging APIs. Related Event Broker Provisioning and Configuration Information To allow clients to subscribe to topics (or to only a specific set of topics) within the Message VPN they are connected to, clients ..."},"992":{y:0,u:"../API/API-Developer-Guide/Managing-Subscriptions.htm",l:-1,t:"Managing Subscriptions",i:0.000857771339368631,a:"A client must use Topic subscriptions to receive Direct messages from the Message VPN that it has connected to on a Solace PubSub+ event broker. A subscription represents a message attractor a client can use in a Publish/ Subscribe (pub/sub) messaging domain to express its interest in the messages ..."},"993":{y:0,u:"../API/API-Developer-Guide/Receiving-Direct-Message.htm",l:-1,t:"Receiving Direct Messages",i:0.00070931186165894,a:"Direct messages can be delivered to a client in a Session when the event broker has matching Topic subscriptions for that client. For the client to receive the messages, it must use a message receive interface or callback/delegate appropriate for the programming language used. JCSMP Direct messages ..."},"994":{y:0,u:"../API/API-Developer-Guide/Publishing-Guaranteed-Messages.htm",l:-1,t:"Publishing Guaranteed Messages",i:0.00150959029687668,a:"A client application can publish Guaranteed messages, that is, messages that the client application assigns a Persistent or Non‑Persistent delivery mode to Queue or Topic destinations. For a client to publish Guaranteed messages in a Session, a producer flow to the host event broker is required. For ..."},"995":{y:0,u:"../API/API-Developer-Guide/Acknowledging-Published-.htm",l:-1,t:"Acknowledging Published Messages",i:0.000259550463478964,a:"Published Guaranteed messages are acknowledged when they are received by the Solace PubSub+ event broker. The following figure shows the publish and acknowledge process used for Guaranteed messages. Acknowledging Published Guaranteed Messages A client application publishes messages with Persistent ..."},"996":{y:0,u:"../API/API-Developer-Guide/Creating-Topics.htm",l:-1,t:"Creating Topics",i:0.000668806593610118,a:"When using the JCSM, Java RTO, and Javascript, Node.js, or .NET APIs (which are object-oriented), a client must create a Topic instance to encapsulate a topic name that can be used as a destination to publish messages to. Topic instances can also be used by consumers to indicate through ..."},"997":{y:0,u:"../API/API-Developer-Guide/Creating-Messages-1.htm",l:-1,t:"Creating Messages",i:0.00105392638671801,a:"Messages are explicitly created by client applications when publishing and are implicitly created by the messaging APIs on matching message delivery. JCSMP Creates an object of the specified class (see  Java Message Classes  below) to encapsulate a message. Java RTO API Creates an object within the ..."},"998":{y:0,u:"../API/API-Developer-Guide/Adding-Data-Payloads.htm",l:-1,t:"Adding Data Payloads",i:0.000260178949360784,a:"You can add the following types of payloads to a message: XML content—XML data can be added to the XML content part of a message. Binary content—Binary data can be added to a message as a binary attachment. A message can only contain a single attachment.  When this attachment is sent through the ..."},"999":{y:0,u:"../API/API-Developer-Guide/Sending-Guaranteed-Messages.htm",l:-1,t:"Sending Guaranteed Messages",i:0.000554943711989552,a:"When sending a Guaranteed message, client applications must consider the following factors: When using JCSMP, whether you want to send messages using a streaming or non-streaming mode. Refer to  Streaming and Non-Streaming Sends in JCSMP . When using the Java RTO, C, or .NET APIs, whether you want ..."},"1000":{y:0,u:"../API/API-Developer-Guide/Request-Reply-Messaging.htm",l:-1,t:"Request Reply Messaging",i:0.000610786872375987,a:"The  Request-Reply   messaging pattern is different from the  Publish-Subscribe  messaging pattern because each time the subscriber consumes a message it sends a response to the publisher. For more information see  Publishing Messages that Request Replies . This section provides an overview of the ..."},"1001":{y:0,u:"../API/API-Developer-Guide/Receiving-Guaranteed-Messages.htm",l:-1,t:"Receiving Guaranteed Messages",i:0.00237857991205948,a:"To receive published Guaranteed messages (that is, messages that have a delivery mode of Persistent or Non‑Persistent), a client must create a consumer Flow to bind to a Queue endpoint or a Topic Endpoint provisioned on the event broker. Once the client is bound to the endpoint, it can receive ..."},"1002":{y:0,u:"../API/API-Developer-Guide/Provisioning-Durable-End.htm",l:-1,t:"Provisioning and Deprovisioning Durable Endpoints",i:0.000540130605931471,a:"There are two ways that durable queues or topic endpoints can be provisioned on an event broker: An administrator can manually provision a durable endpoint through the Broker Manager, SEMP, the Solace CLI, or SolAdmin.\n\t\t\t Even for administrator provisioned endpoints, the PubSub+ Messaging API for ..."},"1003":{y:0,u:"../API/API-Developer-Guide/Creating-Temp-Endpoints.htm",l:-1,t:"Creating Temporary Endpoints",i:0.000195311358045996,a:"A client can consume Guaranteed messages from a temporary endpoint (a temporary Queue or a non-durable Topic Endpoint). However, a temporary endpoint is non‑durable because it only exists as for as long as the Session that it was created in. JCSMP  After a client application creates a temporary ..."},"1004":{y:0,u:"../API/API-Developer-Guide/Defining-Endpoint-Proper.htm",l:-1,t:"Defining Endpoint Properties",i:0.00157262181849654,a:"When a client application dynamically creates an endpoint, the properties used to define that endpoint are obtained from the following sources (in the order presented): Endpoint properties and/or provision flags that are passed-in with an endpoint provision API function or method.         A client ..."},"1005":{y:0,u:"../API/API-Developer-Guide/Adding-Topic-Subscriptio.htm",l:-1,t:"Adding Subscriptions to Endpoints",i:0.000480230084623843,a:"Typically, messages are published to a Queue when it is set as the destination of the message. However, you can also add a Topic subscription to a Queue so that it receives any messages that are published to a matching Topic destination. As shown in the figure below, when a Topic subscription is ..."},"1006":{y:0,u:"../API/API-Developer-Guide/Creating-Flows.htm",l:-1,t:"Creating Flows",i:0.00197133683068937,a:"To receive Guaranteed messages, client must create a consumer Flow within a Session, and bind that flow to an endpoint on a Solace PubSub+ event broker that messages are published or attracted to. One or more Flows can be created in a Session. A Flow is an API object that allows a client to receive ..."},"1007":{y:0,u:"../API/API-Developer-Guide/Acknowledging-Messages.htm",l:-1,t:"Acknowledging Messages Received by Clients",i:0.000528238371436473,a:"The messaging APIs provide acknowledgments to the PubSub+ event broker for the guaranteed messages that clients receive through a Flow. The figure below shows the process of how the guaranteed messages that an application receives through a Flow are acknowledged. During this Flow, client ..."},"1008":{y:0,u:"../API/API-Developer-Guide/Browsing-Guaranteed-Mess.htm",l:-1,t:"Browsing Guaranteed Messages",i:0.00143389743706302,a:"PubSub+ Messaging APIs can use queue browser instances or browser flows to look at guaranteed messages spooled on a queue in the order of oldest to newest. The PubSub+ C and Java RTO APIs can browse guaranteed messages with a browser flow.  The PubSub+ JCSMP, JavaScript, Node.js, and .NET APIs can ..."},"1009":{y:0,u:"../API/API-Developer-Guide/Using-Selectors.htm",l:-1,t:"Using Selectors",i:0.00135525686103146,a:"Selectors enable clients to specify which messages that they are interested in receiving, as determined by the messages’ header field and property values. A selector is a string up to a maximum of 2,000 bytes that uses a conditional expression syntax that is a subset of SQL92. For detailed ..."},"1010":{y:0,u:"../API/API-Developer-Guide/Replay-from-Replay-Log.htm",l:-1,t:"Replaying from the Replay Log",i:0.000351102042969984,a:"This section describes how a client application should handle an event broker initiated message replay, and how a client application may initiate a message replay entirely on its own behalf.  If you\u0027re not familiar with Message Replay, take a look at  Message Replay  for a high-level introduction, ..."},"1011":{y:0,u:"../API/API-Developer-Guide/Detecting-Duplicate-Mess.htm",l:-1,t:"Detecting Duplicate Messages",i:0.00191798403135582,a:"A guaranteed message contains a replication group message ID. This message ID can be used to detect duplicate message delivery, so the application can attempt to avoid processing the same message more than once. The ID for a particular message is only guaranteed to be the same for a particular copy ..."},"1012":{y:0,u:"../API/API-Developer-Guide/Using-Structured-Data.htm",l:-1,t:"Using Structured Data",i:0.000411765814750088,a:"SDTs are structured, language-independent, and architecture-independent data types. SDTs can be used in messages to facilitate the exchange of binary data in a heterogeneous network that has clients that use different hardware architectures and programming languages. The JCSMP, C, JavaScript, ..."},"1013":{y:0,u:"../API/API-Developer-Guide/SDT-Containers.htm",l:-1,t:"SDT Containers",i:0.000186010773760665,a:"The messaging APIs support two types of composite containers: Map A map is a structured data container in which each data field is associated with a key. A map allows the application to perform keyed lookups. Keyed lookups allow direct access to data, which means that the publisher and receiver do ..."},});