define({"1223":{y:0,u:"../API/MQTT-v50-Prtl-Conformance-Spec/mqtt-v50-3-control-packets.htm",l:-1,t:"3 MQTT\nControl Packets",i:0.00119736546933802,a:"3.1 CONNECT – Connection Request  After a Network Connection\nis established by a Client to a Server, the first packet sent from the Client to\nthe Server MUST be a CONNECT packet[MQTT-3.1.0-1].   A Client can only send the CONNECT packet once over a\nNetwork Connection. The Server MUST process ..."},"1224":{y:0,u:"../API/MQTT-v50-Prtl-Conformance-Spec/mqtt-v50-4-operational-behavior.htm",l:-1,t:"4 Operational behavior",i:0.0013492819920587,a:"4.1 Session State In order to implement QoS 1 and QoS 2 protocol flows the\nClient and Server need to associate state with the Client Identifier, this is\nreferred to as the Session State. The Server also stores the subscriptions as\npart of the Session State.   The session can continue across a ..."},"1225":{y:0,u:"../API/MQTT-v50-Prtl-Conformance-Spec/mqtt-v50-5-security.htm",l:-1,t:"5 Security (non-normative)",i:0.000942030631237842,a:"5.1 Introduction MQTT is a transport protocol specification for message\ntransmission, allowing implementers a choice of network, privacy,\nauthentication and authorization technologies. Since the exact security\ntechnologies chosen will be context specific, it is the implementer\u0027s responsibility\nto ..."},"1226":{y:0,u:"../API/MQTT-v50-Prtl-Conformance-Spec/mqtt-v50-6-using-websocket-as-network-transport.htm",l:-1,t:"6 Using WebSocket as a network transport",i:0.000270447056348406,a:"If MQTT is transported over a\nWebSocket  [RFC6455]  connection, the following conditions apply:  MQTT Control Packets MUST be sent\nin WebSocket binary data frames. If any other type of data frame is received\nthe recipient MUST close the Network Connection[MQTT-6.0.0-1]. A single WebSocket data frame ..."},"1227":{y:0,u:"../API/MQTT-v50-Prtl-Conformance-Spec/mqtt-v50-7-conformance.htm",l:-1,t:"7 Conformance",i:0.000496679508896987,a:"The MQTT specification defines conformance for MQTT Client\nimplementations and MQTT Server implementations. An MQTT implementation can\nconform as both an MQTT Client and an MQTT Server. 7.1 Conformance clauses 7.1.1 MQTT Server\nconformance clause Refer to  Server  in the Terminology\nsection for a ..."},"1228":{y:0,u:"../API/MQTT-v50-Prtl-Conformance-Spec/mqtt-v50-A-acknowledgments.htm",l:-1,t:"Appendix A. Acknowledgments",i:0.000186010773760665,a:"The TC\nowes special thanks to Dr. Andy Stanford-Clark and Arlen Nipper as the original\ninventors of the MQTT protocol and for their continued support with the\nstandardization process.\n         The TC wishes\nto thank Brian Raymor (formerly of Microsoft) for his work as co-chairman of\nthe MQTT TC ..."},"1229":{y:0,u:"../API/MQTT-v50-Prtl-Conformance-Spec/mqtt-v50-B-mandatory-normative-statement.htm",l:-1,t:"Appendix B. Mandatory normative statement (non-normative)",i:0.000186010773760665,a:"Appendix B. Mandatory normative statement (non-normative) This Appendix is non-normative and is provided as a\n\t\t\tconvenient summary of the numbered conformance statements found in the main\n\t\t\tbody of this document. Refer to  Chapter 7  for a\n\t\tdefinitive list of conformance requirements.  "},"1230":{y:0,u:"../API/MQTT-v50-Prtl-Conformance-Spec/mqtt-v50-C-summary-new-features.htm",l:-1,t:"Appendix C. Summary of new features in MQTT v5.0 (non-normative)",i:0.00033856957604637,a:"The following new features are added to MQTT v5.0 Session expiry Split the Clean Session flag into a Clean Start flag which\nindicates that the session should start without using an existing session, and\na Session Expiry interval which says how long to retain the session after a\ndisconnect. The ..."},"1231":{y:0,u:"../API/OMAMA-get-started.htm",l:-1,t:"OpenMAMA",i:0.000186010773760665,a:"The Open Middleware Agnostic Messaging API (OpenMAMA) is an open source, lightweight, vendor-neutral integration layer for sending and receiving market data information supported by the Linux Foundation.  Solace\u0027s OpenMAMA implementation allows customers to use the OpenMAMA and OpenMAMDA APIs with ..."},"1232":{y:0,u:"../API/Solace-OpenMama/Solace-OpenMAMA-Overview.htm",l:-1,t:"Using OpenMAMA",i:0.000228182351536708,a:"OpenMAMA (Open Middleware Agnostic Messaging API) is an open source, vendor-neutral API for capital market data systems that is built on top of a variety of messaging environments. OpenMAMA allows developers to code applications to the standard OpenMAMA API rather than to a vendor-specific API. To ..."},"1233":{y:0,u:"../API/Solace-OpenMama/Solace-OpenMAMA-Implemen.htm",l:-1,t:"Solace OpenMAMA Implementation",i:0.000186010773760665,a:"Solace PubSub+ can be used to transport OpenMAMA messages between publishers and subscribers. The figure below provides a simplified illustration of how Solace PubSub+ inter-operates with client applications that use OpenMAMA and OpenMAMDA APIs to both publish messages to well‑known topics and to ..."},"1234":{y:0,u:"../API/Solace-OpenMama/Solace-OpenMAMA-Componen.htm",l:-1,t:"Solace OpenMAMA Components",i:0.000224109600702468,a:"The required Solace-provided components include the: Solace Middleware Bridge Solace Payload Bridge C API Solace PubSub+ Event Broker Last-Value Cache If last-value caching of OpenMAMA messages is required, PubSub+ Cache Instances must also be configured on Linux Servers that connect with an event ..."},"1235":{y:0,u:"../API/Solace-OpenMama/Deployment-Scenarios.htm",l:-1,t:"Deployment Scenarios",i:0.0012398315788192,a:"The primary deployment scenarios for SolOpenMAMA are: Deploying Only With Interactive Publishers Deploying With Data Caching The figures in this section only provide details for a single site. However, the same collection of elements (publishers, subscribers, and optionally PubSub+ Cache Instances) ..."},"1236":{y:0,u:"../API/Solace-OpenMama/Installing-SolOpenMAMA-Components.htm",l:-1,t:"Installing SolOpenMAMA Components",i:0.000270011862083189,a:"To use SolOpenMAMA, the following components must be installed and configured: Solace PubSub+ Event Broker Client Systems Last-Value Message Caching Solace PubSub+ Event Broker For client applications to be able to publish and/or receive OpenMAMA messages through Solace PubSub+, event brokers must ..."},"1237":{y:0,u:"../API/Solace-OpenMama/Configuring-Solace-OpenMAMA-Bridges.htm",l:-1,t:"Configuring Solace OpenMAMA Bridges",i:0.000399949325259916,a:"The Solace Middleware and Payload Bridges are required to establish the transports used to connect OpenMAMA clients and Solace PubSub+, and to allow messaging data to pass between them. For an OpenMAMA client application to publish messages to or receive messages from Solace PubSub+, it must ..."},"1238":{y:0,u:"../API/Solace-OpenMama/Configuring-Message-Caching.htm",l:-1,t:"Configuring Message Caching",i:0.000459835510057424,a:"This section provides information on how ingress OpenMAMA messages for non‑book and order book data and dictionaries are handled when the PubSub+ Cache facility is used to provide last-value caching updates for clients. It also provides information on how to configure the SolOpenMAMA Plug-In that is ..."},"1239":{y:0,u:"../API/Solace-OpenMama/Solace-Implementation-Considerations.htm",l:-1,t:"Solace Implementation Considerations",i:0.000319146482512716,a:"This section provides some Solace-specific implementation details to assist developers when implementing OpenMAMA messaging applications. Topic Structure When a client application subscribes to a topic or publishes a message to a topic, the root, source, and symbol string values presented to the ..."},"1240":{y:0,u:"../API/Solace-OpenMama/message-type-handling.htm",l:-1,t:"OpenMAMA Message Type Handling",i:0.000446640919563621,a:"OpenMAMA Message Type Handling The SolOpenMAMA Plug-In receives the following standard market data-oriented OpenMAMA message types, it converts them into one of the following  Plug-In message types: SOLCACHE_MSG_TYPE_INITIAL SOLCACHE_MSG_TYPE_UPDATE SOLCACHE_MSG_TYPE_BOOK_INITIAL ..."},"1241":{y:0,u:"../API/REST/REST-get-start.htm",l:-1,t:"REST",i:0.000295652683345268,a:"Solace REST messaging uses bidirectional HTTP POST requests to exchange messages with Solace PubSub+ event brokers. This lets REST clients send and receive messages to and from other Solace PubSub+ event broker clients whether they’re using a Solace API or an open API or protocol.  The figure below ..."},"1242":{y:0,u:"../API/REST/Using-REST.htm",l:-1,t:"Using REST Messaging",i:0.000216711762468946,a:"Representational State Transfer (REST) is a lightweight way of designing network applications. It enables clients and network event brokers to communicate using standard HTTP methods like POST. Systems that implement REST are referred to as RESTful systems. RESTful systems use HTTP methods in a way ..."},"1243":{y:0,u:"../API/REST/REST-Msging-Concepts.htm",l:-1,t:"REST Messaging Concepts",i:0.000186010773760665,a:"Solace REST messaging uses bi-directional HTTP POST requests to exchange messages in both directions as shown in the following figure. This enables REST clients to send messages to and receive messages from any Solace PubSub+ event broker clients. REST producers send message contents in the body of ..."},"1244":{y:0,u:"../API/REST/REST-Producers.htm",l:-1,t:"REST Producers",i:0.000186010773760665,a:"Sending messages to a Solace PubSub+ event broker  is accomplished with a REST publishing client. A REST publishing client is authenticated when a connection is established. In general, it is recommended that applications use HTTP 1.1 persistent connections to allow for higher performance sending by ..."},"1245":{y:0,u:"../API/REST/REST-Consumers.htm",l:-1,t:"REST Consumers",i:0.000337845225489684,a:"For REST consumers, the Solace PubSub+ event broker will establish an HTTP connection and send messages using an HTTP POST request as shown in the following figure.  The REST application acknowledges receipt of the message with a 200 OK HTTP response back to the event broker. The format of the REST ..."},"1246":{y:0,u:"../API/REST/Multi-Protocol-Integration.htm",l:-1,t:"Multi-Protocol Integration",i:0.000186010773760665,a:"One of the key roles of the Solace PubSub+ event broker is to act as a multi-protocol message bus allowing various diverse applications to communicate. REST messaging is one of many messaging protocols supported on event brokers. However, to perform high-speed topic routing and Guaranteed Messaging, ..."},"1247":{y:0,u:"../API/RESTMessagingPrtl/Solace-REST-Overview.htm",l:-1,t:"REST Messaging Protocol",i:0.000574823113479044,a:"This section describes the Solace Representational State Transfer (REST) messaging protocol and  message exchange patterns that will be encountered in common use cases. REST is a lightweight way of designing network applications. Solace REST messaging can be used to integrate external HTTP REST ..."},"1248":{y:0,u:"../API/RESTMessagingPrtl/Solace-REST-Message-Encoding.htm",l:-1,t:"Solace REST HTTP Message Encoding",i:0.00107652981783658,a:"The Solace REST messaging feature encodes messages using standard HTTP mechanisms. Solace REST messages contain the following parts: A POST request-target where the Solace PubSub+ event broker destination is encoded (refer to  HTTP Request-Target ) HTTP headers that identify message properties of ..."},"1249":{y:0,u:"../API/RESTMessagingPrtl/Solace-Router-Interactions.htm",l:-1,t:"Solace PubSub+ Event Broker Interactions",i:0.000519239736935787,a:"The following sections contain details of how the Solace REST messaging feature interacts with the Solace PubSub+ event broker. Solace PubSub+ Event Broker Message VPN Selection Each Message VPN is configured with its own set of TCP ports to support REST clients. Therefore, Message VPNs are selected ..."},"1250":{y:0,u:"../API/RESTMessagingPrtl/Solace-REST-Status-Codes.htm",l:-1,t:"Solace REST Status Codes",i:0.00208241884210556,a:"The following section discusses the status codes and error response handing when sending REST messages to  or when receiving REST messages from a PubSub+ event broker. It discusses expectations and requirements of the REST clients to ensure proper interworking with the event broker. Solace HTTP ..."},"1251":{y:0,u:"../API/RESTMessagingPrtl/Message-Exchange-Patterns.htm",l:-1,t:"Message Exchange Patterns",i:0.0012398315788192,a:"This section describes success and failure scenarios for common message exchange patterns. A Solace PubSub+ event broker treats persistent and non-persistent message in the same manner. Therefore, the following diagrams are simplified and only show persistent messages. REST Producer One-Way POST to ..."},"1252":{y:0,u:"../API/RESTMessagingPrtl/Solace-REST-Example.htm",l:-1,t:"Solace REST Example Code",i:0.000186010773760665,a:"The following sections provide some example code for sending and receiving REST messages. Sending Messages to Solace Using CURL Sending a message to a topic “a” (both commands are equivalent): curl -X POST -d \"Hello World Topic\" http://\u003cip:port\u003e/a --header \"Content-Type: text/plain\" curl -X POST -d ..."},"1253":{y:0,u:"../API/solace-codelabs.htm",l:-1,t:"Developer Codelabs",i:0.000186010773760665,a:"Solace Developer Codelabs provides step-by-step tutorials that give you guided, hands-on experience with the PubSub+ platform. The tutorials will walk you through the process of developing an application with PubSub+, teach you how to use a specific feature, or even integrate PubSub+ with other ..."},"1254":{y:0,u:"../Additional-Products/Solace-Monitor-Overview.htm",l:-1,t:"Solace PubSub+ Monitor",i:0.000196447076447114,a:"Solace PubSub+ Monitor is an agentless monitoring and alerting system, designed in partnership with SL Corporation, specifically for monitoring your Solace PubSub+ event brokers.  With pre-built displays and pre-configured alert thresholds, the application provides out-of-the-box functionality so ..."},"1255":{y:0,u:"../Additional-Products/Solace-PubSub-Cache/PubSub-Cache-Overview.htm",l:-1,t:"PubSub+ Cache",i:0.000507016276893102,a:"Solace  PubSub+ Cache is a scalable, in-memory message cache for Direct messaging. It allows client applications connecting to PubSub+ event brokers to request the most current messages for a topic of interest when they come online, or when they start subscribing to topics that they were not ..."},"1256":{y:0,u:"../Additional-Products/Solace-PubSub-Cache/PubSub-Cache-Components.htm",l:-1,t:"PubSub+ Cache Components",i:0.000347291214306476,a:"PubSub+ Cache uses a distributed structure so that it can be scaled as necessary. Therefore, as message rates and topic space grows, the topic space can be divided amongst multiple Cache Clusters. As a distributed caching solution, PubSub+ Cache is composed of the following components: Designated ..."},"1257":{y:0,u:"../Additional-Products/Solace-PubSub-Cache/Global-Caching.htm",l:-1,t:"Global Caching",i:0.000186010773760665,a:"Typically in a WAN environment clients at a particular location are primarily interested in topics for which their local Distributed Cache is the “home” Distributed Cache (that is, the Distributed Cache that is the definitive repository for messages on those topics). However, these messaging ..."},"1258":{y:0,u:"../Additional-Products/Solace-PubSub-Cache/Ingress-Message-Plug-In.htm",l:-1,t:"Ingress Message Plug-In",i:0.000223627620223772,a:"By default, a PubSub+ Cache Instance caches all live data messages that it receives that match its configured topic subscriptions, as long as they do not exceed the maximum memory or maximum number of topics constraints. However, an Ingress Message Plug-In can be used to examine and further process ..."},"1259":{y:0,u:"../Additional-Products/Solace-PubSub-Cache/Installing-PubSub-Cache.htm",l:-1,t:"Installing PubSub+ Cache",i:0.000295490349448292,a:"You can  access PubSub+ Cache on a PubSub+ event broker. You can:  install the PubSub+ Cache Instances that cache messages on standalone Linux systems  uninstall PubSub+ Cache Instances from standalone Linux systems Product Key Feature Locking By default, PubSub+ Cache isn\u0027t locked on the software ..."},"1260":{y:0,u:"../Additional-Products/Solace-PubSub-Cache/Configuring-and-Managing-PubSub-Cache.htm",l:-1,t:"Managing PubSub+ Cache",i:0.000272717843712125,a:"This section describes how to configure and manage PubSub+ Cache on a Solace PubSub+ event broker that is acting as the Designated Router for the PubSub+ Cache facility. Operating Limits The global operating limits for PubSub+ Cache are listed in the table below. Performance limits such as maximum ..."},"1261":{y:0,u:"../Additional-Products/Solace-PubSub-Cache/Configuring-a-Message-VPN.htm",l:-1,t:"Configuring Message VPNs for Caching",i:0.000211767612710978,a:"The following considerations should be made for a Message VPN that will contain the Distributed Cache: If the Global Caching feature is to be used, the subscription export policy must be enabled (for information, refer to  Considerations for Implementing Global Caching ). By default, this policy is ..."},"1262":{y:0,u:"../Additional-Products/Solace-PubSub-Cache/Configuring-Distributed-.htm",l:-1,t:"Configuring Distributed Caches",i:0.00545264571427716,a:"To create a Distributed Cache, enter the following Global CONFIG command:\n                 solace(configure)# create distributed-cache \u003cname\u003e message-vpn \u003cvpn-name\u003e [auto | primary | backup] To edit an existing Distributed Cache, enter the following Global CONFIG command:\n                 ..."},"1263":{y:0,u:"../Additional-Products/Solace-PubSub-Cache/Configuring-Cache-Clusters.htm",l:-1,t:"Configuring Cache Clusters",i:0.000442547107648051,a:"To create a Cache Cluster within an existing Distributed Cache, enter the following CONFIG command:\n                 solace(configure/distributed-cache)# create cache-cluster \u003cname\u003e  To edit properties for an existing Cache Cluster, enter the following CONFIG command:\n                 ..."},"1264":{y:0,u:"../Additional-Products/Solace-PubSub-Cache/Configuring-PubSub-Cache-Ins.htm",l:-1,t:"Configuring PubSub+ Cache Instances",i:0.0011426782854395,a:"To create a PubSub+ Cache Instance object in the given Cache Cluster, enter the following Distributed Cache CONFIG command: \n                 solace(config-distributed-cache-cluster)# create cache-instance \u003cname\u003e To edit properties for the given PubSub+ Cache Instance object, enter the following ..."},"1265":{y:0,u:"../Additional-Products/Solace-PubSub-Cache/Customizing-PubSub-Cache-Ins.htm",l:-1,t:"Customizing PubSub+ Cache Instance Configuration Files",i:0.000362758683408902,a:"Each installed PubSub+ Cache Instance process receives its configuration parameters through two sources: a configuration file specified at invocation (used to connect to the event broker) the Designated Router—the Solace Cache Instance learns additional configuration information for the PubSub+ ..."},"1266":{y:0,u:"../Additional-Products/Solace-PubSub-Cache/Sample-PubSub-Cache-Configur.htm",l:-1,t:"Sample PubSub+ Cache Configuration",i:0.000323498375129266,a:"As message rates and topic space grows, you might want to divide the topic space amongst multiple Cache Clusters. This is done by configuring several Cache Clusters on the Designated Router, each with a unique subscription set. The Cache Clusters are grouped together through configuration on the ..."},"1267":{y:0,u:"../Additional-Products/Solace-PubSub-Cache/Performing-PubSub-Cache-Admi.htm",l:-1,t:"Performing PubSub+ Cache Administrative Tasks",i:0.00124344273996191,a:"You can perform a number of administrative tasks on a per Distributed Cache basis. Clearing PubSub+ Cache Events You may receive a one-shot event notification if one or more PubSub+ Cache Instances enters a lost message state. The exact event that caused the lost message state is specified in the ..."},"1268":{y:0,u:"../Additional-Products/Solace-PubSub-Cache/Monitoring-PubSub-Cache.htm",l:-1,t:"Monitoring PubSub+ Cache",i:0.000348367507314196,a:"This section describes how you can configure event parameters on a per Cache Cluster basis, and how to monitor events and logs generated by PubSub+ Cache Instances. It also describes the show commands you can use to monitor PubSub+ Cache\u0027s configuration and operational status, and provides some ..."},"1269":{y:0,u:"../Additional-Products/Solace-PubSub-Cache/Configuring-Cache-Cluste-1.htm",l:-1,t:"Configuring Cache Cluster Event Thresholds",i:0.000186010773760665,a:"For a number of operating conditions experienced by PubSub+ Cache Instances, you can configure high and low thresholds at the Cache Cluster level that determine which events are published to the message bus. To configure event threshold parameters for the PubSub+ Cache Instances in a given Cache ..."},"1270":{y:0,u:"../Additional-Products/Solace-PubSub-Cache/Monitoring-PubSub-Cache-Conf.htm",l:-1,t:"Monitoring PubSub+ Cache Configuration and Operations",i:0.00149922563491538,a:"You can use the following show commands to monitor the PubSub+ Cache configuration and operational status: Show Product Key Show Distributed Cache Show Cache Cluster Show Cache Instance Show Product Key To view the system product keys and features that they unlock, enter the following User EXEC ..."},"1271":{y:0,u:"../Additional-Products/Solace-PubSub-Cache/Outputting-PubSub-Cache-Inst.htm",l:-1,t:"Output PubSub+ Cache Instance Debug Information",i:0.000186010773760665,a:"To write the debug state of a PubSub+ Cache Instance to a file, you can run the service solcache debug command provided by the PubSub+ Cache service script. When this command is run, the script sends a SIGUSR2 signal to the PubSub+ Cache Instance, which prompts it to write its debug state to a file. ..."},"1272":{y:0,u:"../Additional-Products/Solace-PubSub-Cache/Using-SEMP-to-Monitor-So.htm",l:-1,t:"Using SEMP to Monitor PubSub+ Cache",i:0.000186010773760665,a:"SEMP is a request/reply protocol that uses an XML schema to identify all objects managed in a Solace PubSub+ event broker. Any object available through the Solace CLI is also available through SEMP. XML-encoded SEMP requests parallel the commands offered through the CLI, therefore, management ..."},"1273":{y:0,u:"../Additional-Products/Solace-PubSub-Cache/Using-Ingress-Message-Plugins.htm",l:-1,t:"Using Ingress Message Plug-Ins",i:0.000801998829420133,a:"By default, the PubSub+ Cache service facility caches all live data messages that it receives on a topic, subject to its configured constraints. However, the Ingress Message Plug-In can be used so that live data messages received for a topic can be inspected and then processed according to criteria ..."},"1274":{y:0,u:"../Additional-Products/Solace-PubSub-Cache/Building-a-Custom-Ingres.htm",l:-1,t:"Building a Custom Plug-In Shared Library",i:0.000259550463478964,a:"To build a custom Ingress Message Plug-In shared library, it is recommended that you use the makefile found in the ex directory where you extracted the PubSub+ Cache package. This makefile allows you to remove the default Plug-In library (libSolCachPlugin.so) and make a Plug-In library based on the ..."},"1275":{y:0,u:"../Additional-Products/Solace-PubSub-Cache/Using-Global-Caching.htm",l:-1,t:"Using Global Caching",i:0.000487031338928707,a:"The Global Caching feature allows client applications operating in a WAN environment to make non-wildcard requests for messages with topics that are not cached in their “local” Distributed Cache but in another Distributed Cache that may be located in another geographic location. Global Caching uses ..."},"1276":{y:0,u:"../Additional-Products/Solace-PubSub-Cache/Steps-Global-Caching.htm",l:-1,t:"How Global Caching Works",i:0.000186010773760665,a:"As shown in the example shown below, when a cache request for a global topic is made, the following steps are used: A client sends a cache request to the local Distributed Cache. A local PubSub+ Cache Instance that receives the request checks whether it has any messages with matching topics cached ..."},"1277":{y:0,u:"../Additional-Products/Solace-PubSub-Cache/Configuring-Global-Cachi.htm",l:-1,t:"Considerations for Implementing Global Caching",i:0.00023101162449377,a:"To implement PubSub+ Cache service with Global Caching, follow the general configuration steps to set up basic PubSub+ Cache service for a Distributed Cache (refer to  Steps to Configure PubSub+ Cache ), but be sure to make the following special configuration considerations: Networking ..."},"1278":{y:0,u:"../Additional-Products/Solace-PubSub-Cache/Configuring-Global-Cachi-1.htm",l:-1,t:"Configuring Global Caching for a Cache Cluster",i:0.000686696800311502,a:"To implement Global Caching for a network, Global Caching must be configured for each Cache Cluster within the Distributed Caches that will service global cache requests. On a Cache Cluster, you must set the required Global Caching configuration parameters for that Cache Cluster and then enable the ..."},"1279":{y:0,u:"../Additional-Products/Solace-PubSub-Cache/Global-Caching-Notificat.htm",l:-1,t:"Global Caching Notifications",i:0.000186010773760665,a:"A local PubSub+ Cache Instance that is actively caching global topics must monitor its connectivity to the home Cache Cluster to ensure that it is caching the same messages as the home Cache Cluster. If the PubSub+ Cache Instance stops receiving global caching heart beats from the remote home Cache ..."},"1280":{y:0,u:"../Additional-Products/Solace-PubSub-Cache/PubSub-Cache-Redundancy-and-Network-Deployments.htm",l:-1,t:"PubSub+ Cache Redundancy and Network Deployments",i:0.00023101162449377,a:"This section discusses some best practices for deploying PubSub+ Cache within a network with PubSub+ event brokers, including: Implementing PubSub+ Cache redundancy on a single event broker Using a Distributed Cache with a fault‑tolerant, redundant pair of event brokers Using a Distributed Cache in ..."},"1281":{y:0,u:"../Additional-Products/Solace-PubSub-Cache/General-Considerations.htm",l:-1,t:"General Considerations",i:0.000186010773760665,a:"When deploying PubSub+ Cache in a network, the following considerations and recommendations are common to all the use-cases discussed in this section. Message Transport PubSub+ Cache Instances only cache Direct messages, and this section assumes that the messages to be cached are originally ..."},"1282":{y:0,u:"../Additional-Products/Solace-PubSub-Cache/PubSub-Cache-Redundancy-on-a.htm",l:-1,t:"PubSub+ Cache Redundancy on a Single Event Broker",i:0.000186010773760665,a:"When deploying a Distributed Cache on a  PubSub+ event broker, it is recommended that at least two PubSub+ Cache Instances be deployed per Cache Cluster, each hosted on a separate server, as shown in the figure below. This deployment model ensures that no cached data is lost, and caching services to ..."},"1283":{y:0,u:"../Additional-Products/Solace-PubSub-Cache/PubSub-Cache-and-Msg-Broker-Redu.htm",l:-1,t:"PubSub+ Cache and Event Broker Redundancy",i:0.000425366427940317,a:"PubSub+ Cache is designed to provide redundancy through instantiating multiple cache instances for each cluster. Any number of cache instances may be provisioned across multiple servers and locations to achieve the desired protection from a single network event affecting the entire cluster. Solace ..."},"1284":{y:0,u:"../Additional-Products/Solace-PubSub-Cache/PubSub-Cache-and-Data-Center.htm",l:-1,t:"PubSub+ Cache and Data Center Redundancy",i:0.000265065740185974,a:"To protect against the failure of an entire data center, an administrator may choose to deploy additional event brokers and PubSub+ Cache Instances in an in‑region backup data center, which connects to the primary data center over the WAN. This deployment model (as shown below) builds on the ..."},"1285":{y:0,u:"../Additional-Products/Solace-PubSub-Cache/Using-Global-Caching-for.htm",l:-1,t:"Global Caching with Multi-Region Deployments",i:0.000186010773760665,a:"When using Global Caching, a Distributed Cache in one region is designated as the Home Distributed Cache to indicate that it contains the definitive version of the cached data. Distributed Cache Clusters in other regions are then configured with Global Topics, which they fetch on demand from the ..."},"1286":{y:0,u:"../Additional-Products/Solace-PubSub-Cache/upgrading-pubsub-cache.htm",l:-1,t:"Upgrading PubSub+ Cache",i:0.00040149506854151,a:"If you have the older version of PubSub+ Cache, you must upgrade to use all its features and benefit from all available compatibility. There are two ways to upgrade your PubSub+ Cache: Basic PubSub+ Cache Upgrade Upgrading PubSub+ Cache While Preserving Cached Messages If a Cache Cluster has one ..."},"1287":{y:0,u:"../Additional-Products/SolGeneos-Agent/SolGeneos-Overview.htm",l:-1,t:"Solace Geneos Agent",i:0.000203290557478214,a:"Solace Geneos Agent is a Solace component which generates PubSub+ broker specific information for the ITRS Geneos Enterprise Management product. This agent represents one component of the Geneos Enterprise Management Solution. The figure below shows the key components of this solution. Solace and ..."},"1288":{y:0,u:"../Additional-Products/SolGeneos-Agent/Prerequisites.htm",l:-1,t:"Prerequisites",i:0.000186010773760665,a:"To work with the Solace Geneos Agent, the following prerequisites must be met: On deployment hosts:\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t Java Runtime Environment (JRE) A JRE is pre-installed on a target host appliance running Solace PubSub+ 8.2 or higher. To start the Solace Geneos Agent on software event brokers ..."},});