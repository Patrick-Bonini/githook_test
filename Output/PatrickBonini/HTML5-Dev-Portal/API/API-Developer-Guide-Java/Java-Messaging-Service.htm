<?xml version="1.0"?>
<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-us" xml:lang="en-us" class="_Skins_HTML5___Side_Navigation" data-mc-search-type="Stem" data-mc-help-system-file-name="Default.xml" data-mc-path-to-help-system="../../" data-mc-has-content-body="True" data-mc-toc-path="[%=System.LinkedTitle%]|[%=System.LinkedTitle%]|[%=System.LinkedTitle%]|[%=System.LinkedTitle%]" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic;Default" data-mc-preload-images="false" data-mc-in-preview-mode="false">
  <head>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
    <meta name="msapplication-config" content="../../Skins/Favicons/browserconfig.xml"/>
    <meta name="viewport" content="width=device-width, initial-scale=1"/>
    <link rel="apple-touch-icon" sizes="180x180" href="../../Skins/Favicons/apple-touch-icon.png"/>
    <link rel="shortcut icon" href="../../Skins/Favicons/favicon-32x32.png"/>
    <link rel="icon" sizes="96x96" href="../../Skins/Favicons/favicon-96x96.png"/>
    <link rel="icon" sizes="32x32" href="../../Skins/Favicons/favicon-32x32.png"/>
    <link rel="icon" sizes="16x16" href="../../Skins/Favicons/favicon-16x16.png"/>
    <meta charset="utf-8"/>
    <meta http-equiv="Cache-control" content="no-cache"/>
    <meta http-equiv="X-UA-Compatible" content="IE=edge"/>
    <title>Messaging Service</title>
    <!-- <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous" /> -->
    <!--style to display feedback button correctly in IE-->
    <!-- Google Tag Manager -->
    <!-- End Google Tag Manager -->
    <!-- links to get the EDA styling to work -->
    <link href="../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" type="text/css" data-mc-generated="True"/>
    <link href="../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" type="text/css" data-mc-generated="True"/>
    <link href="../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" type="text/css" data-mc-generated="True"/>
    <link href="../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" type="text/css" data-mc-generated="True"/>
    <link href="../../Skins/Default/Stylesheets/Components/Tablet.css" rel="stylesheet" type="text/css" data-mc-generated="True"/>
    <link href="../../Skins/Default/Stylesheets/Components/Mobile.css" rel="stylesheet" type="text/css" data-mc-generated="True"/>
    <link href="../../Skins/Default/Stylesheets/Components/Print.css" rel="stylesheet" type="text/css" data-mc-generated="True"/>
    <link href="../../Skins/Fluid/Stylesheets/foundation.6.2.3.css" rel="stylesheet" type="text/css" data-mc-generated="True"/>
    <link href="../../Skins/Fluid/Stylesheets/Styles.css" rel="stylesheet" type="text/css" data-mc-generated="True"/>
    <link href="../../Skins/Fluid/Stylesheets/Tablet.css" rel="stylesheet" type="text/css" data-mc-generated="True"/>
    <link href="../../Skins/Fluid/Stylesheets/Mobile.css" rel="stylesheet" type="text/css" data-mc-generated="True"/>
    <link href="../../Skins/Fluid/Stylesheets/Print.css" rel="stylesheet" type="text/css" data-mc-generated="True"/>
    <link href="../../Resources/Stylesheets/MainStyles.min.css" rel="stylesheet" type="text/css"/>
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet"/>
    <style>@media screen and (min-width: 0\0)
{
	.feedback-button
	{
		margin-right: -40px;
		top: 50%;
		border-radius: 9px 9px 0px 0px;
	}

	#canvas
	{
		position: relative;
	}
}

@media print
{
	#plugin
	{
		overflow: visible !important;
	}
}

</style>
    <link href="../../Resources/Stylesheets/eda_styles.css" rel="stylesheet" type="text/css"/>
    <link href="https://fonts.googleapis.com/css?family=Open+Sans:400,600,300" rel="stylesheet" type="text/css"/>
    <style>/*&lt;meta /&gt;*/

.button.print-button
{
	-pie-background: linear-gradient(#ffffff, transparent);
}

.button.previous-topic-button
{
	-pie-background: linear-gradient(#ffffff, transparent);
}

.button.next-topic-button
{
	-pie-background: linear-gradient(#ffffff, transparent);
}

.needs-pie
{
	behavior: url('../../Resources/Scripts/PIE-no-motw.htc');
}

</style>
    <link rel="apple-touch-icon" sizes="180x180" href="../../Skins/Favicons/apple-touch-icon.png"/>
    <link rel="shortcut icon" href="../../Skins/Favicons/favicon-32x32.png"/>
    <link rel="icon" sizes="96x96" href="../../Skins/Favicons/favicon-96x96.png"/>
    <link rel="icon" sizes="32x32" href="../../Skins/Favicons/favicon-32x32.png"/>
    <link rel="icon" sizes="16x16" href="../../Skins/Favicons/favicon-16x16.png"/>
    <script src="../../Resources/Scripts/jquery.min.js" type="text/javascript">
        </script>
    <script src="../../Resources/Scripts/purify.min.js" type="text/javascript" defer="defer">
        </script>
    <script src="../../Resources/Scripts/require.min.js" type="text/javascript" defer="defer">
        </script>
    <script src="../../Resources/Scripts/require.config.js" type="text/javascript" defer="defer">
        </script>
    <script src="../../Resources/Scripts/foundation.6.2.3_custom.js" type="text/javascript" defer="defer">
        </script>
    <script src="../../Resources/Scripts/plugins.min.js" type="text/javascript" defer="defer">
        </script>
    <script src="../../Resources/Scripts/MadCapAll.js" type="text/javascript" defer="defer">
        </script>
    <script src="https://cmp.osano.com/AzZrhlTmT5f216Foa/84ba7dc4-a4e5-4b02-b120-977eb6f052d4/osano.js">
        </script>
    <script type="text/javascript">/*<![CDATA[*/(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
			new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
			j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
			'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
			})(window,document,'script','dataLayer','GTM-KLSDFH');
		/*]]>*/</script>
    <script type="text/javascript" src="../../Skins/Default/Scripts/TopicToolBar.js">
        </script>
  </head>
  <!-- Top Orange and Darkgrey header-->
  <!-- Div for EDA banner -->
  <div class="eda_banner">
    <p>Register Now for EDA Summit 2024 - Virtual Event <a href="https://edasummit.com/" target="_blank">Register for Free</a></p>
  </div>
  <!-- end Div for EDA banner -->
  <div class="top-nav">
    <div class="main_list">
      <ul class="top-navlinks">
        <li>
          <a href="https://solace.com/support/" target="_blank">Support</a>
        </li>
        <li>
          <a href="https://solace.com/contact/" target="_blank">Contact Us</a>
        </li>
      </ul>
    </div>
    <div class="container-fluid">
      <div class="src-li">
        <div id="srchWrapTwo">
          <form class="search" action="#">
            <div class="search-bar search-bar-container needs-pie">
              <input class="search-field needs-pie" type="search" aria-label="Search Field" placeholder="Search the docs"/>
              <div class="search-filter-wrapper">
                <span class="invisible-label" id="search-filters-label">Filter: </span>
                <div class="search-filter" aria-haspopup="true" aria-controls="sf-content" aria-expanded="false" aria-label="Search Filter" title="All Files" role="button" tabindex="0">
                                </div>
                <div class="search-filter-content" id="sf-content">
                  <ul>
                    <li>
                      <button class="mc-dropdown-item" aria-labelledby="search-filters-label filterSelectorLabel-00001">
                        <span id="filterSelectorLabel-00001">All Files</span>
                      </button>
                    </li>
                  </ul>
                </div>
              </div>
              <div class="search-submit-wrapper" dir="ltr">
                <div class="search-submit" title="Search" role="button" tabindex="0">
                  <span class="invisible-label">Submit Search</span>
                </div>
              </div>
            </div>
          </form>
        </div>
      </div>
      <span class="tool-tip" tooltip-position="left" tooltip="To search for CLI commands, events, or APIs, navigate to the related sections.">i</span>
      <!-- Sept. 28, 2022 - This is being moved to under div class= top-nav
			<div class="main_list">
				<ul class="top-navlinks">
					<li><a href="https://solace.com/support/" target="_blank">Support</a></li>
					<li><a href="https://solace.com/contact/" target="_blank">Contact Us</a></li>
				</ul>
			</div> -->
    </div>
    <!-- Sept. 27, 2022 - The commented out content below used to provide the products, company, etc., links in the top header, next to the search field. -->
    <!-- <div class="main_list"><ul class="top-navlinks"><li><a href="https://solace.com/products/" target="_blank">Products</a></li><li><a href="https://solace.com/company/" target="_blank">Company</a></li><li><a href="https://www.solace.dev/" target="_blank">Developers</a></li><li><a href="https://solace.com/support/" target="_blank">Support</a></li><li><a href="https://solace.com/contact/" target="_blank">Contact Us</a></li></ul></div> -->
  </div>
  <body>
    <div class="foundation-wrap off-canvas-wrapper">
      <div class="off-canvas-wrapper-inner" data-off-canvas-wrapper="">
        <aside class="off-canvas position-right" role="navigation" id="offCanvas" data-off-canvas="" data-position="right" data-mc-ignore="true">
          <ul class="off-canvas-accordion vertical menu off-canvas-list" data-accordion-menu="" data-mc-back-link="Back" data-mc-css-tree-node-expanded="is-accordion-submenu-parent" data-mc-css-tree-node-collapsed="is-accordion-submenu-parent" data-mc-css-sub-menu="vertical menu is-accordion-submenu nested" data-mc-include-indicator="False" data-mc-include-icon="False" data-mc-include-parent-link="True" data-mc-include-back="False" data-mc-defer-expand-event="True" data-mc-expand-event="click.zf.accordionMenu" data-mc-toc="True">
                    </ul>
        </aside>
        <div class="off-canvas-content inner-wrap" data-off-canvas-content="">
          <div data-sticky-container="" class="title-bar-container">
            <nav class="title-bar tab-bar sticky" role="banner" data-sticky="" data-options="marginTop:0" style="width:100%" data-sticky-on="only screen and (max-width: 1000px)" data-mc-ignore="true">
              <a class="skip-to-content fluid-skip showOnFocus" href="#">Skip To Main Content</a>
              <div class="middle title-bar-section outer-row clearfix">
                <div class="menu-icon-container relative clearfix">
                  <div class="central-account-wrapper">
                    <div class="central-dropdown">
                      <a class="central-account-drop">
                        <span class="central-account-image"/>
                        <span class="central-account-text">Account</span>
                      </a>
                      <div class="central-dropdown-content">
                        <a class="MCCentralLink central-dropdown-content-settings">Settings</a>
                        <hr class="central-separator"/>
                        <a class="MCCentralLink central-dropdown-content-logout">Logout</a>
                      </div>
                    </div>
                  </div>
                  <button class="menu-icon" aria-label="Show Navigation Panel" data-toggle="offCanvas">
                    <span/>
                  </button>
                </div>
              </div>
              <div class="title-bar-layout outer-row">
                <div class="logo-wrapper">
                  <a class="logo" href="../../index.html" alt="Logo"/>
                </div>
                <div class="navigation-wrapper nocontent">
                  <ul class="navigation clearfix" role="navigation" data-mc-css-tree-node-has-children="has-children" data-mc-css-sub-menu="sub-menu" data-mc-expand-event="mouseenter" data-mc-top-nav-menu="True" data-mc-max-depth="3" data-mc-include-icon="False" data-mc-include-indicator="False" data-mc-include-children="True" data-mc-include-siblings="True" data-mc-include-parent="True" data-mc-toc="True">
                    <li class="placeholder" style="visibility:hidden">
                      <a>placeholder</a>
                    </li>
                  </ul>
                </div>
                <div class="central-account-wrapper">
                  <div class="central-dropdown">
                    <a class="central-account-drop">
                      <span class="central-account-image"/>
                      <span class="central-account-text">Account</span>
                    </a>
                    <div class="central-dropdown-content">
                      <a class="MCCentralLink central-dropdown-content-settings">Settings</a>
                      <hr class="central-separator"/>
                      <a class="MCCentralLink central-dropdown-content-logout">Logout</a>
                    </div>
                  </div>
                </div>
                <div class="nav-search-wrapper">
                  <div class="nav-search row">
                    <form class="search" action="#">
                      <div class="search-bar search-bar-container needs-pie">
                        <input class="search-field needs-pie" type="search" aria-label="Search Field" placeholder="Search the docs"/>
                        <div class="search-filter-wrapper">
                          <span class="invisible-label" id="search-filters-label">Filter: </span>
                          <div class="search-filter" aria-haspopup="true" aria-controls="sf-content" aria-expanded="false" aria-label="Search Filter" title="All Files" role="button" tabindex="0">
                                                    </div>
                          <div class="search-filter-content" id="sf-content">
                            <ul>
                              <li>
                                <button class="mc-dropdown-item" aria-labelledby="search-filters-label filterSelectorLabel-00001">
                                  <span id="filterSelectorLabel-00001">All Files</span>
                                </button>
                              </li>
                            </ul>
                          </div>
                        </div>
                        <div class="search-submit-wrapper" dir="ltr">
                          <div class="search-submit" title="Search" role="button" tabindex="0">
                            <span class="invisible-label">Submit Search</span>
                          </div>
                        </div>
                      </div>
                    </form>
                  </div>
                </div>
              </div>
            </nav>
          </div>
          <div class="main-section">
            <div class="row outer-row sidenav-layout">
              <nav class="sidenav-wrapper">
                <div class="sidenav-container">
                  <ul class="off-canvas-accordion vertical menu sidenav" data-accordion-menu="" data-mc-css-tree-node-expanded="is-accordion-submenu-parent" data-mc-css-tree-node-collapsed="is-accordion-submenu-parent" data-mc-css-sub-menu="vertical menu accordion-menu is-accordion-submenu nested" data-mc-include-indicator="False" data-mc-include-icon="False" data-mc-include-parent-link="False" data-mc-include-back="False" data-mc-defer-expand-event="True" data-mc-expand-event="click.zf.accordionMenu" data-mc-toc="True" data-mc-side-nav-menu="True">
                                    </ul>
                </div>
              </nav>
              <div class="body-container">
                <div data-mc-content-body="True">
                  <div class="buttons popup-container clearfix topicToolbarProxy _Skins_TopicToolBar mc-component nocontent" style="mc-topic-toolbar-items: PreviousTopic Print NextTopic;">
                    <div class="button-group-container-left">
                      <button class="button needs-pie print-button" title="Print">
                        <div>
                          <div role="img" class="button-icon-wrapper" aria-label="Print">
                            <div class="button-icon"> </div>
                          </div>
                        </div>
                      </button>
                      <button class="button needs-pie previous-topic-button" title="Navigate previous topic" disabled="true">
                        <div>
                          <div role="img" class="button-icon-wrapper" aria-label="Navigate previous">
                            <div class="button-icon"> </div>
                          </div>
                        </div>
                      </button>
                      <button class="button needs-pie next-topic-button" title="Navigate next topic" disabled="true">
                        <div>
                          <div role="img" class="button-icon-wrapper" aria-label="Navigate next">
                            <div class="button-icon"> </div>
                          </div>
                        </div>
                      </button>
                    </div>
                  </div>
                  <!-- Google Tag Manager (noscript) -->
                  <noscript>
                    <iframe src="https://www.googletagmanager.com/ns.html?id=GTM-KLSDFH" height="0" width="0" style="display:none;visibility:hidden"/>
                  </noscript>
                  <!-- End Google Tag Manager (noscript) -->
                  <div id="content">
                    <div id="contentBody">
                      <div class="row collapse">
                        <div xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd" class="ContentRow">
                          <div>
                            <div xmlns="" class="nocontent">
                              <div class="MCBreadcrumbsBox_MCBreadcrumbsSelf_0 breadcrumbs" role="navigation" aria-label="Breadcrumbs" data-mc-breadcrumbs-divider=" / " data-mc-breadcrumbs-count="4" data-mc-toc="True">
                                <span class="MCBreadcrumbsPrefix"> </span>
                              </div>
                            </div>
                            <div xmlns="" role="main" id="mc-main-content">
                              <h1 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><a name="Messaging-Service"/>Messaging Service</h1>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">The <span class="mc-variable Product-Names.pubsub_brand_only variable">PubSub+</span> Messaging API&#xA0;for Java provides the <code>MessagingService</code> interface, which allows you to connect to an event broker. The <code>MessagingService</code> interface handles all the functionality for interacting with a <span class="mc-variable Product-Names.pubsub_brand_only variable">PubSub+</span> event broker. To create a <code>MessagingService</code> object, you must first configure a <code>Properties</code> object with the information required to establish a connection to the event broker, including the host details and the authentication scheme.</p>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"> To ensure backwards compatibility with future versions of the API, you must pass a <a href="#Configuration-Profiles" class="link-internal">Configuration Profile</a> as a parameter when you create the <code>MessagingService</code> object. </p>
                              <h2 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd" class="with-rule"><a name="Creating-A-Properties-Object"/>Creating a Properties Object </h2>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">A&#xA0;<code>Properties</code> (<code>SolaceProperties</code> interface)&#xA0;object can have a number of properties, however at least one property object must have a <code>SolaceProperties.TransportLayerProperties.HOST</code> and a <code>SolaceProperties.TransportLayerProperties.VPN</code> configured and passed to a <code>MessagingService.builder()</code> to configure the connection to the event broker. There are five categories of properties that can be configured in a <code>Properties</code> object.</p>
                              <ul xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                <li><code>ServiceProperties</code>(required for the&#xA0;<code>VPN </code>property)</li>
                                <li><code>TransportLayerProperties</code> (required for the <code>HOST </code>property )</li>
                                <li>
                                  <code>AuthenticationProperties</code>
                                </li>
                                <li>
                                  <code>ClientProperties</code>
                                </li>
                                <li>
                                  <code>TransportLayerSecurityProperties</code>
                                </li>
                              </ul>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">For more information,  see the <a href="../../API-Developer-Online-Ref-Documentation/pubsubplus-java/index.html" class="link-internal"><a href="../../API-Developer-Online-Ref-Documentation/pubsubplus-java/index.html" class="link-internal"><span class="mc-variable Product-Names.pubsub_brand_only variable">PubSub+</span> Messaging API for Java reference</a>.</a></p>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">An example of a <code>Properties</code> object for a basic connection can be seen below. After you create a <code>Properties</code> object, you can use setter methods to configure the connection. In the following example, the fields have been hard-coded  as <code>string</code> values for readability. In your own code, change these values as required based on your event broker. </p>
                              <pre xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd" xml:space="preserve">import com.solace.messaging.MessagingService;
import com.solace.messaging.config.SolaceConstants.AuthenticationConstants;
import com.solace.messaging.config.SolaceProperties.AuthenticationProperties;
import com.solace.messaging.config.SolaceProperties.TransportLayerProperties;
import com.solace.messaging.config.profile.ConfigurationProfile;
import java.util.Properties;
...
...
...						
final Properties properties = new Properties();
properties.setProperty(TransportLayerProperties.HOST, "host");
properties.setProperty(ServiceProperties.VPN_NAME,  "vpn");
properties.setProperty(AuthenticationProperties.SCHEME_BASIC_USER_NAME, "userName");
properties.setProperty(AuthenticationProperties.SCHEME_BASIC_PASSWORD, "password");
properties.setProperty(ServiceProperties.RECEIVER_DIRECT_SUBSCRIPTION_REAPPLY, "true");</pre>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Alternatively if you're running samples, the configuration you want to use can be passed into the client application via the command line using the <code>args[]</code>array in the <code>main</code> method or loaded using a properties file. The following sample code shows how you can create a <code>Properties</code> object and load its values using a properties file. For a comprehensive list of the constant field values, see <code>AuthenticationProperties</code>.</p>
                              <pre xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd" xml:space="preserve">/* Creating a Properties object and setting its values using a FileInputStream file reader */
try (InputStream input = new FileInputStream("path/to/properties/file")) {
    Properties properties = new Properties();
    properties.load(input);
} catch (IOException e) {
    e.printStackTrace();
}    
</pre>
                              <h2 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><a name="Message"/>End-to-End Payload Compression</h2>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">The <span class="mc-variable Product-Names.pubsub_brand_only variable">PubSub+</span> Java API can perform end-to-end payload compression to allow for: </p>
                              <ul xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                <li>
                                  <p>faster message throughput </p>
                                </li>
                                <li>
                                  <p>reduced bandwidth usage</p>
                                </li>
                                <li>
                                  <p>improved performance in your applications</p>
                                </li>
                              </ul>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">While end-to-end payload compression creates more work for individual <span class="mc-variable Product-Names.pubsub_brand_only variable">PubSub+</span> APIs, it enables faster aggregate rates of message publishing and message receiving. The <span class="mc-variable Product-Names.pubsub_brand_only variable">PubSub+</span> event broker offers transport message compression that compresses the entire message, see <a href="../../Messaging/Message-Compression.htm#top" class="MCXref xref">Streaming Compressed Connections</a>. However, when you send and receive large messages, compressing the entire message creates a lot of work for the event broker, which can result in slower throughput. If your application needs to send and receive large messages, we recommend you use end-to-end payload compression to improve performance.</p>
                              <ol xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                <li value="1">
                                  <p>
                                    <a href="#Consider" class="MCXref xref">Considerations When Compressing Message Payloads</a>
                                  </p>
                                </li>
                                <li value="2">
                                  <p>
                                    <a href="#Compress" class="MCXref xref">Compressing Message Payloads in the PubSub+ Java API</a>
                                  </p>
                                </li>
                              </ol>
                              <h3 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><a name="Consider"/>Considerations When Compressing Message Payloads</h3>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">The following sections explain what you should be aware of when you compress message payloads with the <span class="mc-variable Manifest-Products-APIs.PubSub-GenericAll-Messaging-API variable">PubSub+&#xA0;Messaging API</span>s. </p>
                              <dl xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                <dt>
                                  <p style="font-weight: bold;">Use only one form of message compression</p>
                                </dt>
                                <dd>
                                  <p>We recommend you only use one form of compression, either <a href="../../Messaging/Message-Compression.htm#top" class="MCXref xref">Streaming Compressed Connections</a> through the event broker or end-to-end payload compression through the APIs. Compressing the same message multiple times can waste resources and usually does not result in smaller message sizes.</p>
                                </dd>
                                <dt>
                                  <p style="font-weight: bold;">Do not use end-to-end payload compression with small messages</p>
                                </dt>
                                <dd>
                                  <p>End-to-end Payload Compression works best with messages that are a few megabytes in size. <span class="mc-variable Variables.CompanyName variable">Solace</span> does not recommend using message payload compression with small messages, because end-to-end payload compression can actually increase the size of small messages.</p>
                                </dd>
                                <dt>
                                  <p style="font-weight: bold;">Upgrade your publisher and receiver applications</p>
                                </dt>
                                <dd>
                                  <p>Receiver applications automatically decompress any compressed message payloads <i>only</i> if the API supports message payload compression <i>and</i> is updated to the minimum supported version. If your receiver application does not support message payload compression, this can cause potential errors or exceptions. Make sure you update your publisher <i>and</i> receiver applications to the minimum supported versions for payload compression. For version support information, see <a href="../API-Developer-Guide/Feature-Support-PubSub-Messaging-APIs.htm#top" class="MCXref xref">Feature Support in PubSub+&#xA0;Messaging APIs</a>.</p>
                                </dd>
                                <dt>
                                  <p style="font-weight: bold;">End-to-end payload compression limitations</p>
                                </dt>
                                <dd>
                                  <p>End-to-end payload compression does not currently support <span class="mc-variable Product-Names.pubsub_cache variable">PubSub+ Cache</span>.</p>
                                  <p>End-to-end payload compression is not compatible with:</p>
                                  <ul>
                                    <li>
                                      <p>SolCache </p>
                                    </li>
                                    <li>
                                      <p>Non-SMF protocols, such as AMQP, HTTP, Kafka and MQTT</p>
                                    </li>
                                  </ul>
                                  <p>If your applications use any of the above, we recommend you do not use end-to-end payload compression.</p>
                                </dd>
                              </dl>
                              <h2 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><a name="Compress"/>Compressing Message Payloads in the <span class="mc-variable Product-Names.pubsub_brand_only variable">PubSub+</span> Java API</h2>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Your publisher application can compress the payload of any message before you publish it. To compress a message payload, you must set <code>PAYLOAD_COMPRESSION_LEVEL</code>, which tells the API you want end-to-end payload compression enabled. The payload compression level property can be set to an integer from 0-9:</p>
                              <ul xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                <li>
                                  <p><code>0</code>&#x2014;Payload compression is disabled. This is the default setting.</p>
                                </li>
                                <li>
                                  <p><code>1 - 9</code>&#x2014;Payload compression is enabled. 1 is the lowest level of compression with the fastest data throughput, and 9 is the highest level of compression with the slowest data throughput.</p>
                                </li>
                              </ul>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Your payload compression level should be adjusted according to your network and performance requirements. The following code snippet shows how to set <code>PAYLOAD_COMPRESSION_LEVEL</code> in a broker properties dictionary:</p>
                              <pre xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd" xml:space="preserve">
Properties properties = new Properties();
// Payload compression enabled with max compression:
properties.setProperty(SolaceProperties.ServiceProperties.PAYLOAD_COMPRESSION_LEVEL, "9");</pre>
                              <h2 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd" class="with-rule"><a name="Establish-conneection-to-event-broker"/>Establishing a Connection to an Event Broker </h2>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">When the necessary properties have been set and stored in a <code>Properties</code> object, you can call <code>MessagingService.build()</code> to create a <code>MessagingService</code> object. The <code>MessagingService</code> object allows the API to establish a connection to the event broker. The following is a list of commonly used methods to create the necessary <code>MessagingService</code> object using the <code>MessagingServiceClientBuilder</code> interface and establish a connection to the event broker:</p>
                              <ul xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                <li>
                                  <code>builder(ConfigurationProfile activeProfile)</code>
                                </li>
                                <li style="font-weight: normal;font-size: 11pt;">
                                  <code>withAuthenticationStrategy(AuthenticationStrategy authenticationProvider)</code>
                                </li>
                                <li>
                                  <code>fromProperties(Properties properties)</code>
                                </li>
                                <li>
                                  <code>build()</code>
                                </li>
                              </ul>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">For more information,  see the <a href="../../API-Developer-Online-Ref-Documentation/pubsubplus-java/index.html" class="link-internal"><a href="../../API-Developer-Online-Ref-Documentation/pubsubplus-java/index.html" class="link-internal"><span class="mc-variable Product-Names.pubsub_brand_only variable">PubSub+</span> Messaging API for Java reference</a>.</a></p>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">After you create the <code>MessagingService</code> object, you call the <code>connect()</code> method. </p>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">The following sample code shows how to create a simple <code>MessagingService</code> object that connects to an event broker:</p>
                              <pre xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd" xml:space="preserve">
final MessagingService messagingService = MessagingService.builder(ConfigurationProfile.V1)
    .fromProperties(properties)    // Enables property based configuration, required to set host and VPN properties
                                   <b>// withAuthenticationStrategy() can be called here to use one of the strategies listed below</b>
    .build()                       // Returns a MessagingService object based on the provided configuration
    .connect();                    // A synchronous connection is established with an event broker.
</pre>
                              <h2 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd" class="with-rule"><a name="Transport-Layer-Security"/>Using Transport Layer Security</h2>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Transport Layer Security (TLS) allows for encrypted authentication and data transmission between the <span class="mc-variable Product-Names.pubsub_brand_only variable">PubSub+</span> Java API and a <span class="mc-variable Product-Names.pubsub_brand_only variable">PubSub+</span> event broker. The <span class="mc-variable Product-Names.pubsub_brand_only variable">PubSub+</span> Java API supports Transport Layer Security versions: TLS 1.0, TLS 1.1, and TLS 1.2 . The recommended version to use is the most recent version of TLS. Secure Socket Layer (SSL) protocol, version 3 (SSLv3) is also supported. We don't recommend that you use SSL unless it's required for backwards compatibility.</p>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">You can use  <code>TransportSecurityStrategy.TLS.create()</code> to configure the TLS&#xA0;connection properties, such as the Java Key Store (JKS) to use, or whether to disable certificate validation. When you use TLS, you must always use  secure TCP&#xA0;&#xA0;protocol (<code>tcps</code> or <code>https</code>) in  setting the <code>TransportLayerProperties.HOST</code>&#xA0;property for your connection, for example:</p>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                <pre xml:space="preserve">properties.setProperty(TransportLayerProperties.HOST, "<b>tcps</b>://my-host-connection.messaging.solace.cloud:11111");</pre>
                              </p>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">The following sample code shows the recommended security setup for client applications when you use TLS: </p>
                              <pre xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd" xml:space="preserve">/* An entry point to create a service builder using a configuration profile (V1 sets it to default values). */
MessagingService.builder(ConfigurationProfile.V1)
    .withTransportSecurityStrategy(
        TLS.create()                                      // Creates a new transport security layer instance(required). Can configure or override authentication manually.
        <b>.withCertificateHostValidation()</b>                  // Configures transport layer security (TLS) to validate the host against one from a server certificate.
        <b>.withCertificateValidation("changeme", false)</b>     // changeme is the default truststore password, ignoreExpiration is set to false which rejects expired certificates
        <b>.withExcludedProtocols(SecureProtocols.TLSv1_1, SecureProtocols.TLSv1, SecureProtocols.SSLv3)</b>   // Excludes dated SSL protocols 
    .withAuthenticationStrategy(                          // Enables/overrides the existing authentication strategy with AuthenticationStrategy.
        ClientCertificateAuthentication         
        .of(myKeystoreUrl, myKeystorePassword)            // A factory method that creates an instance to be used for Client Certificate Authentication. 
            )
    .build()                                         
    .connect(); </pre>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">There are also a number of methods that you may find useful to configure the TLS connection using <code>TransportSecurityStrategy.TLS</code>. Here are three methods commonly used to configure the TLS connection:</p>
                              <ul xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                <li>
                                  <p><code>withCipherSuites()</code>&#x2014;The list of cipher suites used when negotiating the TLS connection can be configured. You can configure the Java API&#xA0;to limit it to use a set of stronger ciphers and to help guarantee a more secure connection between the client applications and event brokers.</p>
                                  <p>Cipher suites are a useful method of encrypting communication through a TLS handshake and offer improved security between applications connected through the  event broker. For a more detailed explanation and a list of supported cipher suites see <a href="../../Security/TLS-SSL-Message-Encryption-Overview.htm#Cipher" class="link-internal">Cipher Suites</a>.</p>
                                  <p>The following code sample shows how to use the <code>withCipherSuites()</code> method:</p>
                                  <p>
                                    <pre xml:space="preserve">
/* An entry point to create a service builder using a configuration profile (V1 sets it to default values). */
MessagingService.builder(ConfigurationProfile.V1)
    <b>.withTransportSecurityStrategy(TLS.create()</b>      // Creates a new transport security layer instance(required). Can configure or override authentication manually.
    <b>.withCipherSuites("CipherSuite1,</b>                 // A comma separated list of cipher suites in order of preference used for SecureSocket Layer (SSL) connections.
                        <b>CipherSuite2")</b>               // Cipher suites can be specified using their JSSE name or openSSL name.
        )
    .withAuthenticationStrategy(                     // Enables/overrides the existing authentication strategy with AuthenticationStrategy.
        ClientCertificateAuthentication         
        .of(myKeystoreUrl, myKeystorePassword)       // A factory method that creates an instance to be used for Client Certificate Authentication. 
        )
    .build()        // Returns a PubSub+ MessagingService object based on the provided configuration and number of authentication parameters.
    .connect();     // A synchronous connection is established with a PubSub+ event broker.            </pre>
                                  </p>
                                </li>
                                <li>
                                  <p><code>withExcludedProtocols()</code>&#x2014;You may not want to use specific protocols to connect with microservices. For example, you may not want to use legacy protocols. Use this method to specify the Secure Socket Layer (SSL) and Transport Layer Security (TLS) protocols not to use. Here is sample code that shows you how to exclude a specific protocol: </p>
                                  <p>
                                    <pre xml:space="preserve">
/* An entry point to create a service builder using a configuration profile (V1 sets it to default values). */
MessagingService.builder(ConfigurationProfile.V1)
    .withTransportSecurityStrategy(
        TLS.create()       // Creates a transport security layer instance. You can configure or override authentication manually.
        <b>.withExcludedProtocols(TransportSecurityStrategy.TLS.SecureProtocols.TLS1.1)  // Excludes TLS1.1 from accessing micro service.</b>
        )
    .withAuthenticationStrategy(               // Enables or overrides the existing authentication strategy with AuthenticationStrategy.
        ClientCertificateAuthentication          
        .of(myKeystoreUrl, myKeystorePassword) // A factory method that creates a new instance to be used for Client Certificate Authentication. 
        )
    .build()        // Returns a MessagingService object based on the provided configuration and number of authentication parameters.
    .connect();     // A synchronous connection is established with an event broker.            </pre>
                                  </p>
                                </li>
                                <li>
                                  <p><code>withoutCertificateValidation()</code>&#x2014;This method configures your TLS connection not to  validate server certificates. </p>
                                  <p class="Warning">Only use this method in development environments. We recommend that you never use this method in production environments because it creates a security vulnerability.</p>
                                  <p> The following sample code shows how to use the <code>withoutCertificateValidation()</code> method:</p>
                                  <p>
                                    <pre xml:space="preserve">
/* An entry point to create a service builder using a configuration profile (V1 sets it to default values). */
MessagingService.builder(ConfigurationProfile.V1)
    .withTransportSecurityStrategy(
        TLS.create()                      // Creates a transport security layer instance. Can configure or override authentication manually.
        <b>.withoutCertificateValidation()   // Configures transport layer security (TLS) to not validate server certificates.</b>
        )
    .withAuthenticationStrategy(                 // Enables/overrides the existing authentication strategy with AuthenticationStrategy.
        ClientCertificateAuthentication          // Configures transport layer security (TLS) not to validate server certificates.
        .of(myKeystoreUrl, myKeystorePassword)   // A factory method that creates an instance to be used for Client Certificate Authentication. 
        )
    .build()        // Returns a MessagingService object based on the provided configuration and number of authentication parameters.
    .connect();     // A synchronous connection is established with an event broker.            </pre>
                                  </p>
                                </li>
                              </ul>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">You can also configure the aspects of the TLS&#xA0;connection using  <code>TransportLayerSecurityProperties</code> and the  <code>Properties</code> object. The TLS&#xA0;connection can be configured using various fields found in  <code>SolaceProperties.TransportLayerSecurityProperties</code>. We recommend that you use the default settings (set to <code>true</code> and enabled) to ensure secure connections for the following properties: </p>
                              <ul xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                <li>
                                  <code>CERT_REJECT_EXPIRED</code>
                                </li>
                                <li>
                                  <code>CERT_VALIDATE_USERNAME</code>
                                </li>
                                <li>
                                  <code>CERT_VALIDATED</code>
                                </li>
                              </ul>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">For more information about the object, methods, and properties,  see the <a href="../../API-Developer-Online-Ref-Documentation/pubsubplus-java/index.html" class="link-internal"><a href="../../API-Developer-Online-Ref-Documentation/pubsubplus-java/index.html" class="link-internal"><span class="mc-variable Product-Names.pubsub_brand_only variable">PubSub+</span> Messaging API for Java reference</a>.</a></p>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">For details about creating a <code>Properties</code> object and establishing a connection to the broker via the <code>MessagingService</code> object, see <a href="#Creating-A-Properties-Object" class="MCXref xref">Creating a Properties Object </a>.</p>
                              <h2 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd" class="with-rule"><a name="Using"/>Using Websockets
		</h2>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">The <span class="mc-variable Product-Names.pubsub_brand_only variable">PubSub+</span> Java API supports the use of WebSockets, which allows data transmission that can bypass typical barriers like firewalls and proxies. WebSockets allow your applications to connect over ports 80 (<code>HTTP</code>) and 443 (<code>HTTPS</code>). Because these ports are usually open in most firewall configurations, WebSockets can establish connections without requiring additional port openings or configurations. To use Websockets, use one of the following prefixes in your <code>HOST</code> URL property:</p>
                              <ul xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                <li><code>ws:</code> or <code>ws://</code>&#x2014;Use WebSockets for unsecured communication between your application and the event broker. 
            </li>
                                <li><code>wss:</code> or <code>wss://</code>&#x2014;Use a TLS/SSL channel over WebSockets for secure communication between your application and the event broker.
            </li>
                              </ul>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"> The following sample code shows how to set an example WebSocket <code>HOST</code> property:</p>
                              <pre xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd" xml:space="preserve">final Properties properties = new Properties();
properties.setProperty(TransportLayerProperties.HOST, "wss://my-websocket.example:443");
</pre>
                              <h2 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd" class="with-rule"><a name="Authentication"/>Authentication </h2>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"> The <span class="mc-variable Product-Names.pubsub_brand_only variable">PubSub+</span> Java API&#xA0;supports a number of  authentication schemes (or strategies). that you can choose from.&#xA0;The scheme that you choose may depend on the credentials that the connecting client is required to provide. You can use one of the following  authentication schemes:</p>
                              <ul xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                <li>
                                  <a href="#Basic" class="MCXref xref">Basic Authentication </a>
                                </li>
                                <li>
                                  <a href="#Kerberos" class="MCXref xref">Kerberos Authentication </a>
                                </li>
                                <li>
                                  <a href="#Client" class="MCXref xref">Client Certificate Authentication </a>
                                </li>
                                <li>
                                  <a href="#OAuth" class="MCXref xref">OAuth 2.0 Authentication</a>
                                </li>
                              </ul>
                              <h2 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd" class="with-rule"><a name="Basic"/>Basic Authentication </h2>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Basic authentication is the default client authentication scheme  which allows a client to authenticate with an event broker using a client username and password. To specify basic authentication, create an instance of a <code>MessagingService</code> object and specify the following as the parameter for the <code>withAuthenticationStrategy()</code> method:</p>
                              <ul xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                <li>
                                  <code>BasicUserNamePassword</code>
                                </li>
                                <ul>
                                  <li>
                                    <code>of(String userName, String password)</code>
                                  </li>
                                </ul>
                              </ul>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">For details about object and method,  see the <a href="../../API-Developer-Online-Ref-Documentation/pubsubplus-java/index.html" class="link-internal"><span class="mc-variable Product-Names.pubsub_brand_only variable">PubSub+</span> Messaging API for Java reference</a>.</p>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">The following sample code shows how to use basic authentication:</p>
                              <pre xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd" xml:space="preserve">
final String username = "solace01";
final String password = "12345678";
            
/* An entry point to create a service builder using ConfigurationProfile (see section below on ConfigurationProfile). */
final MessagingService messagingService = MessagingService.builder(ConfigurationProfile.V1)
    .withAuthenticationStrategy(BasicUserNamePassword      // Overrides/Enables the existing authentication strategy with strategy passed into parameter.
    .of(username,password))    // Creates an instance of BasicUserNamePassword.                     
    .build()                
    .connect();                </pre>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">For details about creating a <code>Properties</code> object and establishing a connection to the broker via the <code>MessagingService</code> object, see <a href="#Creating-A-Properties-Object" class="MCXref xref">Creating a Properties Object </a>.</p>
                              <h2 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd" class="with-rule"><a name="Kerberos"/>Kerberos Authentication </h2>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">The <span class="mc-variable Product-Names.pubsub_brand_only variable">PubSub+</span> Java API provides support for  <a href="../../Security/Configuring-Client-Authentication.htm#Config-Kerberos" class="link-internal">Kerberos Authentication</a>. Connecting using this method requires both a valid <code>jaas</code> login configuration file, as well as a valid Kerboros configuration file. Call the <code>withAuthenticationStrategy()</code> method and pass the following object and methods as the parameters:</p>
                              <ul xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                <li>
                                  <code>Kerboros</code>
                                  <ul>
                                    <li>
                                      <code>of(String jaasLoginContextName, String kerberosPrincipalInstanceName)</code>
                                    </li>
                                    <li>
                                      <code>withUserName(String userName)</code>
                                    </li>
                                    <li>
                                      <code>withMutualAuthentication() </code>
                                    </li>
                                    <li>
                                      <code>withReloadableJaasConfiguration()</code>
                                    </li>
                                  </ul>
                                </li>
                              </ul>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">For details about object and methods,  see the <a href="../../API-Developer-Online-Ref-Documentation/pubsubplus-java/index.html" class="link-internal"><a href="../../API-Developer-Online-Ref-Documentation/pubsubplus-java/index.html" class="link-internal"><span class="mc-variable Product-Names.pubsub_brand_only variable">PubSub+</span> Messaging API for Java reference</a>.</a></p>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">The following sample code shows how to use Kerboros for authentication and requires that you create these files as shown in the examples from the <a href="https://tutorials.solace.dev/java" target="_blank" class="link-offsite"><span class="mc-variable Variables.CompanyName variable">Solace</span> Developer Hub</a>:</p>
                              <ul xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                <li><code>jaas.conf</code> for the login configuration file</li>
                                <li><code>krb5.conf</code> for the Kerberos configuration file</li>
                              </ul>
                              <pre xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd" xml:space="preserve">
final String kerberosPrincipalInstanceName = "solace01";
final String jaasLoginContextName = "SolaceGSS";           // jaasLoginContextName correlates to the entry in resources/jaas.conf file.
final String myUserNameOnBroker = "myUserNameOnBroker";    // myUserNameOnBroker should be setup on a broker, enable mutual authentication and JAAS config file reloading.

//An entry point to create a service builder using a configuration profile (V1 sets it to default values)
MessagingService.builder(ConfigurationProfile.V1)
    .fromProperties(serviceConfiguration)                           //Uses authentication properties passed in through command line or hard-coded into program.
    .withAuthenticationStrategy(                                    //Enables or overrides the existing authentication strategy with AuthenticationStrategy.
        Kerberos
        .of(kerberosPrincipalInstanceName, jaasLoginContextName)    // Creates an instance of Kerboros. 
        .withUserName(myUserNameOnBroker)                           // A factory method to configure non default user name when using Kerberos. 
        .withMutualAuthentication()                                 // A factory method to configure mutual authentication when using Kerberos.
        .withReloadableJaasConfiguration())                         // A factory method to configure reloading behavior of a (jaas.conf) file.
    .build()                                                        
    .connect();                                                  </pre>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">For details about creating a <code>Properties</code> object and establishing a connection to the broker via the <code>MessagingService</code> object, see <a href="#Creating-A-Properties-Object" class="MCXref xref">Creating a Properties Object </a>.</p>
                              <h2 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd" class="with-rule"><a name="Client"/>Client Certificate Authentication </h2>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">To use the <a href="../../Security/Configuring-Client-Authentication.htm#Client-Cert" class="link-internal">Client certificate authentication</a> scheme, the following steps are required: </p>
                              <ol xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                <li value="1">
                                  <p>You must configure the host event broker to use TLS connections (see <a href="#Transport-Layer-Security" class="MCXref xref">Using Transport Layer Security</a>).</p>
                                </li>
                                <li value="2">
                                  <p>Your application must connect to the broker using TLS.</p>
                                </li>
                                <li value="3">
                                  <p>You must enable Client certificate verification on the Message VPN that the application uses to connect.</p>
                                </li>
                                <li value="4">
                                  <p>In your client application, the client-side certificate must be present in a keystore file and you configure the certificate using the <code>ClientCertificateAuthentication.of(String keystoreURL, String keystorePassword)</code> method.</p>
                                </li>
                              </ol>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">For details about object and method, see the  <a href="../../API-Developer-Online-Ref-Documentation/pubsubplus-java/index.html" class="link-internal"><span class="mc-variable Product-Names.pubsub_brand_only variable">PubSub+</span> Messaging API for Java reference</a>.</p>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"> The following sample code shows how to configure client certificate authentication:</p>
                              <pre xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd" xml:space="preserve">
MessagingService.builder(ConfigurationProfile.V1)
    .withTransportSecurityStrategy(TLS.create())    // Creates a new transport security layer instance(required). Can configure or override authentication manually.
    .withAuthenticationStrategy(                    // Enables/overrides the existing authentication strategy with AuthenticationStrategy.
        ClientCertificateAuthentication
        .of(myKeystoreUrl, myKeystorePassword)      // A factory method that creates an instance to be used for Client Certificate Authentication. 
        )
    .build()                                       
    .connect();                                   </pre>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">For details about creating a <code>Properties</code> object and establishing a connection to the broker via the <code>MessagingService</code> object, see <a href="#Creating-A-Properties-Object" class="MCXref xref">Creating a Properties Object </a>.</p>
                              <h2 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd" class="with-rule"><a name="OAuth"/>OAuth 2.0 Authentication</h2>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">The OAuth authentication scheme allows a client application to use the OAuth mechanism to authenticate its connection with an event broker. To use OAuth 2.0 authentication, configure the host event broker to use TLS connections (see <a href="#Transport-Layer-Security" class="link-internal">Using Transport Layer Security</a>) and ensure your application connects to the event broker using TLS. For more information see <a href="../../Security/Client-Authentication-Overview.htm#OAuth" class="MCXref xref">OAuth Authentication</a>. </p>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><span class="mc-variable Product-Names.pubsub_brand_only variable">PubSub+</span> event brokers support the following OAuth authentication mechanisms:</p>
                              <ul xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                <li>
                                  <p>
                                    <a href="#OAuth2" class="MCXref xref">OAuth 2.0</a>
                                  </p>
                                </li>
                                <li>
                                  <p>
                                    <a href="#OpenID%C2%A0C" class="MCXref xref">OpenID&#xA0;Connect</a>
                                  </p>
                                </li>
                              </ul>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">The <span class="mc-variable Product-Names.pubsub_brand_only variable">PubSub+</span> Java API supports different fields that can be sent to the event broker:</p>
                              <ul xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                <li>
                                  <p><code>accessToken</code>&#x2014;a <code>String</code> for applications to make requests for data access</p>
                                  <p>
                                    <b>and/or</b>
                                  </p>
                                  <p><code>idToken</code>&#x2014;a <code>String</code> for Open ID Connect (OIDC) connections</p>
                                </li>
                                <li><code>issuerIdentifier</code>&#x2014;(Optional)&#xA0;a <code>String</code> to identify the appropriate OAuth provider configuration</li>
                              </ul>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">OAuth authentication requires an <code>accessToken</code>, an <code>idToken</code>, or both to be enabled using these&#xA0;methods from the AuthenticationStrategy.OAuth2:</p>
                              <ul xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                <li>
                                  <code>of(String token)</code>
                                  <ul>
                                    <li> the <code>idToken</code> or <code>accessToken</code> can be used for this method </li>
                                  </ul>
                                </li>
                                <li>
                                  <code>of(String accessToken, String idToken)</code>
                                  <ul>
                                    <li>if you are use both tokens, the <code>accessToken</code> must be the first parameter</li>
                                  </ul>
                                </li>
                                <li>
                                  <code>withIssuerIdentifier(String issuerIdentifier)</code>
                                  <ul>
                                    <li>an optional Authorization Server Issuer Identifier</li>
                                  </ul>
                                </li>
                              </ul>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">For details about the object and methods, refer to the  <a href="../../API-Developer-Online-Ref-Documentation/pubsubplus-java/index.html" class="link-internal"><span class="mc-variable Product-Names.pubsub_brand_only variable">PubSub+</span> Messaging API for Java reference</a>.</p>
                              <h3 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><a name="OAuth2"/>OAuth 2.0</h3>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">OAuth2.0 is an open standard for access delegation and authorization. It is commonly used as a mechanism  to grant websites or applications access to users' information on other websites without giving them access to sensitive credentials. The  OAuth authentication scheme allows access through the use of tokens issued to third-party clients by an authorization server that provides access to Message VPNs on <span class="mc-variable Product-Names.pubsub_brand_only variable">PubSub+</span> event brokers.  For more information, see <a href="../../Security/Configuring-Client-Authentication.htm#OAuth" class="MCXref xref">OAuth Authentication</a>.</p>
                              <ul xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                <li>
                                  <p>(Mandatory)&#xA0;An access token as defined in OAuth. Access tokens are issued by the authorization server after successfully authenticating the user and obtaining their consent. The access token is the artifact that allows an OAuth client application to access the user's resource. The <code>issuerIdentifier</code> claim in the token, if present, is used to identify which OAuth profile the event broker will use for token validation. If no profile with a matching issuer is found, the default profile is used.</p>
                                </li>
                              </ul>
                              <ul xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                <li>
                                  <p>(Optionally) An Authorization Server Issuer Identifier (<code>issuerIdentifier</code>).  If provided, this parameter must match the issuer of an OAuth profile on the event broker. That profile will be used for token validation, rather than the profile with the issuer provided in the token&#x2019;s <code>iss</code> claim, if any, or the default profile configured on the event broker.</p>
                                </li>
                              </ul>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">The following sample code shows how to use  OAuth2 authentication with the issue:</p>
                              <pre xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd" xml:space="preserve">
/* Configure service access to use OAuth 2 authentication with an access token and an optional issuer identifier. */
MessagingService.builder(ConfigurationProfile.V1)
    // Configures service with an accessToken and an issuerIdentifier:
    .withAuthenticationStrategy(OAuth2.of(accessToken).withIssuerIdentifier(issuerIdentifier)) 
    .build()                                
    .connect(); </pre>
                              <h3 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><a name="OpenID&#xA0;C"/>OpenID&#xA0;Connect</h3>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">The event broker is configured for OpenID Connect authentication (<code>oauth-role</code> is set to <code>client</code>), you must provide the following properties for the event broker to authenticate the client application:</p>
                              <ul xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                <li>
                                  <p>Open ID Connect Token: (Required) Defined by the OpenID Connect (OIDC), OIDC&#xA0;tokens are an extension to OAuth2.0. ID tokens are issued by the authorization server and contain claims that carry information about the user. An ID token is an artifact that proves that the user has been authenticated. The <code>issuerIdentifier</code> claim in the token is used to identify which OAuth profile the event broker will use for token validation. If no profile with a matching issuer is found, the default profile is used.</p>
                                </li>
                              </ul>
                              <ul xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                <li>
                                  <p>Access token: (Optional) This access token is an optional access that your organization may require that the event broker uses to determine the authorizations available to the authenticated client application.</p>
                                </li>
                              </ul>
                              <pre xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd" xml:space="preserve">
/* Configure service access to use a OpenID Connect authentication with an ID token and an optional access token. */
MessagingService.builder(ConfigurationProfile.V1)
    .withAuthenticationStrategy(OAuth2.of(accessToken,idToken))    // Configures service with an accessToken and an idToken. 
    .build()                                                        
    .connect();                                                   </pre>
                              <h3 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Required Event Broker Configurations</h3>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">For a client application to use an OAuth authentication scheme, a Message VPN OAuth  profile must be configured for the host event broker and OAuth authentication must be configured and enabled for any Message VPNs to which a client connects. For more information, see <a href="../../Security/Configuring-Client-Authentication.htm#OAuth" class="MCXref xref">OAuth Authentication</a>.</p>
                              <h3 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Refreshing Expired OAuth Tokens</h3>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">By default, event brokers disconnect clients when their tokens expire (see <a href="../../Security/Configuring-Client-Authentication.htm#Disconnect-Token-Expiry" class="MCXref xref">Disconnect on Token Expiration</a>). When a client session  is disconnected, the client application tries to reconnect a number of times using the same OAuth token based on the <code>RECONNECTION_ATTEMPTS</code> property. If the connection can't be reestablished due to token expiration, the client application must recreate the session with all its subscriptions.</p>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">To update the OAuth token, use the <code>updateProperty(String, Object)</code>&#xA0;method, which allows you to set a modifable service property after the creation of the <code>MessagingService</code> object. The first parameter is one of the following strings and the second parameter is the token:</p>
                              <ul xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                <li><code>SolaceProperties.AuthenticationProperties.SCHEME_OAUTH2_ACCESS_TOKEN</code> to update an expired access token</li>
                                <li><code>SolaceProperties.AuthenticationProperties.SCHEME_OAUTH2_OIDC_ID_TOKEN</code> to update an expired ID&#xA0;token</li>
                              </ul>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd" class="Note">Modifiable service properties may not update immediately and may require the next reconnection attempt to update.</p>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Refreshing the expired token can happen while:</p>
                              <ul xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                <li>
                                  <p>the client application is connected. In this case, the client contacts the authentication server to refresh the token and modifies the session to use the updated token the next time the API&#xA0;connects to the event broker.</p>
                                </li>
                                <li>
                                  <p style="font-weight: normal;">the client application is reconnecting. The reconnecting event includes a diagnostic subCode.  If this subCode is <code>Login Failure</code>, this may indicate that your token has expired.   In this case, the API tries to reconnect (using the expired token). The client  then contacts the authentication server to refresh the token and modifies the session to use the updated token the next time the API attempts to reconnect to the event broker.</p>
                                </li>
                              </ul>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd" style="font-weight: normal;">In general, it is better if the client application is aware of potential token expiry and refreshes the token before it expires.</p>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd" class="Note">When the client application's session is reconnected, the Java API re-applies the client application's direct subscriptions. If there is a change in the ACLs as a result of the refreshed token, the subscriptions may be rejected by the event broker.</p>
                              <h2 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd" class="with-rule"><a name="Configuration-Profiles"/>Configuration Profiles</h2>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">To ensure that your application remains compatible with future versions of this API, you must pass a predefined Configuration Profile enumeration (as <code>ConfigurationProfile.V1</code>) to the <code>MessagingService.builder()</code> method. The V1 (Version 1) refers to the currently available configuration profile.</p>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">The following sample code shows how to configure your application for backwards compatibility using the configuration profile:</p>
                              <pre xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd" xml:space="preserve">
final MessagingService messagingService = MessagingService.builder(<b>ConfigurationProfile.V1</b>)
    .fromProperties(properties)     // Uses authentication properties passed in through command line or hard-coded into program.
    .build()                  
    .connect();                   </pre>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                    <div class="no-print">
                      <div>
                        <a href="#" id="docsFeedbackTrigger" class="docs-issue-collector">Provide feedback</a>
                      </div>
                    </div>
                    <footer class="my-4 pt-4 text-center no-print">
                      <div class="footer-txt text-center no-print">
                        <ul class="list-inline ">
                          <li class="list-inline-item text-muted"><a href="../../Resources/Documentation-Set.htm" class="doc-set-footer-link MCXref xref xrefdoc-set-footer-link">Documentation Coverage</a>: <span class="mc-variable Variables.DocumentSetNumber variable">2024.09.18.0001</span></li>
                          <li class="list-inline-item text-muted">Last Updated: <span class="mc-variable Variables.MonthDayYear variable">September 18, 2024</span></li>
                          <li class="list-inline-item text-muted" style="font-size:13px;"> &#xA9;  <span class="mc-variable Variables.CompanyNameLegal variable">Solace Corporation</span></li>
                        </ul>
                      </div>
                      <div class="footer-icons">
                        <ul class="list-inline">
                          <li class="list-inline-item">
                            <a href="https://facebook.com/solacedotcom" target="_blank" class="social-media-icon">
                              <img src="../../Resources/Images/Social-Media/facebook_22x21.png" class="Hyperlinked" alt="Facebook" title="Solace Facebook Page" style="width: 22;height: 21;"/>
                            </a>
                          </li>
                          <li class="list-inline-item">
                            <a href="https://www.linkedin.com/company/20219" target="_blank" class="social-media-icon">
                              <img src="../../Resources/Images/Social-Media/LinkedIn_22x21.png" class="Hyperlinked" alt="LinkedIn" title="Solace LinkedIn Page" style="width: 22;height: 21;"/>
                            </a>
                          </li>
                          <li class="list-inline-item">
                            <a href="https://twitter.com/solacedotcom" target="_blank" class="social-media-icon">
                              <img src="../../Resources/Images/Social-Media/Twitter_22x21.png" class="Hyperlinked" alt="Twitter" title="Solace Twitter Feed" style="width: 22;height: 21;"/>
                            </a>
                          </li>
                          <li class="list-inline-item">
                            <a href="https://www.youtube.com/user/SolaceSystems" target="_blank" class="social-media-icon">
                              <img src="../../Resources/Images/Social-Media/youtube_22x21.png" class="Hyperlinked" alt="YouTube" title="Solace YouTube Channel" style="width: 22;height: 21;"/>
                            </a>
                          </li>
                          <li class="list-inline-item">
                            <a href="https://www.instagram.com/solacedotcom/" target="_blank" class="social-media-icon">
                              <img src="../../Resources/Images/Social-Media/instagram_22x21.png" class="Hyperlinked" alt="Instagram" title="Solace Instagram Feed" style="width: 22;height: 21;"/>
                            </a>
                          </li>
                          <li class="list-inline-item">
                            <a href="https://medium.com/solacedotcom" target="_blank" class="social-media-icon">
                              <img src="../../Resources/Images/Social-Media/medium_22x21.png" class="Hyperlinked" alt="Medium" title="Solace Medium Blog" style="width: 22;height: 21;"/>
                            </a>
                          </li>
                        </ul>
                      </div>
                      <div class="footer_link_menu">
                        <ul class="link_list">
                          <li class="link_list_item">
                            <a href="https://solace.com/products/" target="_blank" class="footer-link">Products</a>
                          </li>
                          <li class="link_list_item">
                            <a href="https://solace.com/company/" target="_blank" class="footer-link">Company</a>
                          </li>
                          <li class="link_list_item">
                            <a href="https://www.solace.dev/" target="_blank" class="footer-link">Developers</a>
                          </li>
                          <li class="link_list_item">
                            <a href="https://solace.com/support/" target="_blank" class="footer-link">Support</a>
                          </li>
                          <li class="link_list_item">
                            <a href="https://solace.com/contact/" target="_blank" class="footer-link">Contact Us</a>
                          </li>
                        </ul>
                      </div>
                    </footer>
                  </div>
                  <!-- JIRA issue collector -->
                  <script>/*<![CDATA[*/// Requires jQuery!
jQuery.ajax({
    url: "https://sol-jira.atlassian.net/s/d41d8cd98f00b204e9800998ecf8427e-T/o2joag/b/24/e73395c53c3b10fde2303f4bf74ffbf6/_/download/batch/com.atlassian.jira.collector.plugin.jira-issue-collector-plugin:issuecollector-embededjs/com.atlassian.jira.collector.plugin.jira-issue-collector-plugin:issuecollector-embededjs.js?locale=en-US&collectorId=076e0808",
    type: "get",
    cache: true,
    dataType: "script"
});
window.ATL_JQ_PAGE_PROPS = {
"triggerFunction": function(showCollectorDialog) {
//Requires that jQuery is available!
$("#docsFeedbackTrigger").click(function(e) {
e.preventDefault();
showCollectorDialog();
});
},
fieldValues: {
recordWebInfo: '1', // field Name
recordWebInfoConsent: ['1'] // field Id
}
};
/*]]>*/</script>
                  <script src="../../Resources/Scripts/thumbnail.js">
                                    </script>
                  <!-- Script for Launching offsite links in new tab -->
                  <script type="text/javascript">/*<![CDATA[*/$("a[href^='http']").attr("target","_blank");/*]]>*/</script>
                </div>
              </div>
            </div>
          </div>
          <a data-close="true"/>
        </div>
      </div>
    </div>
  </body>
</html>
