<?xml version="1.0"?>
<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-us" xml:lang="en-us" class="_Skins_HTML5___Side_Navigation" data-mc-search-type="Stem" data-mc-help-system-file-name="Default.xml" data-mc-path-to-help-system="../../" data-mc-has-content-body="True" data-mc-toc-path="[%=System.LinkedTitle%]|[%=System.LinkedTitle%]|[%=System.LinkedTitle%]|[%=System.LinkedTitle%]" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic;Default" data-mc-preload-images="false" data-mc-in-preview-mode="false">
  <head>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
    <meta name="msapplication-config" content="../../Skins/Favicons/browserconfig.xml"/>
    <meta name="viewport" content="width=device-width, initial-scale=1"/>
    <link rel="apple-touch-icon" sizes="180x180" href="../../Skins/Favicons/apple-touch-icon.png"/>
    <link rel="shortcut icon" href="../../Skins/Favicons/favicon-32x32.png"/>
    <link rel="icon" sizes="96x96" href="../../Skins/Favicons/favicon-96x96.png"/>
    <link rel="icon" sizes="32x32" href="../../Skins/Favicons/favicon-32x32.png"/>
    <link rel="icon" sizes="16x16" href="../../Skins/Favicons/favicon-16x16.png"/>
    <meta charset="utf-8"/>
    <meta http-equiv="Cache-control" content="no-cache"/>
    <meta http-equiv="X-UA-Compatible" content="IE=edge"/>
    <title>Consuming Persistent Messages Using the Java API </title>
    <!-- <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous" /> -->
    <!--style to display feedback button correctly in IE-->
    <!-- Google Tag Manager -->
    <!-- End Google Tag Manager -->
    <!-- links to get the EDA styling to work -->
    <link href="../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" type="text/css" data-mc-generated="True"/>
    <link href="../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" type="text/css" data-mc-generated="True"/>
    <link href="../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" type="text/css" data-mc-generated="True"/>
    <link href="../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" type="text/css" data-mc-generated="True"/>
    <link href="../../Skins/Default/Stylesheets/Components/Tablet.css" rel="stylesheet" type="text/css" data-mc-generated="True"/>
    <link href="../../Skins/Default/Stylesheets/Components/Mobile.css" rel="stylesheet" type="text/css" data-mc-generated="True"/>
    <link href="../../Skins/Default/Stylesheets/Components/Print.css" rel="stylesheet" type="text/css" data-mc-generated="True"/>
    <link href="../../Skins/Fluid/Stylesheets/foundation.6.2.3.css" rel="stylesheet" type="text/css" data-mc-generated="True"/>
    <link href="../../Skins/Fluid/Stylesheets/Styles.css" rel="stylesheet" type="text/css" data-mc-generated="True"/>
    <link href="../../Skins/Fluid/Stylesheets/Tablet.css" rel="stylesheet" type="text/css" data-mc-generated="True"/>
    <link href="../../Skins/Fluid/Stylesheets/Mobile.css" rel="stylesheet" type="text/css" data-mc-generated="True"/>
    <link href="../../Skins/Fluid/Stylesheets/Print.css" rel="stylesheet" type="text/css" data-mc-generated="True"/>
    <link href="../../Resources/Stylesheets/MainStyles.min.css" rel="stylesheet" type="text/css"/>
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet"/>
    <style>@media screen and (min-width: 0\0)
{
	.feedback-button
	{
		margin-right: -40px;
		top: 50%;
		border-radius: 9px 9px 0px 0px;
	}

	#canvas
	{
		position: relative;
	}
}

@media print
{
	#plugin
	{
		overflow: visible !important;
	}
}

</style>
    <link href="../../Resources/Stylesheets/eda_styles.css" rel="stylesheet" type="text/css"/>
    <link href="https://fonts.googleapis.com/css?family=Open+Sans:400,600,300" rel="stylesheet" type="text/css"/>
    <style>/*&lt;meta /&gt;*/

.button.print-button
{
	-pie-background: linear-gradient(#ffffff, transparent);
}

.button.previous-topic-button
{
	-pie-background: linear-gradient(#ffffff, transparent);
}

.button.next-topic-button
{
	-pie-background: linear-gradient(#ffffff, transparent);
}

.needs-pie
{
	behavior: url('../../Resources/Scripts/PIE-no-motw.htc');
}

</style>
    <link rel="apple-touch-icon" sizes="180x180" href="../../Skins/Favicons/apple-touch-icon.png"/>
    <link rel="shortcut icon" href="../../Skins/Favicons/favicon-32x32.png"/>
    <link rel="icon" sizes="96x96" href="../../Skins/Favicons/favicon-96x96.png"/>
    <link rel="icon" sizes="32x32" href="../../Skins/Favicons/favicon-32x32.png"/>
    <link rel="icon" sizes="16x16" href="../../Skins/Favicons/favicon-16x16.png"/>
    <script src="../../Resources/Scripts/jquery.min.js" type="text/javascript">
        </script>
    <script src="../../Resources/Scripts/purify.min.js" type="text/javascript" defer="defer">
        </script>
    <script src="../../Resources/Scripts/require.min.js" type="text/javascript" defer="defer">
        </script>
    <script src="../../Resources/Scripts/require.config.js" type="text/javascript" defer="defer">
        </script>
    <script src="../../Resources/Scripts/foundation.6.2.3_custom.js" type="text/javascript" defer="defer">
        </script>
    <script src="../../Resources/Scripts/plugins.min.js" type="text/javascript" defer="defer">
        </script>
    <script src="../../Resources/Scripts/MadCapAll.js" type="text/javascript" defer="defer">
        </script>
    <script src="https://cmp.osano.com/AzZrhlTmT5f216Foa/84ba7dc4-a4e5-4b02-b120-977eb6f052d4/osano.js">
        </script>
    <script type="text/javascript">/*<![CDATA[*/(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
			new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
			j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
			'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
			})(window,document,'script','dataLayer','GTM-KLSDFH');
		/*]]>*/</script>
    <script type="text/javascript" src="../../Skins/Default/Scripts/TopicToolBar.js">
        </script>
  </head>
  <!-- Top Orange and Darkgrey header-->
  <!-- Div for EDA banner -->
  <div class="eda_banner">
    <p>Register Now for EDA Summit 2024 - Virtual Event <a href="https://edasummit.com/" target="_blank">Register for Free</a></p>
  </div>
  <!-- end Div for EDA banner -->
  <div class="top-nav">
    <div class="main_list">
      <ul class="top-navlinks">
        <li>
          <a href="https://solace.com/support/" target="_blank">Support</a>
        </li>
        <li>
          <a href="https://solace.com/contact/" target="_blank">Contact Us</a>
        </li>
      </ul>
    </div>
    <div class="container-fluid">
      <div class="src-li">
        <div id="srchWrapTwo">
          <form class="search" action="#">
            <div class="search-bar search-bar-container needs-pie">
              <input class="search-field needs-pie" type="search" aria-label="Search Field" placeholder="Search the docs"/>
              <div class="search-filter-wrapper">
                <span class="invisible-label" id="search-filters-label">Filter: </span>
                <div class="search-filter" aria-haspopup="true" aria-controls="sf-content" aria-expanded="false" aria-label="Search Filter" title="All Files" role="button" tabindex="0">
                                </div>
                <div class="search-filter-content" id="sf-content">
                  <ul>
                    <li>
                      <button class="mc-dropdown-item" aria-labelledby="search-filters-label filterSelectorLabel-00001">
                        <span id="filterSelectorLabel-00001">All Files</span>
                      </button>
                    </li>
                  </ul>
                </div>
              </div>
              <div class="search-submit-wrapper" dir="ltr">
                <div class="search-submit" title="Search" role="button" tabindex="0">
                  <span class="invisible-label">Submit Search</span>
                </div>
              </div>
            </div>
          </form>
        </div>
      </div>
      <span class="tool-tip" tooltip-position="left" tooltip="To search for CLI commands, events, or APIs, navigate to the related sections.">i</span>
      <!-- Sept. 28, 2022 - This is being moved to under div class= top-nav
			<div class="main_list">
				<ul class="top-navlinks">
					<li><a href="https://solace.com/support/" target="_blank">Support</a></li>
					<li><a href="https://solace.com/contact/" target="_blank">Contact Us</a></li>
				</ul>
			</div> -->
    </div>
    <!-- Sept. 27, 2022 - The commented out content below used to provide the products, company, etc., links in the top header, next to the search field. -->
    <!-- <div class="main_list"><ul class="top-navlinks"><li><a href="https://solace.com/products/" target="_blank">Products</a></li><li><a href="https://solace.com/company/" target="_blank">Company</a></li><li><a href="https://www.solace.dev/" target="_blank">Developers</a></li><li><a href="https://solace.com/support/" target="_blank">Support</a></li><li><a href="https://solace.com/contact/" target="_blank">Contact Us</a></li></ul></div> -->
  </div>
  <body>
    <div class="foundation-wrap off-canvas-wrapper">
      <div class="off-canvas-wrapper-inner" data-off-canvas-wrapper="">
        <aside class="off-canvas position-right" role="navigation" id="offCanvas" data-off-canvas="" data-position="right" data-mc-ignore="true">
          <ul class="off-canvas-accordion vertical menu off-canvas-list" data-accordion-menu="" data-mc-back-link="Back" data-mc-css-tree-node-expanded="is-accordion-submenu-parent" data-mc-css-tree-node-collapsed="is-accordion-submenu-parent" data-mc-css-sub-menu="vertical menu is-accordion-submenu nested" data-mc-include-indicator="False" data-mc-include-icon="False" data-mc-include-parent-link="True" data-mc-include-back="False" data-mc-defer-expand-event="True" data-mc-expand-event="click.zf.accordionMenu" data-mc-toc="True">
                    </ul>
        </aside>
        <div class="off-canvas-content inner-wrap" data-off-canvas-content="">
          <div data-sticky-container="" class="title-bar-container">
            <nav class="title-bar tab-bar sticky" role="banner" data-sticky="" data-options="marginTop:0" style="width:100%" data-sticky-on="only screen and (max-width: 1000px)" data-mc-ignore="true">
              <a class="skip-to-content fluid-skip showOnFocus" href="#">Skip To Main Content</a>
              <div class="middle title-bar-section outer-row clearfix">
                <div class="menu-icon-container relative clearfix">
                  <div class="central-account-wrapper">
                    <div class="central-dropdown">
                      <a class="central-account-drop">
                        <span class="central-account-image"/>
                        <span class="central-account-text">Account</span>
                      </a>
                      <div class="central-dropdown-content">
                        <a class="MCCentralLink central-dropdown-content-settings">Settings</a>
                        <hr class="central-separator"/>
                        <a class="MCCentralLink central-dropdown-content-logout">Logout</a>
                      </div>
                    </div>
                  </div>
                  <button class="menu-icon" aria-label="Show Navigation Panel" data-toggle="offCanvas">
                    <span/>
                  </button>
                </div>
              </div>
              <div class="title-bar-layout outer-row">
                <div class="logo-wrapper">
                  <a class="logo" href="../../index.html" alt="Logo"/>
                </div>
                <div class="navigation-wrapper nocontent">
                  <ul class="navigation clearfix" role="navigation" data-mc-css-tree-node-has-children="has-children" data-mc-css-sub-menu="sub-menu" data-mc-expand-event="mouseenter" data-mc-top-nav-menu="True" data-mc-max-depth="3" data-mc-include-icon="False" data-mc-include-indicator="False" data-mc-include-children="True" data-mc-include-siblings="True" data-mc-include-parent="True" data-mc-toc="True">
                    <li class="placeholder" style="visibility:hidden">
                      <a>placeholder</a>
                    </li>
                  </ul>
                </div>
                <div class="central-account-wrapper">
                  <div class="central-dropdown">
                    <a class="central-account-drop">
                      <span class="central-account-image"/>
                      <span class="central-account-text">Account</span>
                    </a>
                    <div class="central-dropdown-content">
                      <a class="MCCentralLink central-dropdown-content-settings">Settings</a>
                      <hr class="central-separator"/>
                      <a class="MCCentralLink central-dropdown-content-logout">Logout</a>
                    </div>
                  </div>
                </div>
                <div class="nav-search-wrapper">
                  <div class="nav-search row">
                    <form class="search" action="#">
                      <div class="search-bar search-bar-container needs-pie">
                        <input class="search-field needs-pie" type="search" aria-label="Search Field" placeholder="Search the docs"/>
                        <div class="search-filter-wrapper">
                          <span class="invisible-label" id="search-filters-label">Filter: </span>
                          <div class="search-filter" aria-haspopup="true" aria-controls="sf-content" aria-expanded="false" aria-label="Search Filter" title="All Files" role="button" tabindex="0">
                                                    </div>
                          <div class="search-filter-content" id="sf-content">
                            <ul>
                              <li>
                                <button class="mc-dropdown-item" aria-labelledby="search-filters-label filterSelectorLabel-00001">
                                  <span id="filterSelectorLabel-00001">All Files</span>
                                </button>
                              </li>
                            </ul>
                          </div>
                        </div>
                        <div class="search-submit-wrapper" dir="ltr">
                          <div class="search-submit" title="Search" role="button" tabindex="0">
                            <span class="invisible-label">Submit Search</span>
                          </div>
                        </div>
                      </div>
                    </form>
                  </div>
                </div>
              </div>
            </nav>
          </div>
          <div class="main-section">
            <div class="row outer-row sidenav-layout">
              <nav class="sidenav-wrapper">
                <div class="sidenav-container">
                  <ul class="off-canvas-accordion vertical menu sidenav" data-accordion-menu="" data-mc-css-tree-node-expanded="is-accordion-submenu-parent" data-mc-css-tree-node-collapsed="is-accordion-submenu-parent" data-mc-css-sub-menu="vertical menu accordion-menu is-accordion-submenu nested" data-mc-include-indicator="False" data-mc-include-icon="False" data-mc-include-parent-link="False" data-mc-include-back="False" data-mc-defer-expand-event="True" data-mc-expand-event="click.zf.accordionMenu" data-mc-toc="True" data-mc-side-nav-menu="True">
                                    </ul>
                </div>
              </nav>
              <div class="body-container">
                <div data-mc-content-body="True">
                  <div class="buttons popup-container clearfix topicToolbarProxy _Skins_TopicToolBar mc-component nocontent" style="mc-topic-toolbar-items: PreviousTopic Print NextTopic;">
                    <div class="button-group-container-left">
                      <button class="button needs-pie print-button" title="Print">
                        <div>
                          <div role="img" class="button-icon-wrapper" aria-label="Print">
                            <div class="button-icon"> </div>
                          </div>
                        </div>
                      </button>
                      <button class="button needs-pie previous-topic-button" title="Navigate previous topic" disabled="true">
                        <div>
                          <div role="img" class="button-icon-wrapper" aria-label="Navigate previous">
                            <div class="button-icon"> </div>
                          </div>
                        </div>
                      </button>
                      <button class="button needs-pie next-topic-button" title="Navigate next topic" disabled="true">
                        <div>
                          <div role="img" class="button-icon-wrapper" aria-label="Navigate next">
                            <div class="button-icon"> </div>
                          </div>
                        </div>
                      </button>
                    </div>
                  </div>
                  <!-- Google Tag Manager (noscript) -->
                  <noscript>
                    <iframe src="https://www.googletagmanager.com/ns.html?id=GTM-KLSDFH" height="0" width="0" style="display:none;visibility:hidden"/>
                  </noscript>
                  <!-- End Google Tag Manager (noscript) -->
                  <div id="content">
                    <div id="contentBody">
                      <div class="row collapse">
                        <div xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd" class="ContentRow">
                          <div>
                            <div xmlns="" class="nocontent">
                              <div class="MCBreadcrumbsBox_MCBreadcrumbsSelf_0 breadcrumbs" role="navigation" aria-label="Breadcrumbs" data-mc-breadcrumbs-divider=" / " data-mc-breadcrumbs-count="4" data-mc-toc="True">
                                <span class="MCBreadcrumbsPrefix"> </span>
                              </div>
                            </div>
                            <div xmlns="" role="main" id="mc-main-content">
                              <h1 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><a name="Consuming-Persistent-Messages-Java-API"/>Consuming Persistent Messages Using the Java API </h1>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Receiver applications that cannot tolerate message loss can use persistent messaging (referred to as  <i>guaranteed messages</i> in other parts of this documentation) instead of direct messaging. When persistent messaging is used, messages are stored on a queue on the event broker. Messages are not deleted from the event broker until the message has been consumed and acknowledged by the subscribing application (referred to as a message receiver). The <span class="mc-variable Product-Names.pubsub_brand_only variable">PubSub+</span> Java API can only consume persistent messages from queues and not from topic endpoints.</p>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">To consume persistent messages, you must first set up a message queue on the  event broker. For information about creating and configuring durable queues on an event broker, see <a href="../../Messaging/Guaranteed-Msg/Configuring-Queues.htm" class="MCXref xref">Configuring Queues</a>. Alternatively, a non-durable queue can be created when a persistent message receiver (<code>PersistentMessageReceiver</code>) is created.&#xA0;</p>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">To use a persistent message receiver to consume persistent messages, use the following steps:</p>
                              <ol xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                <li value="1"><a href="#Creating-A-PersistentMessageReceiver-Object" class="link-internal">Create a PersistentMessageReceiver object</a>.</li>
                                <li value="2"><a href="#Receiving-Persistent-Synchronously" class="link-internal">Receive a Persistent Message Synchronously</a>.</li>
                                <li value="3"><a href="#Receiving-Persistent-Asynchronously" class="link-internal">Receive a Persistent Message Asynchronously</a>.</li>
                                <li value="4"><a href="#Extract-Message-Props" class="link-internal">Extract Properties from an Inbound Message</a>.</li>
                                <li value="5"><a href="#Message-Acknowledgments-Error-Handling" class="link-internal">Message Acknowledgments</a>.</li>
                                <li value="6">
                                  <a href="#Negative-Acknowledgments-NACKs" class="link-internal">Negative Acknowledgments (NACKs)</a>
                                </li>
                                <li value="7"><a href="Java-API-Create-Queues.htm" class="link-internal">Create a Queue with the Java API</a>.</li>
                                <li value="8"><a href="Java-API-Browse-Queues.htm" class="link-internal">Browse a Queue with the Java API</a>.</li>
                              </ol>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd" class="Note">Back-pressure can occur if your consumer  application experiences a situation where it is unable to process messages as fast as it receives them from the event broker. Messages continue to be buffered internally until a high watermark is reached, at which point the API tells the event broker to stop sending messages to prevent message loss.</p>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">To see a sample application that subscribes to persistent messages from a queue, see the <span class="mc-variable Variables.CompanyName variable">Solace</span> Developer Hub.</p>
                              <h2 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd" class="with-rule"><a name="Creating-A-PersistentMessageReceiver-Object"/>Creating a PersistentMessageReceiver Object </h2>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">After you have established a connection to the event broker using a <code>MessagingService</code> object, you use a   <code>PersistentMessageReceiver</code> object to consume persistent messages from a queue on the event broker. To enable your <code>PersistentMessageReceiver</code> to start receiving messages, call <code>start()</code> on it.</p>
                              <div xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd" class="Note">
                                <p>Ensure that the queue properties you specify with the Java API&#xA0;correspond to the those configured on the event broker. For more information, see: </p>
                                <ul>
                                  <li>
                                    <a href="https://solace.com/blog/solace-endpoints-durable-vs-non-durable/" class="link-offsite">Durable vs Non-Durable</a>
                                  </li>
                                  <li>
                                    <a href="https://solace.com/blog/solace-message-queue-access-types/" class="link-offsite">Message Queue Access Types</a>
                                  </li>
                                </ul>
                              </div>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">The following are objects and methods you use to configure how persistent messages are consumed from an event broker:

</p>
                              <ul xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                <li style="font-size: 11pt;">
                                  <code>PersistentMessageReceiverBuilder</code>
                                </li>
                                <ul>
                                  <li>
                                    <code>createPersistentMessageReceiverBuilder()</code>
                                  </li>
                                </ul>
                                <ul>
                                  <li>
                                    <code>withMissingResourcesCreationStrategy(MissingResourcesCreationConfiguration.MissingResourcesCreationStrategy strategy)</code>
                                  </li>
                                </ul>
                                <ul>
                                  <li>
                                    <code>build(Queue endpointToConsumeFrom)</code>
                                  </li>
                                </ul>
                                <li style="font-size: 11pt;">
                                  <code>PersistentMessageReceiver</code>
                                </li>
                                <ul>
                                  <li>
                                    <code>start()</code>
                                  </li>
                                </ul>
                                <li>
                                  <code>Queue</code>
                                </li>
                                <ul>
                                  <li>
                                    <code>durableExclusiveQueue(String queueName)</code>
                                  </li>
                                </ul>
                                <ul>
                                  <li>
                                    <code>durableNonExclusiveQueue(String queueName)</code>
                                  </li>
                                </ul>
                                <ul>
                                  <li>
                                    <code>nonDurableExclusiveQueue()</code>
                                  </li>
                                </ul>
                                <ul>
                                  <li>
                                    <code>nonDurableExclusiveQueue(String queueName)</code>
                                  </li>
                                </ul>
                              </ul>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">For more information about the preceding methods and interfaces, see the <a href="../../API-Developer-Online-Ref-Documentation/pubsubplus-java/index.html" class="link-internal"><span class="mc-variable Product-Names.pubsub_brand_only variable">PubSub+</span> Messaging API for Java reference</a>.</p>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">The following is an example how to use a <code>PersistentMessageReceiver</code> object to bind to a queue:</p>
                              <pre xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd" xml:space="preserve">
/* Creates an instance of PersistentMessageReceiverBuilder, which is used to create PersistentMessageReceiver objects. */        
final PersistentMessageReceiver receiver = service.createPersistentMessageReceiverBuilder()
    .build(Queue.durableExclusiveQueue(QUEUE_NAME))      // Creates a PersistentMessageReceiver object.
    .start();                                     // Causes the service to resume regular duties. Before this method is called, the service is considered off-duty.</pre>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd" class="Note">You can use the Java API to create durable and non-durable queues on the event broker. For more information see <a href="Java-API-Create-Queues.htm#Creating" class="MCXref xref">Creating Queues with the Java API</a>. </p>
                              <h3 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Asynchronous Receivers </h3>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">It is also possible to start a persistent message receiver using a callback listener to allow for asynchronous notifications after the start operation is complete.</p>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">The following example shows you how to invoke <code>CompletionListener</code>, which is a callback method for listening for the results of a future computation. This handler also notifies the application when the start operation is complete. </p>
                              <pre xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd" xml:space="preserve">final CompletionListener&lt;PersistentMessageReceiver&gt; receiverStartupListener = (receiver, throwable) -&gt; {
    if (throwable == null) {
    // Started successfully, can receive messages.
    } else {
    // Deal with an exception during start.
    }
};
receiverToBeStarted.startAsync(receiverStartupListener);    </pre>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd" class="Note"> Your receiver application is not operational until you call <code>start()</code> or <code>startAsync()</code> on it</p>
                              <h2 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd" class="with-rule"><a name="Receiving-Persistent-Synchronously"/>Consuming a Persistent Message Synchronously</h2>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">You can consume persistent messages synchronously. To do this, you create a  <code>PersistentMessageReceiver</code> object and bind it to a queue. After successfully binding to the queue, your object can begin to consume persistent messages using the <code>receiveMessage()</code> method. This method blocks the thread until the next message has been received. </p>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">When an application processes an <code>InboundMessage</code>, it can then send an acknowledgment to the event broker with <code>PersistentMessageReceiver.ack()</code>. The event broker will then remove the <code>InboundMessage</code> from the queue. Until a message is acknowledged it remains on the broker queue and may be redelivered when the application reconnects to the queue.</p>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">For more information about the preceding methods, see the <a href="../../API-Developer-Online-Ref-Documentation/pubsubplus-java/index.html" class="link-internal"><a href="../../API-Developer-Online-Ref-Documentation/pubsubplus-java/index.html" class="link-internal"><span class="mc-variable Product-Names.pubsub_brand_only variable">PubSub+</span> Messaging API for Java reference</a>.</a></p>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">The following example shows you how to consume persistent messages synchronously:</p>
                              <pre xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd" xml:space="preserve">/* Creates an instance of PersistentMessageReceiverBuilder, which is used to create PersistentMessageReceiver objects. */
final PersistentMessageReceiver receiver = service.createPersistentMessageReceiverBuilder()
    .build(queueToConsumeFrom)     // Creates a PersistentMessageReceiver object.
    .start();                      // Causes the service to resume regular duties. Before this method is called, the service is considered off-duty.

final InboundMessage message = receiver.receiveMessage();    // Blocking request to receive the next message.
                                                 // Can ack any time later as long as terminate() has not been called on receiver.
receiver.ack(message);                           // Acknowledges the inbound message.</pre>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd" class="Warning">If you do not call the <code>receiveMessage()</code> method, messages can accumulate on the API's internal buffer and you risk running into a back-pressure scenarios. If this occurs, the Java API automatically informs the event broker to stop sending messages. </p>
                              <h2 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd" class="with-rule"><a name="Receiving-Persistent-Asynchronously"/>Consuming a Persistent Message Asynchronously</h2>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">You can consume persistent messages in an asynchronous manner. To do so, you create a <code>PersistentMessageReceiver</code> object and start the connection to the event broker as normal, but you use a  <code>MessageHandler</code> object to act as a callback method to notify your application when a message has been received. </p>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">The following example shows you how to consume persistent messages asynchronously:</p>
                              <pre xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd" xml:space="preserve">
/* Creates an instance of PersistentMessageReceiverBuilder, which is used to create PersistentMessageReceiver objects. */
final PersistentMessageReceiver receiver = service.createPersistentMessageReceiverBuilder()
    .build(queueToConsumeFrom)     // Creates an instance of PersistentMessageReceiver.
    .start();               // Causes the service to resume regular duties. Before this method is called, the service is considered off-duty.

final MessageHandler messageHandler = (message) -&gt; {           // Interface for the listener of message handlers for inbound messages.
if (message != null &amp;&amp; message.getPayloadAsBytes() != null) {  // Do something with my message, for example check if it is not null or invalid.
    receiver.ack(message);                                     // Acknowledges the inbound message.
    }
};
receiver.receiveAsync(messageHandler);                   // Request to register an asynchronous message handler.</pre>
                              <h3 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
            Pausing and Resuming Message Consumption
from Internal Buffers </h3>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">When your application consumes messages asynchronously using the <code>receiveAsync()</code> method, you can call the <code>pause()</code> and <code>resume()</code> methods to control the flow of messages to your application's callback</p>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd" class="Note">The <code>pause()</code> and <code>resume()</code> methods have no effect if you use <code>receiveMessage()</code>. </p>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">You can use the <code>pause()</code> and <code>resume()</code> methods to control the flow of messages between the API's internal buffer  and your application. This internal buffer is where messages are received from the event broker. This flow control is useful if your application must momentarily stop processing messages to handle other operations. The <code>pause()</code> and <code>resume()</code> methods do not control the flow of messages between the event broker and the internal buffer of the API. When you call the <code>pause()</code>method, messages continue to be sent from the event broker. The <code>pause()</code> and <code>resume()</code> methods control the message delivery only to the application. Messages received from the event broker continue to accumulate in the internal buffer.</p>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Since the event broker continues to send messages, a back-pressure scenario may occur&#x2013;that is, messages  continue to accumulate until an internal high watermark is reached. At this  point, the <code>PersistentMessageReceiver</code> object notifies the event broker to stop sending messages until the number of accumulated messages falls below the internal high watermark. This internal API mechanism handles back-pressure scenarios for you and ensures that no messages are lost between the event broker and your application.</p>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">The following object and methods are used to pause and resume processing of messages from the API's internal buffer:</p>
                              <ul xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                <li>
                                  <code>ReceiverFlowControl</code>
                                </li>
                                <ul>
                                  <li>
                                    <code>pause()</code>
                                  </li>
                                </ul>
                                <ul>
                                  <li>
                                    <code>resume()</code>
                                  </li>
                                </ul>
                              </ul>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">For more information about the preceding methods, see the <a href="../../API-Developer-Online-Ref-Documentation/pubsubplus-java/index.html" class="link-internal"><a href="../../API-Developer-Online-Ref-Documentation/pubsubplus-java/index.html" class="link-internal"><span class="mc-variable Product-Names.pubsub_brand_only variable">PubSub+</span> Messaging API for Java reference</a>.</a> </p>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">The following  example shows how to pause and resume processing of messages from the internal queue in the API using the scheduler:</p>
                              <pre xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd" xml:space="preserve">
ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(2);
scheduler.schedule(() -&gt; receiver.pause(), 10L, TimeUnit.SECONDS);      // Pause message delivery in 10 seconds.
scheduler.schedule(() -&gt; receiver.resume(), 20L, TimeUnit.SECONDS);    // Resume message delivery in 20 seconds.</pre>
                              <h2 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd" class="with-rule"><a name="Extract-Message-Props"/>Extracting Properties from an Inbound Message</h2>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">After you establish a connection to the event broker, you can subscribe to messages using the <span class="mc-variable Product-Names.pubsub_brand_only variable">PubSub+</span> Java API. As part of the API, it implicitly creates the inbound messages on matching delivery.


After your application receives an <code>InboundMessage</code> object, you can extract a number of properties from that message, such as the message payload (as bytes or a string), sender ID and class of service. The following example shows how to extract properties from a message:</p>
                              <pre xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd" xml:space="preserve">
/* Using a messageHandler */
final MessageHandler messageHandler = (inboundMessage) -&gt; {           
    byte[] bytes = inboundMessage.getPayloadAsBytes();      // Gets the raw payload of the message as a byte array.		
    String senderID = indboundMessage.getSenderId();        // Returns the Sender's ID.
    int serviceClass = inboundMessage.getClassOfService();  // Retrieves the Class of Service level of a given message.
    receiver.ack(inboundMessage);       
};
receiver.receiveAsync(messageHandler);                  
			
/* using the receiveMessage() method*/
final InboundMessage inboundMessage= receiver.receiveMessage();    
String msgPayload = inboundMessage.getPayloadAsString();  // Gets the payload as a UTF-8 decoded as a String.		
String senderID = indboundMessage.getSenderId();          // Returns the Sender's ID.
int serviceClass = inboundMessage.getClassOfService();    // Retrieves the Class of Service level of a given message.	
receiver.ack(inboundMessage);		     		</pre>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">For a complete list of methods that you can use to extract properties from an <code>InboundMessage</code>, see the <a href="../../API-Developer-Online-Ref-Documentation/pubsubplus-java/index.html" class="link-internal"><a href="../../API-Developer-Online-Ref-Documentation/pubsubplus-java/index.html" class="link-internal"><span class="mc-variable Product-Names.pubsub_brand_only variable">PubSub+</span> Messaging API for Java reference</a>.</a></p>
                              <h2 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd" class="with-rule"><a name="Message-Acknowledgments-Error-Handling"/>Message Acknowledgments</h2>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">One of the two following application acknowledgment modes can be used for acknowledging a message:</p>
                              <ul xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                <li>
                                  <p>Auto-acknowledgment</p>
                                </li>
                                <li>
                                  <p>Client acknowledgment (default)</p>
                                </li>
                              </ul>
                              <h3 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Auto-Acknowledgment Mode</h3>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">When the auto-acknowledgment mode is used, the API automatically generates application-level acknowledgments. To configure your <code>PersistentMessageReceiver</code> to use auto-acknowledgments, you use the <code>withMessageAutoAcknowledgement()</code> method:</p>
                              <pre xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd" xml:space="preserve">
final PersistentMessageReceiver receiver = messagingService
        .createPersistentMessageReceiverBuilder()
        .<b>withMessageAutoAcknowledgement()</b>
        .build(Queue.durableExclusiveQueue(QUEUE_NAME));  </pre>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">For the <span class="mc-variable Product-Names.pubsub_brand_only variable">PubSub+</span> Java API, acknowledgments are sent at different times depending on whether the message is received asynchronously or synchronously:</p>
                              <ul xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                <li>
                                  <p>when received asynchronously, the acknowledgment is sent after the message callback completes with no exceptions.</p>
                                </li>
                                <li>
                                  <p>when received synchronously, the acknowledgment is sent after the message is removed from the API's internal queue during the <code>receiveMessage()</code> method. It's important to realize that the acknowledgment has been sent before control is returned to the application (that is after the <code>receiveMessage()</code> method completes).</p>
                                </li>
                              </ul>
                              <h3 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Client-Acknowledgment Mode</h3>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Client acknowledgment mode is the default behavior of the <span class="mc-variable Product-Names.pubsub_brand_only variable">PubSub+</span> Java API and means the client must explicitly send an acknowledgment for the message ID of each message received. Acknowledgments are asynchronous.  Any thread can  acknowledge messages at any time as long as  the receiver has not been terminated. It is important to remember that after a <code>PersistentMessageReceiver</code> object has acknowledged a message from the event broker, it  deletes that message from the queue on the event broker. For this reason it's important to perform any processing and storage of the message <b>before</b> you acknowledge it. </p>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">The following example  shows how to acknowledge a persistent message synchronously and asynchronously:</p>
                              <pre xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd" xml:space="preserve">
/* Blocking request to receive a message.  */
final InboundMessage message = receiver.receiveMessage();
// auto-acked by now.

/* Request to register an async message handler. */            
receiver.receiveAsync(message -&gt; {  // Asynchronous receiver message callback.
// Processing/storing of message happens here.
}); 
// auto-ack happens when the message processing callback method finishes without an error.           </pre>
                              <h2 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd" class="with-rule"><a name="Negative-Acknowledgments-NACKs"/>Negative Acknowledgments for Specific Messages</h2>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">You can use negative acknowledgments (Nacks) if you have configured your applications for client acknowledgments. When you use Nacks, you can send a settlement outcome to let the event broker know the result from processing a guaranteed message that was received. Based on the settlement outcome, the event broker knows how to handle the message on its queue. You can use the following are the settlement outcomes:</p>
                              <ul xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                <li> ACCEPTED&#x2014;This Ack notifies the event broker that your client application successfully processed the guaranteed message. When the event broker receives this outcome it removes the message from its queue.<ul><li>When you call the <code>settle()</code> method with an outcome of ACCEPTED, it is the same as using <code>persistentReceiver.ack(message)</code>.</li></ul></li>
                                <li>FAILED&#x2014;This Nack notifies the event broker that your client application did not process the message. When the event broker receives this Nack it attempts to redeliver the message while adhering to delivery count limits. </li>
                                <li>REJECTED&#x2014;This Nack notifies the event broker that your client application could process the message but it was not accepted (for example, failed validation). When the event broker receives this Nack it removes the message from its queue and then moves the message to the Dead Message Queue (DMQ) if it is configured.</li>
                              </ul>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Before you can use Nacks, you must use the <code>withRequiredMessageClientOutcomeOperationSupport()</code> method to add the <code>Outcome.FAILED</code>, <code>Outcome.REJECTED</code>,&#xA0;or both outcomes as Nack&#xA0;types when you create your <code>PersistentMessageReceiver</code> to prepare it to work with negative acknowledgments. You do not need to add the <code>Outcome.ACCEPTED</code>&#xA0;outcome because it is always available.  If you try to use an outcome that has not been added, you get an error of <code>Required Settlement Outcome Not Supported</code>. The following code shows how to configure a <code>PersistentMessageReceiver</code> to use NACKs:</p>
                              <pre xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd" xml:space="preserve">
import com.solace.messaging.config.MessageAcknowledgementConfiguration.Outcome;
// ...
final PersistentMessageReceiver persistentReceiver = messagingService
        .createPersistentMessageReceiverBuilder()
        <b>.withRequiredMessageClientOutcomeOperationSupport(
                new Outcome[]{Outcome.ACCEPTED, Outcome.FAILED, Outcome.REJECTED})</b>
        .build(Queue.durableExclusiveQueue(QUEUE_NAME)); </pre>
                              <div xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd" class="Note">
                                <ul>
                                  <li>Nacks  can be lost during transit (for example due to unexpected networking issues). Consider this fact as part of the logic for handling messages when you develop your application.</li>
                                  <li>Nacks are supported on event brokers 10.2.1 and later. If an event broker does not support  Nacks, an <code>InvalidOperationException</code> occurs during the Flow bind request when an outcome is specified.</li>
                                </ul>
                              </div>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">The following example  shows how to settle an accepted message, which is the same as using <code>persistentReceiver.ack(message)</code> :</p>
                              <pre xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd" xml:space="preserve">
persistentReceiver.receiveAsync(message -&gt; {  // Asynchronous receiver message callback.
// Processing/storing of message happens here.
persistentReceiver.settle(message, Outcome.ACCEPTED); 
});            </pre>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">The following example  shows how to settle a rejected message, for example your application cannot currently process the message:</p>
                              <pre xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd" xml:space="preserve">
persistentReceiver.receiveAsync(message -&gt; {  // Asynchronous receiver message callback.
// Message processed but not accepted, send a NACK to the broker
persistentReceiver.settle(message, Outcome.REJECTED); 
});            </pre>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">The following example show how to settle a failed message when there is a problem with the message content:</p>
                              <pre xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd" xml:space="preserve">
persistentReceiver.receiveAsync(message -&gt; {  // Asynchronous receiver message callback.
// Failed to process message, send a NACK to the broker 
persistentReceiver.settle(message, Outcome.FAILED); 
});            </pre>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                    <div class="no-print">
                      <div>
                        <a href="#" id="docsFeedbackTrigger" class="docs-issue-collector">Provide feedback</a>
                      </div>
                    </div>
                    <footer class="my-4 pt-4 text-center no-print">
                      <div class="footer-txt text-center no-print">
                        <ul class="list-inline ">
                          <li class="list-inline-item text-muted"><a href="../../Resources/Documentation-Set.htm" class="doc-set-footer-link MCXref xref xrefdoc-set-footer-link">Documentation Coverage</a>: <span class="mc-variable Variables.DocumentSetNumber variable">2024.09.16.0001</span></li>
                          <li class="list-inline-item text-muted">Last Updated: <span class="mc-variable Variables.MonthDayYear variable">September 16, 2024</span></li>
                          <li class="list-inline-item text-muted" style="font-size:13px;"> &#xA9;  <span class="mc-variable Variables.CompanyNameLegal variable">Solace Corporation</span></li>
                        </ul>
                      </div>
                      <div class="footer-icons">
                        <ul class="list-inline">
                          <li class="list-inline-item">
                            <a href="https://facebook.com/solacedotcom" target="_blank" class="social-media-icon">
                              <img src="../../Resources/Images/Social-Media/facebook_22x21.png" class="Hyperlinked" alt="Facebook" title="Solace Facebook Page" style="width: 22;height: 21;"/>
                            </a>
                          </li>
                          <li class="list-inline-item">
                            <a href="https://www.linkedin.com/company/20219" target="_blank" class="social-media-icon">
                              <img src="../../Resources/Images/Social-Media/LinkedIn_22x21.png" class="Hyperlinked" alt="LinkedIn" title="Solace LinkedIn Page" style="width: 22;height: 21;"/>
                            </a>
                          </li>
                          <li class="list-inline-item">
                            <a href="https://twitter.com/solacedotcom" target="_blank" class="social-media-icon">
                              <img src="../../Resources/Images/Social-Media/Twitter_22x21.png" class="Hyperlinked" alt="Twitter" title="Solace Twitter Feed" style="width: 22;height: 21;"/>
                            </a>
                          </li>
                          <li class="list-inline-item">
                            <a href="https://www.youtube.com/user/SolaceSystems" target="_blank" class="social-media-icon">
                              <img src="../../Resources/Images/Social-Media/youtube_22x21.png" class="Hyperlinked" alt="YouTube" title="Solace YouTube Channel" style="width: 22;height: 21;"/>
                            </a>
                          </li>
                          <li class="list-inline-item">
                            <a href="https://www.instagram.com/solacedotcom/" target="_blank" class="social-media-icon">
                              <img src="../../Resources/Images/Social-Media/instagram_22x21.png" class="Hyperlinked" alt="Instagram" title="Solace Instagram Feed" style="width: 22;height: 21;"/>
                            </a>
                          </li>
                          <li class="list-inline-item">
                            <a href="https://medium.com/solacedotcom" target="_blank" class="social-media-icon">
                              <img src="../../Resources/Images/Social-Media/medium_22x21.png" class="Hyperlinked" alt="Medium" title="Solace Medium Blog" style="width: 22;height: 21;"/>
                            </a>
                          </li>
                        </ul>
                      </div>
                      <div class="footer_link_menu">
                        <ul class="link_list">
                          <li class="link_list_item">
                            <a href="https://solace.com/products/" target="_blank" class="footer-link">Products</a>
                          </li>
                          <li class="link_list_item">
                            <a href="https://solace.com/company/" target="_blank" class="footer-link">Company</a>
                          </li>
                          <li class="link_list_item">
                            <a href="https://www.solace.dev/" target="_blank" class="footer-link">Developers</a>
                          </li>
                          <li class="link_list_item">
                            <a href="https://solace.com/support/" target="_blank" class="footer-link">Support</a>
                          </li>
                          <li class="link_list_item">
                            <a href="https://solace.com/contact/" target="_blank" class="footer-link">Contact Us</a>
                          </li>
                        </ul>
                      </div>
                    </footer>
                  </div>
                  <!-- JIRA issue collector -->
                  <script>/*<![CDATA[*/// Requires jQuery!
jQuery.ajax({
    url: "https://sol-jira.atlassian.net/s/d41d8cd98f00b204e9800998ecf8427e-T/o2joag/b/24/e73395c53c3b10fde2303f4bf74ffbf6/_/download/batch/com.atlassian.jira.collector.plugin.jira-issue-collector-plugin:issuecollector-embededjs/com.atlassian.jira.collector.plugin.jira-issue-collector-plugin:issuecollector-embededjs.js?locale=en-US&collectorId=076e0808",
    type: "get",
    cache: true,
    dataType: "script"
});
window.ATL_JQ_PAGE_PROPS = {
"triggerFunction": function(showCollectorDialog) {
//Requires that jQuery is available!
$("#docsFeedbackTrigger").click(function(e) {
e.preventDefault();
showCollectorDialog();
});
},
fieldValues: {
recordWebInfo: '1', // field Name
recordWebInfoConsent: ['1'] // field Id
}
};
/*]]>*/</script>
                  <script src="../../Resources/Scripts/thumbnail.js">
                                    </script>
                  <!-- Script for Launching offsite links in new tab -->
                  <script type="text/javascript">/*<![CDATA[*/$("a[href^='http']").attr("target","_blank");/*]]>*/</script>
                </div>
              </div>
            </div>
          </div>
          <a data-close="true"/>
        </div>
      </div>
    </div>
  </body>
</html>
