<?xml version="1.0"?>
<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-us" xml:lang="en-us" class="_Skins_HTML5___Side_Navigation" data-mc-search-type="Stem" data-mc-help-system-file-name="Default.xml" data-mc-path-to-help-system="../../" data-mc-has-content-body="True" data-mc-toc-path="[%=System.LinkedTitle%]|[%=System.LinkedTitle%]|Developer Guide for Solace JMS API" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic;Default" data-mc-preload-images="false" data-mc-in-preview-mode="false">
  <head>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
    <meta name="msapplication-config" content="../../Skins/Favicons/browserconfig.xml"/>
    <meta name="viewport" content="width=device-width, initial-scale=1"/>
    <link rel="apple-touch-icon" sizes="180x180" href="../../Skins/Favicons/apple-touch-icon.png"/>
    <link rel="shortcut icon" href="../../Skins/Favicons/favicon-32x32.png"/>
    <link rel="icon" sizes="96x96" href="../../Skins/Favicons/favicon-96x96.png"/>
    <link rel="icon" sizes="32x32" href="../../Skins/Favicons/favicon-32x32.png"/>
    <link rel="icon" sizes="16x16" href="../../Skins/Favicons/favicon-16x16.png"/>
    <meta charset="utf-8"/>
    <meta http-equiv="Cache-control" content="no-cache"/>
    <meta http-equiv="X-UA-Compatible" content="IE=edge"/>
    <title>Creating JMS&#x2011;Compatible Messages With Other APIs</title>
    <!-- <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous" /> -->
    <!--style to display feedback button correctly in IE-->
    <!-- Google Tag Manager -->
    <!-- End Google Tag Manager -->
    <!-- links to get the EDA styling to work -->
    <link href="../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" type="text/css" data-mc-generated="True"/>
    <link href="../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" type="text/css" data-mc-generated="True"/>
    <link href="../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" type="text/css" data-mc-generated="True"/>
    <link href="../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" type="text/css" data-mc-generated="True"/>
    <link href="../../Skins/Default/Stylesheets/Components/Tablet.css" rel="stylesheet" type="text/css" data-mc-generated="True"/>
    <link href="../../Skins/Default/Stylesheets/Components/Mobile.css" rel="stylesheet" type="text/css" data-mc-generated="True"/>
    <link href="../../Skins/Default/Stylesheets/Components/Print.css" rel="stylesheet" type="text/css" data-mc-generated="True"/>
    <link href="../../Skins/Fluid/Stylesheets/foundation.6.2.3.css" rel="stylesheet" type="text/css" data-mc-generated="True"/>
    <link href="../../Skins/Fluid/Stylesheets/Styles.css" rel="stylesheet" type="text/css" data-mc-generated="True"/>
    <link href="../../Skins/Fluid/Stylesheets/Tablet.css" rel="stylesheet" type="text/css" data-mc-generated="True"/>
    <link href="../../Skins/Fluid/Stylesheets/Mobile.css" rel="stylesheet" type="text/css" data-mc-generated="True"/>
    <link href="../../Skins/Fluid/Stylesheets/Print.css" rel="stylesheet" type="text/css" data-mc-generated="True"/>
    <link href="../../Resources/Stylesheets/MainStyles.min.css" rel="stylesheet" type="text/css"/>
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet"/>
    <style>@media screen and (min-width: 0\0)
{
	.feedback-button
	{
		margin-right: -40px;
		top: 50%;
		border-radius: 9px 9px 0px 0px;
	}

	#canvas
	{
		position: relative;
	}
}

@media print
{
	#plugin
	{
		overflow: visible !important;
	}
}

</style>
    <link href="../../Resources/Stylesheets/eda_styles.css" rel="stylesheet" type="text/css"/>
    <link href="https://fonts.googleapis.com/css?family=Open+Sans:400,600,300" rel="stylesheet" type="text/css"/>
    <style>/*&lt;meta /&gt;*/

.button.print-button
{
	-pie-background: linear-gradient(#ffffff, transparent);
}

.button.previous-topic-button
{
	-pie-background: linear-gradient(#ffffff, transparent);
}

.button.next-topic-button
{
	-pie-background: linear-gradient(#ffffff, transparent);
}

.needs-pie
{
	behavior: url('../../Resources/Scripts/PIE-no-motw.htc');
}

</style>
    <link href="../../Resources/TableStyles/Table_Num.css" rel="stylesheet" data-mc-stylesheet-type="table"/>
    <link rel="apple-touch-icon" sizes="180x180" href="../../Skins/Favicons/apple-touch-icon.png"/>
    <link rel="shortcut icon" href="../../Skins/Favicons/favicon-32x32.png"/>
    <link rel="icon" sizes="96x96" href="../../Skins/Favicons/favicon-96x96.png"/>
    <link rel="icon" sizes="32x32" href="../../Skins/Favicons/favicon-32x32.png"/>
    <link rel="icon" sizes="16x16" href="../../Skins/Favicons/favicon-16x16.png"/>
    <script src="../../Resources/Scripts/jquery.min.js" type="text/javascript">
        </script>
    <script src="../../Resources/Scripts/purify.min.js" type="text/javascript" defer="defer">
        </script>
    <script src="../../Resources/Scripts/require.min.js" type="text/javascript" defer="defer">
        </script>
    <script src="../../Resources/Scripts/require.config.js" type="text/javascript" defer="defer">
        </script>
    <script src="../../Resources/Scripts/foundation.6.2.3_custom.js" type="text/javascript" defer="defer">
        </script>
    <script src="../../Resources/Scripts/plugins.min.js" type="text/javascript" defer="defer">
        </script>
    <script src="../../Resources/Scripts/MadCapAll.js" type="text/javascript" defer="defer">
        </script>
    <script src="https://cmp.osano.com/AzZrhlTmT5f216Foa/84ba7dc4-a4e5-4b02-b120-977eb6f052d4/osano.js">
        </script>
    <script type="text/javascript">/*<![CDATA[*/(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
			new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
			j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
			'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
			})(window,document,'script','dataLayer','GTM-KLSDFH');
		/*]]>*/</script>
    <script type="text/javascript" src="../../Skins/Default/Scripts/TopicToolBar.js">
        </script>
  </head>
  <!-- Top Orange and Darkgrey header-->
  <!-- Div for EDA banner -->
  <div class="eda_banner">
    <p>Register Now for EDA Summit 2024 - Virtual Event <a href="https://edasummit.com/" target="_blank">Register for Free</a></p>
  </div>
  <!-- end Div for EDA banner -->
  <div class="top-nav">
    <div class="main_list">
      <ul class="top-navlinks">
        <li>
          <a href="https://solace.com/support/" target="_blank">Support</a>
        </li>
        <li>
          <a href="https://solace.com/contact/" target="_blank">Contact Us</a>
        </li>
      </ul>
    </div>
    <div class="container-fluid">
      <div class="src-li">
        <div id="srchWrapTwo">
          <form class="search" action="#">
            <div class="search-bar search-bar-container needs-pie">
              <input class="search-field needs-pie" type="search" aria-label="Search Field" placeholder="Search the docs"/>
              <div class="search-filter-wrapper">
                <span class="invisible-label" id="search-filters-label">Filter: </span>
                <div class="search-filter" aria-haspopup="true" aria-controls="sf-content" aria-expanded="false" aria-label="Search Filter" title="All Files" role="button" tabindex="0">
                                </div>
                <div class="search-filter-content" id="sf-content">
                  <ul>
                    <li>
                      <button class="mc-dropdown-item" aria-labelledby="search-filters-label filterSelectorLabel-00001">
                        <span id="filterSelectorLabel-00001">All Files</span>
                      </button>
                    </li>
                  </ul>
                </div>
              </div>
              <div class="search-submit-wrapper" dir="ltr">
                <div class="search-submit" title="Search" role="button" tabindex="0">
                  <span class="invisible-label">Submit Search</span>
                </div>
              </div>
            </div>
          </form>
        </div>
      </div>
      <span class="tool-tip" tooltip-position="left" tooltip="To search for CLI commands, events, or APIs, navigate to the related sections.">i</span>
      <!-- Sept. 28, 2022 - This is being moved to under div class= top-nav
			<div class="main_list">
				<ul class="top-navlinks">
					<li><a href="https://solace.com/support/" target="_blank">Support</a></li>
					<li><a href="https://solace.com/contact/" target="_blank">Contact Us</a></li>
				</ul>
			</div> -->
    </div>
    <!-- Sept. 27, 2022 - The commented out content below used to provide the products, company, etc., links in the top header, next to the search field. -->
    <!-- <div class="main_list"><ul class="top-navlinks"><li><a href="https://solace.com/products/" target="_blank">Products</a></li><li><a href="https://solace.com/company/" target="_blank">Company</a></li><li><a href="https://www.solace.dev/" target="_blank">Developers</a></li><li><a href="https://solace.com/support/" target="_blank">Support</a></li><li><a href="https://solace.com/contact/" target="_blank">Contact Us</a></li></ul></div> -->
  </div>
  <body>
    <div class="foundation-wrap off-canvas-wrapper">
      <div class="off-canvas-wrapper-inner" data-off-canvas-wrapper="">
        <aside class="off-canvas position-right" role="navigation" id="offCanvas" data-off-canvas="" data-position="right" data-mc-ignore="true">
          <ul class="off-canvas-accordion vertical menu off-canvas-list" data-accordion-menu="" data-mc-back-link="Back" data-mc-css-tree-node-expanded="is-accordion-submenu-parent" data-mc-css-tree-node-collapsed="is-accordion-submenu-parent" data-mc-css-sub-menu="vertical menu is-accordion-submenu nested" data-mc-include-indicator="False" data-mc-include-icon="False" data-mc-include-parent-link="True" data-mc-include-back="False" data-mc-defer-expand-event="True" data-mc-expand-event="click.zf.accordionMenu" data-mc-toc="True">
                    </ul>
        </aside>
        <div class="off-canvas-content inner-wrap" data-off-canvas-content="">
          <div data-sticky-container="" class="title-bar-container">
            <nav class="title-bar tab-bar sticky" role="banner" data-sticky="" data-options="marginTop:0" style="width:100%" data-sticky-on="only screen and (max-width: 1000px)" data-mc-ignore="true">
              <a class="skip-to-content fluid-skip showOnFocus" href="#">Skip To Main Content</a>
              <div class="middle title-bar-section outer-row clearfix">
                <div class="menu-icon-container relative clearfix">
                  <div class="central-account-wrapper">
                    <div class="central-dropdown">
                      <a class="central-account-drop">
                        <span class="central-account-image"/>
                        <span class="central-account-text">Account</span>
                      </a>
                      <div class="central-dropdown-content">
                        <a class="MCCentralLink central-dropdown-content-settings">Settings</a>
                        <hr class="central-separator"/>
                        <a class="MCCentralLink central-dropdown-content-logout">Logout</a>
                      </div>
                    </div>
                  </div>
                  <button class="menu-icon" aria-label="Show Navigation Panel" data-toggle="offCanvas">
                    <span/>
                  </button>
                </div>
              </div>
              <div class="title-bar-layout outer-row">
                <div class="logo-wrapper">
                  <a class="logo" href="../../index.html" alt="Logo"/>
                </div>
                <div class="navigation-wrapper nocontent">
                  <ul class="navigation clearfix" role="navigation" data-mc-css-tree-node-has-children="has-children" data-mc-css-sub-menu="sub-menu" data-mc-expand-event="mouseenter" data-mc-top-nav-menu="True" data-mc-max-depth="3" data-mc-include-icon="False" data-mc-include-indicator="False" data-mc-include-children="True" data-mc-include-siblings="True" data-mc-include-parent="True" data-mc-toc="True">
                    <li class="placeholder" style="visibility:hidden">
                      <a>placeholder</a>
                    </li>
                  </ul>
                </div>
                <div class="central-account-wrapper">
                  <div class="central-dropdown">
                    <a class="central-account-drop">
                      <span class="central-account-image"/>
                      <span class="central-account-text">Account</span>
                    </a>
                    <div class="central-dropdown-content">
                      <a class="MCCentralLink central-dropdown-content-settings">Settings</a>
                      <hr class="central-separator"/>
                      <a class="MCCentralLink central-dropdown-content-logout">Logout</a>
                    </div>
                  </div>
                </div>
                <div class="nav-search-wrapper">
                  <div class="nav-search row">
                    <form class="search" action="#">
                      <div class="search-bar search-bar-container needs-pie">
                        <input class="search-field needs-pie" type="search" aria-label="Search Field" placeholder="Search the docs"/>
                        <div class="search-filter-wrapper">
                          <span class="invisible-label" id="search-filters-label">Filter: </span>
                          <div class="search-filter" aria-haspopup="true" aria-controls="sf-content" aria-expanded="false" aria-label="Search Filter" title="All Files" role="button" tabindex="0">
                                                    </div>
                          <div class="search-filter-content" id="sf-content">
                            <ul>
                              <li>
                                <button class="mc-dropdown-item" aria-labelledby="search-filters-label filterSelectorLabel-00001">
                                  <span id="filterSelectorLabel-00001">All Files</span>
                                </button>
                              </li>
                            </ul>
                          </div>
                        </div>
                        <div class="search-submit-wrapper" dir="ltr">
                          <div class="search-submit" title="Search" role="button" tabindex="0">
                            <span class="invisible-label">Submit Search</span>
                          </div>
                        </div>
                      </div>
                    </form>
                  </div>
                </div>
              </div>
            </nav>
          </div>
          <div class="main-section">
            <div class="row outer-row sidenav-layout">
              <nav class="sidenav-wrapper">
                <div class="sidenav-container">
                  <ul class="off-canvas-accordion vertical menu sidenav" data-accordion-menu="" data-mc-css-tree-node-expanded="is-accordion-submenu-parent" data-mc-css-tree-node-collapsed="is-accordion-submenu-parent" data-mc-css-sub-menu="vertical menu accordion-menu is-accordion-submenu nested" data-mc-include-indicator="False" data-mc-include-icon="False" data-mc-include-parent-link="False" data-mc-include-back="False" data-mc-defer-expand-event="True" data-mc-expand-event="click.zf.accordionMenu" data-mc-toc="True" data-mc-side-nav-menu="True">
                                    </ul>
                </div>
              </nav>
              <div class="body-container">
                <div data-mc-content-body="True">
                  <div class="buttons popup-container clearfix topicToolbarProxy _Skins_TopicToolBar mc-component nocontent" style="mc-topic-toolbar-items: PreviousTopic Print NextTopic;">
                    <div class="button-group-container-left">
                      <button class="button needs-pie print-button" title="Print">
                        <div>
                          <div role="img" class="button-icon-wrapper" aria-label="Print">
                            <div class="button-icon"> </div>
                          </div>
                        </div>
                      </button>
                      <button class="button needs-pie previous-topic-button" title="Navigate previous topic" disabled="true">
                        <div>
                          <div role="img" class="button-icon-wrapper" aria-label="Navigate previous">
                            <div class="button-icon"> </div>
                          </div>
                        </div>
                      </button>
                      <button class="button needs-pie next-topic-button" title="Navigate next topic" disabled="true">
                        <div>
                          <div role="img" class="button-icon-wrapper" aria-label="Navigate next">
                            <div class="button-icon"> </div>
                          </div>
                        </div>
                      </button>
                    </div>
                  </div>
                  <!-- Google Tag Manager (noscript) -->
                  <noscript>
                    <iframe src="https://www.googletagmanager.com/ns.html?id=GTM-KLSDFH" height="0" width="0" style="display:none;visibility:hidden"/>
                  </noscript>
                  <!-- End Google Tag Manager (noscript) -->
                  <div id="content">
                    <div id="contentBody">
                      <div class="row collapse">
                        <div xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd" class="ContentRow">
                          <div>
                            <div xmlns="" class="nocontent">
                              <div class="MCBreadcrumbsBox_MCBreadcrumbsSelf_0 breadcrumbs" role="navigation" aria-label="Breadcrumbs" data-mc-breadcrumbs-divider=" / " data-mc-breadcrumbs-count="4" data-mc-toc="True">
                                <span class="MCBreadcrumbsPrefix"> </span>
                              </div>
                            </div>
                            <div xmlns="" role="main" id="mc-main-content">
                              <h1 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Creating JMS&#x2011;Compatible Messages With Other APIs</h1>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">This section shows code samples of how non-JMS Solace messaging APIs can create and set data on messages so that the Solace JMS API can interpret those messages as one of the following standard message types:</p>
                              <ul xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                <li>
                                  <a href="#creating_jms-compatible_msgs_1946471526_329878" class="MCXref xref">BytesMessage</a>
                                </li>
                                <li>
                                  <a href="#creating_jms-compatible_msgs_1946471526_329687" class="MCXref xref">MapMessage</a>
                                </li>
                                <li>
                                  <a href="#creating_jms-compatible_msgs_1946471526_328289" class="MCXref xref">StreamMessage</a>
                                </li>
                                <li>
                                  <a href="#TextMess" class="MCXref xref">TextMessage</a>
                                </li>
                                <li>
                                  <a href="#creating_jms-compatible_msgs_1946471526_337481" class="MCXref xref">ObjectMessage</a>
                                </li>
                                <li>
                                  <a href="#creating_jms-compatible_msgs_1946471526_328316" class="MCXref xref">Non-Standard Messages
</a>
                                </li>
                              </ul>
                              <h2 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd" class="with-rule"><a name="creating_jms-compatible_msgs_1946471526_329878"/>BytesMessage</h2>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">The following examples show how to create and receive a BytesMessage using non-JMS Solace messaging APIs.</p>
                              <h4 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Java Messaging API</h4>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><b>Create</b>:</p>
                              <pre xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
BytesMessage message = JCSMPFactory.onlyInstance().createMessage(BytesMessage.class);
message.setData(new byte[] {0x01, 0x02});</pre>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><b>Receive</b>:</p>
                              <pre xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
FlowReceiver receiver = session.createFlow(endpoint, topic, null);
receiver.start();
BytesMessage message = (BytesMessage)receiver.receive();
byte[] data = message.getData();</pre>
                              <h4 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">C Messaging API</h4>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><b>Create</b>:</p>
                              <pre xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
solClient_opaqueMsg_pt msg_p = NULL;
char* data[2];  

// create a message
if (solClient_msg_alloc(&amp;msg_p) == SOLCLIENT_OK) 
{
   // copy the content of data to the binary attachment 
   if ( solClient_msg_setBinaryAttachment (msg_p,data,(solClient_uint32_t)2) == SOLCLIENT_OK)   
   {
       // at this point the message is ready to be sent 
   }
}</pre>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><b>Receive</b>:</p>
                              <pre xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
// binary attachment buffer pointer and size
void               *dataBuf_p;
solClient_uint32_t  dataBufSize;

// Assuming that msg_p is a reference to a received message
if (solClient_msg_getBinaryAttachmentPtr(msg_p, &amp;dataBuf_p, &amp;dataBufSize ) == SOLCLIENT_OK) 
{
    // at this point dataBuf_p and dataBufSize can be used to access or copy out
    // the binary attachment
}</pre>
                              <h4 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">.NET Messaging API</h4>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><b>Create</b>:</p>
                              <pre xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd" xml:space="preserve">
// create a message
IMessage message = ContextFactory.Instance.CreateMessage();
byte[] data = {0x01, 0x02};
message.BinaryAttachment = data;
// Set other message properties
// ...
// at this point the message is ready to be sent</pre>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><b>Receive</b>:</p>
                              <pre xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
// assuming that message is a reference to a received message
IMessage message = args.Message; /*args is a MessageEventArgs*/
if (SDTUtils.GetContainer(message) == null &amp;&amp; SDTUtils.GetText(message) == null) 
{
    // it is not a map, stream or text message
    Byte[] rxData = message.BinaryAttachment;
}
</pre>
                              <h4 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">JavaScript Messaging API</h4>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><b>Create</b>:</p>
                              <pre xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd" xml:space="preserve">
// the binary data
var data;

// create a message
var message = solace.SolclientFactory.createMessage();

// assuming that data the user added content to data
message.setBinaryAttachment(data);
// Set other message properties
// ...
// At this point the message is ready to be sent</pre>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><b>Receive</b>:</p>
                              <pre xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
// assuming that message is a reference to a received message
var message;
if (message.getType() == solace.MessageType.BINARY) 
{
   // rxData will be the JavaScript string representing the binary data
   var rxData = message.getBinaryAttachment();
}</pre>
                              <h2 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd" class="with-rule"><a name="creating_jms-compatible_msgs_1946471526_329687"/>MapMessage</h2>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">The following examples show how to create and receive a MapMessage using non-JMS Solace messaging APIs.</p>
                              <h4 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Java Messaging API</h4>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><b>Create</b>:</p>
                              <pre xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
MapMessage message = JCSMPFactory.onlyInstance().createMessage(MapMessage.class);
SDTMap map = JCSMPFactory.onlyInstance().createMap();
map.putBoolean("success", true);
message.setMap(map);</pre>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><b>Receive</b>:</p>
                              <pre xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
FlowReceiver receiver = session.createFlow(endpoint, topic, null);
                        
receiver.start();
                        
MapMessage message = (MapMessage )receiver.receive();
if (message !=null) {
SDTMap rcvdMap = message.getMap();
...
}</pre>
                              <h4 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">C Messaging API</h4>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><b>Create (message independent container)</b>:</p>
                              <pre xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd" xml:space="preserve">
solClient_opaqueMsg_pt msg_p = NULL;
solClient_opaqueContainer_pt mapContainer = NULL;
char            map[1024];
                        
// create a message
if (solClient_msg_alloc(&amp;msg_p) == SOLCLIENT_OK) 
{
   // create a map container 
   if (solClient_container_createMap (&amp;mapContainer, map, sizeof(map) == SOLCLIENT_OK)   
   {	
       // populate the map container
       // ...
       // set the map container as message payload
       if (solClient_msg_setBinaryAttachmentContainer (msg_p, mapContainer) == SOLCLIENT_OK)
       {
           // at this point the message is ready to be sent 
       }

   }
}</pre>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><b>Create (message dependent container)</b>:</p>
                              <pre xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd" xml:space="preserve">
solClient_opaqueMsg_pt msg_p = NULL;
solClient_opaqueContainer_pt mapContainer = NULL;
                        
// create a message
if (solClient_msg_alloc(&amp;msg_p) == SOLCLIENT_OK) 
{
   // create a map container 
   if (solClient_msg_createBinaryAttachmentMap (msg_p, &amp;mapContainer, 1024) == SOLCLIENT_OK)   
   {
       // populate the map container
       // ...
       // at this point the message is ready to be sent

   }
}</pre>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><b>Receive</b>:</p>
                              <pre xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd" xml:space="preserve">
solClient_opaqueContainer_pt mapContainer = NULL;

// Assuming that msg_p is a reference to a received message
if (solClient_msg_getBinaryAttachmentMap (msg_p, &amp;mapContainer) == SOLCLIENT_OK) 
{
    // At this point mapContainer is accessible using SDT accessor functions
    // ...
}</pre>
                              <h4 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">.NET Messaging API</h4>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><b>Create (message independent container)</b>:</p>
                              <pre xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
// create a message
IMessage message = ContextFactory.Instance.CreateMessage();
                        
// create a map container and populate it
IMapContainer map = SDTUtils.CreateMap(1024);

// set the map as the message payload
SDTUtils.SetSDTContainer(message,map);
</pre>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                <b>Create (message dependent container):</b>
                              </p>
                              <pre xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
// create a message
IMessage message = ContextFactory.Instance.CreateMessage();

// create a map container and populate it
IMapContainer map = SDTUtils.CreateMap(message,1024);

// no need to add the map to the message, it is already in the payload</pre>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><b>Receive</b>:</p>
                              <pre xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
// assuming that message is a reference to a received message
IMessage message = args.Message; /*args is a MessageEventArgs*/
ISDTContainer container = SDTUtils.GetContainer(message);
if (container != null &amp;&amp; container  is IMapContainer)
{
    // typecast the container to IMapContainer 
    IMapContainer map = (IMapContainer) container;
}</pre>
                              <h4 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">JavaScript Messaging API</h4>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><b>Create</b>:</p>
                              <pre xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
// create the map container
var map = new solace.SDTMapContainer(); 

// create a message
var message = solace.SolclientFactory.createMessage();
 
// assuming the map contains entries
message.setSdtContainer(solace.SDTField.create(solace.SDTFieldType.MAP, map)); 

// set other message properties
// ...
// at this point the message is ready to be sent</pre>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><b>Receive</b>:</p>
                              <pre xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
// assuming that message is a reference to a received message
var message;
if (message.getType() == solace.MessageType.MAP) 
{
   var rxMap = message.getSdtContainer();
}
</pre>
                              <h2 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd" class="with-rule"><a name="creating_jms-compatible_msgs_1946471526_328289"/>StreamMessage</h2>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">The following examples show how to create and receive a StreamMessage using non-JMS Solace messaging APIs.</p>
                              <h4 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Java Messaging API</h4>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><b>Create</b>:</p>
                              <pre xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
StreamMessage message = JCSMPFactory.onlyInstance().createMessage(StreamMessage.class);
SDTStream stream = JCSMPFactory.onlyInstance().createStream();
stream.writeBoolean(true);
message.setStream(stream);</pre>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                <b>Receive:</b>
                              </p>
                              <pre xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
FlowReceiver receiver = session.createFlow(endpoint, topic, null);
receiver.start();
BytesMessage message = (BytesMessage)receiver.receive();
byte[] data = message.getData();</pre>
                              <h4 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">C Messaging API</h4>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><b>Create (message independent container)</b>:</p>
                              <pre xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
solClient_opaqueMsg_pt msg_p = NULL;
solClient_opaqueContainer_pt streamContainer = NULL;
char            stream[1024];

// create a message
if (solClient_msg_alloc(&amp;msg_p) == SOLCLIENT_OK) 
{
   // create a stream container 
   if (solClient_container_createStream (&amp;streamContainer, stream, sizeof(stream) == SOLCLIENT_OK)   
   {
       // populate the stream container
       // ...
       // set the stream container as message payload
       if (solClient_msg_setBinaryAttachmentContainer (msg_p, streamContainer) == SOLCLIENT_OK)
       {
          // at this point the message is ready to be sent 
       }
    }
}</pre>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><b>Create (message dependent container)</b>:</p>
                              <pre xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
solClient_opaqueMsg_pt msg_p = NULL;
solClient_opaqueContainer_pt streamContainer = NULL;

// create a message
if (solClient_msg_alloc(&amp;msg_p) == SOLCLIENT_OK) 
{
   // create a stream container 
   if (solClient_msg_createBinaryAttachmentStream (msg_p, &amp;streamContainer, 1024) == SOLCLIENT_OK)   
   {
       // populate the stream container
       // ...
       // at this point the message is ready to be sent

   }
}</pre>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><b>Receive</b>:</p>
                              <pre xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
solClient_opaqueContainer_pt streamContainer = NULL;

// Assuming that msg_p is a reference to a received message
if (solClient_msg_getBinaryAttachmentStream (msg_p, &amp;streamContainer) == SOLCLIENT_OK) 
{
    // At this point streamContainer is accessible using SDT accessor functions
     // ...
}</pre>
                              <h4 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">.NET Messaging API</h4>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><b>Create (message independent container)</b>:</p>
                              <pre xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
// create a message
IMessage message = ContextFactory.Instance.CreateMessage();

// create a stream container and populate it
IStreamContainer map = SDTUtils.CreateStream(1024);

// set the stream as the message payload
SDTUtils.SetSDTContainer(message,stream);
</pre>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                <b>Create (message dependent container)</b>
                              </p>
                              <pre xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
// create a message
IMessage message = ContextFactory.Instance.CreateMessage();

// create a stream container and populate it
IStreamContainer map = SDTUtils.CreateStream(message,1024);

// no need to add the stream to the message, it is already in the payload</pre>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><b>Receive</b>:</p>
                              <pre xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
// assuming that message is a reference to a received message
IMessage message = args.Message; /*args is a MessageEventArgs*/
ISDTContainer container = SDTUtils.GetContainer(message);
if (container != null &amp;&amp; container  is IStreamContainer)
{
    // typecast the container to IStreamContainer
    IStreamContainer map = (IStreamContainer) container;
}</pre>
                              <h4 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">JavaScript Messaging API</h4>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><b>Create</b>:</p>
                              <pre xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
// create the stream container
var stream = new solace.SDTStreamContainer(); 

// create a message
var message = solace.SolclientFactory.createMessage();

// assuming the stream contains entries
message.setSdtContainer(solace.SDTField.create(solace.SDTFieldType.STREAM, stream)); 

// set other message properties
// ...
// at this point the message is ready to be sent</pre>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><b>Receive</b>:</p>
                              <pre xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
// assuming that message is a reference to a received message
var message;
if (message.getType() == solace.MessageType.STREAM) 
{
   var rxStream = message.getSdtContainer();			
}</pre>
                              <h2 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd" class="with-rule"><a name="TextMess"/>TextMessage</h2>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">The following examples show how to create and receive a TextMessage using non-JMS Solace messaging APIs.</p>
                              <h4 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Java Messaging API</h4>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd" class="Note">This sample requires the JMS connection factory setting <code>text-msg-xml-payload</code> to be set to <code>false</code>, which specifies that the TextMessage string is set/get in the message&#x2BC;s binary attachment.</p>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><b>Create</b>:</p>
                              <pre xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
TextMessage message = JCSMPFactory.onlyInstance().createMessage(TextMessage.class);
message.setText("This is a text message.");</pre>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><b>Receive</b>:</p>
                              <pre xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
FlowReceiver receiver = session.createFlow(endpoint, topic, null);
receiver.start();
BytesMessage message = (BytesMessage)receiver.receive();
byte[] data = message.getData();</pre>
                              <h4 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">C Messaging API</h4>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd" class="Note">This sample requires the JMS connection factory setting <code>text-msg-xml-payload</code> to be set to <code>false</code>, which specifies that the TextMessage string is set/get in the message&#x2BC;s binary attachment.</p>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><b>Create</b>:</p>
                              <pre xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
solClient_opaqueMsg_pt msg_p = NULL;
char* text = "This is a text message.";

// create a message
if (solClient_msg_alloc(&amp;msg_p) == SOLCLIENT_OK) 
{
   if (solClient_msg_setBinaryAttachmentString (msg_p, text )== SOLCLIENT_OK)   
   {
       // at this point the message is ready to be sent
   }
}</pre>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><b>Receive</b>:</p>
                              <pre xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd" xml:space="preserve">
// pointer to the string in the payload
const char *textStr; 

// Assuming that msg_p is a reference to a received message
if (solClient_msg_getBinaryAttachmentString (msg_p, &amp;textStr) == SOLCLIENT_OK) 
{
    // at this point textStr points to the contained string in the 
    // text message payload
    // ...
}</pre>
                              <h4 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">.NET Messaging API</h4>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd" class="Note">This sample requires the JMS connection factory setting <code>text-msg-xml-payload</code> to be set to <code>false</code>, which specifies that the TextMessage string is set/get in the message&#x2BC;s binary attachment.</p>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><b>Create</b>:</p>
                              <pre xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
// create a message
IMessage message = ContextFactory.Instance.CreateMessage();

// and set the text
SDTUtils.SetText(message,"This is a text message.");</pre>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><b>Receive</b>:</p>
                              <pre xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
// assuming that message is a reference to a received message
IMessage message = args.Message; /*args is a MessageEventArgs*/
String textStr = SDTUtils.GetText(message);
if (textStr != null) 
{
   // message is a text message
}</pre>
                              <h4 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">JavaScript Messaging API</h4>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd" class="Note">This sample requires the JMS connection factory setting <code>text-msg-xml-payload</code> to be set to <code>false</code>, which specifies that the TextMessage string is set/get in the message&#x2BC;s binary attachment.</p>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><b>Create</b>:</p>
                              <pre xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
// create a message
var message = solace.SolclientFactory.createMessage();

// set content
message.setSdtContainer(solace.SDTField.create(solace.SDTFieldType.STRING, "This is a text message."));

// set other message properties
// ...
// at this point the message is ready to be sent</pre>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><b>Receive</b>:</p>
                              <pre xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
// assuming that message is a reference to a received message
var message;
if (message.getType() == solace.MessageType.TEXT)
{
    var txtStr = message.getSdtContainer().getValue();
}</pre>
                              <h2 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd" class="with-rule"><a name="creating_jms-compatible_msgs_1946471526_337481"/>ObjectMessage</h2>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Non-JMS Solace APIs do not have the ability to create a message that the JMS API would interpret as an ObjectMessage.</p>
                              <h2 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd" class="with-rule"><a name="creating_jms-compatible_msgs_1946471526_328316"/>Non-Standard Messages
</h2>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">When the JMS API cannot interpret a message sent by a non-JMS Solace API as a JMS BytesMessage, MapMessage, StreamMessage, or TextMessage, the message is handled as a predetermined default message type according to its message payload. This message conversion is described in the following table:</p>
                              <table xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd" style="mc-table-style: url('../../Resources/TableStyles/Table_Num.css');margin-left: 0;margin-right: auto;" class="TableStyle-Table_Num" cellspacing="0">
                                <col class="TableStyle-Table_Num-Column-Column1" style="width: 33%;"/>
                                <col class="TableStyle-Table_Num-Column-Column1" style="width: 33%;"/>
                                <col class="TableStyle-Table_Num-Column-Column1" style="width: 33%;"/>
                                <thead>
                                  <tr class="TableStyle-Table_Num-Head-Header1">
                                    <th class="TableStyle-Table_Num-HeadE-Column1-Header1">XML Payload Present?</th>
                                    <th class="TableStyle-Table_Num-HeadE-Column1-Header1">Binary Attachment Present?</th>
                                    <th class="TableStyle-Table_Num-HeadD-Column1-Header1">Convert to Message Type...</th>
                                  </tr>
                                </thead>
                                <tbody>
                                  <tr class="TableStyle-Table_Num-Body-Body1">
                                    <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
                                      <p>Yes</p>
                                    </td>
                                    <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
                                      <p>Yes</p>
                                    </td>
                                    <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
                                      <p>TextMessage</p>
                                    </td>
                                  </tr>
                                  <tr class="TableStyle-Table_Num-Body-Body1">
                                    <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
                                      <p>Yes</p>
                                    </td>
                                    <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
                                      <p>No</p>
                                    </td>
                                    <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
                                      <p>TextMessage</p>
                                    </td>
                                  </tr>
                                  <tr class="TableStyle-Table_Num-Body-Body1">
                                    <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
                                      <p>No</p>
                                    </td>
                                    <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
                                      <p>Yes</p>
                                    </td>
                                    <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
                                      <p>BytesMessage</p>
                                    </td>
                                  </tr>
                                  <tr class="TableStyle-Table_Num-Body-Body1">
                                    <td class="TableStyle-Table_Num-BodyB-Column1-Body1">
                                      <p>No </p>
                                    </td>
                                    <td class="TableStyle-Table_Num-BodyB-Column1-Body1">
                                      <p>No</p>
                                    </td>
                                    <td class="TableStyle-Table_Num-BodyA-Column1-Body1">
                                      <p>Message (contains only header information)</p>
                                    </td>
                                  </tr>
                                </tbody>
                              </table>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                    <div class="no-print">
                      <div>
                        <a href="#" id="docsFeedbackTrigger" class="docs-issue-collector">Provide feedback</a>
                      </div>
                    </div>
                    <footer class="my-4 pt-4 text-center no-print">
                      <div class="footer-txt text-center no-print">
                        <ul class="list-inline ">
                          <li class="list-inline-item text-muted"><a href="../../Resources/Documentation-Set.htm" class="doc-set-footer-link MCXref xref xrefdoc-set-footer-link">Documentation Coverage</a>: <span class="mc-variable Variables.DocumentSetNumber variable">2024.09.18.0001</span></li>
                          <li class="list-inline-item text-muted">Last Updated: <span class="mc-variable Variables.MonthDayYear variable">September 18, 2024</span></li>
                          <li class="list-inline-item text-muted" style="font-size:13px;"> &#xA9;  <span class="mc-variable Variables.CompanyNameLegal variable">Solace Corporation</span></li>
                        </ul>
                      </div>
                      <div class="footer-icons">
                        <ul class="list-inline">
                          <li class="list-inline-item">
                            <a href="https://facebook.com/solacedotcom" target="_blank" class="social-media-icon">
                              <img src="../../Resources/Images/Social-Media/facebook_22x21.png" class="Hyperlinked" alt="Facebook" title="Solace Facebook Page" style="width: 22;height: 21;"/>
                            </a>
                          </li>
                          <li class="list-inline-item">
                            <a href="https://www.linkedin.com/company/20219" target="_blank" class="social-media-icon">
                              <img src="../../Resources/Images/Social-Media/LinkedIn_22x21.png" class="Hyperlinked" alt="LinkedIn" title="Solace LinkedIn Page" style="width: 22;height: 21;"/>
                            </a>
                          </li>
                          <li class="list-inline-item">
                            <a href="https://twitter.com/solacedotcom" target="_blank" class="social-media-icon">
                              <img src="../../Resources/Images/Social-Media/Twitter_22x21.png" class="Hyperlinked" alt="Twitter" title="Solace Twitter Feed" style="width: 22;height: 21;"/>
                            </a>
                          </li>
                          <li class="list-inline-item">
                            <a href="https://www.youtube.com/user/SolaceSystems" target="_blank" class="social-media-icon">
                              <img src="../../Resources/Images/Social-Media/youtube_22x21.png" class="Hyperlinked" alt="YouTube" title="Solace YouTube Channel" style="width: 22;height: 21;"/>
                            </a>
                          </li>
                          <li class="list-inline-item">
                            <a href="https://www.instagram.com/solacedotcom/" target="_blank" class="social-media-icon">
                              <img src="../../Resources/Images/Social-Media/instagram_22x21.png" class="Hyperlinked" alt="Instagram" title="Solace Instagram Feed" style="width: 22;height: 21;"/>
                            </a>
                          </li>
                          <li class="list-inline-item">
                            <a href="https://medium.com/solacedotcom" target="_blank" class="social-media-icon">
                              <img src="../../Resources/Images/Social-Media/medium_22x21.png" class="Hyperlinked" alt="Medium" title="Solace Medium Blog" style="width: 22;height: 21;"/>
                            </a>
                          </li>
                        </ul>
                      </div>
                      <div class="footer_link_menu">
                        <ul class="link_list">
                          <li class="link_list_item">
                            <a href="https://solace.com/products/" target="_blank" class="footer-link">Products</a>
                          </li>
                          <li class="link_list_item">
                            <a href="https://solace.com/company/" target="_blank" class="footer-link">Company</a>
                          </li>
                          <li class="link_list_item">
                            <a href="https://www.solace.dev/" target="_blank" class="footer-link">Developers</a>
                          </li>
                          <li class="link_list_item">
                            <a href="https://solace.com/support/" target="_blank" class="footer-link">Support</a>
                          </li>
                          <li class="link_list_item">
                            <a href="https://solace.com/contact/" target="_blank" class="footer-link">Contact Us</a>
                          </li>
                        </ul>
                      </div>
                    </footer>
                  </div>
                  <!-- JIRA issue collector -->
                  <script>/*<![CDATA[*/// Requires jQuery!
jQuery.ajax({
    url: "https://sol-jira.atlassian.net/s/d41d8cd98f00b204e9800998ecf8427e-T/o2joag/b/24/e73395c53c3b10fde2303f4bf74ffbf6/_/download/batch/com.atlassian.jira.collector.plugin.jira-issue-collector-plugin:issuecollector-embededjs/com.atlassian.jira.collector.plugin.jira-issue-collector-plugin:issuecollector-embededjs.js?locale=en-US&collectorId=076e0808",
    type: "get",
    cache: true,
    dataType: "script"
});
window.ATL_JQ_PAGE_PROPS = {
"triggerFunction": function(showCollectorDialog) {
//Requires that jQuery is available!
$("#docsFeedbackTrigger").click(function(e) {
e.preventDefault();
showCollectorDialog();
});
},
fieldValues: {
recordWebInfo: '1', // field Name
recordWebInfoConsent: ['1'] // field Id
}
};
/*]]>*/</script>
                  <script src="../../Resources/Scripts/thumbnail.js">
                                    </script>
                  <!-- Script for Launching offsite links in new tab -->
                  <script type="text/javascript">/*<![CDATA[*/$("a[href^='http']").attr("target","_blank");/*]]>*/</script>
                </div>
              </div>
            </div>
          </div>
          <a data-close="true"/>
        </div>
      </div>
    </div>
  </body>
</html>
