<?xml version="1.0"?>
<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-us" xml:lang="en-us" class="_Skins_HTML5___Side_Navigation" data-mc-search-type="Stem" data-mc-help-system-file-name="Default.xml" data-mc-path-to-help-system="../../" data-mc-has-content-body="True" data-mc-toc-path="[%=System.LinkedTitle%]|[%=System.LinkedTitle%]|[%=System.LinkedTitle%]|[%=System.LinkedTitle%]" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic;Default" data-mc-preload-images="false" data-mc-in-preview-mode="false">
  <head>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
    <meta name="msapplication-config" content="../../Skins/Favicons/browserconfig.xml"/>
    <meta name="viewport" content="width=device-width, initial-scale=1"/>
    <link rel="apple-touch-icon" sizes="180x180" href="../../Skins/Favicons/apple-touch-icon.png"/>
    <link rel="shortcut icon" href="../../Skins/Favicons/favicon-32x32.png"/>
    <link rel="icon" sizes="96x96" href="../../Skins/Favicons/favicon-96x96.png"/>
    <link rel="icon" sizes="32x32" href="../../Skins/Favicons/favicon-32x32.png"/>
    <link rel="icon" sizes="16x16" href="../../Skins/Favicons/favicon-16x16.png"/>
    <meta charset="utf-8"/>
    <meta http-equiv="Cache-control" content="no-cache"/>
    <meta http-equiv="X-UA-Compatible" content="IE=edge"/>
    <title>Publishing Direct Messages Using the Go API</title>
    <!-- <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous" /> -->
    <!--style to display feedback button correctly in IE-->
    <!-- Google Tag Manager -->
    <!-- End Google Tag Manager -->
    <!-- links to get the EDA styling to work -->
    <link href="../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" type="text/css" data-mc-generated="True"/>
    <link href="../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" type="text/css" data-mc-generated="True"/>
    <link href="../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" type="text/css" data-mc-generated="True"/>
    <link href="../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" type="text/css" data-mc-generated="True"/>
    <link href="../../Skins/Default/Stylesheets/Components/Tablet.css" rel="stylesheet" type="text/css" data-mc-generated="True"/>
    <link href="../../Skins/Default/Stylesheets/Components/Mobile.css" rel="stylesheet" type="text/css" data-mc-generated="True"/>
    <link href="../../Skins/Default/Stylesheets/Components/Print.css" rel="stylesheet" type="text/css" data-mc-generated="True"/>
    <link href="../../Skins/Fluid/Stylesheets/foundation.6.2.3.css" rel="stylesheet" type="text/css" data-mc-generated="True"/>
    <link href="../../Skins/Fluid/Stylesheets/Styles.css" rel="stylesheet" type="text/css" data-mc-generated="True"/>
    <link href="../../Skins/Fluid/Stylesheets/Tablet.css" rel="stylesheet" type="text/css" data-mc-generated="True"/>
    <link href="../../Skins/Fluid/Stylesheets/Mobile.css" rel="stylesheet" type="text/css" data-mc-generated="True"/>
    <link href="../../Skins/Fluid/Stylesheets/Print.css" rel="stylesheet" type="text/css" data-mc-generated="True"/>
    <link href="../../Resources/Stylesheets/MainStyles.min.css" rel="stylesheet" type="text/css"/>
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet"/>
    <style>@media screen and (min-width: 0\0)
{
	.feedback-button
	{
		margin-right: -40px;
		top: 50%;
		border-radius: 9px 9px 0px 0px;
	}

	#canvas
	{
		position: relative;
	}
}

@media print
{
	#plugin
	{
		overflow: visible !important;
	}
}

</style>
    <link href="../../Resources/Stylesheets/eda_styles.css" rel="stylesheet" type="text/css"/>
    <link href="https://fonts.googleapis.com/css?family=Open+Sans:400,600,300" rel="stylesheet" type="text/css"/>
    <style>/*&lt;meta /&gt;*/

.button.print-button
{
	-pie-background: linear-gradient(#ffffff, transparent);
}

.button.previous-topic-button
{
	-pie-background: linear-gradient(#ffffff, transparent);
}

.button.next-topic-button
{
	-pie-background: linear-gradient(#ffffff, transparent);
}

.needs-pie
{
	behavior: url('../../Resources/Scripts/PIE-no-motw.htc');
}

</style>
    <link rel="apple-touch-icon" sizes="180x180" href="../../Skins/Favicons/apple-touch-icon.png"/>
    <link rel="shortcut icon" href="../../Skins/Favicons/favicon-32x32.png"/>
    <link rel="icon" sizes="96x96" href="../../Skins/Favicons/favicon-96x96.png"/>
    <link rel="icon" sizes="32x32" href="../../Skins/Favicons/favicon-32x32.png"/>
    <link rel="icon" sizes="16x16" href="../../Skins/Favicons/favicon-16x16.png"/>
    <script src="../../Resources/Scripts/jquery.min.js" type="text/javascript">
        </script>
    <script src="../../Resources/Scripts/purify.min.js" type="text/javascript" defer="defer">
        </script>
    <script src="../../Resources/Scripts/require.min.js" type="text/javascript" defer="defer">
        </script>
    <script src="../../Resources/Scripts/require.config.js" type="text/javascript" defer="defer">
        </script>
    <script src="../../Resources/Scripts/foundation.6.2.3_custom.js" type="text/javascript" defer="defer">
        </script>
    <script src="../../Resources/Scripts/plugins.min.js" type="text/javascript" defer="defer">
        </script>
    <script src="../../Resources/Scripts/MadCapAll.js" type="text/javascript" defer="defer">
        </script>
    <script src="https://cmp.osano.com/AzZrhlTmT5f216Foa/84ba7dc4-a4e5-4b02-b120-977eb6f052d4/osano.js">
        </script>
    <script type="text/javascript">/*<![CDATA[*/(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
			new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
			j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
			'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
			})(window,document,'script','dataLayer','GTM-KLSDFH');
		/*]]>*/</script>
    <script type="text/javascript" src="../../Skins/Default/Scripts/TopicToolBar.js">
        </script>
  </head>
  <!-- Top Orange and Darkgrey header-->
  <!-- Div for EDA banner -->
  <div class="eda_banner">
    <p>Register Now for EDA Summit 2024 - Virtual Event <a href="https://edasummit.com/" target="_blank">Register for Free</a></p>
  </div>
  <!-- end Div for EDA banner -->
  <div class="top-nav">
    <div class="main_list">
      <ul class="top-navlinks">
        <li>
          <a href="https://solace.com/support/" target="_blank">Support</a>
        </li>
        <li>
          <a href="https://solace.com/contact/" target="_blank">Contact Us</a>
        </li>
      </ul>
    </div>
    <div class="container-fluid">
      <div class="src-li">
        <div id="srchWrapTwo">
          <form class="search" action="#">
            <div class="search-bar search-bar-container needs-pie">
              <input class="search-field needs-pie" type="search" aria-label="Search Field" placeholder="Search the docs"/>
              <div class="search-filter-wrapper">
                <span class="invisible-label" id="search-filters-label">Filter: </span>
                <div class="search-filter" aria-haspopup="true" aria-controls="sf-content" aria-expanded="false" aria-label="Search Filter" title="All Files" role="button" tabindex="0">
                                </div>
                <div class="search-filter-content" id="sf-content">
                  <ul>
                    <li>
                      <button class="mc-dropdown-item" aria-labelledby="search-filters-label filterSelectorLabel-00001">
                        <span id="filterSelectorLabel-00001">All Files</span>
                      </button>
                    </li>
                  </ul>
                </div>
              </div>
              <div class="search-submit-wrapper" dir="ltr">
                <div class="search-submit" title="Search" role="button" tabindex="0">
                  <span class="invisible-label">Submit Search</span>
                </div>
              </div>
            </div>
          </form>
        </div>
      </div>
      <span class="tool-tip" tooltip-position="left" tooltip="To search for CLI commands, events, or APIs, navigate to the related sections.">i</span>
      <!-- Sept. 28, 2022 - This is being moved to under div class= top-nav
			<div class="main_list">
				<ul class="top-navlinks">
					<li><a href="https://solace.com/support/" target="_blank">Support</a></li>
					<li><a href="https://solace.com/contact/" target="_blank">Contact Us</a></li>
				</ul>
			</div> -->
    </div>
    <!-- Sept. 27, 2022 - The commented out content below used to provide the products, company, etc., links in the top header, next to the search field. -->
    <!-- <div class="main_list"><ul class="top-navlinks"><li><a href="https://solace.com/products/" target="_blank">Products</a></li><li><a href="https://solace.com/company/" target="_blank">Company</a></li><li><a href="https://www.solace.dev/" target="_blank">Developers</a></li><li><a href="https://solace.com/support/" target="_blank">Support</a></li><li><a href="https://solace.com/contact/" target="_blank">Contact Us</a></li></ul></div> -->
  </div>
  <body>
    <div class="foundation-wrap off-canvas-wrapper">
      <div class="off-canvas-wrapper-inner" data-off-canvas-wrapper="">
        <aside class="off-canvas position-right" role="navigation" id="offCanvas" data-off-canvas="" data-position="right" data-mc-ignore="true">
          <ul class="off-canvas-accordion vertical menu off-canvas-list" data-accordion-menu="" data-mc-back-link="Back" data-mc-css-tree-node-expanded="is-accordion-submenu-parent" data-mc-css-tree-node-collapsed="is-accordion-submenu-parent" data-mc-css-sub-menu="vertical menu is-accordion-submenu nested" data-mc-include-indicator="False" data-mc-include-icon="False" data-mc-include-parent-link="True" data-mc-include-back="False" data-mc-defer-expand-event="True" data-mc-expand-event="click.zf.accordionMenu" data-mc-toc="True">
                    </ul>
        </aside>
        <div class="off-canvas-content inner-wrap" data-off-canvas-content="">
          <div data-sticky-container="" class="title-bar-container">
            <nav class="title-bar tab-bar sticky" role="banner" data-sticky="" data-options="marginTop:0" style="width:100%" data-sticky-on="only screen and (max-width: 1000px)" data-mc-ignore="true">
              <a class="skip-to-content fluid-skip showOnFocus" href="#">Skip To Main Content</a>
              <div class="middle title-bar-section outer-row clearfix">
                <div class="menu-icon-container relative clearfix">
                  <div class="central-account-wrapper">
                    <div class="central-dropdown">
                      <a class="central-account-drop">
                        <span class="central-account-image"/>
                        <span class="central-account-text">Account</span>
                      </a>
                      <div class="central-dropdown-content">
                        <a class="MCCentralLink central-dropdown-content-settings">Settings</a>
                        <hr class="central-separator"/>
                        <a class="MCCentralLink central-dropdown-content-logout">Logout</a>
                      </div>
                    </div>
                  </div>
                  <button class="menu-icon" aria-label="Show Navigation Panel" data-toggle="offCanvas">
                    <span/>
                  </button>
                </div>
              </div>
              <div class="title-bar-layout outer-row">
                <div class="logo-wrapper">
                  <a class="logo" href="../../index.html" alt="Logo"/>
                </div>
                <div class="navigation-wrapper nocontent">
                  <ul class="navigation clearfix" role="navigation" data-mc-css-tree-node-has-children="has-children" data-mc-css-sub-menu="sub-menu" data-mc-expand-event="mouseenter" data-mc-top-nav-menu="True" data-mc-max-depth="3" data-mc-include-icon="False" data-mc-include-indicator="False" data-mc-include-children="True" data-mc-include-siblings="True" data-mc-include-parent="True" data-mc-toc="True">
                    <li class="placeholder" style="visibility:hidden">
                      <a>placeholder</a>
                    </li>
                  </ul>
                </div>
                <div class="central-account-wrapper">
                  <div class="central-dropdown">
                    <a class="central-account-drop">
                      <span class="central-account-image"/>
                      <span class="central-account-text">Account</span>
                    </a>
                    <div class="central-dropdown-content">
                      <a class="MCCentralLink central-dropdown-content-settings">Settings</a>
                      <hr class="central-separator"/>
                      <a class="MCCentralLink central-dropdown-content-logout">Logout</a>
                    </div>
                  </div>
                </div>
                <div class="nav-search-wrapper">
                  <div class="nav-search row">
                    <form class="search" action="#">
                      <div class="search-bar search-bar-container needs-pie">
                        <input class="search-field needs-pie" type="search" aria-label="Search Field" placeholder="Search the docs"/>
                        <div class="search-filter-wrapper">
                          <span class="invisible-label" id="search-filters-label">Filter: </span>
                          <div class="search-filter" aria-haspopup="true" aria-controls="sf-content" aria-expanded="false" aria-label="Search Filter" title="All Files" role="button" tabindex="0">
                                                    </div>
                          <div class="search-filter-content" id="sf-content">
                            <ul>
                              <li>
                                <button class="mc-dropdown-item" aria-labelledby="search-filters-label filterSelectorLabel-00001">
                                  <span id="filterSelectorLabel-00001">All Files</span>
                                </button>
                              </li>
                            </ul>
                          </div>
                        </div>
                        <div class="search-submit-wrapper" dir="ltr">
                          <div class="search-submit" title="Search" role="button" tabindex="0">
                            <span class="invisible-label">Submit Search</span>
                          </div>
                        </div>
                      </div>
                    </form>
                  </div>
                </div>
              </div>
            </nav>
          </div>
          <div class="main-section">
            <div class="row outer-row sidenav-layout">
              <nav class="sidenav-wrapper">
                <div class="sidenav-container">
                  <ul class="off-canvas-accordion vertical menu sidenav" data-accordion-menu="" data-mc-css-tree-node-expanded="is-accordion-submenu-parent" data-mc-css-tree-node-collapsed="is-accordion-submenu-parent" data-mc-css-sub-menu="vertical menu accordion-menu is-accordion-submenu nested" data-mc-include-indicator="False" data-mc-include-icon="False" data-mc-include-parent-link="False" data-mc-include-back="False" data-mc-defer-expand-event="True" data-mc-expand-event="click.zf.accordionMenu" data-mc-toc="True" data-mc-side-nav-menu="True">
                                    </ul>
                </div>
              </nav>
              <div class="body-container">
                <div data-mc-content-body="True">
                  <div class="buttons popup-container clearfix topicToolbarProxy _Skins_TopicToolBar mc-component nocontent" style="mc-topic-toolbar-items: PreviousTopic Print NextTopic;">
                    <div class="button-group-container-left">
                      <button class="button needs-pie print-button" title="Print">
                        <div>
                          <div role="img" class="button-icon-wrapper" aria-label="Print">
                            <div class="button-icon"> </div>
                          </div>
                        </div>
                      </button>
                      <button class="button needs-pie previous-topic-button" title="Navigate previous topic" disabled="true">
                        <div>
                          <div role="img" class="button-icon-wrapper" aria-label="Navigate previous">
                            <div class="button-icon"> </div>
                          </div>
                        </div>
                      </button>
                      <button class="button needs-pie next-topic-button" title="Navigate next topic" disabled="true">
                        <div>
                          <div role="img" class="button-icon-wrapper" aria-label="Navigate next">
                            <div class="button-icon"> </div>
                          </div>
                        </div>
                      </button>
                    </div>
                  </div>
                  <!-- Google Tag Manager (noscript) -->
                  <noscript>
                    <iframe src="https://www.googletagmanager.com/ns.html?id=GTM-KLSDFH" height="0" width="0" style="display:none;visibility:hidden"/>
                  </noscript>
                  <!-- End Google Tag Manager (noscript) -->
                  <div id="content">
                    <div id="contentBody">
                      <div class="row collapse">
                        <div xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd" class="ContentRow">
                          <div>
                            <div xmlns="" class="nocontent">
                              <div class="MCBreadcrumbsBox_MCBreadcrumbsSelf_0 breadcrumbs" role="navigation" aria-label="Breadcrumbs" data-mc-breadcrumbs-divider=" / " data-mc-breadcrumbs-count="4" data-mc-toc="True">
                                <span class="MCBreadcrumbsPrefix"> </span>
                              </div>
                            </div>
                            <div xmlns="" role="main" id="mc-main-content">
                              <h1 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><a name="Publishing-Direct-Messages-Java-API"/>Publishing Direct Messages Using the Go API</h1>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Direct messages are useful when high-throughput and low-latency is required. We recommend that you publish events using direct messages if some message loss can be tolerated without negatively impacting client applications. Message loss can occur  due to external factors, such as network congestion or client disconnection.  If your applications require guaranteed delivery and message acknowledgment, then we recommend using persistent messages instead. </p>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">To  handle direct messages using the <span class="mc-variable Product-Names.pubsub_brand_only variable">PubSub+</span> Go API, use the following steps:</p>
                              <ol xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                <li value="1"><a href="#Creating-A-DirectMessagePublisher-Object" class="link-internal">Create a DirectMessagePublisher</a>.</li>
                                <li value="2"><a href="#Configuring-Messages" class="link-internal">Configure and Create an OutboundMessage</a>.</li>
                                <li value="3"><a href="#Configuring-Back-Pressure" class="link-internal">Handling Back-Pressure When Publishing Direct Messages</a>.</li>
                                <li value="4"><a href="#Publishing-A-Direct-Message" class="link-internal">Publish a Direct Message</a>.</li>
                                <li value="5"><a href="#Handling-Errors" class="link-internal">Handle Errors</a>.</li>
                              </ol>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">In some use cases, it's possible for your application to send messages faster than the messages can be transported. Messages can fill the API's internal buffers causing <i>back-pressure</i>. If this scenario is possible, we recommend that you consider changing the back-pressure settings to meet the requirements of your application. For more information, see  <a href="#Configuring-Back-Pressure" class="MCXref xref">Handling Back-Pressure When Publishing Direct Messages</a>.</p>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">For examples of applications  that publish direct messages, see  <a href="https://github.com/SolaceSamples/solace-samples-go/blob/main/patterns/direct_publisher.go" target="_blank" class="link-offsite">direct_publisher.go</a> on the <span class="mc-variable Variables.CompanyName variable">Solace</span> GitHub page.</p>
                              <h2 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd" class="with-rule"><a name="Creating-A-DirectMessagePublisher-Object"/>Creating a DirectMessagePublisher</h2>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">After a <code>MessagingService</code> instance has established a connection to an event broker, use a <code>DirectMessagePublisher</code> to publish direct messages.  You can use a <code>DirectMessagePublisherBuilder</code> to configure your <code>DirectMessagePublisher</code> to use certain features of the API, such as back-pressure strategies. Call the <code>Build()</code> function on your <code>DirectMessagePublisherBuilder</code> to return a <code>DirectMessagePublisher</code> instance. To enable your <code>DirectMessagePublisher</code> to start publishing messages, call <code>Start()</code> on it.</p>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">For more information, see the <a href="../../API-Developer-Online-Ref-Documentation/go/index.html" class="link-internal"><span class="mc-variable Product-Names.pubsub_brand_only variable">PubSub+</span> Messaging API for Go reference</a>.</p>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">The following is an example that shows how to use  a direct message publisher to enable your application to publish messages to the event broker:</p>
                              <pre xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd" xml:space="preserve">/* Creates an instance of DirectMessagePublisherBuilder, which is used to create DirectMessagePublishers. */
directPublisher, builderError := messagingService. 
	CreateDirectMessagePublisherBuilder(). // Creates a DirectMessagePublisherBuilder that can be used to configure direct message publisher instances.
	OnBackPressureReject().
	Build()                                // Creates a new DirectMessagePublisher instance based on the configured properties.
if builderErr != nil {
	panic(builderErr)
}

startErr := directPublisher.Start()    // Start starts the publisher synchronously. Before this function is called, the publisher is considered off-duty.
if startErr != nil {
	panic(startErr)
}</pre>
                              <h3 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Asynchronous Publishers</h3>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">It is also possible to start a direct message publisher using a callback listener to allow for asynchronous notifications after the start operation is complete.</p>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">The following example shows how to start a <code>DirectMessagePublisher</code> asynchronously:</p>
                              <pre xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd" xml:space="preserve">
func PublisherCallback(publisher solace.DirectMessagePublisher, err error) {
	if err != nil {
		panic(err) // Publisher started up with an error.
	} else {
		// Publisher started without issue.
	}
}
// ...	
// ...
directPublisher.StartAsyncCallback(PublisherCallback) // Starts the publisher asynchronously. Calls the callback when started with an error if one occurred, otherwise nil if successful.</pre>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd" class="Note">Your publisher application is not operational until you call <code>Start()</code> or <code>StartAsyncCallback()</code> on it.</p>
                              <h2 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd" class="with-rule"><a name="Configuring-Messages"/>Configuring and Creating Outbound Messages</h2>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Your client applications explicitly create the outbound messages to publish. In the <span class="mc-variable Product-Names.pubsub_brand_only variable">PubSub+</span> Go API, when you publish messages you use <code>OutboundMessage</code> instances. To configure and create <code>OutboundMessage</code> instances, follow these steps: </p>
                              <ol xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                <li value="1">
                                  <p>Call  <code>messagingService.MessageBuilder()</code> to return an <code>OutboundMessageBuilder</code> instance. For better performance, we recommend you use a single <code>OutboundMessageBuilder</code> to create multiple <code>OutboundMessage</code> instances. </p>
                                  <pre xml:space="preserve">messageBuilder := messagingService.MessageBuilder()</pre>
                                </li>
                                <li value="2">Configure your message with an <code>OutboundMessageBuilder</code> and then call the <code>Build()</code> function to return a message instance. You can configure message properties using either method below.
			
				<ul><li>Use <code>config.MessagePropertyMap</code> and the <code>config.MessageProperty*</code> functions. The following example shows how to set <code>MessagePropertyMap</code>  values for message ID, sender ID and message type constants, and then configure a message using the <code>FromConfigurationProvider()</code> function:		<pre xml:space="preserve">
messageProperties := config.MessagePropertyMap{
	config.MessagePropertyApplicationMessageID: "message ID",
	config.MessagePropertySenderID:      "Sender ID",
	config.MessagePropertyApplicationMessageType: "Message Type",
	// For a complete list of MessageProperty constants see the <a href="../../API-Developer-Online-Ref-Documentation/go/index.html" class="link-internal"><span class="mc-variable Product-Names.pubsub_brand_only variable">PubSub+</span> Messaging API for Go reference</a>.
}	
// ...						
// ...						
message, err := messageBuilder.FromConfigurationProvider(messageProperties)
	.BuildWithStringPayload("my message payload")
if err != nil {
	panic(err)
}</pre></li><li>Use the <code>OutboundMessageBuilder</code> interface and the <code>WithProperty(propertyName,propertyValue)</code> functions. Both Solace defined <code>config.MessageProperty</code> keys as well as arbitrary user-defined property keys are accepted. The following example shows how to set a custom key-value property on a message:<pre xml:space="preserve">
messageBuilder := messagingService.MessageBuilder().
	WithProperty("propertyName", "propertyValue")
// ...							
// ...							
message, err := messageBuilder.BuildWithStringPayload("my message payload")
if err != nil {
	panic(err)
}</pre></li></ul></li>
                              </ol>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">The following code example shows how to create a message builder, set message properties and create a message:</p>
                              <pre xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd" xml:space="preserve">
/* Builder for creation of similarly configured messages */
messageBuilder := messagingService.MessageBuilder()
message, err := messageBuilder.
	FromConfigurationProvider(messageProperties).     // For Sender ID, Sequence Number etc.  
	WithExpiration(time.Now().Add(10 * time.Second)). // Expire the message in 10 seconds.
	BuildWithStringPayload("my message payload")      // Builds the message.</pre>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">For more information about the functions, see the <a href="../../API-Developer-Online-Ref-Documentation/go/index.html" class="link-internal"><a href="../../API-Developer-Online-Ref-Documentation/go/index.html" class="link-internal"><span class="mc-variable Product-Names.pubsub_brand_only variable">PubSub+</span> Messaging API for Go reference</a></a>.</p>
                              <h2 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd" class="with-rule"><a name="Configuring-Back-Pressure"/>Handling Back-Pressure When Publishing Direct Messages</h2>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">When you use direct messaging, the messages are sent to a <span class="mc-variable Product-Names.pubsub_brand_only variable">PubSub+</span> event broker using a topic. The event broker relays the messages  to any consumers subscribed to that topic.</p>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">At the time the client application publishes a direct message,  the API  queues the message in an internal buffer before it is  sent to event broker. In ideal conditions, as soon the application publishes a message, the API sends that message on the network, and that message is eventually received by  event broker. It is possible for a client application to publish messages faster than the API can send them to the broker due to network  congestion or connectivity issues. This delay can cause the internal buffer to accumulate messages until it reaches its capacity,  preventing the API from storing any more messages. This scenario is referred to as <i>back-pressure</i>. It is important to configure your application to handle situations where back-pressure occurs.</p>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">In the <span class="mc-variable Product-Names.pubsub_brand_only variable">PubSub+</span> Go API, the <code>DirectMessagePublisher</code> has the following  mechanisms to handle back-pressure:</p>
                              <ul xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                <li>
                                  <a href="#reject" class="link-internal">reject messages when a specified limit is reached</a>
                                </li>
                                <li>
                                  <a href="#throttle" class="link-internal">throttle the application  when a specified limit is reached</a>
                                </li>
                              </ul>
                              <h3 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><a name="reject"/>Rejecting Messages When A Specified Limit is Reached </h3>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">When back-pressure occurs, you can choose to reject the messages from the client application when a specified limit is reached in the internal buffer. You can use the <code>OnBackPressureReject(bufferSize uint)</code> function to specify a defined buffer capacity for a set number of messages to accumulate. After the specified capacity is reached, it is no longer possible to publish new messages and the API&#xA0;returns errors until the buffer has capacity again. On calls to publish, the value for <code>bufferSize</code> must be greater than or equal to zero. </p>
                              <pre xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd" xml:space="preserve">
/* Creates an instance of DirectMessagePublisherBuilder, which is used to create DirectMessagePublishers. */
directPublisher, builderError := messagingService. 
	CreateDirectMessagePublisherBuilder(). // Creates a DirectMessagePublisherBuilder that can be used to configure direct message publisher instances.
	OnBackPressureReject(500).             // Sets the pressure strategy to reject messages once the bufferSize, in number of messages, is reached.
	Build()                                // Creates a new DirectMessagePublisher instance based on the configured properties.
if builderErr != nil {
	panic(builderErr)
}

startErr := directPublisher.Start()    // Start starts the publisher synchronously. Before this function is called, the publisher is considered off-duty.
if startErr != nil {
	panic(startErr)
}</pre>
                              <h4 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Using a Publisher Readiness Listener</h4>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">We recommend that you use a <code>PublisherReadinessListener</code> when you use the <code>OnBackPressureReject()</code> function because it lets your application known when there is capacity available in the buffer and it can resume publishing messages. The back pressure strategy of <code>OnBackPressureWait()</code> will <b>not</b> call a <code>PublisherReadinessListener</code>.</p>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">The following is an example of  registering an event handler <code>PublisherReadinessListener</code> instance: </p>
                              <pre xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd" xml:space="preserve">
func PublisherReadinessListener(){
// What you want your application to do when it can publish messages again.
}
// ...
// ...
directPublisher, builderError := messagingService. 
	CreateDirectMessagePublisherBuilder(). // Creates a DirectMessagePublisherBuilder that can be used to configure direct message publisher instances.
	OnBackPressureReject(500).	       // Sets the pressure strategy to reject messages once the bufferSize, in number of messages, is reached.
	Build()                                // Creates a new DirectMessagePublisher instance based on the configured properties.
if builderErr != nil {
	panic(builderErr)
}

startErr := directPublisher.Start()    // Start starts the publisher synchronously. Before this function is called, the publisher is considered off-duty.
if startErr != nil {
	panic(startErr)
}
directPublisher.SetPublisherReadinessListener(PublisherReadinessListener);    // Registers a listener to be called when the publisher can send messages.       
</pre>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd" class="Note"> For the best performance, we recommend you use <code>OnBackPressureReject(0)</code> with a<code> PublisherReadinessListener</code>.  A <code>bufferSize</code> of zero means the publisher application will not buffer messages before sending them to the broker, which reduces latency and improves performance. This prevents large numbers of messages accumulating on the publisher's internal buffer and is the most performant method of dealing with back pressure. </p>
                              <h3 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><a name="throttle"/>Throttling the Publisher When a Specified Limit is Reached</h3>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">You can choose to throttle the publishing application if a specified limit is reached in the internal buffer. The use of throttling is useful&#xA0;to free capacity to its internal buffers. You can use the <code>OnBackPressureWait(bufferSize uint)</code> function to set the maximum number of messages that can accumulate in the buffer. The default setting for the Go API is for the publisher application to wait with a <code>bufferSize</code> of 50. When this maximum capacity (<code>bufferSize</code>) is reached, the publisher routine pauses and waits for  available capacity in the internal buffer before letting the application publish any more messages.</p>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"> This function should be used when you want application requests to take longer after the buffer's capacity has been reached. Using this mechanism effectively gives time for the API to empty the internal buffer. An additional benefit is that when you use persistent publishing, the API&#xA0;does not discard any messages. </p>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">The following shows an example of how to configure an internal buffer to accommodate up to one thousand messages:</p>
                              <pre xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd" xml:space="preserve">
/* Creates an instance of DirectMessagePublisherBuilder, which is used to create DirectMessagePublishers. */
directPublisher, builderError := messagingService. 
	CreateDirectMessagePublisherBuilder(). // Creates a DirectMessagePublisherBuilder that can be used to configure direct message publisher instances.
	OnBackPressureWait(1000).               // Sets back pressure strategy to wait and block until there is space in the buffer of size bufferSize.
	Build()                                // Creates a new DirectMessagePublisher instance based on the configured properties.
if builderErr != nil {
	panic(builderErr)
}

startErr := directPublisher.Start()    // Start starts the publisher synchronously. Before this function is called, the publisher is considered off-duty.
if startErr != nil {
	panic(startErr)
}</pre>
                              <h2 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd" class="with-rule"><a name="Publishing-A-Direct-Message"/>Publishing a Direct Message</h2>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">After you have created the <code>DirectMessagePublisher</code>, you can start sending messages. When you send a message, there are two primary components:</p>
                              <ul xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                <li>the topic to publish on  <a href="https://docs.solace.com/Get-Started/Understanding-Topics.htm" class="link-internal">(Understanding Topics)</a></li>
                                <li>the payload of the message (optional) </li>
                              </ul>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">The topic must be an instantiation of the <code>resource.Topic</code> class that follows the <span class="mc-variable Variables.CompanyName variable">Solace</span> hierarchical format, for example: <code>solace/messaging/direct/pub</code>. The publish function currently supports simple string messages, byte arrays, as well as <code>OutboundMessage</code> instances, which can be obtained through an <code>OutboundMessageBuilder</code> via <code>MessagingService.MessageBuilder()</code>. The following are functions to publish a direct message:</p>
                              <ul xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                <li>
                                  <code>Publish(message message.OutboundMessage, destination *resource.Topic)</code>
                                </li>
                                <li>
                                  <code>PublishWithProperties(message message.OutboundMessage, destination *resource.Topic, properties config.MessagePropertiesConfigurationProvider)</code>
                                </li>
                                <li>
                                  <code>PublishBytes(message []byte, destination *resource.Topic)</code>
                                </li>
                                <li>
                                  <code>PublishString(message string, destination *resource.Topic)</code>
                                </li>
                              </ul>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"> See the <a href="../../API-Developer-Online-Ref-Documentation/go/index.html" class="link-internal"><span class="mc-variable Product-Names.pubsub_brand_only variable">PubSub+</span> Messaging API for Go reference</a> for information about the publish functions that are available when you use a  <code>DirectMessagePublisher</code>.</p>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Here's an example that shows how to publish a direct message:</p>
                              <pre xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd" xml:space="preserve">
messageBody := "Hello from Go Direct Publisher Sample"
messageBuilder := messagingService.MessageBuilder().     // Creates an OutboundMessageBuilder that can be used to build messages.
WithProperty("application", "samples").                  // Sets an individual message property on the resulting message.
WithProperty("language", "go")				  // Both Solace defined config.MessageProperty keys as well as user-defined property keys are accepted.

go func() {
	for directPublisher.IsReady() {                   // Checks if the publisher can publish messages.
	message, err := messageBuilder.BuildWithStringPayload(messageBody)
		if err != nil {
			panic(err)
		}

		topic := resource.TopicOf("go/persistent/publisher/")

		publishErr := directPublisher.Publish(message, topic)    // Publishes the message of type OutboundMessage to the specified destination
		if publishErr != nil {
			panic(publishErr)
		}
	}
}()</pre>
                              <h2 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd" class="with-rule"><a name="Handling-Errors"/>Handling Errors</h2>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">The Go API provides the <code>SetPublishFailureListener()</code> function that notifies the client if the API is unable to publish messages. A failed publish event could be due to an issue such as an invalid topic or a termination of the service.  See the example below:</p>
                              <pre xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd" xml:space="preserve">
func PublishFailureListener(){
// Handle a failed publish event
}
// ...
// ...
directPublisher, builderError := messagingService. 
	CreateDirectMessagePublisherBuilder(). // Creates a DirectMessagePublisherBuilder that can be used to configure direct message publisher instances.
	Build()                                // Creates a new DirectMessagePublisher instance based on the configured properties.
if builderErr != nil {
	panic(builderErr)
}
directPublisher.SetPublishFailureListener(PublishFailureListener) // Sets the listener to call if the publishing of a direct message fails.       </pre>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                    <div class="no-print">
                      <div>
                        <a href="#" id="docsFeedbackTrigger" class="docs-issue-collector">Provide feedback</a>
                      </div>
                    </div>
                    <footer class="my-4 pt-4 text-center no-print">
                      <div class="footer-txt text-center no-print">
                        <ul class="list-inline ">
                          <li class="list-inline-item text-muted"><a href="../../Resources/Documentation-Set.htm" class="doc-set-footer-link MCXref xref xrefdoc-set-footer-link">Documentation Coverage</a>: <span class="mc-variable Variables.DocumentSetNumber variable">2024.09.18.0001</span></li>
                          <li class="list-inline-item text-muted">Last Updated: <span class="mc-variable Variables.MonthDayYear variable">September 18, 2024</span></li>
                          <li class="list-inline-item text-muted" style="font-size:13px;"> &#xA9;  <span class="mc-variable Variables.CompanyNameLegal variable">Solace Corporation</span></li>
                        </ul>
                      </div>
                      <div class="footer-icons">
                        <ul class="list-inline">
                          <li class="list-inline-item">
                            <a href="https://facebook.com/solacedotcom" target="_blank" class="social-media-icon">
                              <img src="../../Resources/Images/Social-Media/facebook_22x21.png" class="Hyperlinked" alt="Facebook" title="Solace Facebook Page" style="width: 22;height: 21;"/>
                            </a>
                          </li>
                          <li class="list-inline-item">
                            <a href="https://www.linkedin.com/company/20219" target="_blank" class="social-media-icon">
                              <img src="../../Resources/Images/Social-Media/LinkedIn_22x21.png" class="Hyperlinked" alt="LinkedIn" title="Solace LinkedIn Page" style="width: 22;height: 21;"/>
                            </a>
                          </li>
                          <li class="list-inline-item">
                            <a href="https://twitter.com/solacedotcom" target="_blank" class="social-media-icon">
                              <img src="../../Resources/Images/Social-Media/Twitter_22x21.png" class="Hyperlinked" alt="Twitter" title="Solace Twitter Feed" style="width: 22;height: 21;"/>
                            </a>
                          </li>
                          <li class="list-inline-item">
                            <a href="https://www.youtube.com/user/SolaceSystems" target="_blank" class="social-media-icon">
                              <img src="../../Resources/Images/Social-Media/youtube_22x21.png" class="Hyperlinked" alt="YouTube" title="Solace YouTube Channel" style="width: 22;height: 21;"/>
                            </a>
                          </li>
                          <li class="list-inline-item">
                            <a href="https://www.instagram.com/solacedotcom/" target="_blank" class="social-media-icon">
                              <img src="../../Resources/Images/Social-Media/instagram_22x21.png" class="Hyperlinked" alt="Instagram" title="Solace Instagram Feed" style="width: 22;height: 21;"/>
                            </a>
                          </li>
                          <li class="list-inline-item">
                            <a href="https://medium.com/solacedotcom" target="_blank" class="social-media-icon">
                              <img src="../../Resources/Images/Social-Media/medium_22x21.png" class="Hyperlinked" alt="Medium" title="Solace Medium Blog" style="width: 22;height: 21;"/>
                            </a>
                          </li>
                        </ul>
                      </div>
                      <div class="footer_link_menu">
                        <ul class="link_list">
                          <li class="link_list_item">
                            <a href="https://solace.com/products/" target="_blank" class="footer-link">Products</a>
                          </li>
                          <li class="link_list_item">
                            <a href="https://solace.com/company/" target="_blank" class="footer-link">Company</a>
                          </li>
                          <li class="link_list_item">
                            <a href="https://www.solace.dev/" target="_blank" class="footer-link">Developers</a>
                          </li>
                          <li class="link_list_item">
                            <a href="https://solace.com/support/" target="_blank" class="footer-link">Support</a>
                          </li>
                          <li class="link_list_item">
                            <a href="https://solace.com/contact/" target="_blank" class="footer-link">Contact Us</a>
                          </li>
                        </ul>
                      </div>
                    </footer>
                  </div>
                  <!-- JIRA issue collector -->
                  <script>/*<![CDATA[*/// Requires jQuery!
jQuery.ajax({
    url: "https://sol-jira.atlassian.net/s/d41d8cd98f00b204e9800998ecf8427e-T/o2joag/b/24/e73395c53c3b10fde2303f4bf74ffbf6/_/download/batch/com.atlassian.jira.collector.plugin.jira-issue-collector-plugin:issuecollector-embededjs/com.atlassian.jira.collector.plugin.jira-issue-collector-plugin:issuecollector-embededjs.js?locale=en-US&collectorId=076e0808",
    type: "get",
    cache: true,
    dataType: "script"
});
window.ATL_JQ_PAGE_PROPS = {
"triggerFunction": function(showCollectorDialog) {
//Requires that jQuery is available!
$("#docsFeedbackTrigger").click(function(e) {
e.preventDefault();
showCollectorDialog();
});
},
fieldValues: {
recordWebInfo: '1', // field Name
recordWebInfoConsent: ['1'] // field Id
}
};
/*]]>*/</script>
                  <script src="../../Resources/Scripts/thumbnail.js">
                                    </script>
                  <!-- Script for Launching offsite links in new tab -->
                  <script type="text/javascript">/*<![CDATA[*/$("a[href^='http']").attr("target","_blank");/*]]>*/</script>
                </div>
              </div>
            </div>
          </div>
          <a data-close="true"/>
        </div>
      </div>
    </div>
  </body>
</html>
