<?xml version="1.0"?>
<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-us" xml:lang="en-us" class="_Skins_HTML5___Side_Navigation" data-mc-search-type="Stem" data-mc-help-system-file-name="Default.xml" data-mc-path-to-help-system="../../" data-mc-has-content-body="True" data-mc-toc-path="[%=System.LinkedTitle%]|[%=System.LinkedHeader%]|[%=System.LinkedTitle%]|[%=System.LinkedTitle%]" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic;Default" data-mc-preload-images="false" data-mc-in-preview-mode="false">
  <head>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
    <meta name="msapplication-config" content="../../Skins/Favicons/browserconfig.xml"/>
    <meta name="viewport" content="width=device-width, initial-scale=1"/>
    <link rel="apple-touch-icon" sizes="180x180" href="../../Skins/Favicons/apple-touch-icon.png"/>
    <link rel="shortcut icon" href="../../Skins/Favicons/favicon-32x32.png"/>
    <link rel="icon" sizes="96x96" href="../../Skins/Favicons/favicon-96x96.png"/>
    <link rel="icon" sizes="32x32" href="../../Skins/Favicons/favicon-32x32.png"/>
    <link rel="icon" sizes="16x16" href="../../Skins/Favicons/favicon-16x16.png"/>
    <meta charset="utf-8"/>
    <meta http-equiv="Cache-control" content="no-cache"/>
    <meta http-equiv="X-UA-Compatible" content="IE=edge"/>
    <title>Publishing Persistent Messages Using the Python API</title>
    <!-- <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous" /> -->
    <!--style to display feedback button correctly in IE-->
    <!-- Google Tag Manager -->
    <!-- End Google Tag Manager -->
    <!-- links to get the EDA styling to work -->
    <link href="../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" type="text/css" data-mc-generated="True"/>
    <link href="../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" type="text/css" data-mc-generated="True"/>
    <link href="../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" type="text/css" data-mc-generated="True"/>
    <link href="../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" type="text/css" data-mc-generated="True"/>
    <link href="../../Skins/Default/Stylesheets/Components/Tablet.css" rel="stylesheet" type="text/css" data-mc-generated="True"/>
    <link href="../../Skins/Default/Stylesheets/Components/Mobile.css" rel="stylesheet" type="text/css" data-mc-generated="True"/>
    <link href="../../Skins/Default/Stylesheets/Components/Print.css" rel="stylesheet" type="text/css" data-mc-generated="True"/>
    <link href="../../Skins/Fluid/Stylesheets/foundation.6.2.3.css" rel="stylesheet" type="text/css" data-mc-generated="True"/>
    <link href="../../Skins/Fluid/Stylesheets/Styles.css" rel="stylesheet" type="text/css" data-mc-generated="True"/>
    <link href="../../Skins/Fluid/Stylesheets/Tablet.css" rel="stylesheet" type="text/css" data-mc-generated="True"/>
    <link href="../../Skins/Fluid/Stylesheets/Mobile.css" rel="stylesheet" type="text/css" data-mc-generated="True"/>
    <link href="../../Skins/Fluid/Stylesheets/Print.css" rel="stylesheet" type="text/css" data-mc-generated="True"/>
    <link href="../../Resources/Stylesheets/MainStyles.min.css" rel="stylesheet" type="text/css"/>
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet"/>
    <style>@media screen and (min-width: 0\0)
{
	.feedback-button
	{
		margin-right: -40px;
		top: 50%;
		border-radius: 9px 9px 0px 0px;
	}

	#canvas
	{
		position: relative;
	}
}

@media print
{
	#plugin
	{
		overflow: visible !important;
	}
}

</style>
    <link href="../../Resources/Stylesheets/eda_styles.css" rel="stylesheet" type="text/css"/>
    <link href="https://fonts.googleapis.com/css?family=Open+Sans:400,600,300" rel="stylesheet" type="text/css"/>
    <style>/*&lt;meta /&gt;*/

.button.print-button
{
	-pie-background: linear-gradient(#ffffff, transparent);
}

.button.previous-topic-button
{
	-pie-background: linear-gradient(#ffffff, transparent);
}

.button.next-topic-button
{
	-pie-background: linear-gradient(#ffffff, transparent);
}

.needs-pie
{
	behavior: url('../../Resources/Scripts/PIE-no-motw.htc');
}

</style>
    <link rel="apple-touch-icon" sizes="180x180" href="../../Skins/Favicons/apple-touch-icon.png"/>
    <link rel="shortcut icon" href="../../Skins/Favicons/favicon-32x32.png"/>
    <link rel="icon" sizes="96x96" href="../../Skins/Favicons/favicon-96x96.png"/>
    <link rel="icon" sizes="32x32" href="../../Skins/Favicons/favicon-32x32.png"/>
    <link rel="icon" sizes="16x16" href="../../Skins/Favicons/favicon-16x16.png"/>
    <script src="../../Resources/Scripts/jquery.min.js" type="text/javascript">
        </script>
    <script src="../../Resources/Scripts/purify.min.js" type="text/javascript" defer="defer">
        </script>
    <script src="../../Resources/Scripts/require.min.js" type="text/javascript" defer="defer">
        </script>
    <script src="../../Resources/Scripts/require.config.js" type="text/javascript" defer="defer">
        </script>
    <script src="../../Resources/Scripts/foundation.6.2.3_custom.js" type="text/javascript" defer="defer">
        </script>
    <script src="../../Resources/Scripts/plugins.min.js" type="text/javascript" defer="defer">
        </script>
    <script src="../../Resources/Scripts/MadCapAll.js" type="text/javascript" defer="defer">
        </script>
    <script src="https://cmp.osano.com/AzZrhlTmT5f216Foa/84ba7dc4-a4e5-4b02-b120-977eb6f052d4/osano.js">
        </script>
    <script type="text/javascript">/*<![CDATA[*/(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
			new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
			j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
			'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
			})(window,document,'script','dataLayer','GTM-KLSDFH');
		/*]]>*/</script>
    <script type="text/javascript" src="../../Skins/Default/Scripts/TopicToolBar.js">
        </script>
  </head>
  <!-- Top Orange and Darkgrey header-->
  <!-- Div for EDA banner -->
  <div class="eda_banner">
    <p>Register Now for EDA Summit 2024 - Virtual Event <a href="https://edasummit.com/" target="_blank">Register for Free</a></p>
  </div>
  <!-- end Div for EDA banner -->
  <div class="top-nav">
    <div class="main_list">
      <ul class="top-navlinks">
        <li>
          <a href="https://solace.com/support/" target="_blank">Support</a>
        </li>
        <li>
          <a href="https://solace.com/contact/" target="_blank">Contact Us</a>
        </li>
      </ul>
    </div>
    <div class="container-fluid">
      <div class="src-li">
        <div id="srchWrapTwo">
          <form class="search" action="#">
            <div class="search-bar search-bar-container needs-pie">
              <input class="search-field needs-pie" type="search" aria-label="Search Field" placeholder="Search the docs"/>
              <div class="search-filter-wrapper">
                <span class="invisible-label" id="search-filters-label">Filter: </span>
                <div class="search-filter" aria-haspopup="true" aria-controls="sf-content" aria-expanded="false" aria-label="Search Filter" title="All Files" role="button" tabindex="0">
                                </div>
                <div class="search-filter-content" id="sf-content">
                  <ul>
                    <li>
                      <button class="mc-dropdown-item" aria-labelledby="search-filters-label filterSelectorLabel-00001">
                        <span id="filterSelectorLabel-00001">All Files</span>
                      </button>
                    </li>
                  </ul>
                </div>
              </div>
              <div class="search-submit-wrapper" dir="ltr">
                <div class="search-submit" title="Search" role="button" tabindex="0">
                  <span class="invisible-label">Submit Search</span>
                </div>
              </div>
            </div>
          </form>
        </div>
      </div>
      <span class="tool-tip" tooltip-position="left" tooltip="To search for CLI commands, events, or APIs, navigate to the related sections.">i</span>
      <!-- Sept. 28, 2022 - This is being moved to under div class= top-nav
			<div class="main_list">
				<ul class="top-navlinks">
					<li><a href="https://solace.com/support/" target="_blank">Support</a></li>
					<li><a href="https://solace.com/contact/" target="_blank">Contact Us</a></li>
				</ul>
			</div> -->
    </div>
    <!-- Sept. 27, 2022 - The commented out content below used to provide the products, company, etc., links in the top header, next to the search field. -->
    <!-- <div class="main_list"><ul class="top-navlinks"><li><a href="https://solace.com/products/" target="_blank">Products</a></li><li><a href="https://solace.com/company/" target="_blank">Company</a></li><li><a href="https://www.solace.dev/" target="_blank">Developers</a></li><li><a href="https://solace.com/support/" target="_blank">Support</a></li><li><a href="https://solace.com/contact/" target="_blank">Contact Us</a></li></ul></div> -->
  </div>
  <body>
    <div class="foundation-wrap off-canvas-wrapper">
      <div class="off-canvas-wrapper-inner" data-off-canvas-wrapper="">
        <aside class="off-canvas position-right" role="navigation" id="offCanvas" data-off-canvas="" data-position="right" data-mc-ignore="true">
          <ul class="off-canvas-accordion vertical menu off-canvas-list" data-accordion-menu="" data-mc-back-link="Back" data-mc-css-tree-node-expanded="is-accordion-submenu-parent" data-mc-css-tree-node-collapsed="is-accordion-submenu-parent" data-mc-css-sub-menu="vertical menu is-accordion-submenu nested" data-mc-include-indicator="False" data-mc-include-icon="False" data-mc-include-parent-link="True" data-mc-include-back="False" data-mc-defer-expand-event="True" data-mc-expand-event="click.zf.accordionMenu" data-mc-toc="True">
                    </ul>
        </aside>
        <div class="off-canvas-content inner-wrap" data-off-canvas-content="">
          <div data-sticky-container="" class="title-bar-container">
            <nav class="title-bar tab-bar sticky" role="banner" data-sticky="" data-options="marginTop:0" style="width:100%" data-sticky-on="only screen and (max-width: 1000px)" data-mc-ignore="true">
              <a class="skip-to-content fluid-skip showOnFocus" href="#">Skip To Main Content</a>
              <div class="middle title-bar-section outer-row clearfix">
                <div class="menu-icon-container relative clearfix">
                  <div class="central-account-wrapper">
                    <div class="central-dropdown">
                      <a class="central-account-drop">
                        <span class="central-account-image"/>
                        <span class="central-account-text">Account</span>
                      </a>
                      <div class="central-dropdown-content">
                        <a class="MCCentralLink central-dropdown-content-settings">Settings</a>
                        <hr class="central-separator"/>
                        <a class="MCCentralLink central-dropdown-content-logout">Logout</a>
                      </div>
                    </div>
                  </div>
                  <button class="menu-icon" aria-label="Show Navigation Panel" data-toggle="offCanvas">
                    <span/>
                  </button>
                </div>
              </div>
              <div class="title-bar-layout outer-row">
                <div class="logo-wrapper">
                  <a class="logo" href="../../index.html" alt="Logo"/>
                </div>
                <div class="navigation-wrapper nocontent">
                  <ul class="navigation clearfix" role="navigation" data-mc-css-tree-node-has-children="has-children" data-mc-css-sub-menu="sub-menu" data-mc-expand-event="mouseenter" data-mc-top-nav-menu="True" data-mc-max-depth="3" data-mc-include-icon="False" data-mc-include-indicator="False" data-mc-include-children="True" data-mc-include-siblings="True" data-mc-include-parent="True" data-mc-toc="True">
                    <li class="placeholder" style="visibility:hidden">
                      <a>placeholder</a>
                    </li>
                  </ul>
                </div>
                <div class="central-account-wrapper">
                  <div class="central-dropdown">
                    <a class="central-account-drop">
                      <span class="central-account-image"/>
                      <span class="central-account-text">Account</span>
                    </a>
                    <div class="central-dropdown-content">
                      <a class="MCCentralLink central-dropdown-content-settings">Settings</a>
                      <hr class="central-separator"/>
                      <a class="MCCentralLink central-dropdown-content-logout">Logout</a>
                    </div>
                  </div>
                </div>
                <div class="nav-search-wrapper">
                  <div class="nav-search row">
                    <form class="search" action="#">
                      <div class="search-bar search-bar-container needs-pie">
                        <input class="search-field needs-pie" type="search" aria-label="Search Field" placeholder="Search the docs"/>
                        <div class="search-filter-wrapper">
                          <span class="invisible-label" id="search-filters-label">Filter: </span>
                          <div class="search-filter" aria-haspopup="true" aria-controls="sf-content" aria-expanded="false" aria-label="Search Filter" title="All Files" role="button" tabindex="0">
                                                    </div>
                          <div class="search-filter-content" id="sf-content">
                            <ul>
                              <li>
                                <button class="mc-dropdown-item" aria-labelledby="search-filters-label filterSelectorLabel-00001">
                                  <span id="filterSelectorLabel-00001">All Files</span>
                                </button>
                              </li>
                            </ul>
                          </div>
                        </div>
                        <div class="search-submit-wrapper" dir="ltr">
                          <div class="search-submit" title="Search" role="button" tabindex="0">
                            <span class="invisible-label">Submit Search</span>
                          </div>
                        </div>
                      </div>
                    </form>
                  </div>
                </div>
              </div>
            </nav>
          </div>
          <div class="main-section">
            <div class="row outer-row sidenav-layout">
              <nav class="sidenav-wrapper">
                <div class="sidenav-container">
                  <ul class="off-canvas-accordion vertical menu sidenav" data-accordion-menu="" data-mc-css-tree-node-expanded="is-accordion-submenu-parent" data-mc-css-tree-node-collapsed="is-accordion-submenu-parent" data-mc-css-sub-menu="vertical menu accordion-menu is-accordion-submenu nested" data-mc-include-indicator="False" data-mc-include-icon="False" data-mc-include-parent-link="False" data-mc-include-back="False" data-mc-defer-expand-event="True" data-mc-expand-event="click.zf.accordionMenu" data-mc-toc="True" data-mc-side-nav-menu="True">
                                    </ul>
                </div>
              </nav>
              <div class="body-container">
                <div data-mc-content-body="True">
                  <div class="buttons popup-container clearfix topicToolbarProxy _Skins_TopicToolBar mc-component nocontent" style="mc-topic-toolbar-items: PreviousTopic Print NextTopic;">
                    <div class="button-group-container-left">
                      <button class="button needs-pie print-button" title="Print">
                        <div>
                          <div role="img" class="button-icon-wrapper" aria-label="Print">
                            <div class="button-icon"> </div>
                          </div>
                        </div>
                      </button>
                      <button class="button needs-pie previous-topic-button" title="Navigate previous topic" disabled="true">
                        <div>
                          <div role="img" class="button-icon-wrapper" aria-label="Navigate previous">
                            <div class="button-icon"> </div>
                          </div>
                        </div>
                      </button>
                      <button class="button needs-pie next-topic-button" title="Navigate next topic" disabled="true">
                        <div>
                          <div role="img" class="button-icon-wrapper" aria-label="Navigate next">
                            <div class="button-icon"> </div>
                          </div>
                        </div>
                      </button>
                    </div>
                  </div>
                  <!-- Google Tag Manager (noscript) -->
                  <noscript>
                    <iframe src="https://www.googletagmanager.com/ns.html?id=GTM-KLSDFH" height="0" width="0" style="display:none;visibility:hidden"/>
                  </noscript>
                  <!-- End Google Tag Manager (noscript) -->
                  <div id="content">
                    <div id="contentBody">
                      <div class="row collapse">
                        <div xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd" class="ContentRow">
                          <div>
                            <div xmlns="" class="nocontent">
                              <div class="MCBreadcrumbsBox_MCBreadcrumbsSelf_0 breadcrumbs" role="navigation" aria-label="Breadcrumbs" data-mc-breadcrumbs-divider=" / " data-mc-breadcrumbs-count="4" data-mc-toc="True">
                                <span class="MCBreadcrumbsPrefix"> </span>
                              </div>
                            </div>
                            <div xmlns="" role="main" id="mc-main-content">
                              <h1 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><a name="Publishing-Persistent-Messages-Python-API"/>Publishing Persistent Messages Using the Python API</h1>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">When your applications require confirmation handling and <i>at least once</i> delivery, we recommend that you use persistent messages instead of  direct messages. To publish persistent messages in the <span class="mc-variable Product-Names.pubsub_brand_only variable">PubSub+</span> Python API,  you first set up a message queue on the <span class="mc-variable Product-Names.pubsub_brand_only variable">PubSub+</span> event broker. </p>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"> For information about creating and configuring queues on an event broker, see <a href="../../Messaging/Guaranteed-Msg/Configuring-Queues.htm" class="MCXref xref">Configuring Queues</a>. </p>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">To  publish persistent messages using the <span class="mc-variable Product-Names.pubsub_brand_only variable">PubSub+</span> Messaging API for Python, use the following steps:</p>
                              <ol xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                <li value="1"><a href="#Creating-A-PersistentMessagePublisher-Object" class="link-internal">Create a PersistentMessagePublisher</a>.</li>
                                <li value="2"><a href="#Configuring-Messages" class="link-internal">Configure and Create an OutboundMessage</a>.</li>
                                <li value="3"><a href="#Configuring-Back-Pressure" class="link-internal">Handling Back-Pressure When Publishing Persistent Messages</a>.</li>
                                <li value="4"><a href="#Publishing-A-Persistent-Message" class="link-internal">Publish a Persistent Message</a>.</li>
                                <li value="5"><a href="#Message-Receipts-and-Error-Handling" class="link-internal">Acknowledging Messages and Handling Errors</a>.</li>
                                <li value="6"><a href="#user-contexts" class="link-internal">User Contexts</a>.</li>
                              </ol>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">In some use cases, it's possible for your application to send messages faster than the messages can be transported. This may cause messages to accumulate in the API internal buffers causing back-pressure. If this scenario is possible, consider changing the back-pressure settings to meet the requirements of your application. For more information, see <a href="#Configuring-Back-Pressure" class="MCXref xref">Handling Back-Pressure When Publishing Persistent Messages</a>.</p>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">For examples of applications  that publish persistent messages, see <a href="https://github.com/SolaceSamples/solace-samples-python/blob/main/patterns/guaranteed_publisher.py" class="link-offsite">guaranteed_publisher.py</a> on the <span class="mc-variable Variables.CompanyName variable">Solace</span> GitHub page.</p>
                              <h2 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd" class="with-rule"><a name="Creating-A-PersistentMessagePublisher-Object"/>Creating a PersistentMessagePublisher</h2>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">After a <code>MessagingService</code> instance has established a connection to an event broker, use a <code>PersistentMessagePublisher</code> to publish persistent messages.  To create a <code>PersistentMessagePublisher</code> object, do the following:</p>
                              <ol xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                <li value="1">
                                  <p>Call the <code>create_persistent_message_publisher_builder()</code> function on a <code>MessagingService</code> object. This returns a <code>PersistentMessagePublisherBuilder</code> object.</p>
                                </li>
                                <li value="2">
                                  <p>You can now use the functions in the <code>PersistentMessagePublisherBuilder</code> interface to configure a <code>PersistentMessagePublisher</code> to use certain features of the API, such as back-pressure strategies.</p>
                                </li>
                                <li value="3">
                                  <p>Call the <code>build()</code> function on your <code>PersistentMessagePublisherBuilder</code> to return a <code>PersistentMessagePublisher</code> object.</p>
                                </li>
                                <li value="4">
                                  <p>To enable your <code>PersistentMessagePublisher</code> to start publishing messages, call the <code>start()</code> function on it.</p>
                                </li>
                              </ol>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">For more information, see the <a href="../../API-Developer-Online-Ref-Documentation/python/index.html" class="link-internal"><span class="mc-variable Product-Names.pubsub_brand_only variable">PubSub+</span> Messaging API for Python reference</a>.</p>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">The following is an example that shows how to use  a persistent message publisher to enable your application to publish messages to the event broker:</p>
                              <pre xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd" xml:space="preserve">
# Create a PersistentMessagePublisherBuilder which allows you to create a PersistentMessagePublisher and start it
persistent_publisher = messaging_service.create_persistent_message_publisher_builder() \
               .on_back_pressure_reject(1000) \
               .build()

# Starts the configured PersistentMessagePublisher synchronously. Before the start() function is called, the publisher is considered off-duty
persistent_publisher.start()		</pre>
                              <h3 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Asynchronous Publishers</h3>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">It is also possible to start a persistent message publisher using a callback listener to allow for asynchronous notifications after the start operation is complete.</p>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">In the <span class="mc-variable Product-Names.pubsub_brand_only variable">PubSub+</span> Python API, you can use the <code>start_async()</code> function to start a <code>PersistentMessagePublisher</code> asynchronously. This allows the publisher object to start in a separate background thread, which means you can start multiple publishers concurrently or your code can continue to execute and you do not have wait for the function to return. </p>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">The example below shows 1000 publishers being started asynchronously. The <code>wait()</code> function blocks the application until all publishers have been started.</p>
                              <pre xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd" xml:space="preserve">
import concurrent.futures
# ...
publishers = [persistent_message_publisher_builder.build() for _ in range(10)]
futures_to_publisher = { publisher.start_async() : publisher for publisher in publishers}

for future in concurrent.futures.as_completed(futures_to_publisher):
    publisher = futures_to_publisher[future]
    try:
        # start async has no return but will raise an on start failure
        future.result()
        print(f'Publisher {id(publisher)} started successfully')
    except Exception as err:
        print(f'Publisher {id(publisher)} generated an error: {err}') </pre>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd" class="Note">Your publisher application is not operational until you call <code>start()</code> or <code>start_async()</code> on it.</p>
                              <h2 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd" class="with-rule"><a name="Configuring-Messages"/>Configuring and Creating Outbound Messages</h2>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Your client applications explicitly create the outbound messages to publish. In the <span class="mc-variable Product-Names.pubsub_brand_only variable">PubSub+</span> Python API, when you publish messages you use <code>OutboundMessage</code> instances. To configure and create <code>OutboundMessage</code> instances, follow these steps: </p>
                              <ol xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                <li value="1">
                                  <p>Call  <code>message_builder()</code> on a messaging service object to return an <code>OutboundMessageBuilder</code> instance. For better performance, we recommend you use a single <code>OutboundMessageBuilder</code> to create multiple <code>OutboundMessage</code> instances. </p>
                                  <pre xml:space="preserve">outbound_msg_builder = messaging_service.message_builder()</pre>
                                </li>
                                <li value="2">Configure your message with an <code>OutboundMessageBuilder</code> and then call the <code>build()</code> function to return a message instance. You can configure message properties using either method below.
			
				<ul><li>Use the <code>OutboundMessageBuilder</code> interface and the <code>with_property(propertyName,propertyValue)</code> functions. Both <span class="mc-variable Variables.CompanyName variable">Solace</span> defined <code>message_properties</code> keys as well as arbitrary user-defined property keys are accepted. The following example shows how to set <span class="mc-variable Variables.CompanyName variable">Solace</span> defined properties for message ID, sender ID and message type, and a custom key-value property on a message:<pre xml:space="preserve">
message_builder = messaging_service.message_builder()   \
               .with_application_message_id("myID") \
               .with_sender_id("senderID") \
               .with_application_message_type("messageType") \
               .with_property("key","value") \
               .build(message_body)</pre></li><li>Use a message properties dictionary with the <code>message_properties.*</code> keys. The following example shows how to create a message property dictionary with values for message ID, sender ID and message type constants, and then configure a message using the <code>from_properties()</code> function:		<pre xml:space="preserve">
from solace.messaging.config.solace_properties import message_properties
# ...
message_props = {
    message_properties.APPLICATION_MESSAGE_ID: "myID",
    message_properties.SENDER_ID: "senderID",
    message_properties.APPLICATION_MESSAGE_TYPE: "messageType"
    # For a complete list of message_properties constants see the <a href="../../API-Developer-Online-Ref-Documentation/python/index.html" class="link-internal"><span class="mc-variable Product-Names.pubsub_brand_only variable">PubSub+</span> Messaging API for Python reference</a>.
    }							
# ...												
outbound_msg = outbound_msg_builder \
               .from_properties(message_props) \
               .build(message_body)</pre></li></ul></li>
                              </ol>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">The following code example shows how to create a message builder, set message properties and create a message:</p>
                              <pre xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd" xml:space="preserve">
# Builder for creation of similarly configured messages. 
message_builder = messaging_service.message_builder()   \
               .with_application_message_id(message_id) \
               .from_properties(message_props) \
               .with_property("key","value") \
               .build(message_body)</pre>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">For more information about the functions, see the <a href="../../API-Developer-Online-Ref-Documentation/python/index.html" class="link-internal"><a href="../../API-Developer-Online-Ref-Documentation/python/index.html" class="link-internal"><span class="mc-variable Product-Names.pubsub_brand_only variable">PubSub+</span> Messaging API for Python reference</a></a>.</p>
                              <h3 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><a name="Setting"/>Setting a Partition Key</h3>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">You can set a partition key to use partitioned queues. Partitioned Queues is a feature available on the <span class="mc-variable Product-Names.pubsub_brand_only variable">PubSub+</span> event broker that allows you to easily scale the number of consumer applications bound to a queue. A partition key can be set on each message in the publishing application to ensure that all messages with the same partition key are delivered to the same consumer without additional logic in the consumer application. For more information see <a href="../../Messaging/Guaranteed-Msg/Queues.htm#partitioned-queues" class="MCXref xref">Partitioned Queues</a>.</p>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">The partition key is a property of a published message, so use the <code>with_property(property,value)</code> to set a property-value pair on a Python API message.</p>
                              <ul xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                <li>
                                  <p><code>property</code>&#x2014;The constant <code>message_user_property_constants.QUEUE_PARTITION_KEY</code> or the string value <code>JMSXGroupID</code>.</p>
                                </li>
                                <li>
                                  <p><code>value</code>&#x2014;A string representing the value of your partition key. Client applications set the value at publish time. </p>
                                </li>
                              </ul>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">The following example shows how to create a message and publish it to a queue partition:</p>
                              <pre xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd" xml:space="preserve"># Set the queue partition key on the outbound message using the with_property() builder method.
def set_queue_partition_key_using_with_property(queue_partition_key_value: str):
    payload = "my_payload"
    outbound_message = MessagingService \
        .message_builder() \
        .with_property(message_user_property_constants.QUEUE_PARTITION_KEY, queue_partition_key_value) \
        .build(payload)

# You can also set the queue partition key on the outbound message using the from_properties() builder method.
def set_queue_partition_key_using_from_properties(queue_partition_key_value: str):
    payload = "my_payload"
    additional_properties  = {message_user_property_constants.QUEUE_PARTITION_KEY, queue_partition_key_value}
    outbound_message = MessagingService \
        .message_builder() \
        .from_properties(additonal_properties) \
        .build(my_payload)
</pre>
                              <h2 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd" class="with-rule"><a name="Configuring-Back-Pressure"/>Handling Back-Pressure When Publishing Persistent Messages</h2>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">When you use persistent messaging, the messages are sent to the <span class="mc-variable Product-Names.pubsub_brand_only variable">PubSub+</span> event broker with a topic and may be enqueued on any queue with a matching topic subscription. The event broker then delivers the messages asynchronously to any consumers subscribed to that queue. At the time the client application publishes the persistent message,  the API  queues the message in an internal buffer before it is  sent to the event broker. In ideal conditions, as soon the application publishes a message, the API sends that message to the network, and that message is eventually received by  event broker. It is possible for the client application to publish messages more quickly than the API can send them to the broker due to network  congestion or connectivity issues. This delay can cause the internal buffer to accumulate messages until it reaches its capacity,  preventing the API from storing any more messages. This scenario is referred to as <i>back-pressure</i>. It is important to configure your application to handle situations where back-pressure occurs.</p>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">In the <span class="mc-variable Product-Names.pubsub_brand_only variable">PubSub+</span> Python API, the <code>PersistentMessagePublisher</code> has the following  mechanisms to handle back-pressure:</p>
                              <ul xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                <li>
                                  <a href="#no-limit" class="link-internal">use an unlimited internal publishing buffer (default)</a>
                                </li>
                                <li>
                                  <a href="#reject" class="link-internal">reject messages when a specified limit is reached</a>
                                </li>
                                <li>
                                  <a href="#throttle" class="link-internal">throttle the application  when a specified limit is reached</a>
                                </li>
                              </ul>
                              <h3 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><a name="no-limit"/>Configuring an Unlimited Internal Buffer </h3>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">The default configuration for the API is to use an unlimited sized internal buffer for messages. When you use an unlimited buffer, the Python API&#xA0;continuously  puts messages published by the client application on the internal buffer. This configuration is useful for situations where your publishers need to send a lot of data quickly, even when the network cannot keep up without blocking. This configuration, called <code>on_back_pressure_elastic()</code>, is also useful because you don't have to write code to tell your application how to handle scenarios where the internal buffer reaches capacity.</p>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">We recommend this configuration when dealing with data sizes that do not overly strain your system resources, whether they are small or large. It's important to note that data size plays an important role in determining transmission bandwidth, affecting how quickly your application can write data to the socket. A large number of small messages, or a small number of large messages can both strain your application's resources. If your application lacks stability when using elastic back-pressure, we recommend you use alternative back-pressure strategies like 'wait' or 'reject' to manage flow control for your application. </p>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd" class="Caution">This configuration is not suitable for memory restrictive environments because the buffer is allowed to grow indefinitely, and it can cause out-of-memory errors (or potentially  undefined errors).  This configuration is useful when your infrastructure is made up of several microservices which are short-lived, and can provide publishing redundancy for the unlikely event of an internal queue encountering an out-of-memory scenario.  </p>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"> The following example shows an explicit call to the  <code>on_back_pressure_elastic()</code> function, which is not required because it is the default behavior:</p>
                              <pre xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd" xml:space="preserve">
# Create a PersistentMessagePublisherBuilder which allows you to create a PersistentMessagePublisher and start it
persistent_publisher = messaging_service.create_persistent_message_publisher_builder() \
               .on_back_pressure_elastic() \
               .build()

# Starts the configured PersistentMessagePublisher synchronously. Before the start() function is called, the publisher is considered off-duty
persistent_publisher.start()		</pre>
                              <h3 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><a name="reject"/>Rejecting Messages When A Specified Limit is Reached </h3>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">When back-pressure occurs, you can choose to reject the messages from the client application when a specified limit is reached in the internal buffer. You can use the <code>on_back_pressure_reject(buffer_capacity: int)</code> function to specify a defined buffer capacity for a set number of messages to accumulate. After the specified capacity is reached, it is no longer possible to publish new messages and the API&#xA0;returns <code>PublisherOverflowError</code> until the buffer has capacity again.  If <code>buffer_capacity</code> is set to zero, the Python API does not buffer any outbound messages and rejects immediately when unable to write a message to the native library.</p>
                              <pre xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd" xml:space="preserve">
# Create a PersistentMessagePublisherBuilder which allows you to create a PersistentMessagePublisher and start it
persistent_publisher = messaging_service.create_persistent_message_publisher_builder() \
               .on_back_pressure_reject(1000) \
               .build()

# Starts the configured PersistentMessagePublisher synchronously. Before the start() function is called, the publisher is considered off-duty
persistent_publisher.start()		</pre>
                              <h4 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Using a Publisher Readiness Listener</h4>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">We recommend that you use a <code>PublisherReadinessListener</code> when you use the <code>on_back_pressure_reject()</code> function because it lets your application known when there is capacity available in the buffer and it can resume publishing messages. </p>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">The following is an example of  registering an event handler <code>PublisherReadinessListener</code> instance: </p>
                              <pre xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd" xml:space="preserve">
class CanPublishListener(PublisherReadinessListener):
    def ready(self):
        # This method is executed when the publisher is ready to publish again
        # You can use this callback to handle message publishing when backpressure is relieved
        pass
# ...
# ...
persistent_publisher.set_publisher_readiness_listener(CanPublishListener())    
			
# Initiator for the callback
some_condition_is_true = True
while some_condition_is_true:
    # prepare/process some data prior to publishing a message...
    try:
        message_publisher.publish("can't send, buffer over capacity", my_topic)
    except PublisherOverflowError as e:
        # Handle the overflow exception (backpressure)
        # You can do some work here or signal to slow down message publishing
        pass			  	</pre>
                              <h3 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><a name="throttle"/>Throttling the Publisher When a Specified Limit is Reached</h3>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">You can choose to throttle the publishing application if a specified limit is reached in the internal buffer.  The use of throttling is useful when applications can block and wait for capacity to appear in the buffer. You can use the <code>on_back_pressure_wait(buffer_capacity: int)</code> function to set the maximum number of messages that can accumulate in the buffer. When this maximum capacity (<code>buffer_capacity</code>) is reached, the publisher routine blocks and waits for  available capacity in the internal buffer before letting the application publish any more messages. The back pressure strategy of <code>on_back_pressure_wait()</code> will <b>not</b> call a <code>PublisherReadinessListener</code>.</p>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"> This function should be used when you want application requests to take longer after the buffer's capacity has been reached. Using this mechanism effectively gives time for the API to empty the internal buffer. </p>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">The following shows an example of how to configure an internal buffer to accommodate up to one thousand messages:</p>
                              <pre xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd" xml:space="preserve">
# Create a PersistentMessagePublisherBuilder which allows you to create a PersistentMessagePublisher and start it
persistent_publisher = messaging_service.create_persistent_message_publisher_builder() \
               .on_back_pressure_wait(1000) \
               .build()

# Starts the configured PersistentMessagePublisher synchronously. Before the start() function is called, the publisher is considered off-duty
persistent_publisher.start()		</pre>
                              <h2 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd" class="with-rule"><a name="Publishing-A-Persistent-Message"/>Publishing a Persistent Message</h2>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">After you have established a connection to the event broker using a <code>MessagingService</code> instance, you can use a <code>PersistentMessagePublisher</code> to publish persistent messages.</p>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"> A persistent message has the following components: </p>
                              <ul xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                <li>A topic to publish to (required) </li>
                                <li>A message payload (optional) </li>
                              </ul>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Persistent message publishing involves the receipt of acknowledgments or <i>publish receipts</i>. Depending on your requirements, your client application can publish as:</p>
                              <ul xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                <li>   asynchronous, allows your application to perform other functions while the <code>PublishReceiptListener</code> waits for the acknowledgment</li>
                                <li>synchronous,  waits until an acknowledgment has been received; an acknowledge indicates that the message has been received and persisted by the broker</li>
                              </ul>
                              <h3 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><a name="non-block-methods"/>Asynchronous Publish Function </h3>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">The following is an asynchronous publish function:</p>
                              <ul xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                <li>
                                  <code>publish(message: bytearray | str | OutboundMessage, destination: Topic, user_context: Any | None = None, additional_message_properties: Dict[str, str | int | float | bool | dict | list | tuple | bytearray | None] | None = None)</code>
                                  <ul>
                                    <li><code>message</code>&#x2014;The outbound message that can be an <code>OutboundMessage</code> object, <code>bytearray</code>, or <code>str</code>. If the payload is a <code>bytearray</code> or <code>str</code>, the API creates an <code>OutboundMessage</code> object to send.</li>
                                    <li><code>destination</code>&#x2014;The <code>Topic</code> to publish to.</li>
                                    <li><code>user-context</code>&#x2014;The context associated with an action that is performed when the message delivery to the broker is confirmed using <code>MessagePublishReceiptListener.on_publish_receipt()</code> When the user-context is not supposed to be available, omit the <code>user_context</code> parameter. For more information, see <a href="#user-contexts" class="MCXref xref">User Contexts</a>.</li>
                                    <li><code>additional_message_properties</code>&#x2014;Additional key-value properties to customize a message. Each key can be customer provided, or it can be a key from of type<code> solace.messaging.config.solace_properties.message_properties</code>.</li>
                                  </ul>
                                </li>
                              </ul>
                              <pre xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd" xml:space="preserve">
# Sends a persistent message asynchronously
persistent_publisher.publish(my_message, topic_to_publish_to)             </pre>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">For more information about these functions, see the <a href="../../API-Developer-Online-Ref-Documentation/python/index.html" class="link-internal"><span class="mc-variable Product-Names.pubsub_brand_only variable">PubSub+</span> Messaging API Python reference</a>.</p>
                              <h3 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><a name="block-methods"/>Synchronous Publish Function</h3>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Synchronous publish functions do not return until the message has been received, written to persistent storage, and acknowledged by the event broker. The <span class="mc-variable Product-Names.pubsub_brand_only variable">PubSub+</span> Python API provides the following synchronous function for publishing messages: </p>
                              <ul xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                <li>
                                  <code>publish_await_acknowledgement(message: bytearray | str | OutboundMessage, destination: Topic, time_out: int | None = None, additional_message_properties: Dict[str, str | int | float | bool | dict | list | tuple | bytearray | None] | None = None)</code>
                                  <ul>
                                    <li><code>message</code>&#x2014;The outbound message that can be an <code>OutboundMessage</code> object, <code>bytearray</code>, or <code>str</code>. If the payload is a <code>bytearray</code> or <code>str</code>, the API creates an <code>OutboundMessage</code> object to send.</li>
                                    <li><code>destination</code>&#x2014;The <code>Topic</code> to publish to.</li>
                                    <li><code>time_out</code>&#x2014;The maximum time (in milliseconds) to wait for a message acknowledgement. </li>
                                    <li><code>additional_message_properties</code>&#x2014;Additional key-value properties to customize a message. Each key can be customer provided, or it can be a key from of type<code> solace.messaging.config.solace_properties.message_properties</code>.</li>
                                  </ul>
                                </li>
                              </ul>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">The preceding function can be used with a <code>PersistentMessagePublisher</code> to publish an <code>OutboundMessage</code> to the broker using a topic. This function blocks the main routine until either:</p>
                              <ul xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                <li>the publisher API receives an acknowledgment from the broker </li>
                                <li> the timeout period elapses</li>
                              </ul>
                              <pre xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd" xml:space="preserve">
# Sends a persistent message, blocking until publish acknowledgment is received or timeout occurs.
persistent_publisher.publish_await_acknowledgement(my_message, topic_to_publish_to, 1000, None)             </pre>
                              <h2 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd" class="with-rule"><a name="Message-Receipts-and-Error-Handling"/>Acknowledging Messages and Handling Errors</h2>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">A publish receipt is a delivery confirmation that indicates whether or not the event broker successfully processed the message. These publish receipts can indicate success or failure, and are handled by a <code>MessagePublisReceiptListener</code> instance. You can set your <code>MessagePublishReceiptListener</code> with the <code>set_message_publish_receipt_listener()</code> function. </p>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">The following example shows how to use the  <code>MessagePublishReceiptListener</code> to listen for publish receipts:</p>
                              <pre xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd" xml:space="preserve">
# An example implementation of the Message publish listener interface to process broker message publish notifications.
class MessageReceiptListener(MessagePublishReceiptListener):
    def __init__(self):
        self._receipt_count = 0
    @property
    def receipt_count(self):
        return self._receipt_count

    def on_publish_receipt(self, publish_receipt: 'PublishReceipt'):
        self._receipt_count += 1
	     print(f"\tMessage: {publish_receipt.message}\n"
                f"\tIs persisted: {publish_receipt.is_persisted}\n"
                f"\tTimestamp: {publish_receipt.time_stamp}\n"
                f"\tException: {publish_receipt.exception}\n")

# set a message delivery listener to the publisher
receipt_listener = MessageReceiptListener()
persistent_publisher.set_message_publish_receipt_listener(receipt_listener) 
# ...
persistent_publisher.publish(my_message, topic_to_publish_to) </pre>
                              <h3 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><a name="strategies"/>Strategies for Handling Publish Receipt Errors</h3>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">The following are application-specific strategies you can use to handle receipt errors when you publish messages. Depending on your application, you may require some combination of all three strategies:</p>
                              <dl xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                <dt>Wait and Retry</dt>
                                <dd>Wait a number of seconds before trying to send the message again. For example, if the broker temporarily cannot accept messages, use <code>time.sleep()</code> to pause your message publisher.</dd>
                                <dt>Retry a&#xA0;Predefined number of Times</dt>
                                <dd>      Try to re-publish the message a predefined number of times before dropping it. This is useful to avoid unrecoverable transmission issues that can cause infinite retry loops.</dd>
                                <dt>Discard the Message</dt>
                                <dd>
                                  <p>Discard messages with failed publish receipts. This can be useful for messages that can not be delivered to an endpoint for any reason. We don't recommend this strategy if your application cannot tolerate message loss.</p>
                                </dd>
                              </dl>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd" class="Note"> To receive a failed publish receipt when there is no matching subscription, this option must be set for the event broker or <span class="mc-variable Product-Names.broker_cloud_short variable">event broker service</span>. For more information, see <a href="../../Security/Configuring-Client-Profiles.htm#Configur" class="MCXref xref">Handling Guaranteed Messages with No Matches</a> (for <span class="mc-variable Product-Names.broker_appliance_short variable">appliance</span>s and <span class="mc-variable Product-Names.broker_sw_short variable">software event broker</span>s)&#xA0;or the <b><a href="../../Cloud/client-profiles.htm#configuring-client-profile-settings" class="link-internal">Reject Messages to Sender On No Subscription Match Discard</a></b> (for <span class="mc-variable Product-Names.cloud_product_short variable">PubSub+ Cloud</span>).</p>
                              <h2 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><a name="user-contexts"/>User Contexts</h2>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Optionally, you can use <i>user contexts</i> to correlate information for persistent messages to publish receipts in your application. This information is user-specific and is meaningful only to your publishing application and is not sent to the broker.  A&#xA0;user context permits you to attach data to the publish call that can later be retrieved from the publish receipt listener.</p>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">When&#xA0;you use a user context, it allows you to handle multiple scenarios.   It also allows your application to decide what action to take or how to process the publish receipt based on the context. </p>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">For example, if a non-blocking application has multiple routines to publish persistent messages, each routine can include its identifier as the user context when it publishes a persistent message. The <span class="mc-variable Product-Names.pubsub_brand_only variable">PubSub+</span> Python API&#xA0;tracks the user context when specified for each message&#xA0;and returns the user context as part of the publish receipt when the message is acknowledged or rejected by the event broker. The publishing application can then send the publish receipt to the correct routine that sent the message based on the user context.</p>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">You can set the user context when you publish the message. For example, you use the <code>publish(message: bytearray | str | OutboundMessage, destination: Topic, user_context: Any | None = None, additional_message_properties: Dict[str, str | int | float | bool | dict | list | tuple | bytearray | None] | None = None)</code> function, where the user context can be any data type.</p>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">The following example shows how to get the user context from a publish receipt:</p>
                              <pre xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd" xml:space="preserve"># An example of a MessagePublishReceiptListener implementation
class MessagePublishReceiptListenerImpl(MessagePublishReceiptListener):
    def on_publish_receipt(self, publish_receipt: 'PublishReceipt'):
        print(f"\tMessage: {publish_receipt.message}\n"
              f"\tIs persisted: {publish_receipt.is_persisted}\n"
              f"\tTimestamp: {publish_receipt.time_stamp}\n"
              f"\tException: {publish_receipt.exception}\n")
       if publish_receipt.user_context:
              print(f'\tUser context received: {publish_receipt.user_context.get_custom_message}')</pre>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">If your application is non-blocking, you can also use a persistent message publisher with publish receipt in your callback to log information. For example, you can use non-blocking message publishing and then  send alerts to notify the application&#xA0;of the status of published messages, such as:</p>
                              <ul xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                <li> the event broker successfully receives and processes a message</li>
                                <li>access control violations (ACL)</li>
                                <li> a queue being over quota</li>
                                <li> invalid topics / topics with no subscribers</li>
                              </ul>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"> The following code shows an example of a <code>MessagePublishReceiptListener</code>:</p>
                              <pre xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd" xml:space="preserve">
# An example implementation of the Message publish listener interface to process broker message publish notifications.
class MessageReceiptListener(MessagePublishReceiptListener):
    def __init__(self):
        self._receipt_count = 0
    @property
    def receipt_count(self):
        return self._receipt_count

    def on_publish_receipt(self, publish_receipt: 'PublishReceipt'):
        self._receipt_count += 1
	     print(f"\tMessage: {publish_receipt.message}\n"
                f"\tIs persisted: {publish_receipt.is_persisted}\n"
                f"\tTimestamp: {publish_receipt.time_stamp}\n"
                f"\tException: {publish_receipt.exception}\n")
	     if publish_receipt.user_context:
                print(f'\tUser context received: {publish_receipt.user_context.get_custom_message}')

# set a message delivery listener to the publisher
receipt_listener = MessageReceiptListener()
persistent_publisher.set_message_publish_receipt_listener(receipt_listener) 
# ...
persistent_publisher.publish_await_acknowledgement(my_message, topic_to_publish_to, 1000, None) </pre>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                    <div class="no-print">
                      <div>
                        <a href="#" id="docsFeedbackTrigger" class="docs-issue-collector">Provide feedback</a>
                      </div>
                    </div>
                    <footer class="my-4 pt-4 text-center no-print">
                      <div class="footer-txt text-center no-print">
                        <ul class="list-inline ">
                          <li class="list-inline-item text-muted"><a href="../../Resources/Documentation-Set.htm" class="doc-set-footer-link MCXref xref xrefdoc-set-footer-link">Documentation Coverage</a>: <span class="mc-variable Variables.DocumentSetNumber variable">2024.09.16.0001</span></li>
                          <li class="list-inline-item text-muted">Last Updated: <span class="mc-variable Variables.MonthDayYear variable">September 16, 2024</span></li>
                          <li class="list-inline-item text-muted" style="font-size:13px;"> &#xA9;  <span class="mc-variable Variables.CompanyNameLegal variable">Solace Corporation</span></li>
                        </ul>
                      </div>
                      <div class="footer-icons">
                        <ul class="list-inline">
                          <li class="list-inline-item">
                            <a href="https://facebook.com/solacedotcom" target="_blank" class="social-media-icon">
                              <img src="../../Resources/Images/Social-Media/facebook_22x21.png" class="Hyperlinked" alt="Facebook" title="Solace Facebook Page" style="width: 22;height: 21;"/>
                            </a>
                          </li>
                          <li class="list-inline-item">
                            <a href="https://www.linkedin.com/company/20219" target="_blank" class="social-media-icon">
                              <img src="../../Resources/Images/Social-Media/LinkedIn_22x21.png" class="Hyperlinked" alt="LinkedIn" title="Solace LinkedIn Page" style="width: 22;height: 21;"/>
                            </a>
                          </li>
                          <li class="list-inline-item">
                            <a href="https://twitter.com/solacedotcom" target="_blank" class="social-media-icon">
                              <img src="../../Resources/Images/Social-Media/Twitter_22x21.png" class="Hyperlinked" alt="Twitter" title="Solace Twitter Feed" style="width: 22;height: 21;"/>
                            </a>
                          </li>
                          <li class="list-inline-item">
                            <a href="https://www.youtube.com/user/SolaceSystems" target="_blank" class="social-media-icon">
                              <img src="../../Resources/Images/Social-Media/youtube_22x21.png" class="Hyperlinked" alt="YouTube" title="Solace YouTube Channel" style="width: 22;height: 21;"/>
                            </a>
                          </li>
                          <li class="list-inline-item">
                            <a href="https://www.instagram.com/solacedotcom/" target="_blank" class="social-media-icon">
                              <img src="../../Resources/Images/Social-Media/instagram_22x21.png" class="Hyperlinked" alt="Instagram" title="Solace Instagram Feed" style="width: 22;height: 21;"/>
                            </a>
                          </li>
                          <li class="list-inline-item">
                            <a href="https://medium.com/solacedotcom" target="_blank" class="social-media-icon">
                              <img src="../../Resources/Images/Social-Media/medium_22x21.png" class="Hyperlinked" alt="Medium" title="Solace Medium Blog" style="width: 22;height: 21;"/>
                            </a>
                          </li>
                        </ul>
                      </div>
                      <div class="footer_link_menu">
                        <ul class="link_list">
                          <li class="link_list_item">
                            <a href="https://solace.com/products/" target="_blank" class="footer-link">Products</a>
                          </li>
                          <li class="link_list_item">
                            <a href="https://solace.com/company/" target="_blank" class="footer-link">Company</a>
                          </li>
                          <li class="link_list_item">
                            <a href="https://www.solace.dev/" target="_blank" class="footer-link">Developers</a>
                          </li>
                          <li class="link_list_item">
                            <a href="https://solace.com/support/" target="_blank" class="footer-link">Support</a>
                          </li>
                          <li class="link_list_item">
                            <a href="https://solace.com/contact/" target="_blank" class="footer-link">Contact Us</a>
                          </li>
                        </ul>
                      </div>
                    </footer>
                  </div>
                  <!-- JIRA issue collector -->
                  <script>/*<![CDATA[*/// Requires jQuery!
jQuery.ajax({
    url: "https://sol-jira.atlassian.net/s/d41d8cd98f00b204e9800998ecf8427e-T/o2joag/b/24/e73395c53c3b10fde2303f4bf74ffbf6/_/download/batch/com.atlassian.jira.collector.plugin.jira-issue-collector-plugin:issuecollector-embededjs/com.atlassian.jira.collector.plugin.jira-issue-collector-plugin:issuecollector-embededjs.js?locale=en-US&collectorId=076e0808",
    type: "get",
    cache: true,
    dataType: "script"
});
window.ATL_JQ_PAGE_PROPS = {
"triggerFunction": function(showCollectorDialog) {
//Requires that jQuery is available!
$("#docsFeedbackTrigger").click(function(e) {
e.preventDefault();
showCollectorDialog();
});
},
fieldValues: {
recordWebInfo: '1', // field Name
recordWebInfoConsent: ['1'] // field Id
}
};
/*]]>*/</script>
                  <script src="../../Resources/Scripts/thumbnail.js">
                                    </script>
                  <!-- Script for Launching offsite links in new tab -->
                  <script type="text/javascript">/*<![CDATA[*/$("a[href^='http']").attr("target","_blank");/*]]>*/</script>
                </div>
              </div>
            </div>
          </div>
          <a data-close="true"/>
        </div>
      </div>
    </div>
  </body>
</html>
