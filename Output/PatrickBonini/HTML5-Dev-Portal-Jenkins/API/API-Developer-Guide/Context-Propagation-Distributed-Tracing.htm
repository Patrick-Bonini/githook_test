<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-us" xml:lang="en-us" class="_Skins_HTML5___Side_Navigation" data-mc-search-type="Stem" data-mc-help-system-file-name="Default.xml" data-mc-path-to-help-system="../../" data-mc-has-content-body="True" data-mc-toc-path="Developing Applications|Solace Messaging API Developer Guide" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic;Default" data-mc-preload-images="false" data-mc-in-preview-mode="false">
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
        <meta name="msapplication-config" content="../../Skins/Favicons/browserconfig.xml" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="apple-touch-icon" sizes="180x180" href="../../Skins/Favicons/apple-touch-icon.png" />
        <link rel="shortcut icon" href="../../Skins/Favicons/favicon-32x32.png" />
        <link rel="icon" sizes="96x96" href="../../Skins/Favicons/favicon-96x96.png" />
        <link rel="icon" sizes="32x32" href="../../Skins/Favicons/favicon-32x32.png" />
        <link rel="icon" sizes="16x16" href="../../Skins/Favicons/favicon-16x16.png" />
        <meta charset="utf-8" />
        <meta http-equiv="Cache-control" content="no-cache" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" /><title>Context Propagation for Distributed Tracing</title>
        <!-- <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous" /> -->
        <!--style to display feedback button correctly in IE-->
        <!-- Google Tag Manager -->
        <!-- End Google Tag Manager -->
        <!-- links to get the EDA styling to work -->
        <link href="../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../Skins/Default/Stylesheets/Components/Tablet.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../Skins/Default/Stylesheets/Components/Mobile.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../Skins/Default/Stylesheets/Components/Print.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../Skins/Fluid/Stylesheets/foundation.6.2.3.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../Skins/Fluid/Stylesheets/Styles.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../Skins/Fluid/Stylesheets/Tablet.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../Skins/Fluid/Stylesheets/Mobile.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../Skins/Fluid/Stylesheets/Print.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../Resources/Stylesheets/MainStyles.min.css" rel="stylesheet" type="text/css" />
        <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet" />
        <style>@media screen and (min-width: 0\0)
{
	.feedback-button
	{
		margin-right: -40px;
		top: 50%;
		border-radius: 9px 9px 0px 0px;
	}

	#canvas
	{
		position: relative;
	}
}

@media print
{
	#plugin
	{
		overflow: visible !important;
	}
}

</style>
        <link href="../../Resources/Stylesheets/eda_styles.css" rel="stylesheet" type="text/css" />
        <link href="https://fonts.googleapis.com/css?family=Open+Sans:400,600,300" rel="stylesheet" type="text/css" />
        <style>/*&lt;meta /&gt;*/

.button.print-button
{
	-pie-background: linear-gradient(#ffffff, transparent);
}

.button.previous-topic-button
{
	-pie-background: linear-gradient(#ffffff, transparent);
}

.button.next-topic-button
{
	-pie-background: linear-gradient(#ffffff, transparent);
}

.needs-pie
{
	behavior: url('../../Resources/Scripts/PIE-no-motw.htc');
}

</style>
        <link rel="apple-touch-icon" sizes="180x180" href="../../Skins/Favicons/apple-touch-icon.png" />
        <link rel="shortcut icon" href="../../Skins/Favicons/favicon-32x32.png" />
        <link rel="icon" sizes="96x96" href="../../Skins/Favicons/favicon-96x96.png" />
        <link rel="icon" sizes="32x32" href="../../Skins/Favicons/favicon-32x32.png" />
        <link rel="icon" sizes="16x16" href="../../Skins/Favicons/favicon-16x16.png" />
        <script src="../../Resources/Scripts/jquery.min.js" type="text/javascript">
        </script>
        <script src="../../Resources/Scripts/purify.min.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../Resources/Scripts/require.min.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../Resources/Scripts/require.config.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../Resources/Scripts/foundation.6.2.3_custom.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../Resources/Scripts/plugins.min.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../Resources/Scripts/MadCapAll.js" type="text/javascript" defer="defer">
        </script>
        <script src="https://cmp.osano.com/AzZrhlTmT5f216Foa/84ba7dc4-a4e5-4b02-b120-977eb6f052d4/osano.js">
        </script>
        <script type="text/javascript">/*<![CDATA[*/(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
			new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
			j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
			'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
			})(window,document,'script','dataLayer','GTM-KLSDFH');
		/*]]>*/</script>
        <script type="text/javascript" src="../../Skins/Default/Scripts/TopicToolBar.js">
        </script>
    </head>
    <!-- Top Orange and Darkgrey header-->
    <!-- Div for EDA banner -->
    <div class="eda_banner">
        <p>Register Now for EDA Summit 2024 - Virtual Event <a href="https://edasummit.com/" target="_blank">Register for Free</a></p>
    </div>
    <!-- end Div for EDA banner -->
    <div class="top-nav">
        <div class="main_list">
            <ul class="top-navlinks">
                <li><a href="https://solace.com/support/" target="_blank">Support</a>
                </li>
                <li><a href="https://solace.com/contact/" target="_blank">Contact Us</a>
                </li>
            </ul>
        </div>
        <div class="container-fluid">
            <div class="src-li">
                <div id="srchWrapTwo">
                    <form class="search" action="#">
                        <div class="search-bar search-bar-container needs-pie">
                            <input class="search-field needs-pie" type="search" aria-label="Search Field" placeholder="Search the docs" />
                            <div class="search-filter-wrapper"><span class="invisible-label" id="search-filters-label">Filter: </span>
                                <div class="search-filter" aria-haspopup="true" aria-controls="sf-content" aria-expanded="false" aria-label="Search Filter" title="All Files" role="button" tabindex="0">
                                </div>
                                <div class="search-filter-content" id="sf-content">
                                    <ul>
                                        <li>
                                            <button class="mc-dropdown-item" aria-labelledby="search-filters-label filterSelectorLabel-00001"><span id="filterSelectorLabel-00001">All Files</span>
                                            </button>
                                        </li>
                                    </ul>
                                </div>
                            </div>
                            <div class="search-submit-wrapper" dir="ltr">
                                <div class="search-submit" title="Search" role="button" tabindex="0"><span class="invisible-label">Submit Search</span>
                                </div>
                            </div>
                        </div>
                    </form>
                </div>
            </div><span class="tool-tip" tooltip-position="left" tooltip="To search for CLI commands, events, or APIs, navigate to the related sections.">i</span>
            <!-- Sept. 28, 2022 - This is being moved to under div class= top-nav
			<div class="main_list">
				<ul class="top-navlinks">
					<li><a href="https://solace.com/support/" target="_blank">Support</a></li>
					<li><a href="https://solace.com/contact/" target="_blank">Contact Us</a></li>
				</ul>
			</div> -->
        </div>
        <!-- Sept. 27, 2022 - The commented out content below used to provide the products, company, etc., links in the top header, next to the search field. -->
        <!-- <div class="main_list"><ul class="top-navlinks"><li><a href="https://solace.com/products/" target="_blank">Products</a></li><li><a href="https://solace.com/company/" target="_blank">Company</a></li><li><a href="https://www.solace.dev/" target="_blank">Developers</a></li><li><a href="https://solace.com/support/" target="_blank">Support</a></li><li><a href="https://solace.com/contact/" target="_blank">Contact Us</a></li></ul></div> -->
    </div>
    <body>
        <div class="foundation-wrap off-canvas-wrapper">
            <div class="off-canvas-wrapper-inner" data-off-canvas-wrapper="">
                <aside class="off-canvas position-right" role="navigation" id="offCanvas" data-off-canvas="" data-position="right" data-mc-ignore="true">
                    <ul class="off-canvas-accordion vertical menu off-canvas-list" data-accordion-menu="" data-mc-back-link="Back" data-mc-css-tree-node-expanded="is-accordion-submenu-parent" data-mc-css-tree-node-collapsed="is-accordion-submenu-parent" data-mc-css-sub-menu="vertical menu is-accordion-submenu nested" data-mc-include-indicator="False" data-mc-include-icon="False" data-mc-include-parent-link="True" data-mc-include-back="False" data-mc-defer-expand-event="True" data-mc-expand-event="click.zf.accordionMenu" data-mc-toc="True">
                    </ul>
                </aside>
                <div class="off-canvas-content inner-wrap" data-off-canvas-content="">
                    <div data-sticky-container="" class="title-bar-container">
                        <nav class="title-bar tab-bar sticky" role="banner" data-sticky="" data-options="marginTop:0" style="width:100%" data-sticky-on="only screen and (max-width: 1000px)" data-mc-ignore="true"><a class="skip-to-content fluid-skip showOnFocus" href="#">Skip To Main Content</a>
                            <div class="middle title-bar-section outer-row clearfix">
                                <div class="menu-icon-container relative clearfix">
                                    <div class="central-account-wrapper">
                                        <div class="central-dropdown"><a class="central-account-drop"><span class="central-account-image"></span><span class="central-account-text">Account</span></a>
                                            <div class="central-dropdown-content"><a class="MCCentralLink central-dropdown-content-settings">Settings</a>
                                                <hr class="central-separator" /><a class="MCCentralLink central-dropdown-content-logout">Logout</a>
                                            </div>
                                        </div>
                                    </div>
                                    <button class="menu-icon" aria-label="Show Navigation Panel" data-toggle="offCanvas"><span></span>
                                    </button>
                                </div>
                            </div>
                            <div class="title-bar-layout outer-row">
                                <div class="logo-wrapper"><a class="logo" href="../../index.html" alt="Logo"></a>
                                </div>
                                <div class="navigation-wrapper nocontent">
                                    <ul class="navigation clearfix" role="navigation" data-mc-css-tree-node-has-children="has-children" data-mc-css-sub-menu="sub-menu" data-mc-expand-event="mouseenter" data-mc-top-nav-menu="True" data-mc-max-depth="3" data-mc-include-icon="False" data-mc-include-indicator="False" data-mc-include-children="True" data-mc-include-siblings="True" data-mc-include-parent="True" data-mc-toc="True">
                                        <li class="placeholder" style="visibility:hidden"><a>placeholder</a>
                                        </li>
                                    </ul>
                                </div>
                                <div class="central-account-wrapper">
                                    <div class="central-dropdown"><a class="central-account-drop"><span class="central-account-image"></span><span class="central-account-text">Account</span></a>
                                        <div class="central-dropdown-content"><a class="MCCentralLink central-dropdown-content-settings">Settings</a>
                                            <hr class="central-separator" /><a class="MCCentralLink central-dropdown-content-logout">Logout</a>
                                        </div>
                                    </div>
                                </div>
                                <div class="nav-search-wrapper">
                                    <div class="nav-search row">
                                        <form class="search" action="#">
                                            <div class="search-bar search-bar-container needs-pie">
                                                <input class="search-field needs-pie" type="search" aria-label="Search Field" placeholder="Search the docs" />
                                                <div class="search-filter-wrapper"><span class="invisible-label" id="search-filters-label">Filter: </span>
                                                    <div class="search-filter" aria-haspopup="true" aria-controls="sf-content" aria-expanded="false" aria-label="Search Filter" title="All Files" role="button" tabindex="0">
                                                    </div>
                                                    <div class="search-filter-content" id="sf-content">
                                                        <ul>
                                                            <li>
                                                                <button class="mc-dropdown-item" aria-labelledby="search-filters-label filterSelectorLabel-00001"><span id="filterSelectorLabel-00001">All Files</span>
                                                                </button>
                                                            </li>
                                                        </ul>
                                                    </div>
                                                </div>
                                                <div class="search-submit-wrapper" dir="ltr">
                                                    <div class="search-submit" title="Search" role="button" tabindex="0"><span class="invisible-label">Submit Search</span>
                                                    </div>
                                                </div>
                                            </div>
                                        </form>
                                    </div>
                                </div>
                            </div>
                        </nav>
                    </div>
                    <div class="main-section">
                        <div class="row outer-row sidenav-layout">
                            <nav class="sidenav-wrapper">
                                <div class="sidenav-container">
                                    <ul class="off-canvas-accordion vertical menu sidenav" data-accordion-menu="" data-mc-css-tree-node-expanded="is-accordion-submenu-parent" data-mc-css-tree-node-collapsed="is-accordion-submenu-parent" data-mc-css-sub-menu="vertical menu accordion-menu is-accordion-submenu nested" data-mc-include-indicator="False" data-mc-include-icon="False" data-mc-include-parent-link="False" data-mc-include-back="False" data-mc-defer-expand-event="True" data-mc-expand-event="click.zf.accordionMenu" data-mc-toc="True" data-mc-side-nav-menu="True">
                                    </ul>
                                </div>
                            </nav>
                            <div class="body-container">
                                <div data-mc-content-body="True">
                                    <div class="buttons popup-container clearfix topicToolbarProxy _Skins_TopicToolBar mc-component nocontent" style="mc-topic-toolbar-items: PreviousTopic Print NextTopic;">
                                        <div class="button-group-container-left">
                                            <button class="button needs-pie print-button" title="Print">
                                                <div>
                                                    <div role="img" class="button-icon-wrapper" aria-label="Print">
                                                        <div class="button-icon"> </div>
                                                    </div>
                                                </div>
                                            </button>
                                            <button class="button needs-pie previous-topic-button" title="Navigate previous topic" disabled="true">
                                                <div>
                                                    <div role="img" class="button-icon-wrapper" aria-label="Navigate previous">
                                                        <div class="button-icon"> </div>
                                                    </div>
                                                </div>
                                            </button>
                                            <button class="button needs-pie next-topic-button" title="Navigate next topic" disabled="true">
                                                <div>
                                                    <div role="img" class="button-icon-wrapper" aria-label="Navigate next">
                                                        <div class="button-icon"> </div>
                                                    </div>
                                                </div>
                                            </button>
                                        </div>
                                    </div>
                                    <!-- Google Tag Manager (noscript) -->
                                    <noscript><iframe src="https://www.googletagmanager.com/ns.html?id=GTM-KLSDFH" height="0" width="0" style="display:none;visibility:hidden"></iframe>
                                    </noscript>
                                    <!-- End Google Tag Manager (noscript) -->
                                    <div id="content">
                                        <div id="contentBody">
                                            <div class="row collapse">
                                                <div class="ContentRow" xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                                    <div>
                                                        <div class="nocontent" xmlns="">
                                                            <div class="MCBreadcrumbsBox_MCBreadcrumbsSelf_0 breadcrumbs" role="navigation" aria-label="Breadcrumbs" data-mc-breadcrumbs-divider=" / " data-mc-breadcrumbs-count="4" data-mc-toc="True"><span class="MCBreadcrumbsPrefix"> </span>
                                                            </div>
                                                        </div>
                                                        <div role="main" id="mc-main-content" xmlns="">
                                                            <h1 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Context Propagation for Distributed Tracing</h1>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Distributed tracing allows your enterprise applications to trace the flow of messages as they travel from your publisher, through the event mesh and to the receiving application.  For a detailed overview see <a href="../../Features/Distributed-Tracing/Distributed-Tracing-Overview.htm" class="MCXref xref">Distributed Tracing </a>.  For  information about version requirements, see <a href="../../Features/Distributed-Tracing/Distributed-Tracing-Receiver-Versions.htm" class="MCXref xref">Distributed Tracing Version Compatibility</a>.</p>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">For information about instrumenting your code for distributed tracing, see:</p>
                                                            <ul xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                                                <li><a href="#Instrumenting-JCSMP-Distributed-Tracing" class="MCXref xref">Instrumenting JCSMP for Distributed Tracing</a>
                                                                </li>
                                                                <li><a href="#Instrumenting-DOTNET-Distributed-Tracing" class="MCXref xref">Instrumenting .NET for Distributed Tracing</a>
                                                                </li>
                                                                <li><a href="#Instrumenting-JS-NODEJS-Distributed-Tracing" class="MCXref xref">Instrumenting JavaScript and Node.js for Distributed Tracing</a>
                                                                </li>
                                                            </ul>
                                                            <div class="Note" xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                                                <ul>
                                                                    <li>The PubSub+ OpenTelemetry API Libraries support W3C propagators only.</li>
                                                                    <li>For information about configuring OpenTelemetry SDK environment variables, see <a href="https://opentelemetry.io/docs/concepts/sdk-configuration/" class="link-offsite">OpenTelemetry SDK Configuration</a>.</li>
                                                                    <li>By default, traces include command line parameters visible to backend applications like Jaeger.
It is important to disable this feature for security purposes because these parameters may contain sensitive information such as your user name and password. For instructions, see <a href="https://github.com/open-telemetry/opentelemetry-java/blob/main/sdk-extensions/autoconfigure/README.md#resource-provider-spi" class="link-offsite">Disabling Automatic Resource Providers</a>	in the OpenTelemetry documentation in GitHub.			</li>
                                                                </ul>
                                                            </div>
                                                            <h2 class="with-rule" xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><a name="Instrumenting-JCSMP-Distributed-Tracing"></a>Instrumenting JCSMP for Distributed Tracing</h2>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Manual Instrumentation involves making changes to your enterprise application's source code, and allows you to inject and extract additional context, such as baggage and trace states, into messages. Context propagation makes it easy to debug and optimize your application. For more information about context propagation in <span class="mc-variable Variables.CompanyName variable">Solace</span> event messages, see <a href="../../Features/Distributed-Tracing/Distributed-Tracing-Context-Propagation.htm#top" class="link-internal">Distributed Tracing Context Propagation</a>. The following examples show you how to create spans using the OpenTelemetry API.</p>
                                                            <h4 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">How Context Propagation Enables Distributed Tracing in the JCSMP <span class="mc-variable Product-Names.pubsub_brand_only variable">PubSub+</span> API</h4>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">In your client application, you can use the OpenTelemetry API to create a span, which contains metadata about an operation in a distributed system. This span is associated with a context, which includes a unique <code>TraceID</code>. Next, when you use a <span class="mc-variable Product-Names.pubsub_brand_only variable">PubSub+</span> message producer to publish a message, the <span class="mc-variable Variables.CompanyName variable">Solace</span> OTel integration package injects the context, which contains the <code>TraceID</code>, into the message. As the message travels through the event broker and is received by a consuming application, spans are generated at each step and have the same <code>TraceID</code> present in the original message context.  When each span is closed in the publishing or consuming application, the Java OpenTelemetry API sends it to an OpenTelemetry collector, which collects, processes and exports the spans to a backend application that correlates the spans using their unique <code>TraceID</code>. A backend application uses the correlated spans to create a <i>trace</i>, which is an end-to-end snapshot detailing how the message traveled through the distributed system. If you do not use context propagation, then backend applications cannot use a unique TraceID to link the spans, making it difficult to trace the flow of messages through the distributed system.</p>
                                                            <h4 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Dependencies</h4>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">To enable context propagation for distributed tracing, you must first add the <a href="https://mvnrepository.com/artifact/com.solace/solace-opentelemetry-jcsmp-integration" class="link-offsite" target="_blank">Solace PubSub+ OpenTelemetry Integration For Solace JCSMP API</a> library as a dependency in your application. This library automatically adds the OpenTelemetry API and SDK libraries, which are required for context propagation. For OpenTelemetry version compatibility see <a href="../../Features/Distributed-Tracing/Distributed-Tracing-Receiver-Versions.htm" class="MCXref xref">Distributed Tracing Version Compatibility</a>. Adding the libraries gives you access to the following two interfaces:</p>
                                                            <ul xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                                                <li><code>SolaceJCSMPTextMapSetter</code>—  This interface allows a <code>TextMapPropagator</code> to inject context into a message.
            </li>
                                                                <li><code>SolaceJCSMPTextMapGetter</code>—  This interface allows a <code>TextMapPropagator</code> to  extract context from a message. </li>
                                                            </ul>
                                                            <div class="Note" xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                                                <p>This guide assumes you are familiar with configuring an instance of the OpenTelemetry class. For instructions for configuring OpenTelemetry objects, see <a href="https://opentelemetry.io/docs/instrumentation/java/manual/" class="link-offsite" target="_blank">OpenTelemetry Manual Instrumentation in Java</a> in the OpenTelemetry documentation.</p>
                                                            </div>
                                                            <h4 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Generating a Send Span on Message Publish</h4>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Your publishing application can generate a send span and export it to the OpenTelemetry Collector. The following steps show you how to inject context into a message and generate a send span for a published message:</p>
                                                            <ol xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                                                <li value="1">Create a new span and set span attributes with the <code>setAttribute()</code> method. Next, set the current context as the parent of this span. Start the span with the <code>startSpan()</code> method:</li><pre xml:space="preserve">
final Span sendSpan = tracer
	.spanBuilder("mySolacePublisherApp" + " " + MessagingOperationValues.PROCESS)
	.setSpanKind(SpanKind.CLIENT)
	//Publish to a non-temporary topic endpoint
	.setAttribute(SemanticAttributes.MESSAGING_DESTINATION_KIND, MessagingDestinationKindValues.TOPIC)
	.setAttribute(SemanticAttributes.MESSAGING_TEMP_DESTINATION, false)
	//Set more attributes as needed
	//.setAttribute(...)
	//.setAttribute(...)
	.setParent(Context.current()) //Set the current context as the parent span
	.startSpan();</pre>
                                                                <li value="2">
                                                                    <p>Set the created span from Step 1   (<code>sendSpan</code> in this example) as the new current context. Next, inject the current context into your message and then publish the message. Call the <code>end()</code> method on the span to export the span data:</p>
                                                                </li><pre xml:space="preserve">
try (Scope scope = sendSpan.makeCurrent()) {
	final SolaceJCSMPCTextMapSetter setter = new SolaceJCSMPTextMapSetter();
	final TextMapPropagator propagator = openTelemetry.getPropagators().getTextMapPropagator();
	//Inject the current context with send span into the message
	propagator.inject(Context.current(), message, setter);
	//Publish the message to the given topic
	messageProducer.send(message, messageDestination);
} catch (Exception e) {
	sendSpan.recordException(e);                          //Span can record an exception 
	sendSpan.setStatus(StatusCode.ERROR, e.getMessage()); //Set span status as ERROR/FAILED
} finally {
	sendSpan.end(); //The span data is exported after you call end()
}	</pre>
                                                            </ol>
                                                            <div class="MCDropDown MCDropDown_Closed dropDown" xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><span class="MCDropDownHead dropDownHead"><a href="#" class="MCDropDownHotSpot dropDownHotspot MCDropDownHotSpot_ MCHotSpotImage" aria-expanded="false"><img class="MCDropDown_Image_Icon" src="../../Skins/Default/Stylesheets/Images/transparent.gif" height="11" width="16" alt="Closed" data-mc-alt2="Open" />Example Function:</a></span>
                                                                <div class="MCDropDownBody dropDownBody"><pre class="Code" xml:space="preserve">
package com.solace.samples.jcsmp.snippets;

import com.solace.messaging.trace.propagation.SolaceJCSMPTextMapGetter;	
import com.solace.messaging.trace.propagation.SolaceJCSMPTextMapSetter;
import io.opentelemetry.api.OpenTelemetry;	
import io.opentelemetry.api.trace.Span;	
import io.opentelemetry.api.trace.SpanKind;	
import io.opentelemetry.api.trace.StatusCode;	
import io.opentelemetry.api.trace.Tracer;	
import io.opentelemetry.context.Context;	
import io.opentelemetry.context.Scope;	
import io.opentelemetry.context.propagation.TextMapPropagator;
import io.opentelemetry.semconv.trace.attributes.SemanticAttributes;
import io.opentelemetry.semconv.trace.attributes.SemanticAttributes.MessagingDestinationKindValues;
import io.opentelemetry.semconv.trace.attributes.SemanticAttributes.MessagingOperationValues;
import java.util.function.Consumer;
import com.solacesystems.jcsmp.Topic;
import com.solacesystems.jcsmp.XMLMessage;
import com.solacesystems.jcsmp.XMLMessageProducer;

public class HowToImplementManualInstrumentation {

/**
* Example how to inject a tracing context in the Solace Message and generate a SEND span for the
* published message
*
* @param message            A Solace message that support tracing context propagation.
* @param messageProducer    JCSMP Message producer that can publish messages
* @param messageDestination message will be published to this topic
* @param openTelemetry      The entry-point to telemetry functionality for tracing, metrics and
*                           baggage.
* @param tracer             Tracer is the interface for Span creation and interaction with the
*                           in-process context.
*/
void howToCreateSpanOnMessagePublish(XMLMessage message, XMLMessageProducer messageProducer,
Topic messageDestination, OpenTelemetry openTelemetry, Tracer tracer) {

//Create a new span with a current context as parent of this span
final Span sendSpan = tracer
	.spanBuilder("mySolacePublisherApp" + " " + MessagingOperationValues.PROCESS)
	.setSpanKind(SpanKind.CLIENT)
	// published to a topic endpoint (non temporary)
	.setAttribute(SemanticAttributes.MESSAGING_DESTINATION_KIND, MessagingDestinationKindValues.TOPIC)
	.setAttribute(SemanticAttributes.MESSAGING_TEMP_DESTINATION, false)
	//Set more attributes as needed
	//.setAttribute(...)
	//.setAttribute(...)
	.setParent(Context.current()) // set current context as parent
	.startSpan();

//set sendSpan as new current context
try (Scope scope = sendSpan.makeCurrent()) {
	final SolaceJCSMPTextMapSetter setter = new SolaceJCSMPTextMapSetter();
	final TextMapPropagator propagator = openTelemetry.getPropagators().getTextMapPropagator();
	//and then inject current context with send span into the message
	propagator.inject(Context.current(), message, setter);
	// message is being published to the given topic
	messageProducer.send(message, messageDestination);
} catch (Exception e) {
	sendSpan.recordException(e); //Span can record exception if any
	sendSpan.setStatus(StatusCode.ERROR, e.getMessage()); //Set span status as ERROR/FAILED
} finally {
	sendSpan.end(); //End sendSpan. Span data is exported when span.end() is called.
}
}
}			</pre>
                                                                </div>
                                                            </div>
                                                            <h4 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Generating a Receive Span on Message Receive</h4>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Your consuming application can generate a receive span and then export it to the OpenTelemetry Collector. The following steps show you how to extract tracing context from a received message and generate a receive span:</p>
                                                            <ol xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                                                <li value="1">Use a <code>SolaceJCSMPCTextMapGetter</code> to extract any existing context from the received message:</li><pre xml:space="preserve">
final SolaceJCSMPTextMapGetter getter = new SolaceJCSMPTextMapGetter();
final Context extractedContext = openTelemetry.getPropagators().getTextMapPropagator()
	.extract(Context.current(), message, getter);</pre>
                                                                <li value="2">Set the extracted context as the current context with the <code>makeCurrent()</code> method. Next create a child span (<code>receiveSpan </code>in this example) and set the extracted context as the parent of that child span. Start the span using the <code>startSpan()</code> method:</li><pre xml:space="preserve">
try (Scope scope = extractedContext.makeCurrent()) {
	//Create a child span and set extracted/current context as parent of this span
	final Span receiveSpan = tracer
		.spanBuilder("mySolaceReceiverApp" + " " + MessagingOperationValues.RECEIVE)
		.setSpanKind(SpanKind.CLIENT)
		// for the case the message was received on a non temporary queue endpoint
		.setAttribute(SemanticAttributes.MESSAGING_DESTINATION_KIND,
		MessagingDestinationKindValues.QUEUE)
		.setAttribute(SemanticAttributes.MESSAGING_TEMP_DESTINATION, false)
		//Set more attributes as needed
		//.setAttribute(...)
		//.setAttribute(...)
		// creates a parent child relationship to a message publisher's application span is any
		.setParent(extractedContext)
		// starts span
		.startSpan();
//Try catch continues in next step...</pre>
                                                                <li value="3">Accept and process the received message, then call the <code>end()</code> method on the receive span to export the span data:</li><pre xml:space="preserve">	try {
		//Do something with the message in a callback function
		messageProcessor.accept(receivedMessage);
	} catch (Exception e) {
		receiveSpan.recordException(e);                          //Span can record an exception 
		receiveSpan.setStatus(StatusCode.ERROR, e.getMessage()); //and set span status as ERROR
	} finally {
		receiveSpan.end(); //Span data is exported when you call span.end()
	}
}</pre>
                                                            </ol>
                                                            <div class="MCDropDown MCDropDown_Closed dropDown" xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><span class="MCDropDownHead dropDownHead"><a href="#" class="MCDropDownHotSpot dropDownHotspot MCDropDownHotSpot_ MCHotSpotImage" aria-expanded="false"><img class="MCDropDown_Image_Icon" src="../../Skins/Default/Stylesheets/Images/transparent.gif" height="11" width="16" alt="Closed" data-mc-alt2="Open" />Example Function:</a></span>
                                                                <div class="MCDropDownBody dropDownBody"><pre class="Code" xml:space="preserve">
package com.solace.samples.jcsmp.snippets;

import com.solace.messaging.trace.propagation.SolaceJCSMPTextMapGetter;	
import com.solace.messaging.trace.propagation.SolaceJCSMPTextMapSetter;
import io.opentelemetry.api.OpenTelemetry;	
import io.opentelemetry.api.trace.Span;	
import io.opentelemetry.api.trace.SpanKind;	
import io.opentelemetry.api.trace.StatusCode;	
import io.opentelemetry.api.trace.Tracer;	
import io.opentelemetry.context.Context;	
import io.opentelemetry.context.Scope;	
import io.opentelemetry.context.propagation.TextMapPropagator;
import io.opentelemetry.semconv.trace.attributes.SemanticAttributes;
import io.opentelemetry.semconv.trace.attributes.SemanticAttributes.MessagingDestinationKindValues;
import io.opentelemetry.semconv.trace.attributes.SemanticAttributes.MessagingOperationValues;
import java.util.function.Consumer;
import com.solacesystems.jcsmp.Topic;
import com.solacesystems.jcsmp.XMLMessage;
import com.solacesystems.jcsmp.XMLMessageProducer;

public class HowToImplementManualInstrumentation {
					
/**
* Example how to extract a tracing context from the Solace Message and generate a RECEIVE span
* for the received message
*
* @param receivedMessage  A Solace message.
* @param messageProcessor A callback function that user could use to process a message
* @param openTelemetry    The OpenTelemetry class is the entry point to telemetry functionality
*                         for tracing, metrics and baggage from OpenTelemetry Java SDK.
* @param tracer           OpenTelemetry Tracer is the interface from OpenTelemetry Java SDK for
*                         span creation and interaction with the in-process context.
*/
void howToCreateNewSpanOnMessageReceive(XMLMessage receivedMessage,
	Consumer&lt;XMLMessage&gt; messageProcessor,
	OpenTelemetry openTelemetry, Tracer tracer) {

//Extract tracing context from message, if any using the SolaceJCSMPTextMapGetter
final SolaceJCSMPTextMapGetter getter = new SolaceJCSMPTextMapGetter();
final Context extractedContext = openTelemetry.getPropagators().getTextMapPropagator()
	.extract(Context.current(), receivedMessage, getter);

//Set the extracted context as current context
try (Scope scope = extractedContext.makeCurrent()) {
	//Create a child span and set extracted/current context as parent of this span
	final Span receiveSpan = tracer
	.spanBuilder("mySolaceReceiverApp" + " " + MessagingOperationValues.RECEIVE)
	.setSpanKind(SpanKind.CLIENT)
	// for the case the message was received on a non temporary queue endpoint
	.setAttribute(SemanticAttributes.MESSAGING_DESTINATION_KIND,
	MessagingDestinationKindValues.QUEUE)
	.setAttribute(SemanticAttributes.MESSAGING_TEMP_DESTINATION, false)
	//Set more attributes as needed
	//.setAttribute(...)
	//.setAttribute(...)
	// creates a parent child relationship to a message publisher's application span is any
	.setParent(extractedContext)
	// starts span
	.startSpan();

	try {
		// do something with a message in a callback
		messageProcessor.accept(receivedMessage);
	} catch (Exception e) {
		receiveSpan.recordException(e); //Span can record exception if any
		receiveSpan.setStatus(StatusCode.ERROR, e.getMessage()); //and set span status as ERROR/FAILED
	} finally {
		receiveSpan.end(); //End receiveSpan. Span data is exported when span.end() is called.
	}
	}
}
}		</pre>
                                                                </div>
                                                            </div>
                                                            <h2 class="with-rule" xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><a name="Instrumenting-DOTNET-Distributed-Tracing"></a>Instrumenting .NET for Distributed Tracing</h2>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Manual Instrumentation involves making changes to your enterprise application's source code, and allows you to inject and extract additional context, such as baggage and trace states, into messages. Context propagation makes it easy to debug and optimize your application. For more information about context propagation in <span class="mc-variable Variables.CompanyName variable">Solace</span> event messages, see <a href="../../Features/Distributed-Tracing/Distributed-Tracing-Context-Propagation.htm#top" class="link-internal">Distributed Tracing Context Propagation</a>. The following examples show you how to create spans using the OpenTelemetry API.</p>
                                                            <h4 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">How Context Propagation Enables Distributed Tracing in the .NET <span class="mc-variable Product-Names.pubsub_brand_only variable">PubSub+</span> API</h4>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">In your client application, you can use the OpenTelemetry API to create a span, which contains metadata about an operation in a distributed system. This span is associated with a context, which includes a unique <code>TraceID</code>. Next, when you use a <span class="mc-variable Product-Names.pubsub_brand_only variable">PubSub+</span> message producer to publish a message, the <span class="mc-variable Variables.CompanyName variable">Solace</span> OTel integration package injects the context, which contains the <code>TraceID</code>, into the message. As the message travels through the event broker and is received by a consuming application, spans are generated at each step and have the same <code>TraceID</code> present in the original message context.  When each span is closed in the publishing or consuming application, the .NET OpenTelemetry API sends it to an OpenTelemetry collector, which collects, processes and exports the spans to a backend application that correlates the spans using their unique <code>TraceID</code>. A backend application uses the correlated spans to create a <i>trace</i>, which is an end-to-end snapshot detailing how the message traveled through the distributed system. If you do not use context propagation, then backend applications cannot use a unique TraceID to link the spans, making it difficult to trace the flow of messages through the distributed system.</p>
                                                            <h4 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Dependencies</h4>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">To enable context propagation for distributed tracing, you must first add the <a href="https://www.nuget.org/packages/Solace.Messaging.Trace.Propagation" class="link-offsite" target="_blank">Solace .NET OpenTelemetry Integration</a> NuGet package to your application. For OpenTelemetry version compatibility see <a href="../../Features/Distributed-Tracing/Distributed-Tracing-Receiver-Versions.htm" class="MCXref xref">Distributed Tracing Version Compatibility</a>. The <span class="mc-variable Variables.CompanyName variable">Solace</span> .NET OpenTelemetry Integration NuGet package contains the <code>SolaceMessageCarrier</code> class that gives your application access to the following:</p>
                                                            <ul xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                                                <li><code>SolaceMessageCarrier.Setter</code>
                                                                    <ul>
                                                                        <li>use with the OpenTelemetry API's <code>TraceContextPropagator</code> to inject context into  an <code>IMessage</code>.</li>
                                                                        <li>use with the OpenTelemetry API's <code>BaggagePropagator</code>to inject baggage into  an <code>IMessage</code>.</li>
                                                                    </ul>
                                                                </li>
                                                                <li><code>SolaceMessageCarrier.Getter</code>
                                                                    <ul>
                                                                        <li>use with the OpenTelemetry API's <code>TraceContextPropagator</code> to extract context from an <code>IMessage</code>.</li>
                                                                        <li>use with the OpenTelemetry API's <code>BaggagePropagator</code>to extract baggage from an <code>IMessage</code>.</li>
                                                                    </ul>
                                                                </li>
                                                            </ul>
                                                            <div class="Note" xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                                                <p>This guide assumes you are familiar with configuring an instance of the OpenTelemetry class. For instructions for configuring OpenTelemetry objects, see <a href="https://opentelemetry.io/docs/instrumentation/net/manual/" class="link-offsite" target="_blank">OpenTelemetry Manual Instrumentation in .NET</a> in the OpenTelemetry documentation.</p>
                                                            </div>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">To use context propagation in the .NET <span class="mc-variable Product-Names.pubsub_brand_only variable">PubSub+</span> API, include the following packages in your application:</p><pre xml:space="preserve" xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
using OpenTelemetry.Context.Propagation;   // Required for trace propagation
using OpenTelemetry;			   // Contains struct required for injecting and extracting Baggage 
using Solace.Messaging.Trace.Propagation;  // Required for using context propagation in <span class="mc-variable Variables.CompanyName variable">Solace</span> APIs
using SolaceSystems.Solclient.Messaging;   // Required for using the .NET <span class="mc-variable Product-Names.pubsub_brand_only variable">PubSub+</span> API
using System.Diagnostics;		   // Required for creating activity instances </pre>
                                                            <h4 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">System.Diagnostics.Activity in the .NET <span class="mc-variable Product-Names.pubsub_brand_only variable">PubSub+</span> API</h4>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Microsoft's <code>System.Diagnostics.Activity</code> class is used for distributed tracing in the <span class="mc-variable Product-Names.pubsub_brand_only variable">PubSub+</span> .NET API. An instance of this class, an <code>activity</code>, is similar to a span and represents an operation inside your application, for example publishing or receiving a message. These activities allow backend applications, like Jaeger or Datadog, to trace the flow of events across distributed systems. To create an <code>activity</code>, you must call the <code>StartActivity(String, ActivityKind)</code>method on an <code>ActivitySource</code> object:</p><pre xml:space="preserve" xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
ActivitySource activitySource;
using var activity = activitySource.StartActivity("activityName", ActivityKind.Producer);	</pre>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"> You can also set optional attributes on an <code>activity</code> with the following methods to provide additional details or custom information about an <code>activity</code>'s execution:</p>
                                                            <ul xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                                                <li>
                                                                    <p><a href="https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.activity.settag?view=net-7.0" class="link-offsite" target="_blank">SetTag(String, Object)</a>—Set custom key-value attributes on an <code>activity</code> to provide additional information.</p><pre xml:space="preserve">
activity?.SetTag("myKey1", "myValue1");				</pre>
                                                                </li>
                                                                <li>
                                                                    <p><a href="https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.activity.addevent?view=net-7.0" class="link-offsite" target="_blank">AddEvent(ActivityEvent)</a>—Add an event to an activity's time line. This method takes an <code>ActivityEvent</code> instance as a parameter, which represents an event that occurred during the <code>activity</code>'s execution. The example below shows an exception event being created and added to an <code>activity</code>:</p><pre xml:space="preserve">
ActivityTagsCollection tagsCollection = new()
{
	{ "exception.message", exceptionMessage }
};
activity?.AddEvent(new ActivityEvent("exceptions", tags: tagsCollection)); </pre>
                                                                </li>
                                                                <li>
                                                                    <p><a href="https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.activity.setstatus?view=net-7.0" class="link-offsite" target="_blank">SetStatus(ActivityStatusCode, String)</a>—Set the status of an <code>activity</code>. Takes an <code>ActivityStatusCode</code> instance as a parameter, which represents the current status of the activity:</p><pre xml:space="preserve">
activity?.SetStatus(ActivityStatusCode.Error, "statusErrorMessage");  	// Status code indicating an error is encountered during the operation.
activity?.SetStatus(ActivityStatusCode.OK, "statusOKMessage"); 	// Status code indicating the operation has been validated and completed successfully.			</pre>
                                                                </li>
                                                            </ul>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">For more information see <a href="https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.activity?view=net-7.0" class="link-offsite" target="_blank">System.Diagnostics.Activity</a> on Microsoft's .NET documentation page</p>
                                                            <h4 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Inject Context into an Outbound Message</h4>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">The following steps show you how to inject context into a message and generate an <code>activity</code> for a published message:</p>
                                                            <ol xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                                                <li value="1">Create your propagator instances. The .NET <span class="mc-variable Product-Names.pubsub_brand_only variable">PubSub+</span> API supports trace context and baggage propagation. If you plan to use both in your application, we recommend you use a <code>CompositeTextMapPropagator</code> which takes in a list of <code>TextMapPropagators</code>  :</li><pre xml:space="preserve">
List&lt;TextMapPropagator&gt; propagators = new List&lt;TextMapPropagator&gt;() { new TraceContextPropagator(), new BaggagePropagator() };
CompositeTextMapPropagator compositeContextPropagator;
// ...				
compositeContextPropagator = new CompositeTextMapPropagator(propagators);</pre>
                                                                <li value="2">
                                                                    <p>Create an instance of <code>ActivitySource</code>, which allows you to create and start <code>activity</code> objects. Use <code>activitySource.StartActivity()</code> to start the <code>activity</code>:</p>
                                                                </li><pre xml:space="preserve">
ActivitySource activitySource;
// ...
using var activity = activitySource.StartActivity("activityName", ActivityKind.Producer);	</pre>
                                                                <li value="3">
                                                                    <p>(Optional) Attach baggage to a message with the <code>Baggage</code> class and the <code>SetBaggage(key,value)</code> method:</p><pre xml:space="preserve">
Baggage.SetBaggage("myBaggageKey", "myBaggageValue");	 </pre>
                                                                </li>
                                                                <li value="4">
                                                                    <p>Use your <code>compositeContextPropagator</code> to inject the context (and optional baggage) into a message:</p><pre xml:space="preserve">
compositeContextPropagator.Inject(new PropagationContext(activity.Context, Baggage.Current), message, SolaceMessageCarrier.Setter);	</pre>
                                                                </li>
                                                                <li value="5">
                                                                    <p>Send the message and call the <code>Stop()</code> method to export the <code>activity</code> data: </p><pre xml:space="preserve">
session.Send(message);
activity?.Stop();				</pre>
                                                                </li>
                                                            </ol>
                                                            <h4 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Extract Context from an Inbound Message</h4>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">The following steps show you how to extract tracing context from a received message and generate an <code>activity</code>:</p>
                                                            <ol xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                                                <li value="1">Create propagator and <code>ActivitySource</code> instances. The .NET <span class="mc-variable Product-Names.pubsub_brand_only variable">PubSub+</span> API supports trace context and baggage propagation. If you plan to use both in your application, we recommend you use a <code>CompositeTextMapPropagator</code> which takes in a list of <code>TextMapPropagators</code>:</li><pre xml:space="preserve">
List&lt;TextMapPropagator&gt; propagators = new List&lt;TextMapPropagator&gt;() { new TraceContextPropagator(), new BaggagePropagator() };
CompositeTextMapPropagator compositeContextPropagator;
ActivitySource activitySource;    // Allows you to create and start Activity objects
// ...				
compositeContextPropagator = new CompositeTextMapPropagator(propagators);</pre>
                                                                <li value="2">
                                                                    <p>In your receiver application's message handler, extract the context and baggage (if applicable) from a received message. Create a new <code>ActivityContext</code> object with the extracted message context (<code>parentContext</code> in the example below):</p>
                                                                </li><pre xml:space="preserve">
private void HandleMessageEvent(object source, MessageEventArgs args)
{
	using (IMessage message = args.Message)
	{
		if (message == null) return;
		var propagatorContext = compositeContextPropagator.Extract(default, message, SolaceMessageCarrier.Getter);
		ActivityContext parentContext = propagatorContext.ActivityContext;
		Baggage.Current = propagatorContext.Baggage;</pre>
                                                                <li value="3">
                                                                    <p>Create and start a consumer <code>activity</code> object with <code>activitySource.StartActivity()</code>:</p><pre xml:space="preserve">
using var activity = activitySource.StartActivity("activityName", ActivityKind.Consumer, parentContext);			</pre>
                                                                </li>
                                                                <li value="4">
                                                                    <p>Set the parent ID with the <code>SetParentId()</code> method:</p><pre xml:space="preserve">
activity?.SetParentId(parentContext.SpanId.ToString());				</pre>
                                                                </li>
                                                                <li value="5">
                                                                    <p>Call the <code>Stop()</code> method to export the <code>activity</code> data: </p><pre xml:space="preserve">
activity?.Stop();			</pre>
                                                                </li>
                                                            </ol>
                                                            <h2 class="with-rule" xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><a name="Instrumenting-JS-NODEJS-Distributed-Tracing"></a>Instrumenting JavaScript and Node.js for Distributed Tracing</h2>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Manual Instrumentation involves making changes to your enterprise application's source code, and allows you to inject and extract additional context, such as baggage and trace states, into messages. Context propagation makes it easy to debug and optimize your application. For more information about context propagation in <span class="mc-variable Variables.CompanyName variable">Solace</span> event messages, see <a href="../../Features/Distributed-Tracing/Distributed-Tracing-Context-Propagation.htm#top" class="link-internal">Distributed Tracing Context Propagation</a>. The following examples show you how to create spans using the OpenTelemetry API.</p>
                                                            <h4 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Understanding How Context Propagation Enables Distributed Tracing in the JavaScript and Node.js <span class="mc-variable Product-Names.pubsub_brand_only variable">PubSub+</span> APIs</h4>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">In your client application, you can use the OpenTelemetry API to create a span, which contains metadata about an operation in a distributed system. This span is associated with a context, which includes a unique <code>TraceID</code>. Next, when you use a <span class="mc-variable Product-Names.pubsub_brand_only variable">PubSub+</span> message producer to publish a message, the <span class="mc-variable Variables.CompanyName variable">Solace</span> OTel integration package injects the context, which contains the <code>TraceID</code>, into the message. As the message travels through the event broker and is received by a consuming application, spans are generated at each step and have the same <code>TraceID</code> present in the original message context.  When each span is closed in the publishing or consuming application, the JavaScript OpenTelemetry API sends it to an OpenTelemetry collector, which collects, processes and exports the spans to a backend application that correlates the spans using their unique <code>TraceID</code>. A backend application uses the correlated spans to create a <i>trace</i>, which is an end-to-end snapshot detailing how the message traveled through the distributed system. If you do not use context propagation, then backend applications cannot use a unique TraceID to link the spans, making it difficult to trace the flow of messages through the distributed system.</p>
                                                            <h4 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Dependencies</h4>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">To enable context propagation for distributed tracing, you must first add the <a href="https://www.npmjs.com/package/pubsubplus-opentelemetry-js-integration" class="link-offsite">Solace  OpenTelemetry JavaScript Integration</a> artifact to your application. For OpenTelemetry version compatibility see <a href="../../Features/Distributed-Tracing/Distributed-Tracing-Receiver-Versions.htm" class="MCXref xref">Distributed Tracing Version Compatibility</a>. Adding the libraries gives you access to the following two classes:</p>
                                                            <ul xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                                                <li><code>SolaceW3CTextMapSetter</code>
                                                                    <ul>
                                                                        <li>use with the OpenTelemetry API's <code>W3CTraceContextPropagator</code> to inject context into  a <code>Message</code>.</li>
                                                                        <li>use with the OpenTelemetry API's <code>W3CBaggagePropagator</code>to inject baggage into  a <code>Message</code>.</li>
                                                                    </ul>
                                                                </li>
                                                                <li><code>SolaceW3CTextMapGetter</code>
                                                                    <ul>
                                                                        <li>use with the OpenTelemetry API's <code>W3CTraceContextPropagator</code> to extract context from a <code>Message</code>.</li>
                                                                        <li>use with the OpenTelemetry API's <code>W3CBaggagePropagator</code>to extract baggage from a <code>Message</code>.</li>
                                                                    </ul>
                                                                </li>
                                                            </ul>
                                                            <div class="Note" xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                                                <p>This guide assumes you are familiar with configuring an instance of the OpenTelemetry class. For instructions for configuring OpenTelemetry objects, see <a href="https://opentelemetry.io/docs/instrumentation/js/manual/" class="link-offsite">OpenTelemetry Manual Instrumentation in JavaScript</a> in the OpenTelemetry documentation.</p>
                                                            </div>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">To use context propagation in the <span class="mc-variable Product-Names.pubsub_brand_only variable">PubSub+</span> JavaScript API and <span class="mc-variable Product-Names.pubsub_brand_only variable">PubSub+</span> Node.js API, include the following modules in your application:</p><pre xml:space="preserve" xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
import {
    SemanticAttributes,
    MessagingOperationValues,
    MessagingDestinationKindValues,
} from '@opentelemetry/semantic-conventions';

const opentelemetry = require('@opentelemetry/api');
const { CompositePropagator, W3CTraceContextPropagator, W3CBaggagePropagator, TraceState } = require("@opentelemetry/core");
const { BasicTracerProvider } = require("@opentelemetry/sdk-trace-base");
const { context, propagation, trace } = require("@opentelemetry/api");
const { SemanticAttributes, MessagingDestinationKindValues } = require("@opentelemetry/semantic-conventions");
const { SemanticResourceAttributes } = require('@opentelemetry/semantic-conventions');
const { SolaceW3CTextMapSetter, SolaceW3CTextMapGetter } = require("pubsubplus-opentelemetry-js-integration");

const api = require('@opentelemetry/api'); 
var solace = require('solclientjs').debug; // with logging supported
</pre>
                                                            <h4 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Injecting Context into an Outbound Message</h4>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Your publishing application can generate a send span and export it to the OpenTelemetry Collector. The following steps show you how to inject context into a message and generate a send span for a published message:</p>
                                                            <ol xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                                                <li value="1">Create propagator  instances. The JavaScript and Node.js APIs supports trace context and baggage propagation. If you plan to use both in your application, we recommend you use a <code>CompositePropagator</code> which takes in an array of propagators:
				<pre xml:space="preserve">
const compositePropagator = new CompositePropagator({
   propagators: [
     new W3CBaggagePropagator(),
     new W3CTraceContextPropagator(),
   ],
});
</pre></li>
                                                                <li value="2">Set the global propagator with a <code>W3CTraceContextPropagator()</code> and optional <code>W3cCBaggagePropagator</code> that ensures all context propagation in your application follows the same rules and mechanisms. In the example below, both are contained in the <code>compositePropagator</code> created in step 1. Next create a <code>BasicTracerProvider</code> which allows your application to create and activate traces:</li><pre xml:space="preserve">
propagation.setGlobalPropagator(compositePropagator);
const tracerProvider = new BasicTracerProvider();</pre>
                                                                <li value="3">
                                                                    <p>Use the <code>register()</code> function to register the <code>tracerProvider</code> created in step 1 with the OpenTelemetry API. This lets you use tracer instances to create spans and record trace data. Next create a tracer. The parameter you pass to the <code>getTracer()</code> function represents the name of the tracer, which is used to associate the tracer with a specific component, service, or module within your application:</p>
                                                                </li><pre xml:space="preserve">
tracerProvider.register();
const tracer = opentelemetry.trace.getTracer("solace-pubsub-publisher-test");
</pre>
                                                                <li value="4">
                                                                    <p>Use the OpenTelemetry API to retrieve the currently active context that will be propagated. Then, create a "publish span" and start it with the <code>startSpan()</code> function:</p><pre xml:space="preserve">
let ctx = api.context.active();
const span = tracer.startSpan(topicName+' send',{kind: opentelemetry.SpanKind.CLIENT}, ctx);	 </pre>
                                                                </li>
                                                                <li value="5">
                                                                    <p>Set span attributes using <code>setAttribute()</code> function. This lets you attach additional context and meta-data to a span. You can also use <code>setAttribute()</code> to  label the span with a descriptive name that indicates the type of operation the span represents. </p><pre xml:space="preserve">
span.setAttribute('attributeKey','attributeValue');
span.setAttribute(SemanticAttributes.MESSAGING_OPERATION, 'send');
</pre>
                                                                </li>
                                                                <li value="6">
                                                                    <p>(Optional) Create baggage with the <code>createBaggage()</code> function and set it on the context by calling the <code>setBaggage()</code> function on your propagation instance:</p><pre xml:space="preserve">
const baggage = propagation.createBaggage({
  "baggageKey": {
    value: 'baggageValue',
    metadata: undefined,
  },
}); 
ctx = propagation.setBaggage(ctx, baggage);		</pre>
                                                                </li>
                                                                <li value="7">
                                                                    <p>Create an instance of <code>SolaceContextSetter</code> and use it with a W3C context propagator to inject context into a <span class="mc-variable Variables.CompanyName variable">Solace</span> message. Send the message and set the <code>SpanStatusCode</code> with the <code>setStatus()</code> function: </p><pre xml:space="preserve">
var setter = new SolaceContextSetter();
opentelemetry.propagation.inject(ctx,solaceMessage,setter)
try {
    solaceSession.send(solaceMessage);
    span.setStatus({
        code: opentelemetry.SpanStatusCode.OK,
        message: 'Message Sent'
     });
} catch (error) {
    span.setStatus({
        code: opentelemetry.SpanStatusCode.ERROR,
        message: error.toString()
    });
}				</pre>
                                                                </li>
                                                                <li value="8">Call the <code>end()</code> function on the span to close it and export the data.<pre xml:space="preserve">
span.end();		</pre></li>
                                                            </ol>
                                                            <div class="MCDropDown MCDropDown_Closed dropDown" xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><span class="MCDropDownHead dropDownHead"><a href="#" class="MCDropDownHotSpot dropDownHotspot MCDropDownHotSpot_ MCHotSpotImage" aria-expanded="false"><img class="MCDropDown_Image_Icon" src="../../Skins/Default/Stylesheets/Images/transparent.gif" height="11" width="16" alt="Closed" data-mc-alt2="Open" />Complete Example:</a></span>
                                                                <div class="MCDropDownBody dropDownBody"><pre class="Code" xml:space="preserve">
import {
	SemanticAttributes,
	MessagingOperationValues,
	MessagingDestinationKindValues,
} from '@opentelemetry/semantic-conventions';

const opentelemetry = require('@opentelemetry/api');
const { CompositePropagator, W3CTraceContextPropagator, W3CBaggagePropagator, TraceState } = require("@opentelemetry/core");
const { BasicTracerProvider } = require("@opentelemetry/sdk-trace-base");
const { context, propagation, trace } = require("@opentelemetry/api");
const { SemanticAttributes, MessagingDestinationKindValues } = require("@opentelemetry/semantic-conventions");
const { SemanticResourceAttributes } = require('@opentelemetry/semantic-conventions');
const { SolaceW3CTextMapSetter } = require("pubsubplus-opentelemetry-js-integration");
const api = require('@opentelemetry/api'); 
var solace = require('solclientjs').debug; // with logging supported


const compositePropagator = new CompositePropagator({
   propagators: [
     new W3CBaggagePropagator(),
     new W3CTraceContextPropagator(),
   ],
});

propagation.setGlobalPropagator(compositePropagator);
const tracerProvider = new BasicTracerProvider();
tracerProvider.register();
const tracer = opentelemetry.trace.getTracer("solace-pubsub-publisher-test");					
let ctx = api.context.active();
const span = tracer.startSpan(topicName+' send',{kind: opentelemetry.SpanKind.CLIENT}, ctx);
  					
span.setAttribute('attributeKey','attributeValue');
span.setAttribute(SemanticAttributes.MESSAGING_OPERATION, 'send');
const baggage = propagation.createBaggage({
  "baggageKey": {
    value: 'baggageValue',
    metadata: undefined,
  },
}); 
ctx = propagation.setBaggage(ctx, baggage);
					
var setter = new SolaceContextSetter();
opentelemetry.propagation.inject(ctx,solaceMessage,setter)
try {
    solaceSession.send(solaceMessage);
    span.setStatus({
        code: opentelemetry.SpanStatusCode.OK,
        message: 'Message Sent'
     });
} catch (error) {
    span.setStatus({
        code: opentelemetry.SpanStatusCode.ERROR,
        message: error.toString()
    });
}
span.end(); 
</pre>
                                                                </div>
                                                            </div>
                                                            <h4 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Extracting Context from an Inbound Message</h4>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Your consuming application can generate a process span and then export it to the OpenTelemetry Collector. The following steps show you how to extract tracing context from a received message and generate a process span:</p>
                                                            <ol xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                                                <li value="1">Use the OpenTelemetry API to create a tracer: The parameter you pass to the <code>getTracer()</code> function represents the name of the tracer, which is used to associate the tracer with a specific component, service, or module within your application:</li><pre xml:space="preserve">
const tracer = opentelemetry.trace.getTracer('solace-pubsub-receiver-test');
</pre>
                                                                <li value="2">In your event listener for messages, create a <code>SolaceContextGetter</code>. Extract the trace and context information from a received message  with the <code>extract()</code> function. Use this extracted context to create a <code>parentContext</code> for tracing subsequent operations:</li><pre xml:space="preserve">
messageConsumer.on(solace.MessageConsumerEventName.MESSAGE, function (message) {
    var getter = new SolaceContextGetter();
    const parentContext = propagation.extract(opentelemetry.ROOT_CONTEXT,message,getter);
</pre>
                                                                <li value="3">Create a new process span and link it to the <code>parentContext</code> if it exists:<pre xml:space="preserve">
if(!parentContext)
    var span = tracer.startSpan(MessagingOperationValues.PROCESS,{kind: opentelemetry.SpanKind.CLIENT});
else
    var span = tracer.startSpan(MessagingOperationValues.PROCESS,{kind: opentelemetry.SpanKind.CLIENT},parentContext);		</pre></li>
                                                                <li value="4">Set span attributes using <code>setAttribute()</code> function. This lets you attach additional context and meta-data to a span. You can also use <code>setAttribute()</code> to  label the span with a descriptive name that indicates the type of operation the span represents:<pre xml:space="preserve">
span.setAttribute('attributeKey','attributeValue');
span.setAttribute(SemanticAttributes.MESSAGING_OPERATION, 'process');
</pre></li>
                                                                <li value="5">
			(Optional) Extract baggage from the parent context using the <code>getBaggage()</code> function:</li><pre xml:space="preserve">
const baggage = propagation.getBaggage(parentContext);	</pre>
                                                                <li value="6">Process the message and set  and set the <code>SpanStatusCode</code> with the <code>setStatus()</code> function: <pre xml:space="preserve">
    try {
        // Process the message here
        span.setStatus({
            code: opentelemetry.SpanStatusCode.OK,
            message: 'Message processed'
        });		
        message.acknowledge();
    }  catch (error) {
        span.setStatus({
            code: opentelemetry.SpanStatusCode.ERROR,
            message: error.toString()
        });
    }
</pre></li>
                                                                <li value="7">Call the <code>end()</code> function on the span to close it and export the data:<pre xml:space="preserve">
span.end(); 
</pre></li>
                                                            </ol>
                                                            <div class="MCDropDown MCDropDown_Closed dropDown" xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><span class="MCDropDownHead dropDownHead"><a href="#" class="MCDropDownHotSpot dropDownHotspot MCDropDownHotSpot_ MCHotSpotImage" aria-expanded="false"><img class="MCDropDown_Image_Icon" src="../../Skins/Default/Stylesheets/Images/transparent.gif" height="11" width="16" alt="Closed" data-mc-alt2="Open" />Example Listener:</a></span>
                                                                <div class="MCDropDownBody dropDownBody"><pre class="Code" xml:space="preserve">
import {
	SemanticAttributes,
	MessagingOperationValues,
	MessagingDestinationKindValues,
} from '@opentelemetry/semantic-conventions';

const opentelemetry = require('@opentelemetry/api');
const { CompositePropagator, W3CTraceContextPropagator, W3CBaggagePropagator, TraceState } = require("@opentelemetry/core");
const { BasicTracerProvider } = require("@opentelemetry/sdk-trace-base");
const { context, propagation, trace } = require("@opentelemetry/api");
const { SemanticResourceAttributes } = require('@opentelemetry/semantic-conventions');
const { SolaceW3CTextMapGetter } = require("pubsubplus-opentelemetry-js-integration");
const api = require('@opentelemetry/api'); 
var solace = require('solclientjs').debug; // with logging supported

const tracer = opentelemetry.trace.getTracer('solace-pubsub-receiver-test');

messageConsumer.on(solace.MessageConsumerEventName.MESSAGE, function (message) {
    var getter = new SolaceContextGetter();
    const parentContext = propagation.extract(opentelemetry.ROOT_CONTEXT,message,getter);
    if(!parentContext)
        var span = tracer.startSpan(MessagingOperationValues.PROCESS,{kind: opentelemetry.SpanKind.CLIENT});
    else
        var span = tracer.startSpan(MessagingOperationValues.PROCESS,{kind: opentelemetry.SpanKind.CLIENT},parentContext);
					
    span.setAttribute('attributeKey','attributeValue');
    span.setAttribute(SemanticAttributes.MESSAGING_OPERATION, 'process');)
    
    const baggage = propagation.getBaggage(parentContext);

    try {
        // Process the message here
        span.setStatus({
            code: opentelemetry.SpanStatusCode.OK,
            message: 'Message processed'
        });		
        message.acknowledge();
    }  catch (error) {
        span.setStatus({
        code: opentelemetry.SpanStatusCode.ERROR,
        message: error.toString()
        });
    }
    span.end(); 
});
</pre>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="no-print">
                                            <div><a href="#" id="docsFeedbackTrigger" class="docs-issue-collector">Provide feedback</a>
                                            </div>
                                        </div>
                                        <footer class="my-4 pt-4 text-center no-print">
                                            <div class="footer-txt text-center no-print">
                                                <ul class="list-inline ">
                                                    <li class="list-inline-item text-muted"><a href="../../Resources/Documentation-Set.htm" class="doc-set-footer-link MCXref xref xrefdoc-set-footer-link">Documentation Coverage</a>: <span class="mc-variable Variables.DocumentSetNumber variable">2024.09.16.0001</span></li>
                                                    <li class="list-inline-item text-muted">Last Updated: <span class="mc-variable Variables.MonthDayYear variable">September 16, 2024</span></li>
                                                    <li class="list-inline-item text-muted" style="font-size:13px;"> ©  <span class="mc-variable Variables.CompanyNameLegal variable">Solace Corporation</span></li>
                                                </ul>
                                            </div>
                                            <div class="footer-icons">
                                                <ul class="list-inline">
                                                    <li class="list-inline-item"><a href="https://facebook.com/solacedotcom" target="_blank" class="social-media-icon"><img src="../../Resources/Images/Social-Media/facebook_22x21.png" class="Hyperlinked" alt="Facebook" title="Solace Facebook Page" style="width: 22;height: 21;" /></a>
                                                    </li>
                                                    <li class="list-inline-item"><a href="https://www.linkedin.com/company/20219" target="_blank" class="social-media-icon"><img src="../../Resources/Images/Social-Media/LinkedIn_22x21.png" class="Hyperlinked" alt="LinkedIn" title="Solace LinkedIn Page" style="width: 22;height: 21;" /></a>
                                                    </li>
                                                    <li class="list-inline-item"><a href="https://twitter.com/solacedotcom" target="_blank" class="social-media-icon"><img src="../../Resources/Images/Social-Media/Twitter_22x21.png" class="Hyperlinked" alt="Twitter" title="Solace Twitter Feed" style="width: 22;height: 21;" /></a>
                                                    </li>
                                                    <li class="list-inline-item"><a href="https://www.youtube.com/user/SolaceSystems" target="_blank" class="social-media-icon"><img src="../../Resources/Images/Social-Media/youtube_22x21.png" class="Hyperlinked" alt="YouTube" title="Solace YouTube Channel" style="width: 22;height: 21;" /></a>
                                                    </li>
                                                    <li class="list-inline-item"><a href="https://www.instagram.com/solacedotcom/" target="_blank" class="social-media-icon"><img src="../../Resources/Images/Social-Media/instagram_22x21.png" class="Hyperlinked" alt="Instagram" title="Solace Instagram Feed" style="width: 22;height: 21;" /></a>
                                                    </li>
                                                    <li class="list-inline-item"><a href="https://medium.com/solacedotcom" target="_blank" class="social-media-icon"><img src="../../Resources/Images/Social-Media/medium_22x21.png" class="Hyperlinked" alt="Medium" title="Solace Medium Blog" style="width: 22;height: 21;" /></a>
                                                    </li>
                                                </ul>
                                            </div>
                                            <div class="footer_link_menu">
                                                <ul class="link_list">
                                                    <li class="link_list_item"><a href="https://solace.com/products/" target="_blank" class="footer-link">Products</a>
                                                    </li>
                                                    <li class="link_list_item"><a href="https://solace.com/company/" target="_blank" class="footer-link">Company</a>
                                                    </li>
                                                    <li class="link_list_item"><a href="https://www.solace.dev/" target="_blank" class="footer-link">Developers</a>
                                                    </li>
                                                    <li class="link_list_item"><a href="https://solace.com/support/" target="_blank" class="footer-link">Support</a>
                                                    </li>
                                                    <li class="link_list_item"><a href="https://solace.com/contact/" target="_blank" class="footer-link">Contact Us</a>
                                                    </li>
                                                </ul>
                                            </div>
                                        </footer>
                                    </div>
                                    <!-- JIRA issue collector -->
                                    <script>/*<![CDATA[*/// Requires jQuery!
jQuery.ajax({
    url: "https://sol-jira.atlassian.net/s/d41d8cd98f00b204e9800998ecf8427e-T/o2joag/b/24/e73395c53c3b10fde2303f4bf74ffbf6/_/download/batch/com.atlassian.jira.collector.plugin.jira-issue-collector-plugin:issuecollector-embededjs/com.atlassian.jira.collector.plugin.jira-issue-collector-plugin:issuecollector-embededjs.js?locale=en-US&collectorId=076e0808",
    type: "get",
    cache: true,
    dataType: "script"
});
window.ATL_JQ_PAGE_PROPS = {
"triggerFunction": function(showCollectorDialog) {
//Requires that jQuery is available!
$("#docsFeedbackTrigger").click(function(e) {
e.preventDefault();
showCollectorDialog();
});
},
fieldValues: {
recordWebInfo: '1', // field Name
recordWebInfoConsent: ['1'] // field Id
}
};
/*]]>*/</script>
                                    <script src="../../Resources/Scripts/thumbnail.js">
                                    </script>
                                    <!-- Script for Launching offsite links in new tab -->
                                    <script type="text/javascript">/*<![CDATA[*/$("a[href^='http']").attr("target","_blank");/*]]>*/</script>
                                </div>
                            </div>
                        </div>
                    </div><a data-close="true"></a>
                </div>
            </div>
        </div>
    </body>
</html>