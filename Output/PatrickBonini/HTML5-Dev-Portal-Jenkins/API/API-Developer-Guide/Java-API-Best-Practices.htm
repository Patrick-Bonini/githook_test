<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-us" xml:lang="en-us" class="_Skins_HTML5___Side_Navigation" data-mc-search-type="Stem" data-mc-help-system-file-name="Default.xml" data-mc-path-to-help-system="../../" data-mc-has-content-body="True" data-mc-toc-path="Developing Applications|Solace Messaging API Developer Guide|API Best Practices" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic;Default" data-mc-preload-images="false" data-mc-in-preview-mode="false">
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
        <meta name="msapplication-config" content="../../Skins/Favicons/browserconfig.xml" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <meta name="keywords" content="rmem_max, wmem_max, tcp_wmem, Java API, best practices" />
        <link rel="apple-touch-icon" sizes="180x180" href="../../Skins/Favicons/apple-touch-icon.png" />
        <link rel="shortcut icon" href="../../Skins/Favicons/favicon-32x32.png" />
        <link rel="icon" sizes="96x96" href="../../Skins/Favicons/favicon-96x96.png" />
        <link rel="icon" sizes="32x32" href="../../Skins/Favicons/favicon-32x32.png" />
        <link rel="icon" sizes="16x16" href="../../Skins/Favicons/favicon-16x16.png" />
        <meta charset="utf-8" />
        <meta http-equiv="Cache-control" content="no-cache" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" /><title>JCSMP Best Practices</title>
        <!-- <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous" /> -->
        <!--style to display feedback button correctly in IE-->
        <!-- Google Tag Manager -->
        <!-- End Google Tag Manager -->
        <!-- links to get the EDA styling to work -->
        <link href="../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../Skins/Default/Stylesheets/Components/Tablet.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../Skins/Default/Stylesheets/Components/Mobile.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../Skins/Default/Stylesheets/Components/Print.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../Skins/Fluid/Stylesheets/foundation.6.2.3.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../Skins/Fluid/Stylesheets/Styles.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../Skins/Fluid/Stylesheets/Tablet.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../Skins/Fluid/Stylesheets/Mobile.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../Skins/Fluid/Stylesheets/Print.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../Resources/Stylesheets/MainStyles.min.css" rel="stylesheet" type="text/css" />
        <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet" />
        <style>@media screen and (min-width: 0\0)
{
	.feedback-button
	{
		margin-right: -40px;
		top: 50%;
		border-radius: 9px 9px 0px 0px;
	}

	#canvas
	{
		position: relative;
	}
}

@media print
{
	#plugin
	{
		overflow: visible !important;
	}
}

</style>
        <link href="../../Resources/Stylesheets/eda_styles.css" rel="stylesheet" type="text/css" />
        <link href="https://fonts.googleapis.com/css?family=Open+Sans:400,600,300" rel="stylesheet" type="text/css" />
        <style>/*&lt;meta /&gt;*/

.button.print-button
{
	-pie-background: linear-gradient(#ffffff, transparent);
}

.button.previous-topic-button
{
	-pie-background: linear-gradient(#ffffff, transparent);
}

.button.next-topic-button
{
	-pie-background: linear-gradient(#ffffff, transparent);
}

.needs-pie
{
	behavior: url('../../Resources/Scripts/PIE-no-motw.htc');
}

</style>
        <link href="../../Resources/TableStyles/Table_Num.css" rel="stylesheet" data-mc-stylesheet-type="table" />
        <link rel="apple-touch-icon" sizes="180x180" href="../../Skins/Favicons/apple-touch-icon.png" />
        <link rel="shortcut icon" href="../../Skins/Favicons/favicon-32x32.png" />
        <link rel="icon" sizes="96x96" href="../../Skins/Favicons/favicon-96x96.png" />
        <link rel="icon" sizes="32x32" href="../../Skins/Favicons/favicon-32x32.png" />
        <link rel="icon" sizes="16x16" href="../../Skins/Favicons/favicon-16x16.png" />
        <script src="../../Resources/Scripts/jquery.min.js" type="text/javascript">
        </script>
        <script src="../../Resources/Scripts/purify.min.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../Resources/Scripts/require.min.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../Resources/Scripts/require.config.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../Resources/Scripts/foundation.6.2.3_custom.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../Resources/Scripts/plugins.min.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../Resources/Scripts/MadCapAll.js" type="text/javascript" defer="defer">
        </script>
        <script src="https://cmp.osano.com/AzZrhlTmT5f216Foa/84ba7dc4-a4e5-4b02-b120-977eb6f052d4/osano.js">
        </script>
        <script type="text/javascript">/*<![CDATA[*/(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
			new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
			j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
			'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
			})(window,document,'script','dataLayer','GTM-KLSDFH');
		/*]]>*/</script>
        <script type="text/javascript" src="../../Skins/Default/Scripts/TopicToolBar.js">
        </script>
    </head>
    <!-- Top Orange and Darkgrey header-->
    <!-- Div for EDA banner -->
    <div class="eda_banner">
        <p>Register Now for EDA Summit 2024 - Virtual Event <a href="https://edasummit.com/" target="_blank">Register for Free</a></p>
    </div>
    <!-- end Div for EDA banner -->
    <div class="top-nav">
        <div class="main_list">
            <ul class="top-navlinks">
                <li><a href="https://solace.com/support/" target="_blank">Support</a>
                </li>
                <li><a href="https://solace.com/contact/" target="_blank">Contact Us</a>
                </li>
            </ul>
        </div>
        <div class="container-fluid">
            <div class="src-li">
                <div id="srchWrapTwo">
                    <form class="search" action="#">
                        <div class="search-bar search-bar-container needs-pie">
                            <input class="search-field needs-pie" type="search" aria-label="Search Field" placeholder="Search the docs" />
                            <div class="search-filter-wrapper"><span class="invisible-label" id="search-filters-label">Filter: </span>
                                <div class="search-filter" aria-haspopup="true" aria-controls="sf-content" aria-expanded="false" aria-label="Search Filter" title="All Files" role="button" tabindex="0">
                                </div>
                                <div class="search-filter-content" id="sf-content">
                                    <ul>
                                        <li>
                                            <button class="mc-dropdown-item" aria-labelledby="search-filters-label filterSelectorLabel-00001"><span id="filterSelectorLabel-00001">All Files</span>
                                            </button>
                                        </li>
                                    </ul>
                                </div>
                            </div>
                            <div class="search-submit-wrapper" dir="ltr">
                                <div class="search-submit" title="Search" role="button" tabindex="0"><span class="invisible-label">Submit Search</span>
                                </div>
                            </div>
                        </div>
                    </form>
                </div>
            </div><span class="tool-tip" tooltip-position="left" tooltip="To search for CLI commands, events, or APIs, navigate to the related sections.">i</span>
            <!-- Sept. 28, 2022 - This is being moved to under div class= top-nav
			<div class="main_list">
				<ul class="top-navlinks">
					<li><a href="https://solace.com/support/" target="_blank">Support</a></li>
					<li><a href="https://solace.com/contact/" target="_blank">Contact Us</a></li>
				</ul>
			</div> -->
        </div>
        <!-- Sept. 27, 2022 - The commented out content below used to provide the products, company, etc., links in the top header, next to the search field. -->
        <!-- <div class="main_list"><ul class="top-navlinks"><li><a href="https://solace.com/products/" target="_blank">Products</a></li><li><a href="https://solace.com/company/" target="_blank">Company</a></li><li><a href="https://www.solace.dev/" target="_blank">Developers</a></li><li><a href="https://solace.com/support/" target="_blank">Support</a></li><li><a href="https://solace.com/contact/" target="_blank">Contact Us</a></li></ul></div> -->
    </div>
    <body>
        <div class="foundation-wrap off-canvas-wrapper">
            <div class="off-canvas-wrapper-inner" data-off-canvas-wrapper="">
                <aside class="off-canvas position-right" role="navigation" id="offCanvas" data-off-canvas="" data-position="right" data-mc-ignore="true">
                    <ul class="off-canvas-accordion vertical menu off-canvas-list" data-accordion-menu="" data-mc-back-link="Back" data-mc-css-tree-node-expanded="is-accordion-submenu-parent" data-mc-css-tree-node-collapsed="is-accordion-submenu-parent" data-mc-css-sub-menu="vertical menu is-accordion-submenu nested" data-mc-include-indicator="False" data-mc-include-icon="False" data-mc-include-parent-link="True" data-mc-include-back="False" data-mc-defer-expand-event="True" data-mc-expand-event="click.zf.accordionMenu" data-mc-toc="True">
                    </ul>
                </aside>
                <div class="off-canvas-content inner-wrap" data-off-canvas-content="">
                    <div data-sticky-container="" class="title-bar-container">
                        <nav class="title-bar tab-bar sticky" role="banner" data-sticky="" data-options="marginTop:0" style="width:100%" data-sticky-on="only screen and (max-width: 1000px)" data-mc-ignore="true"><a class="skip-to-content fluid-skip showOnFocus" href="#">Skip To Main Content</a>
                            <div class="middle title-bar-section outer-row clearfix">
                                <div class="menu-icon-container relative clearfix">
                                    <div class="central-account-wrapper">
                                        <div class="central-dropdown"><a class="central-account-drop"><span class="central-account-image"></span><span class="central-account-text">Account</span></a>
                                            <div class="central-dropdown-content"><a class="MCCentralLink central-dropdown-content-settings">Settings</a>
                                                <hr class="central-separator" /><a class="MCCentralLink central-dropdown-content-logout">Logout</a>
                                            </div>
                                        </div>
                                    </div>
                                    <button class="menu-icon" aria-label="Show Navigation Panel" data-toggle="offCanvas"><span></span>
                                    </button>
                                </div>
                            </div>
                            <div class="title-bar-layout outer-row">
                                <div class="logo-wrapper"><a class="logo" href="../../index.html" alt="Logo"></a>
                                </div>
                                <div class="navigation-wrapper nocontent">
                                    <ul class="navigation clearfix" role="navigation" data-mc-css-tree-node-has-children="has-children" data-mc-css-sub-menu="sub-menu" data-mc-expand-event="mouseenter" data-mc-top-nav-menu="True" data-mc-max-depth="3" data-mc-include-icon="False" data-mc-include-indicator="False" data-mc-include-children="True" data-mc-include-siblings="True" data-mc-include-parent="True" data-mc-toc="True">
                                        <li class="placeholder" style="visibility:hidden"><a>placeholder</a>
                                        </li>
                                    </ul>
                                </div>
                                <div class="central-account-wrapper">
                                    <div class="central-dropdown"><a class="central-account-drop"><span class="central-account-image"></span><span class="central-account-text">Account</span></a>
                                        <div class="central-dropdown-content"><a class="MCCentralLink central-dropdown-content-settings">Settings</a>
                                            <hr class="central-separator" /><a class="MCCentralLink central-dropdown-content-logout">Logout</a>
                                        </div>
                                    </div>
                                </div>
                                <div class="nav-search-wrapper">
                                    <div class="nav-search row">
                                        <form class="search" action="#">
                                            <div class="search-bar search-bar-container needs-pie">
                                                <input class="search-field needs-pie" type="search" aria-label="Search Field" placeholder="Search the docs" />
                                                <div class="search-filter-wrapper"><span class="invisible-label" id="search-filters-label">Filter: </span>
                                                    <div class="search-filter" aria-haspopup="true" aria-controls="sf-content" aria-expanded="false" aria-label="Search Filter" title="All Files" role="button" tabindex="0">
                                                    </div>
                                                    <div class="search-filter-content" id="sf-content">
                                                        <ul>
                                                            <li>
                                                                <button class="mc-dropdown-item" aria-labelledby="search-filters-label filterSelectorLabel-00001"><span id="filterSelectorLabel-00001">All Files</span>
                                                                </button>
                                                            </li>
                                                        </ul>
                                                    </div>
                                                </div>
                                                <div class="search-submit-wrapper" dir="ltr">
                                                    <div class="search-submit" title="Search" role="button" tabindex="0"><span class="invisible-label">Submit Search</span>
                                                    </div>
                                                </div>
                                            </div>
                                        </form>
                                    </div>
                                </div>
                            </div>
                        </nav>
                    </div>
                    <div class="main-section">
                        <div class="row outer-row sidenav-layout">
                            <nav class="sidenav-wrapper">
                                <div class="sidenav-container">
                                    <ul class="off-canvas-accordion vertical menu sidenav" data-accordion-menu="" data-mc-css-tree-node-expanded="is-accordion-submenu-parent" data-mc-css-tree-node-collapsed="is-accordion-submenu-parent" data-mc-css-sub-menu="vertical menu accordion-menu is-accordion-submenu nested" data-mc-include-indicator="False" data-mc-include-icon="False" data-mc-include-parent-link="False" data-mc-include-back="False" data-mc-defer-expand-event="True" data-mc-expand-event="click.zf.accordionMenu" data-mc-toc="True" data-mc-side-nav-menu="True">
                                    </ul>
                                </div>
                            </nav>
                            <div class="body-container">
                                <div data-mc-content-body="True">
                                    <div class="buttons popup-container clearfix topicToolbarProxy _Skins_TopicToolBar mc-component nocontent" style="mc-topic-toolbar-items: PreviousTopic Print NextTopic;">
                                        <div class="button-group-container-left">
                                            <button class="button needs-pie print-button" title="Print">
                                                <div>
                                                    <div role="img" class="button-icon-wrapper" aria-label="Print">
                                                        <div class="button-icon"> </div>
                                                    </div>
                                                </div>
                                            </button>
                                            <button class="button needs-pie previous-topic-button" title="Navigate previous topic" disabled="true">
                                                <div>
                                                    <div role="img" class="button-icon-wrapper" aria-label="Navigate previous">
                                                        <div class="button-icon"> </div>
                                                    </div>
                                                </div>
                                            </button>
                                            <button class="button needs-pie next-topic-button" title="Navigate next topic" disabled="true">
                                                <div>
                                                    <div role="img" class="button-icon-wrapper" aria-label="Navigate next">
                                                        <div class="button-icon"> </div>
                                                    </div>
                                                </div>
                                            </button>
                                        </div>
                                    </div>
                                    <!-- Google Tag Manager (noscript) -->
                                    <noscript><iframe src="https://www.googletagmanager.com/ns.html?id=GTM-KLSDFH" height="0" width="0" style="display:none;visibility:hidden"></iframe>
                                    </noscript>
                                    <!-- End Google Tag Manager (noscript) -->
                                    <div id="content">
                                        <div id="contentBody">
                                            <div class="row collapse">
                                                <div class="ContentRow" xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                                    <div>
                                                        <div class="nocontent" xmlns="">
                                                            <div class="MCBreadcrumbsBox_MCBreadcrumbsSelf_0 breadcrumbs" role="navigation" aria-label="Breadcrumbs" data-mc-breadcrumbs-divider=" / " data-mc-breadcrumbs-count="4" data-mc-toc="True"><span class="MCBreadcrumbsPrefix"> </span>
                                                            </div>
                                                        </div>
                                                        <div role="main" id="mc-main-content" xmlns="">
                                                            <h1 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">JCSMP Best Practices</h1>
                                                            <h2 class="with-rule" xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><a name="General"></a>General Best Practices</h2>
                                                            <h3 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><a name="Tuning"></a>Tuning Guidelines for Guaranteed Messaging</h3>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Reductions in the rate at which clients receive messages can occur when a high volume of Guaranteed messages (particularly when they are large messages) is received over many Flows. In this situation, the number of Flows used and the Guaranteed window size used for each Flow affects the buffer usage of the per&#8209;client priority queues that the event broker uses for Guaranteed messages. These queues, called the G-1 queues, hold Guaranteed messages for the clients that are waiting for delivery out of the event broker, or have been sent but are waiting for acknowledgment from the clients.</p>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Each G-1 queue is allocated a maximum depth buffer. This maximum depth is measured in work units, whereby a work unit represents 2,048 bytes of a message. (By default, each G-1 queue is given a maximum depth of 20,000 work units.)</p>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">To address slow Guaranteed message delivery rates caused by high demands on the buffer allocated by G-1 queues, you should reduce the Guaranteed message window size used for each Flow and, when possible, reduce the number of Flows used. </p>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">If it's not possible to reduce the Guaranteed message window size, or the number of flows, you can also effectively increase the G-1 queue size by adjusting the <code>min-msg-burst</code> size used by the event broker. </p>
                                                            <h3 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><a name="Reapply"></a>Reapply Subscriptions</h3>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">If enabled, the API maintains a local cache of subscriptions and reapplies them when the subscriber connection is reestablished. Reapply Subscriptions will only apply direct topic subscriptions upon a Session reconnect. It will not reapply topic subscriptions on durable and non-durable endpoints.</p>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">For more information, see <a href="#Subscrip" class="MCXref xref">Subscription Management</a>.</p>
                                                            <h3 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><a name="Number2"></a>Number of Flows and Guaranteed Message Window Size</h3>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">The amount of buffers used by a client for receiving Guaranteed messages is primarily determined by the number of Flows used per Session * the Guaranteed Message window size of each Flow. To limit a client’s maximum buffer use, you can reduce the number of Flows used and/or reduce the Guaranteed Message window size of each Flow. (The Guaranteed Message window size for each Flow is set through the Flow properties; refer to <a href="Creating-Flows.htm#Importan" class="MCXref xref">Important Flow (Message Consumer) Properties</a>.)</p>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Consider, for example, a client using Flows with a window size of 255 to bind to 10 Queues, and the Guaranteed messages from those Queues have an average size of 20kB. In this scenario, the Flow configuration for the client is not appropriately sized, as the client’s maximum buffer usage (approximately 24,902 work units) exceeds that offered by the event broker (20,000 work units). However, if the Flows are reconfigured with a window size of 25, then the client’s maximum buffer usage will fall within an acceptable range (approximately 2,441 work units).</p>
                                                            <p class="Note" xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Work units are fixed size buffers on the event broker that are used to process messages according to set queue depths. A work unit represents 2,048 bytes of a message.</p>
                                                            <div class="Note" xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                                                <p>If you are using JCSMP, you also need to tune the size of the Java consumer notification dispatcher queue so that it is large enough to buffer the maximum number of notifications that can be generated by all consumer flows (Guaranteed message flows as well as direct consumers) contained in all Sessions in a Context.
			<p style="text-align: left;"><img style="margin-left: 5.99976px;margin-top: 5.99976px;margin-right: 5.999783px;margin-bottom: 5.999763px;" src="Images/queue_size_equation.png" alt="Illustration depicting the concepts described in the surrounding text." /></p><p><u>Where</u>:</p><p><code>GDFlows</code> is all of the Guaranteed message consumer Flows in a Context.</p><p><code>FCL</code> is the default consumer Flow congestion limit.</p><p><code>Nconsumers</code> is the number of Direct message consumers in a Context.</p></p>
                                                            </div>
                                                            <h3 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><a name="Minimum"></a>Minimum Message Burst Size</h3>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">If you can't reduce the number of Flows, or the Guaranteed Message window size, you can adjust the size of the G-1 queue. The simplest way to increase the queue is to adjust the min-msg-burst size. The min-msg-burst size specifies the number of messages that are always allowed entry into the queue. The min&#8209;msg&#8209;burst size is set on a per-client basis through client profiles.</p>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Under normal operating conditions it's not necessary to change the default <code>min&#8209;msg-burst</code> value for the G-1 queue. However, in situations where a client is consuming messages from multiple endpoints, it's important that the <code>min&#8209;msg&#8209;burst</code> size for the G-1 queue is at least equal to the sum of all of the Guaranteed message window sizes used for the Flows that the client consumes messages from. For example, if the client connects to 1,000 endpoints, and the Flows have a window size of 50, then the <code>min-msg-burst</code> size should be set to 50,000 or more. </p>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Tuning the <code>min-msg-burst</code> size in this manner ensures that the NAB holds enough messages to fill the client’s combined Guaranteed message window size when it comes online. If there aren't enough messages held, messages that aren't delivered to the client can be discarded, then another delivery attempt is required. This process of discarding, then resending messages results in a slow recovery for a slow subscriber (that is, a client that doesn't consume messages at a quick rate).</p>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">For information on how to set the <code>min-msg-burst</code> size, refer to <a href="../../Messaging/Managing-Event-Delivery-Resources.htm#managing_msg_delivery_resources_2491525118_203210" class="MCXref xref" data-mc-unresolved-link="import-link:managing_msg_delivery_resources_4245516314_17011">Configuring Egress Per-Client Priority Queues</a>.</p>
                                                            <h2 class="with-rule" xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><a name="Basic"></a>Basic Rules</h2>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">When programming using JCSMP, it's useful to remember the following basic rules: </p>
                                                            <ul xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                                                <li>durable and non-temporary objects (such as durable endpoints) are created at the Factory level</li>
                                                                <li>non&#8209;durable and temporary objects are created at the Session level</li>
                                                                <li>flows are created at the Session level</li>
                                                            </ul>
                                                            <h2 class="with-rule" xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><a name="Threadin"></a>Threading</h2>
                                                            <h3 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><a name="API"></a>API Threading</h3>
                                                            <h4 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Recommendation</h4>
                                                            <ul xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                                                <li>Consider dispatching messages directly from the I/O thread if optimizing latency is most important. This model is the default behavior for C, .NET, and Java RTO APIs.</li>
                                                            </ul>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">The APIs use a Context to organize communication between a client application and a Solace PubSub+ event broker.  A Context is a container for one or more Sessions.  The Context is responsible for handling Session related events and encapsulates threads that drive network I/O and message delivery notification for the Sessions.</p>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Solace’s JCSMP is implemented to be inherently blocking, that is, calls available to the application could block.  To address this, the API runs a separate dispatcher thread so that the application can make blocking calls within callbacks while still allowing the network I/O thread to continue reading the messages off the network.  As the messages continue to be accepted into the API, a storing mechanism called the Notification Queue is used to keep track of the messages before they are dispatched to the client application by the dispatcher thread.</p>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Unlike JCSMP, the C, .Net and Java RTO APIs are implemented to be inherently non-blocking. And, as such, client applications are not allowed to make blocking calls within callbacks using these APIs. Hence these implementations do not require separate dispatch and I/O threads. A Context thus has a single processing thread which is used to read messages off the socket as well as perform notification and message dispatching.</p>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Dispatching directly from the I/O thread has the benefit of optimizing latency as messages are not being queued up in the Notification Queue which can potentially inject latency.  Therefore C, .NET, and Java RTO APIs should be considered for latency sensitive applications.  JCSMP can also be configured to dispatch directly from its I/O thread (called the “reactor” thread).  To do so, enable the MESSAGE_CALLBACK_ON_REACTOR in the session property.  In this case, however, the application must then ensure that it does not block in the callbacks.  Otherwise, a deadlock may occur if the API is waiting for a response from the event broker but the thread is blocked for reading that response.</p>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Although dispatching directly from the I/O thread reduces message latency, it also decreases the potential maximum message throughput as the messages are processed individually instead of in batches.  This aspect should also be weighed in when deciding on the API threading model to implement. As the typical message size of an application plays a major determining factor in this regard, a performance evaluation prior to model selection is recommended when necessary.</p>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">For further details on threading interactions, please refer to <a href="API-Threading.htm" class="MCXref xref">API Threading
</a>.</p>
                                                            <h3 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><a name="Context"></a>Context and Session Threading Model Considerations</h3>
                                                            <h4 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Recommendation</h4>
                                                            <ul xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                                                <li>Use the 'One Session, One Context' threading model whenever possible. The 'Multiple Session, One Context' and 'Multiple Sessions, Multiple Contexts' models can potentially increase message processing throughput, but at the expense of additional processing.</li>
                                                            </ul>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">There are three different Threading Models to consider when designing an application:</p>
                                                            <ol xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                                                <li value="1">One Session One Context. A single Session is used with a single Context.</li>
                                                                <li value="2">Multiple Sessions One Context. Multiple Sessions are serviced using one Context.</li>
                                                                <li value="3">Multiple Sessions Multiple Contexts. Application provides or uses a number of threads, each containing a single Context and each Context contains one or more Sessions.</li>
                                                            </ol>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">For majority of cases, the 'One Session, One Context' model is sufficient for publisher and consumer application design.</p>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">An application designer may want to move to 'Multiple Sessions, One Context' if there is a need to prioritize messages where higher value messages maybe sent/received across different Sessions,for example, through different TCP connections. This approach can potentially increase throughput as well.  This means that it may be necessary to forward received messages to downstream application internal queues such that messages are processed by additional application message processing threads.  All received messages can be processed by the same message and event callback functions, or Session specific ones by creating additional callbacks.</p>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">With 'Multiple Sessions, Multiple Contexts', a designer can reduce the Context Thread processing burden of the 'Multiple Sessions, One Context' model where all Sessions must wait in the select loop before being processed. In this model, each Session can be separated into its own Context thread, and enhance the processing performance that multi-threading in the OS&#160;provides. Due to the increased number of threads however, this approach requires expensive thread context switching, and therefore places more burden on the CPU and is more resource intensive.</p>
                                                            <h2 class="with-rule" xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><a name="Always"></a>Always Cleanup</h2>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><code>JCSMPSession</code>, <code>XMLMessageProducer</code>, and <code>XMLMessageConsumer</code> are all related to system resource allocation. Close them properly whenever they are no longer used anymore or if an error occurs.</p>
                                                            <p class="Note" xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Closing <code>JCSMPSession</code> closes any <code>Producer</code> and <code>Consumer</code> associated with it.</p>
                                                            <h2 class="with-rule" xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><a name="Increase"></a>Increase Buffer Sizes When Publishing Large Messages</h2>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">On some Java Virtual Machines (JVMs), some users have reported it necessary to increase the socket send and receive buffer sizes when publishing large messages. The default socket buffer size used by Java is 64 KB.</p>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">To modify the send socket buffer size, call <code>JCSMPChannelProperties#setSendBuffer(int so_sendbuf)</code>. To modify the receive socket buffer size, call <code>JCSMPChannelProperties#setReceiveBuffer(int so_rcvbuf)</code>.</p>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">If your application is running on a Linux system, you must also change its TCP buffer size settings. Add variables rmem_max, wmem_max, tcp_rmem, and tcp_wmem as shown in the following snippet to <code>/etc/sysctl.conf</code> file.</p><pre class="Code" xml:space="preserve" xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"># increase TCP maximum buffer size
net.core.<span class="sample_snippet">rmem_max</span> = 16777216
net.core.<span class="sample_snippet">wmem_max</span> = 16777216
&#160;
# increase Linux autotuning TCP buffer limits
# min, default, and maximum number of bytes to use
net.ipv4.<span class="sample_snippet">tcp_rmem</span> = 4096 87380 16777216 
net.ipv4.<span class="sample_snippet">tcp_wmem</span> = 4096 65536 16777216</pre>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Scale the buffer sizes appropriately to handle the maximum message size and the network links to be encountered, then run <code>sysctl -p</code>. The values are set when the system is booted.</p>
                                                            <h2 class="with-rule" xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><a name="TCP"></a>TCP Send and Receive Buffer Size</h2>
                                                            <h4 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Recommendation</h4>
                                                            <ul xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                                                <li>Adjust the TCP send and receive buffer sizes to optimize TCP performance, particularly when publishing large messages or for WAN performance optimization.</li>
                                                            </ul>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">For TCP, the bandwidth-delay product refers to the product of a data link’s capacity and its round-trip delay time.  The result expresses the maximum amount of data that can be on the network at any given time.  A large bandwidth-delay product is expected for a WAN environment due to the intrinsic long round-trip delay, and as such TCP can only achieve optimum throughput if a sender sends a sufficiently large quantity of data to fill the maximum amount of data that the network can accept. This means that the TCP send and receive buffer size needs to be adjusted.</p>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Specific to Windows platform, the receive socket buffer size must be much larger than the send socket buffer size to prevent data loss when sending and receiving messages.  The recommended ratio is 3 parts send buffer to 5 parts receive buffer.</p>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">TCP’s socket send and receive buffer sizes can be configured through the API’s session properties setting. The session property parameters and default values are shown below. If the value of zero is used for setting these properties, the operating system’s default size is used.</p>
                                                            <ul xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                                                <li><code>JCSMPChannelProperties.setSendBuffer(int)</code>; 64,000 bytes</li>
                                                                <li><code>JCSMPChannelProperties.setReceiveBuffer(int)</code>; 64,000 bytes</li>
                                                            </ul>
                                                            <h2 class="with-rule" xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><a name="Do"></a>Do Not Cache XMLMessages</h2>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">If using messages from the producer message pool, always call <code>XMLMessageProducer.create&lt;TYPE&gt;XMLMessage()</code> to acquire a new <code>XMLMessage</code> instance for publishing. The application should not cache or reuse messages because the JCSMP&#160;may automatically recycle the messages.</p>
                                                            <h2 class="with-rule" xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><a name="Ultra-Lo"></a>Ultra-Low Latency</h2>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">For ultra-low latency applications, you can enable the M<code>ESSAGE_CALLBACK_ON_REACTOR</code> Session property to reduce message latency. When this Session property is enabled, messages delivered asynchronously to an XMLMessageListener are delivered directly from the I/O thread instead of from the consumer notification thread.</p>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Although enabling this Session property reduces message latency, it also decreases the maximum message throughput.</p>
                                                            <h2 class="with-rule" xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><a name="Session2"></a>Session Establishment</h2>
                                                            <h3 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><a name="Host2"></a>Host Lists</h3>
                                                            <h4 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Recommendation</h4>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">As a best practice, use host lists (see note below). Host lists are applicable when you use replication for failover support and the <span class="mc-variable Product-Names.broker_sw_short variable">software event broker</span>'s hostlist High Availability (HA) support. </p>
                                                            <p class="Note" xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Host Lists should not be used in Active/Active Replication deployments.</p>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">For replication failover support, client applications must be configured with a host list of two addresses, one for each of the Guaranteed Messaging enabled virtual router at each site. If a connection fails for one host, it would the client would then try to connect to the to-be-active replication host before retrying the same host. For that reason, it's recommended to set the reconnect retires per host to 1.</p>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Host lists must not be used in an active/active replication deployment where client applications are consuming messages from endpoints on the replication active message VPN on both sites.</p>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Similarly, for software event broker HA failover support, if the switchover-mechanism is set to hostlist instead of IP&#160;address-takeover, the client application must provide a host list of two addresses.</p>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">For more details on hostlist configuration, see <a href="../../Features/HA-Redundancy/Configuring-HA-Groups.htm" class="MCXref xref">HA Group Configuration</a>.</p>
                                                            <h3 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><a name="Client3"></a>Client API Keep-alive</h3>
                                                            <h4 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Recommendation</h4>
                                                            <ul xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                                                <li>The Client Keep-alive interval should be set to the same order of magnitude as the TCP Keep-alive setting on the client profile.</li>
                                                            </ul>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">There are two types of keep-alive mechanisms between the client application and the event broker.</p>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">There is the TCP Keep-alive that operates at the TCP level that is sent by the event broker to the client application. This is the TCP Keep-alive mechanism described in RFC 1122. The client application’s TCP stack responds to the event broker’s TCP Keep-alive probe.  By default, the event broker sends out a keep-alive message after it detects idle connection for 3 seconds.  It then sends 5 probes at the interval of 1 keep-alive probe per second.  Hence, the event broker will flag a client to have failed TCP keep-alive if it receives no response after 8 seconds.</p>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">There is also the Client API Keep-alive that occurs concurrently to the TCP Keep-alive.  This is the API’s built-in keep-alive mechanism, and operates on top of TCP at the API level. This is sent from the API to the event broker. By default, a Client Keep-alive is sent at the interval of once every 3 seconds, and up to 3 keep-alive responses can be missed before the API declares that the event broker is unreachable; that is, after  9 seconds.</p>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">These keep-alive mechanisms exist so that they will be able to advise the application or the event broker that its peer has died before it's able to notify the corresponding party.  The keep-alive mechanism is also used to prevent disconnection due to network inactivity.  However, if either mechanism is set much more aggressively, that is, with a shorter detecting time, than the other, the connection can be prematurely disconnected. For example, if the Client API Keep-alive is set at a 500 ms interval with 3 keep-alive responses while the TCP Keep-alive remains unchanged at the default, then the client API Keep-alive will trigger aggressive disconnection.</p>
                                                            <h3 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><a name="High2"></a>High Availability Failover and Reconnect Retries</h3>
                                                            <h4 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Recommendation</h4>
                                                            <ul xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                                                <li>The reconnect duration should be set to last for at least 300 seconds when designing applications for High Availability (HA) support.</li>
                                                            </ul>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">When using a High Availability (HA) appliance  setup, a failover from one appliance to its mate will typically occur within 30 seconds. However, applications should attempt to reconnect for at least 5 minutes. Below is an example of setting the reconnect duration to 5 minutes using the following session property values:</p>
                                                            <ul xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                                                <li>connect retries: 1</li>
                                                                <li>reconnect retries: 20</li>
                                                                <li>reconnect retry wait: 3,000 ms</li>
                                                                <li>connect retries per host: 5</li>
                                                            </ul>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Refer to <a href="Configuring-Connection-T.htm" class="MCXref xref">Configuring Connection Time-Outs and Retries</a> for instructions on setting connect retries, reconnect retries, reconnect retry wait and connect retires per host parameters.</p>
                                                            <h3 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><a name="Replicat3"></a>Replication Failover and Reconnect Retries</h3>
                                                            <h4 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Recommendation</h4>
                                                            <ul xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                                                <li>The number of reconnect retries should be set to -1 so that the API will retry indefinitely during a replication failover.</li>
                                                            </ul>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">In general, the duration of a replication failover is non-deterministic as it may require operational intervention for the switch, which can take up to tens of minutes, or hours.  Hence, it's recommended to set the number of reconnect retires to -1 so that the API will try to  indefinitely reconnect for a replication aware client application.</p>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Refer to <a href="Configuring-Connection-T.htm#Reconnec" class="MCXref xref">Reconnect Retries</a> for instructions on how to set the reconnect retries parameter.</p>
                                                            <h3 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><a name="Replicat4"></a>Replication Failover and Session Re-Establishment</h3>
                                                            <h4 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Recommendation</h4>
                                                            <ul xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                                                <li>API versions higher than 7.1.2 are replication aware, and automatically handle session re-establishment when a replication failover occurs. Client applications running lower API versions must re-establish a session upon reconnect.</li>
                                                            </ul>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Prior to 7.1.2, sessions need to be re-established after a replication failover when a client is publishing Guaranteed messages in a session that has been disconnected, because, while the reconnect is successful, the flow needs to be re-established since the newly connected event broker in the Replication site doesn't t have any flow state information, unlike the case for HA failover where this information is synchronized. The recommendation is to catch the <code>unkonw_flow_name</code> event and re-establish a new session to get the flow created.  From version 7.1.2 onwards, the API is replication aware and transparently handles session re-establishment .</p>
                                                            <h3 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><a name="File2"></a>File Descriptor Limitation</h3>
                                                            <h4 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Recommendation</h4>
                                                            <ul xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                                                <li>The number of Solace sessions created by an application shouldn't exceed the number of file descriptors supported per process by the underlying operating system. For Unix variants, this number is 1024, and for Windows it's 63.</li>
                                                            </ul>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">File descriptor limits in Unix platforms restrict the number of files that can be managed per process, and this is 1024 by default. Hence, an application shouldn't create more than 1023 Sessions per Context.  A session represents a TCP/IP connection, and such a connection occupies one file descriptor. A file descriptor is an element - usually a number - that allows you to identify, in this case, a stream of data from the socket. Open a file to read information from disk also occupies one file descriptor.</p>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">File descriptors are called ‘file’ because initially they only identified files, although more recently, they can be used to identify files on disk, sockets, pipes, and so on.</p>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Similarly, on Windows platforms, a single Context can only manage at most 63 Sessions.</p>
                                                            <h2 class="with-rule" xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><a name="Subscrip"></a>Subscription Management</h2>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">The following best practices can be used for managing subscriptions:</p>
                                                            <ul xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                                                <li>If you are adding or removing a large number of subscriptions, set the Wait for Confirm flag (<code>JCSMPSession.WAIT_FOR_CONFIRM</code>) <i>only</i> on the final subscription. This ensures that all subscriptions have been processed by the event broker, and improves event broker performance.</li>
                                                                <li>In the event of a Session disconnect, you can have the API reapply subscriptions that were initially added by the application when the Session is reconnected. To reapply subscriptions on reconnect, enable the Reapply Subscriptions Session property (<code>JCSMPProperties.REAPPLY_SUBSCRIPTIONS</code>). Using this setting is recommended.</li>
                                                            </ul>
                                                            <div class="Note" xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">The following two scenarios show how <code>WAIT_FOR_CONFIRM</code> can affect subscriptions in the event of a subscription failure:<ul><li><p>If a subscription failure occurs,  <code>REAPPLY_SUBSCRIPTIONS</code> is set to true, and you subscribe to a topic <b>with</b> the <code>WAIT_FOR_CONFIRM</code> flag, the subscription <b>is not</b> reapplied on reconnection.</p></li><li><p>If a subscription failure occurs,  <code>REAPPLY_SUBSCRIPTIONS</code> is set to true, and you subscribe to a topic <b>without</b> the <code>WAIT_FOR_CONFIRM</code> flag, the subscription <b>is</b> reapplied on reconnection.</p></li></ul></div>
                                                            <h2 class="with-rule" xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><a name="Sending"></a>Sending Messages</h2>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">When sending messages, you should consider the following best practices for the message ownership model that you are using—a session-independent message model or a session-dependent message model.</p>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">For information on session-independent and session-dependent message ownership models, refer to <a href="Creating-Messages.htm#publishing_direct_messages_2102779381_618548" class="MCXref xref">Message Ownership</a> for Direct messages and <a href="Creating-Messages-1.htm#Ownership" class="MCXref xref">Message Ownership</a> for Guaranteed messages.</p>
                                                            <h3 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><a name="best_practices_3532640973_262238"></a>Sending Session-Independent Messages</h3>
                                                            <h4 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Summary</h4>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Always use the session-independent message model when sending messages. The session-dependent message model is supported for backwards compatibility.</p>
                                                            <h4 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Practice Details</h4>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">There is no performance penalty for using the session-independent message ownership model if the messages are preallocated and reused whenever possible.  Messages are allocated on-demand in the session-independent model.</p>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">With the session-dependent model, the application must call <code>send</code> immediately after the creation of the message to avoid possible memory resource exhaustion. Furthermore, messages from the session dependent message pool may be automatically recycled after the initial use, hence preventing the created message from being reused.</p>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Refer to the <a href="../../API-Developer-Online-Ref-Documentation/java/index.html" class="MCXref xref">Register Now for EDA Summit 2024 - Virtual Event Register for Free</a> for information on how to send session-independent messages.</p>
                                                            <h3 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><a name="best_practices_3532640973_280869"></a>Sending Session-Dependent Messages</h3>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">When using the session-dependent message model, in which messages are taken from the <code>Producer</code> message pool, you must publish using <code>send()</code> after the creation of <code>XMLMessage</code> to avoid exhaustion of resources. For example, the following code sample incorrectly allows execution to continue without the message being sent after acquiring it:</p><pre class="Code" xml:space="preserve" xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">while (keepPublishing)
			{
			TextMessage message = producer.createTextMessage();
			if (messageToPublish)
			{
			message.setText(“&lt;xml&gt;hello!&lt;/xml&gt;”);
			producer.send(message);
			}
		}</pre>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">To ensure that resources are not exhausted, call the <code>send()</code> method immediately after creating <code>XMLMessage</code>. For example:</p><pre class="Code" xml:space="preserve" xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">while (keepPublishing)
			{
			TextMessage message = producer.createTextMessage();
			message.setText(“&lt;xml&gt;hello!&lt;/xml&gt;”);
			producer.send(message);
		}</pre>
                                                            <p class="Note" xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">The session-dependent message ownership model is primarily maintained for backwards compatibility with existing applications that use JCSMP. It is recommended that new Java applications use Session&#8209;independent messages. There is no performance penalty for using the Session&#8209;independent message ownership model if messages are pre-allocated and reused, whenever possible.</p>
                                                            <h3 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><a name="Batch"></a>Batch Send</h3>
                                                            <h4 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Recommendation</h4>
                                                            <ul xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                                                <li>Use the batch sending facility to optimize send performance.  This is particularly useful for performance benchmarking a client application.</li>
                                                            </ul>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Use the batch-sending facility to optimize send performance.  This is particularly useful for performance benchmarking client applications.</p>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">A group of up to 50 messages can be sent through a single API call.  This allows messages to be sent in a batch.  The messages can be either Direct or Guaranteed. When batch-sending messages through the send-multiple API, the same Delivery mode, that is Direct or Persistent mode, should be set for all  messages in the batch. Messages in a batch can be set to different destinations.</p>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">In addition to using the batch-sending API, messages should be pre-allocated and reused for batch-sending whenever possible. Specifically, don't reallocate new messages for each call to the batch-sending API.</p>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">The batch-sending API call is <code>XMLMessageProducer.sendMultiple()</code>.</p>
                                                            <h3 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><a name="High-Per"></a>High-Performance Batch Sending</h3>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">When batch sending messages, only use session-independent messages; do not use session-dependent messages. For information on session-independent and session-dependent message ownership models, refer to <a href="Creating-Messages.htm#publishing_direct_messages_2102779381_618548" class="MCXref xref">Message Ownership</a> for Direct messages and <a href="Creating-Messages-1.htm#Ownership" class="MCXref xref">Message Ownership</a> for Guaranteed messages.</p>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">To optimize performance, it is also recommended that you preallocate messages and reuse them for batch sends whenever possible. (That is, avoid reallocating new messages for each call to <code>JCSMPSendMultipleEntry()</code>.)</p>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">For more information on batch sending for Direct messages, refer to <a href="Sending-Messages.htm#publishing_direct_messages_2102779381_475505" class="MCXref xref">Sending Direct Messages</a>. For more information on batch sending for Guaranteed messages, refer to <a href="Sending-Messages.htm#publishing_direct_messages_2102779381_475505" class="MCXref xref">Sending Direct Messages</a>.</p>
                                                            <h3 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><a name="Time-to-"></a>Time-to-Live Messages</h3>
                                                            <h4 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Recommendation</h4>
                                                            <ul xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                                                <li>Set the TTL attribute on published guaranteed messages to reduce the risk of unconsumed messages unintentionally piling up in the queue  if the use-case allows for discarding old or stale messages.</li>
                                                            </ul>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Publishing applications should consider utilizing the TTL feature available for Guaranteed Messaging. Publishers can set the TTL attribute on each message prior to sending to the event broker.  Once the message has been spooled, the message will be automatically discarded (or moved to the queue’s configured Dead Message Queue, if available) should the message not be consumed within the specified TTL.  This common practice reduces the risk of unconsumed messages unintentionally piling up.</p>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Alternatively, queues have a <code>max-ttl</code> setting, and this can be used instead of publishers setting the TTL on each message sent. See <a href="../../Messaging/Guaranteed-Msg/Configuring-Queues.htm#Configur21" class="MCXref xref">Configuring Max Message TTLs</a> for instructions on setting <code>max-ttl</code> for a queue.</p>
                                                            <h4 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Configuring respect-ttl</h4>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Queues should be configured to <code>respect-ttl</code> as, by default, this feature is disabled on all queues. Refer to <a href="../../Messaging/Guaranteed-Msg/Configuring-Queues.htm#Enforcin" class="MCXref xref">Enforcing Whether to Respect TTLs</a> for instructions on how to set up <code>respect-ttl</code>.</p>
                                                            <h2 class="with-rule" xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><a name="Receivin2"></a>Receiving Messages</h2>
                                                            <h3 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><a name="Handling"></a>Handling Duplicate Message Publication</h3>
                                                            <h4 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Recommendation</h4>
                                                            <ul xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                                                <li>Publishing duplicate messages can be avoided if the client application uses the Last Value Queue (LVQ) to determine the last message successfully spooled by the event broker upon restarting.</li>
                                                            </ul>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">When a client application is  unexpectedly restarted, it's possible for it to become out-of-sync with respect to the message publishing sequence.  There should be a mechanism by which it can determine the last message that was successfully published to, and received by, the event broker in order to correctly resume publishing without injecting duplicate messages.</p>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">One approach is for the publishing application to maintain a database that correlates between the published message identifier and the acknowledgment it receives from the event broker.  This approach is completely self-contained on the client application side, but can introduce processing latencies if not well managed.</p>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Another approach is to make use of the Last Value Queue (LVQ) feature, where the LVQ stores the last message spooled on the queue. A publishing client application can then browse the LVQ to determine the last message spooled by the event broker.  This allows the publisher to resume publishing without introducing duplicate messages.</p>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Refer to <a href="../../Messaging/Guaranteed-Msg/Configuring-Queues.htm#Configur16" class="MCXref xref">Configuring Max Spool Usage Values</a> for instructions on setting up LVQ.</p>
                                                            <h3 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><a name="Handling2"></a>Handling Redelivered Messages</h3>
                                                            <h4 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Recommendation</h4>
                                                            <ul xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                                                <li>When consuming from endpoints, a client application should appropriately handle redelivered messages.</li>
                                                            </ul>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">When a client application restarts, unexpectedly or not, and rebinds to a queue, it may receive messages that it had already processed as well as acknowledged.  This can happen because the acknowledgment can be lost on route to the event broker due to network issues.  The redelivered messages will be marked with the <code>redelivered</code> flag.</p>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">A client application that binds to a non-exclusive queue may also receive messages with the <code>redelivered</code> flag set, even though the messages are received by the client application for the first time.  This is due to other clients connecting to the same non-exclusive queue which disconnects without the application acknowledging the received messages.  These messages are then redelivered to other client applications that bind to the same non-exclusive queue.</p>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">The consuming application should contain a message processing mechanism to handle the above mentioned scenarios.</p>
                                                            <h3 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><a name="Dealing"></a>Dealing with Unexpected Message Formats</h3>
                                                            <h4 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Recommendation</h4>
                                                            <ul xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                                                <li>Client applications should be able to handle unexpected message formats.  In the case of consuming from endpoints, a client application should acknowledge received messages even if those messages are unexpectedly formatted.</li>
                                                            </ul>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Client applications should be able to contend with unexpected message formats.  There shouldn't be any assumptions made about a message's payload; for example, a payload may contain an empty attachment.  Applications should be coded such that they will avoid crashing, as well as logging the message contents and sending an acknowledgment back to the event broker if using Guaranteed Messaging. If client applications crash without sending acknowledgments, then when they reconnect, the same messages will be redelivered causing the applications to fail again.</p>
                                                            <h3 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><a name="Client"></a>Client Acknowledgment</h3>
                                                            <h4 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Recommendation</h4>
                                                            <ul xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                                                <li>Client Applications should acknowledge received messages as soon as they have completed processing those messages when client acknowledgment mode is used.</li>
                                                            </ul>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Once an application has completed processing a message, it should acknowledge the receipt of the message to the event broker.  Only when the event broker receives an acknowledgment for a Guaranteed Message will the message be permanently removed from its message spool. If the client disconnects without sending acknowledgments for some received messages, then those messages will be redelivered.  For the case of an exclusive queue, those messages will be delivered to the next connecting client.  For the case of a non-exclusive queue, those messages will be redelivered to the other clients that are bound to the  queue.</p>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">There are two kinds of acknowledgments:</p>
                                                            <ul xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                                                <li><u>API (also known as Transport) Acknowledgment</u>.  This is an internal acknowledgment between the API and the event broker and isn't exposed to the application.  The Assured Delivery (AD) window size, acknowledgment timer, and the acknowledgment threshold settings control API Acknowledgment.  A message that isn't transport acknowledged will be automatically redelivered by the event broker.</li>
                                                                <li><u>Application Acknowledgment</u>.  This acknowledgment mechanism is on top of the API Acknowledgment. Its primary purpose is to confirm that message processing has been completed, and  that the corresponding messages can be permanently removed from the event broker. There are two application acknowledgment modes: auto-acknowledgment and client acknowledgment. When auto-acknowledgment mode is used, the API automatically generates application-level acknowledgments on behalf of the application.  When client acknowledgment mode is used, the client application must explicitly send the acknowledgment for the message ID of each message received.</li>
                                                            </ul>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Refer to the <a href="Receiving-Guaranteed-Messages.htm" class="MCXref xref">Receiving Guaranteed Messages</a> for a more detailed discussion on the different acknowledgment modes.</p>
                                                            <h3 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><a name="Consume"></a>Consume Messages and Return From Callbacks As Soon As Possible</h3>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">To ensure the highest possible message throughput, received messages should be consumed as soon as possible after receipt.</p>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">When using <code>XMLMessageConsumer</code> in synchronous operating mode, the application should call <code>receive()</code> as often as possible to retrieve messages received by an <code>XMLMessageConsumer</code>. If too many messages accumulate in the Queue for <code>XMLMessageConsumer</code>, <code>XMLMessageConsumer</code> is deemed congested and message delivery is suspended.</p>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">When using <code>XMLMessageConsumer</code> in asynchronous operating mode, the application should ensure that the callback methods defined in <code>XMLMessageListener</code> return promptly, so that the calling thread is not blocked from processing subsequent messages.</p>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">The application should similarly return from API event callbacks as quickly as possible.</p>
                                                            <h3 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><a name="Memory"></a>Memory Management When Receiving Messages</h3>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">The API dynamically allocates memory for each message received. If an application uses AUTO ACK mode, the API keeps a reference to the message until the message callback returns. The API then uses the reference to acknowledge the message, after which the message memory is eligible to be freed by the garbage collector. If the application is receiving Direct messages or is using CLIENT ACK mode, the API does not keep a reference to the message after calling the message callback. Provided the application does not create a new reference, the message memory is then eligible for garbage collection when the callback returns, and the reference it contains go out of scope.</p>
                                                            <h2 class="with-rule" xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><a name="Queues"></a>Queues and Flows</h2>
                                                            <h3 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><a name="Receivin"></a>Receiving One Message at a Time</h3>
                                                            <h4 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Recommendation</h4>
                                                            <ul xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                                                <li>Setting <code>max-delivered-unacked-msgs-per-flow</code> to 1 and AD Window Size to 1 to ensure messages are delivered from the event broker to the client application one message at a time and in a time-consistent manner.</li>
                                                            </ul>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">An API only sends transport acknowledgments when either,</p>
                                                            <ol xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                                                <li value="1">it has received the configured acknowledgment threshold worth of configured Assured Delivery (AD) window messages (i.e. 60%)</li>
                                                                <li value="2">a message has been received and the configured AD acknowledgment time as passed since the last acknowledgment was sent (i.e. 1 seconds), whichever comes first.</li>
                                                            </ol>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">The application acknowledgment piggybacks on the transport acknowledgment for the delivery from the client application to the event broker. And the event broker only releases further messages once it receives the acknowledgment.</p>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Therefore, while setting <code>max-delivered-unacked-msgs-per-flow</code> to 1 will ensure that messages are delivered to the client application one at a time, if the AD window size is not 1, then condition 1 will not be immediately fulfilled. This will result in a reception delay variation since the API will only send the acknowledgment after condition 2 is fulfilled, and is therefore not consistent with the expected end-to-end message receipt delivery delay.</p>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Refer to <a href="../../Messaging/Guaranteed-Msg/Configuring-Queues.htm#managing_guaranteed_messaging_1810020758_455709" class="MCXref xref">Configuring Max Permitted Number of Delivered Unacked Messages</a> for instructions on how to configure <code>max-delivered-unacked-msgs-per-flow</code> on queues.</p>
                                                            <h3 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><a name="Setting"></a>Setting Temporary Endpoint Spool Size</h3>
                                                            <h4 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Recommendation</h4>
                                                            <ul xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                                                <li>Exercise caution if a client application frequently creates temporary endpoints to ensure that the sum of all temporary endpoint spool sizes does not exceed the total spool size provisioned for the Message VPN.</li>
                                                            </ul>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">By default, the message spool quota of a Message VPN and endpoint  is based on an over-subscription model.  For instance, it's possible to set the message spool quota  of multiple endpoints to the same quota as that of an entire Message VPN. Temporary endpoints created by a client application default to 4000 MB for the Solace application and 1500 MB for the software event broker. When temporary endpoints are used extensively by a client application, the message spool over-subscription model can quickly get out-of-control when temporary endpoints are being created on-demand. Therefore, it's recommended that a client application overwrite an endpoint’s default message spool size to a value that is inline with expected usage, especially if temporary endpoints are heavily used.</p>
                                                            <h3 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><a name="AD"></a>AD Window Size and max-delivered-unacked-msgs-per-flow</h3>
                                                            <h4 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Recommendation</h4>
                                                            <ul xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                                                <li>The AD window size configured on the API should not be greater than the <code>max-delivered-unacked-msgs-per-flow</code> value that is set for a queue on the event broker.</li>
                                                            </ul>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><code>max-delivered-unacked-msgs-per-flow</code> controls how many messages the event broker can deliver to the client application without receiving back an acknowledgment.  The Assured Delivery (AD) window size controls how many messages can be in transit between the event broker and the client application. So, if the AD window size is greater than <code>max-delivered-unacked-msgs-per-flow</code>, then the API may not be able to acknowledge the messages it receives in a timely manner. Effectively, the AD window size is bounded by the value set for <code>max-delivered-unacked-msgs-per-flow</code>.  For instance, if the AD window size is set to 10, and <code>max-delivered-unacked-msgs-per-flow</code> is set to 5, then the event broker will effectively be limited to send out 5 messages at a time regardless of the client application’s AD window size setting of 10.</p>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Refer to <a href="../../Messaging/Guaranteed-Msg/Configuring-Queues.htm#managing_guaranteed_messaging_1810020758_455709" class="MCXref xref">Configuring Max Permitted Number of Delivered Unacked Messages</a> for instructions on how to set up <code>max-delivered-unacked-msgs-per-flow</code> on queues.</p>
                                                            <h3 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><a name="Number"></a>Number of Flows and AD Window Size</h3>
                                                            <h4 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Recommendation</h4>
                                                            <ul xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                                                <li>Size the expected number of flows per session, and its associated AD window size, to within the available memory limit of the client application host, and within the default work units allocated per client egress queue on the event broker.</li>
                                                            </ul>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">The API buffers received Guaranteed messages and, in general, also owns the messages and is responsible for freeing them. The amount of buffers used by a client is primarily determined by multiplying the Assured Delivery (AD) window size by the number of flows used per session. For example, if a receiving client application is using flows with an AD window size of 255 to bind to 10 different queues on an event broker, then the maximum buffer usage, given an average message size of 1 M, will be 2560 MB. If there are 10 such clients running on the same host, then 25.6 G of memory will be required.</p>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Similarly, the event broker dedicates a per-client egress queue to buffer the to be transmitted messages to the client application.  By default, this is 20,000 work units, or an equivalent of 40 M worth of buffer as each work unit is 2048 bytes. For a per-client egress queue to support 2560 MB worth of buffering, the number of work units for this particular client will need to be increased to 130,560. Hence, depending on application usage, it's recommended that you dimension the AD window size in relation to the number of expected flows per session such that it will be within the default 20,000 work units worth of buffer per client connection.</p>
                                                            <h2 class="with-rule" xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><a name="Error"></a>Error Handling and Logging</h2>
                                                            <h3 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><a name="Logging"></a>Logging and Log Level</h3>
                                                            <h4 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Recommendation</h4>
                                                            <ul xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                                                <li>Client Application Debug level logging should not be enabled in production environments.</li>
                                                            </ul>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Client Application Event logging can have a significant impact on performance, and so, in a production environment, it's not recommended to enable debug level logging.</p>
                                                            <h3 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><a name="Handling3"></a>Handling Session Events / Errors</h3>
                                                            <h4 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Recommendation</h4>
                                                            <ul xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                                                <li>Client Applications should register an implementation of the Session Event handler interface / delegate / callback when creating a Session to receive Session events.</li>
                                                            </ul>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Client applications should register an implementation of the Session Event Handler interface / delegate / callback when creating a Session to receive Session events. A complete list of Session Event is listed in the table below.  Subsequently, Session events should be handled appropriately based on client application usage.</p>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">A number of these Session Events are feedback to the client application through exception handling. Refer to JCSMPException and its sub classes, JCSMPTransportException, JCSMPStateException, JCSMPOperationException, for detailed information. For instance, the JCSMPTransportException is raised after several (re)connection retries.</p>
                                                            <table class="TableStyle-Table_Num" style="width: 624px;caption-side: top;mc-table-style: url('../../Resources/TableStyles/Table_Num.css');" cellspacing="0" xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                                                <caption valign="top" style="padding-bottom: 3pt;">
                                                                    <p class="TblCaption">Session Events</p>
                                                                </caption>
                                                                <col style="width: 548px;" class="TableStyle-Table_Num-Column-Column1" />
                                                                <col style="width: 342px;" class="TableStyle-Table_Num-Column-Column1" />
                                                                <thead>
                                                                    <tr class="TableStyle-Table_Num-Head-Header1">
                                                                        <th class="TableStyle-Table_Num-HeadE-Column1-Header1">
                       Java (SessionEvent Enum)
                    </th>
                                                                        <th class="TableStyle-Table_Num-HeadD-Column1-Header1">Description</th>
                                                                    </tr>
                                                                </thead>
                                                                <tbody>
                                                                    <tr class="TableStyle-Table_Num-Body-Body1">
                                                                        <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
                                                                            <p>DOWN_ERROR</p>
                                                                        </td>
                                                                        <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
                                                                            <p>The Session was established and then went down.</p>
                                                                        </td>
                                                                    </tr>
                                                                    <tr class="TableStyle-Table_Num-Body-Body1">
                                                                        <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
                                                                            <p>RECONNECTED</p>
                                                                        </td>
                                                                        <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
                                                                            <p>The automatic reconnect of the Session was successful, and the Session
 was established again.</p>
                                                                        </td>
                                                                    </tr>
                                                                    <tr class="TableStyle-Table_Num-Body-Body1">
                                                                        <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
                                                                            <p>RECONNECTING</p>
                                                                        </td>
                                                                        <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
                                                                            <p>The Session has gone down, and an automatic reconnect attempt is in
 progress.</p>
                                                                        </td>
                                                                    </tr>
                                                                    <tr class="TableStyle-Table_Num-Body-Body1">
                                                                        <td class="TableStyle-Table_Num-BodyE-Column1-Body1">
                                                                            <p>SUBSCRIPTION_
  ERROR</p>
                                                                        </td>
                                                                        <td class="TableStyle-Table_Num-BodyD-Column1-Body1">
                                                                            <p>The application rejected a subscription (add or remove).</p>
                                                                        </td>
                                                                    </tr>
                                                                    <tr class="TableStyle-Table_Num-Body-Body1">
                                                                        <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
                                                                            <p>VIRTUAL_
  ROUTER_
  NAME_
  CHANGED</p>
                                                                        </td>
                                                                        <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
                                                                            <p>The appliance’s Virtual Router Name changed during a reconnect
 operation.</p>
                                                                        </td>
                                                                    </tr>
                                                                    <tr class="TableStyle-Table_Num-Body-Body1">
                                                                        <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
                                                                            <p>UNKNOWN_
  TRANSACTED_
  SESSION_
  NAME</p>
                                                                        </td>
                                                                        <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
                                                                            <p>An attempt to re-establish a transacted session failed.</p>
                                                                        </td>
                                                                    </tr>
                                                                    <tr class="TableStyle-Table_Num-Body-Body1">
                                                                        <td class="TableStyle-Table_Num-BodyB-Column1-Body1">
                                                                            <p>INCOMPLETE_
  LARGE_
  MESSAGE_
  RECEIVED</p>
                                                                        </td>
                                                                        <td class="TableStyle-Table_Num-BodyA-Column1-Body1">
                                                                            <p>Incomplete large message is received by the consumer due to not
 receiving all the segments in time.</p>
                                                                        </td>
                                                                    </tr>
                                                                </tbody>
                                                            </table>
                                                            <h3 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><a name="Handling4"></a>Handling Flow Events / Errors</h3>
                                                            <h4 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Recommendation</h4>
                                                            <ul xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                                                <li>Client applications should register an implementation of the Flow Event handler interface / delegate / callback when creating a Flow to receive Flow events.</li>
                                                            </ul>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Client applications should register an implementation of the Flow Event Handler interface / delegate / callback when creating a Flow to receive Flow events. Flow error / events should be handled appropriately based on client application usage.</p>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">An error event is indicated by throwing on access a JCSMPFlowTransportException, and, in the case of a flow in asynchronous mode, the error condition is delivered to the XMLMessageListener’s onException().</p>
                                                            <table style="width: 624px;caption-side: top;mc-table-style: url('../../Resources/TableStyles/Table_Num.css');" class="TableStyle-Table_Num" cellspacing="0" xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                                                <caption valign="top" style="padding-bottom: 3pt;">
                                                                    <p class="TblCaption">Flow Events</p>
                                                                </caption>
                                                                <col style="width: 548px;" class="TableStyle-Table_Num-Column-Column1" />
                                                                <col style="width: 342px;" class="TableStyle-Table_Num-Column-Column1" />
                                                                <thead>
                                                                    <tr class="TableStyle-Table_Num-Head-Header1">
                                                                        <th class="TableStyle-Table_Num-HeadE-Column1-Header1">
                       Java (FlowEvent Enum)
                    </th>
                                                                        <th class="TableStyle-Table_Num-HeadD-Column1-Header1">Description</th>
                                                                    </tr>
                                                                </thead>
                                                                <tbody>
                                                                    <tr class="TableStyle-Table_Num-Body-Body1">
                                                                        <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
                                                                            <p>FLOW_ACTIVE</p>
                                                                        </td>
                                                                        <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
                                                                            <p>The Flow has become active.</p>
                                                                        </td>
                                                                    </tr>
                                                                    <tr class="TableStyle-Table_Num-Body-Body1">
                                                                        <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
                                                                            <p>FLOW_INACTIVE</p>
                                                                        </td>
                                                                        <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
                                                                            <p>The Flow has become inactive.</p>
                                                                        </td>
                                                                    </tr>
                                                                    <tr class="TableStyle-Table_Num-Body-Body1" data-mc-conditions="">
                                                                        <td class="TableStyle-Table_Num-BodyH-Column1-Body1">
                                                                            <p>FLOW_RECONNECTING</p>
                                                                        </td>
                                                                        <td class="TableStyle-Table_Num-BodyG-Column1-Body1">
                                                                            <p>When Flow Reconnect is enabled, instead of an INACTIVE event, the API&#160;generates this event and attempts to rebind the Flow.</p>
                                                                            <p>If the Flow rebind fails, the API&#160;monitors the bind failure and terminates the reconnecting attempts with an INACTIVE&#160;unless the failure reason  is one of the following:</p>
                                                                            <ul>
                                                                                <li>Queue Shutdown</li>
                                                                                <li>Topic Endpoint Shutdown</li>
                                                                                <li>Service Unavailable</li>
                                                                            </ul>
                                                                            <p>For more information about Flow Reconnect, refer to <a href="Creating-Flows.htm#Flow" class="MCXref xref">Flow Reconnect</a>.</p>
                                                                        </td>
                                                                    </tr>
                                                                    <tr class="TableStyle-Table_Num-Body-Body1" data-mc-conditions="">
                                                                        <td class="TableStyle-Table_Num-BodyB-Column1-Body1">
                                                                            <p>FLOW_RECONNECTED</p>
                                                                        </td>
                                                                        <td class="TableStyle-Table_Num-BodyA-Column1-Body1">The Flow has been successfully reconnected.</td>
                                                                    </tr>
                                                                </tbody>
                                                            </table>
                                                            <h3 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><a name="Custom"></a>Custom Handling of Reconnect Events</h3>
                                                            <h4 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Recommendation</h4>
                                                            <ul xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                                                <li>A client application that uses the Session’s message consumer should also register a JCSMPReconnectEventHandler instance when acquiring the consumer to hook into the API’s reconnect logic.</li>
                                                            </ul>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">A client application that uses the Session’s message consumer - acquired through JCSMPSession.getMessageConsumer(JCSMPReconnectEventHandler.XMLMessageListener) - should also register a JCSMPReconnectEventHandler instance when acquiring that consumer. This handler receives callbacks before <code>preReconnect()</code> and after <code>postReconnect()</code> the client’s TCP connection is reconnected after a connection failure. Through <code>preReconnect()</code> and <code>postReconnect()</code>, the client application can execute a list of actions before and after JCSMP attempts to re-establish the connection, for instance, to notify other parties within the system of the connection failure.</p>
                                                            <h3 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><a name="Notifica"></a>Notification of Transport Events in Publish-Only Applications</h3>
                                                            <h4 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Recommendation</h4>
                                                            <ul xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                                                <li>For publish-only applications, it's necessary to create an empty XMLMessageConsumer in order to receive events from JCSMPReconnectEventHandler such that transport layer events can be captured.</li>
                                                            </ul>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">The JCSMPReconnectEventHandler is only exposed through XMLMessageConsumer.  For publish-only applications that acquire XMLMessageProducer, it's necessary to create an empty XMLMessageConsumer in order to receives events from JCSMPReconnectEventHandler.  The consumer can be acquired through session.getMessageConsumer().  It need not be started by calling the consumer.start() method.  This way, transport layer events can be captured for publishing only applications.</p>
                                                            <h2 class="with-rule" xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><a name="Message"></a>Event Broker Configuration that Influences Client Application Behavior</h2>
                                                            <h3 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><a name="Max"></a>Max Redelivery</h3>
                                                            <h4 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Recommendation</h4>
                                                            <ul xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                                                <li>By default, messages are to be redelivered indefinitely from endpoints to clients.  Set the maximum redelivery option on endpoints at the event broker, when appropriate, to limit the maximum number of message redeliveries per message.</li>
                                                            </ul>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">The maximum redelivery option can be set on an endpoint to control the number of deliveries per message on that endpoint.  After the maximum number of redeliveries by the endpoint is exceeded, messages are either discarded or moved to the Dead Message Queue (DMQ), if it's configured and the messages are set to DMQ eligible.</p>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">There are benefits for client applications when the number of redeliveries on an endpoint is not infinite (by default the redelivery mode is set to redelivery forever). For instance, if a client application is unable to handle unexpected poison messages, the message will eventually be discarded or moved to DMQ where further examination can take place.</p>
                                                            <h3 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><a name="Reject"></a>Reject Message to Sender on Discard</h3>
                                                            <h4 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Recommendation</h4>
                                                            <ul xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                                                <li><code>reject-msg-to-sender-on-discard</code> on an endpoint should be enabled unless there are good reasons not to.</li>
                                                            </ul>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">When publishing guaranteed messages to an event broker, messages can be discarded for reasons such as message-spool full, maximum message size exceeded, endpoint shutdown, and so on.  If the message discard option on the endpoint, that is, <code>reject-msg-to-sender-on-discard</code>, is enabled, then the client application will be able to detect that discarding is happening and take corrective action such as pausing publication. There is no explicit support at the API to pause publication; this should be carried out by the client application logic.</p>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">One reason to consider disabling <code>reject-msg-to-send-on-discard</code> is the situation where there are multiple queues subscribing to the same topic that the Guaranteed messages are published to, and the intent is for other queues to continue receiving messages even if one of the queues is deemed unable to accept messages.</p>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="no-print">
                                            <div><a href="#" id="docsFeedbackTrigger" class="docs-issue-collector">Provide feedback</a>
                                            </div>
                                        </div>
                                        <footer class="my-4 pt-4 text-center no-print">
                                            <div class="footer-txt text-center no-print">
                                                <ul class="list-inline ">
                                                    <li class="list-inline-item text-muted"><a href="../../Resources/Documentation-Set.htm" class="doc-set-footer-link MCXref xref xrefdoc-set-footer-link">Documentation Coverage</a>: <span class="mc-variable Variables.DocumentSetNumber variable">2024.09.16.0001</span></li>
                                                    <li class="list-inline-item text-muted">Last Updated: <span class="mc-variable Variables.MonthDayYear variable">September 16, 2024</span></li>
                                                    <li class="list-inline-item text-muted" style="font-size:13px;"> ©  <span class="mc-variable Variables.CompanyNameLegal variable">Solace Corporation</span></li>
                                                </ul>
                                            </div>
                                            <div class="footer-icons">
                                                <ul class="list-inline">
                                                    <li class="list-inline-item"><a href="https://facebook.com/solacedotcom" target="_blank" class="social-media-icon"><img src="../../Resources/Images/Social-Media/facebook_22x21.png" class="Hyperlinked" alt="Facebook" title="Solace Facebook Page" style="width: 22;height: 21;" /></a>
                                                    </li>
                                                    <li class="list-inline-item"><a href="https://www.linkedin.com/company/20219" target="_blank" class="social-media-icon"><img src="../../Resources/Images/Social-Media/LinkedIn_22x21.png" class="Hyperlinked" alt="LinkedIn" title="Solace LinkedIn Page" style="width: 22;height: 21;" /></a>
                                                    </li>
                                                    <li class="list-inline-item"><a href="https://twitter.com/solacedotcom" target="_blank" class="social-media-icon"><img src="../../Resources/Images/Social-Media/Twitter_22x21.png" class="Hyperlinked" alt="Twitter" title="Solace Twitter Feed" style="width: 22;height: 21;" /></a>
                                                    </li>
                                                    <li class="list-inline-item"><a href="https://www.youtube.com/user/SolaceSystems" target="_blank" class="social-media-icon"><img src="../../Resources/Images/Social-Media/youtube_22x21.png" class="Hyperlinked" alt="YouTube" title="Solace YouTube Channel" style="width: 22;height: 21;" /></a>
                                                    </li>
                                                    <li class="list-inline-item"><a href="https://www.instagram.com/solacedotcom/" target="_blank" class="social-media-icon"><img src="../../Resources/Images/Social-Media/instagram_22x21.png" class="Hyperlinked" alt="Instagram" title="Solace Instagram Feed" style="width: 22;height: 21;" /></a>
                                                    </li>
                                                    <li class="list-inline-item"><a href="https://medium.com/solacedotcom" target="_blank" class="social-media-icon"><img src="../../Resources/Images/Social-Media/medium_22x21.png" class="Hyperlinked" alt="Medium" title="Solace Medium Blog" style="width: 22;height: 21;" /></a>
                                                    </li>
                                                </ul>
                                            </div>
                                            <div class="footer_link_menu">
                                                <ul class="link_list">
                                                    <li class="link_list_item"><a href="https://solace.com/products/" target="_blank" class="footer-link">Products</a>
                                                    </li>
                                                    <li class="link_list_item"><a href="https://solace.com/company/" target="_blank" class="footer-link">Company</a>
                                                    </li>
                                                    <li class="link_list_item"><a href="https://www.solace.dev/" target="_blank" class="footer-link">Developers</a>
                                                    </li>
                                                    <li class="link_list_item"><a href="https://solace.com/support/" target="_blank" class="footer-link">Support</a>
                                                    </li>
                                                    <li class="link_list_item"><a href="https://solace.com/contact/" target="_blank" class="footer-link">Contact Us</a>
                                                    </li>
                                                </ul>
                                            </div>
                                        </footer>
                                    </div>
                                    <!-- JIRA issue collector -->
                                    <script>/*<![CDATA[*/// Requires jQuery!
jQuery.ajax({
    url: "https://sol-jira.atlassian.net/s/d41d8cd98f00b204e9800998ecf8427e-T/o2joag/b/24/e73395c53c3b10fde2303f4bf74ffbf6/_/download/batch/com.atlassian.jira.collector.plugin.jira-issue-collector-plugin:issuecollector-embededjs/com.atlassian.jira.collector.plugin.jira-issue-collector-plugin:issuecollector-embededjs.js?locale=en-US&collectorId=076e0808",
    type: "get",
    cache: true,
    dataType: "script"
});
window.ATL_JQ_PAGE_PROPS = {
"triggerFunction": function(showCollectorDialog) {
//Requires that jQuery is available!
$("#docsFeedbackTrigger").click(function(e) {
e.preventDefault();
showCollectorDialog();
});
},
fieldValues: {
recordWebInfo: '1', // field Name
recordWebInfoConsent: ['1'] // field Id
}
};
/*]]>*/</script>
                                    <script src="../../Resources/Scripts/thumbnail.js">
                                    </script>
                                    <!-- Script for Launching offsite links in new tab -->
                                    <script type="text/javascript">/*<![CDATA[*/$("a[href^='http']").attr("target","_blank");/*]]>*/</script>
                                </div>
                            </div>
                        </div>
                    </div><a data-close="true"></a>
                </div>
            </div>
        </div>
    </body>
</html>