<?xml version="1.0"?>
<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-us" xml:lang="en-us" class="_Skins_HTML5___Side_Navigation" data-mc-search-type="Stem" data-mc-help-system-file-name="Default.xml" data-mc-path-to-help-system="../../" data-mc-has-content-body="True" data-mc-toc-path="[%=System.LinkedTitle%]|[%=System.LinkedHeader%]|[%=System.LinkedTitle%]" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic;Default" data-mc-preload-images="false" data-mc-in-preview-mode="false">
  <head>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
    <meta name="msapplication-config" content="../../Skins/Favicons/browserconfig.xml"/>
    <meta name="viewport" content="width=device-width, initial-scale=1"/>
    <link rel="apple-touch-icon" sizes="180x180" href="../../Skins/Favicons/apple-touch-icon.png"/>
    <link rel="shortcut icon" href="../../Skins/Favicons/favicon-32x32.png"/>
    <link rel="icon" sizes="96x96" href="../../Skins/Favicons/favicon-96x96.png"/>
    <link rel="icon" sizes="32x32" href="../../Skins/Favicons/favicon-32x32.png"/>
    <link rel="icon" sizes="16x16" href="../../Skins/Favicons/favicon-16x16.png"/>
    <meta charset="utf-8"/>
    <meta http-equiv="Cache-control" content="no-cache"/>
    <meta http-equiv="X-UA-Compatible" content="IE=edge"/>
    <title>Using Local Transactions in the  Python API</title>
    <!-- <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous" /> -->
    <!--style to display feedback button correctly in IE-->
    <!-- Google Tag Manager -->
    <!-- End Google Tag Manager -->
    <!-- links to get the EDA styling to work -->
    <link href="../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" type="text/css" data-mc-generated="True"/>
    <link href="../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" type="text/css" data-mc-generated="True"/>
    <link href="../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" type="text/css" data-mc-generated="True"/>
    <link href="../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" type="text/css" data-mc-generated="True"/>
    <link href="../../Skins/Default/Stylesheets/Components/Tablet.css" rel="stylesheet" type="text/css" data-mc-generated="True"/>
    <link href="../../Skins/Default/Stylesheets/Components/Mobile.css" rel="stylesheet" type="text/css" data-mc-generated="True"/>
    <link href="../../Skins/Default/Stylesheets/Components/Print.css" rel="stylesheet" type="text/css" data-mc-generated="True"/>
    <link href="../../Skins/Fluid/Stylesheets/foundation.6.2.3.css" rel="stylesheet" type="text/css" data-mc-generated="True"/>
    <link href="../../Skins/Fluid/Stylesheets/Styles.css" rel="stylesheet" type="text/css" data-mc-generated="True"/>
    <link href="../../Skins/Fluid/Stylesheets/Tablet.css" rel="stylesheet" type="text/css" data-mc-generated="True"/>
    <link href="../../Skins/Fluid/Stylesheets/Mobile.css" rel="stylesheet" type="text/css" data-mc-generated="True"/>
    <link href="../../Skins/Fluid/Stylesheets/Print.css" rel="stylesheet" type="text/css" data-mc-generated="True"/>
    <link href="../../Resources/Stylesheets/MainStyles.min.css" rel="stylesheet" type="text/css"/>
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet"/>
    <style>@media screen and (min-width: 0\0)
{
	.feedback-button
	{
		margin-right: -40px;
		top: 50%;
		border-radius: 9px 9px 0px 0px;
	}

	#canvas
	{
		position: relative;
	}
}

@media print
{
	#plugin
	{
		overflow: visible !important;
	}
}

</style>
    <link href="../../Resources/Stylesheets/eda_styles.css" rel="stylesheet" type="text/css"/>
    <link href="https://fonts.googleapis.com/css?family=Open+Sans:400,600,300" rel="stylesheet" type="text/css"/>
    <style>/*&lt;meta /&gt;*/

.button.print-button
{
	-pie-background: linear-gradient(#ffffff, transparent);
}

.button.previous-topic-button
{
	-pie-background: linear-gradient(#ffffff, transparent);
}

.button.next-topic-button
{
	-pie-background: linear-gradient(#ffffff, transparent);
}

.needs-pie
{
	behavior: url('../../Resources/Scripts/PIE-no-motw.htc');
}

</style>
    <link rel="apple-touch-icon" sizes="180x180" href="../../Skins/Favicons/apple-touch-icon.png"/>
    <link rel="shortcut icon" href="../../Skins/Favicons/favicon-32x32.png"/>
    <link rel="icon" sizes="96x96" href="../../Skins/Favicons/favicon-96x96.png"/>
    <link rel="icon" sizes="32x32" href="../../Skins/Favicons/favicon-32x32.png"/>
    <link rel="icon" sizes="16x16" href="../../Skins/Favicons/favicon-16x16.png"/>
    <script src="../../Resources/Scripts/jquery.min.js" type="text/javascript">
        </script>
    <script src="../../Resources/Scripts/purify.min.js" type="text/javascript" defer="defer">
        </script>
    <script src="../../Resources/Scripts/require.min.js" type="text/javascript" defer="defer">
        </script>
    <script src="../../Resources/Scripts/require.config.js" type="text/javascript" defer="defer">
        </script>
    <script src="../../Resources/Scripts/foundation.6.2.3_custom.js" type="text/javascript" defer="defer">
        </script>
    <script src="../../Resources/Scripts/plugins.min.js" type="text/javascript" defer="defer">
        </script>
    <script src="../../Resources/Scripts/MadCapAll.js" type="text/javascript" defer="defer">
        </script>
    <script src="https://cmp.osano.com/AzZrhlTmT5f216Foa/84ba7dc4-a4e5-4b02-b120-977eb6f052d4/osano.js">
        </script>
    <script type="text/javascript">/*<![CDATA[*/(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
			new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
			j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
			'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
			})(window,document,'script','dataLayer','GTM-KLSDFH');
		/*]]>*/</script>
    <script type="text/javascript" src="../../Skins/Default/Scripts/TopicToolBar.js">
        </script>
  </head>
  <!-- Top Orange and Darkgrey header-->
  <!-- Div for EDA banner -->
  <div class="eda_banner">
    <p>Register Now for EDA Summit 2024 - Virtual Event <a href="https://edasummit.com/" target="_blank">Register for Free</a></p>
  </div>
  <!-- end Div for EDA banner -->
  <div class="top-nav">
    <div class="main_list">
      <ul class="top-navlinks">
        <li>
          <a href="https://solace.com/support/" target="_blank">Support</a>
        </li>
        <li>
          <a href="https://solace.com/contact/" target="_blank">Contact Us</a>
        </li>
      </ul>
    </div>
    <div class="container-fluid">
      <div class="src-li">
        <div id="srchWrapTwo">
          <form class="search" action="#">
            <div class="search-bar search-bar-container needs-pie">
              <input class="search-field needs-pie" type="search" aria-label="Search Field" placeholder="Search the docs"/>
              <div class="search-filter-wrapper">
                <span class="invisible-label" id="search-filters-label">Filter: </span>
                <div class="search-filter" aria-haspopup="true" aria-controls="sf-content" aria-expanded="false" aria-label="Search Filter" title="All Files" role="button" tabindex="0">
                                </div>
                <div class="search-filter-content" id="sf-content">
                  <ul>
                    <li>
                      <button class="mc-dropdown-item" aria-labelledby="search-filters-label filterSelectorLabel-00001">
                        <span id="filterSelectorLabel-00001">All Files</span>
                      </button>
                    </li>
                  </ul>
                </div>
              </div>
              <div class="search-submit-wrapper" dir="ltr">
                <div class="search-submit" title="Search" role="button" tabindex="0">
                  <span class="invisible-label">Submit Search</span>
                </div>
              </div>
            </div>
          </form>
        </div>
      </div>
      <span class="tool-tip" tooltip-position="left" tooltip="To search for CLI commands, events, or APIs, navigate to the related sections.">i</span>
      <!-- Sept. 28, 2022 - This is being moved to under div class= top-nav
			<div class="main_list">
				<ul class="top-navlinks">
					<li><a href="https://solace.com/support/" target="_blank">Support</a></li>
					<li><a href="https://solace.com/contact/" target="_blank">Contact Us</a></li>
				</ul>
			</div> -->
    </div>
    <!-- Sept. 27, 2022 - The commented out content below used to provide the products, company, etc., links in the top header, next to the search field. -->
    <!-- <div class="main_list"><ul class="top-navlinks"><li><a href="https://solace.com/products/" target="_blank">Products</a></li><li><a href="https://solace.com/company/" target="_blank">Company</a></li><li><a href="https://www.solace.dev/" target="_blank">Developers</a></li><li><a href="https://solace.com/support/" target="_blank">Support</a></li><li><a href="https://solace.com/contact/" target="_blank">Contact Us</a></li></ul></div> -->
  </div>
  <body>
    <div class="foundation-wrap off-canvas-wrapper">
      <div class="off-canvas-wrapper-inner" data-off-canvas-wrapper="">
        <aside class="off-canvas position-right" role="navigation" id="offCanvas" data-off-canvas="" data-position="right" data-mc-ignore="true">
          <ul class="off-canvas-accordion vertical menu off-canvas-list" data-accordion-menu="" data-mc-back-link="Back" data-mc-css-tree-node-expanded="is-accordion-submenu-parent" data-mc-css-tree-node-collapsed="is-accordion-submenu-parent" data-mc-css-sub-menu="vertical menu is-accordion-submenu nested" data-mc-include-indicator="False" data-mc-include-icon="False" data-mc-include-parent-link="True" data-mc-include-back="False" data-mc-defer-expand-event="True" data-mc-expand-event="click.zf.accordionMenu" data-mc-toc="True">
                    </ul>
        </aside>
        <div class="off-canvas-content inner-wrap" data-off-canvas-content="">
          <div data-sticky-container="" class="title-bar-container">
            <nav class="title-bar tab-bar sticky" role="banner" data-sticky="" data-options="marginTop:0" style="width:100%" data-sticky-on="only screen and (max-width: 1000px)" data-mc-ignore="true">
              <a class="skip-to-content fluid-skip showOnFocus" href="#">Skip To Main Content</a>
              <div class="middle title-bar-section outer-row clearfix">
                <div class="menu-icon-container relative clearfix">
                  <div class="central-account-wrapper">
                    <div class="central-dropdown">
                      <a class="central-account-drop">
                        <span class="central-account-image"/>
                        <span class="central-account-text">Account</span>
                      </a>
                      <div class="central-dropdown-content">
                        <a class="MCCentralLink central-dropdown-content-settings">Settings</a>
                        <hr class="central-separator"/>
                        <a class="MCCentralLink central-dropdown-content-logout">Logout</a>
                      </div>
                    </div>
                  </div>
                  <button class="menu-icon" aria-label="Show Navigation Panel" data-toggle="offCanvas">
                    <span/>
                  </button>
                </div>
              </div>
              <div class="title-bar-layout outer-row">
                <div class="logo-wrapper">
                  <a class="logo" href="../../index.html" alt="Logo"/>
                </div>
                <div class="navigation-wrapper nocontent">
                  <ul class="navigation clearfix" role="navigation" data-mc-css-tree-node-has-children="has-children" data-mc-css-sub-menu="sub-menu" data-mc-expand-event="mouseenter" data-mc-top-nav-menu="True" data-mc-max-depth="3" data-mc-include-icon="False" data-mc-include-indicator="False" data-mc-include-children="True" data-mc-include-siblings="True" data-mc-include-parent="True" data-mc-toc="True">
                    <li class="placeholder" style="visibility:hidden">
                      <a>placeholder</a>
                    </li>
                  </ul>
                </div>
                <div class="central-account-wrapper">
                  <div class="central-dropdown">
                    <a class="central-account-drop">
                      <span class="central-account-image"/>
                      <span class="central-account-text">Account</span>
                    </a>
                    <div class="central-dropdown-content">
                      <a class="MCCentralLink central-dropdown-content-settings">Settings</a>
                      <hr class="central-separator"/>
                      <a class="MCCentralLink central-dropdown-content-logout">Logout</a>
                    </div>
                  </div>
                </div>
                <div class="nav-search-wrapper">
                  <div class="nav-search row">
                    <form class="search" action="#">
                      <div class="search-bar search-bar-container needs-pie">
                        <input class="search-field needs-pie" type="search" aria-label="Search Field" placeholder="Search the docs"/>
                        <div class="search-filter-wrapper">
                          <span class="invisible-label" id="search-filters-label">Filter: </span>
                          <div class="search-filter" aria-haspopup="true" aria-controls="sf-content" aria-expanded="false" aria-label="Search Filter" title="All Files" role="button" tabindex="0">
                                                    </div>
                          <div class="search-filter-content" id="sf-content">
                            <ul>
                              <li>
                                <button class="mc-dropdown-item" aria-labelledby="search-filters-label filterSelectorLabel-00001">
                                  <span id="filterSelectorLabel-00001">All Files</span>
                                </button>
                              </li>
                            </ul>
                          </div>
                        </div>
                        <div class="search-submit-wrapper" dir="ltr">
                          <div class="search-submit" title="Search" role="button" tabindex="0">
                            <span class="invisible-label">Submit Search</span>
                          </div>
                        </div>
                      </div>
                    </form>
                  </div>
                </div>
              </div>
            </nav>
          </div>
          <div class="main-section">
            <div class="row outer-row sidenav-layout">
              <nav class="sidenav-wrapper">
                <div class="sidenav-container">
                  <ul class="off-canvas-accordion vertical menu sidenav" data-accordion-menu="" data-mc-css-tree-node-expanded="is-accordion-submenu-parent" data-mc-css-tree-node-collapsed="is-accordion-submenu-parent" data-mc-css-sub-menu="vertical menu accordion-menu is-accordion-submenu nested" data-mc-include-indicator="False" data-mc-include-icon="False" data-mc-include-parent-link="False" data-mc-include-back="False" data-mc-defer-expand-event="True" data-mc-expand-event="click.zf.accordionMenu" data-mc-toc="True" data-mc-side-nav-menu="True">
                                    </ul>
                </div>
              </nav>
              <div class="body-container">
                <div data-mc-content-body="True">
                  <div class="buttons popup-container clearfix topicToolbarProxy _Skins_TopicToolBar mc-component nocontent" style="mc-topic-toolbar-items: PreviousTopic Print NextTopic;">
                    <div class="button-group-container-left">
                      <button class="button needs-pie print-button" title="Print">
                        <div>
                          <div role="img" class="button-icon-wrapper" aria-label="Print">
                            <div class="button-icon"> </div>
                          </div>
                        </div>
                      </button>
                      <button class="button needs-pie previous-topic-button" title="Navigate previous topic" disabled="true">
                        <div>
                          <div role="img" class="button-icon-wrapper" aria-label="Navigate previous">
                            <div class="button-icon"> </div>
                          </div>
                        </div>
                      </button>
                      <button class="button needs-pie next-topic-button" title="Navigate next topic" disabled="true">
                        <div>
                          <div role="img" class="button-icon-wrapper" aria-label="Navigate next">
                            <div class="button-icon"> </div>
                          </div>
                        </div>
                      </button>
                    </div>
                  </div>
                  <!-- Google Tag Manager (noscript) -->
                  <noscript>
                    <iframe src="https://www.googletagmanager.com/ns.html?id=GTM-KLSDFH" height="0" width="0" style="display:none;visibility:hidden"/>
                  </noscript>
                  <!-- End Google Tag Manager (noscript) -->
                  <div id="content">
                    <div id="contentBody">
                      <div class="row collapse">
                        <div xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd" class="ContentRow">
                          <div>
                            <div xmlns="" class="nocontent">
                              <div class="MCBreadcrumbsBox_MCBreadcrumbsSelf_0 breadcrumbs" role="navigation" aria-label="Breadcrumbs" data-mc-breadcrumbs-divider=" / " data-mc-breadcrumbs-count="4" data-mc-toc="True">
                                <span class="MCBreadcrumbsPrefix"> </span>
                              </div>
                            </div>
                            <div xmlns="" role="main" id="mc-main-content">
                              <h1 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Using Local Transactions in the  Python API</h1>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Local transactions in the <span class="mc-variable Product-Names.pubsub_brand_only variable">PubSub+</span> Python API allow your application to group multiple guaranteed message send and/or guaranteed message receive operations together as a single, atomic unit known as a transaction. Local transactions ensure that all the operations within a transaction are either committed or rolled back. Local transactions are used to maintain data integrity and consistency, and can be useful in situations such as order processing and financial transactions. For more information see <a href="../API-Developer-Guide/Using-Local-Transactions.htm" class="MCXref xref">Using Local Transactions</a>. The following sections show how to use local transactions in the <span class="mc-variable Product-Names.pubsub_brand_only variable">PubSub+</span> Python API.</p>
                              <ol xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                <li value="1"><a href="#Creating" class="link-internal">Create a TransactionalMessagingService</a>.</li>
                                <li value="2"><a href="#Creating2" class="link-internal">Publishing Messages in a Local Transaction</a>.</li>
                                <li value="3"><a href="#Creating3" class="link-internal">Receiving Messages in a Local Transaction</a>.</li>
                              </ol>
                              <h2 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><a name="Creating"/>Creating a TransactionalMessagingService Object</h2>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">A <code>TransactionalMessagingService</code> object allows the API to establish a connection to the event broker and create transactions. To create a <code>TransactionalMessagingService</code> object, do the following:</p>
                              <ol xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                <li value="1">
                                  <p>Call the <code>MessagingService</code> class' <code>create_transactional_service_builder()</code> function to return a <code>TransactionalMessagingServiceBuilder</code> object.</p>
                                </li>
                                <li value="2">
                                  <p>The <code>TransactionalMessagingServiceBuilder</code> object gives you access to a number of functions that let you customize a <code>TransactionalMessagingService</code> object. These include the following:</p>
                                  <ul>
                                    <li><code>from_properties(configuration: dict)</code>&#x2014;Pass the necessary broker properties dictionary to the <code>TransactionalMessagingServiceBuilder</code>.</li>
                                    <li style="font-weight: normal;font-size: 11pt;"><code>set_transaction_request_timeout(timeout: int = 10000)</code>&#x2014;Timeout (in milliseconds) to wait for a response. Default is 10000.</li>
                                  </ul>
                                </li>
                                <li value="3">
                                  <p>Call the <code>build()</code> function on the <code>TransactionalMessagingServiceBuilder</code> object to return a <code>TransactionalMessagingService</code> object.</p>
                                </li>
                                <li value="4">
                                  <p>Call the <code>connect()</code> function on your <code>TransactionalMessagingService</code> object to connect to the event broker. </p>
                                </li>
                              </ol>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">For more information,  see the <a href="../../API-Developer-Online-Ref-Documentation/go/index.html" class="link-internal"><a href="../../API-Developer-Online-Ref-Documentation/python/index.html" class="link-internal"><span class="mc-variable Product-Names.pubsub_brand_only variable">PubSub+</span> Messaging API for Python reference</a></a>.</p>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">The following sample code shows how to create a simple <code>TransactionalMessagingService</code> instance and connect it to an event broker:</p>
                              <pre xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd" xml:space="preserve">
transactional_service = messaging_service.create_transactional_service_builder().build().connect()
</pre>
                              <h2 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><a name="Creating2"/>Publishing Messages in a Local Transaction</h2>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">After a <code>TransactionalMessagingService</code> instance has established a connection to an event broker, use a <code>TransactionalMessagePublisher</code> to publish guaranteed messages. To create a <code>TransactionalMessagePublisher</code> object, do the following:</p>
                              <ol xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                <li value="1">
                                  <p>Call the <code>create_transactional_message_publisher_builder()</code> function on a <code>TransactionalMessagingService</code> object. This returns a <code>TransactionalMessagePublisherBuilder</code> object.</p>
                                </li>
                                <li value="2">
                                  <p>Call the <code>build()</code> function on your <code>TransactionalMessagePublisherBuilder</code> to return a <code>TransactionalMessagePublisher</code> object.</p>
                                </li>
                                <li value="3">
                                  <p>To enable your <code>TransactionalMessagePublisher</code> to start publishing messages, call the <code>start()</code> function on it.</p>
                                </li>
                              </ol>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">For more information, see the <a href="../../API-Developer-Online-Ref-Documentation/python/index.html" class="link-internal"><span class="mc-variable Product-Names.pubsub_brand_only variable">PubSub+</span> Messaging API for Python reference</a>.</p>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">The following is an example that shows how to use  a transactional message publisher to enable your application to publish messages to the event broker:</p>
                              <pre xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd" xml:space="preserve">
transactional_publisher = transactional_service.create_transactional_message_publisher_builder().build().start()
</pre>
                              <h3 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Local Transaction <code>publish()</code> Example </h3>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">After you create a <code>TransactionalMessagingService</code> and a <code>TransactionalMessagePublisher</code>, you can now use the <code>publish()</code> function to publish messages in a local transaction. The example below will attempt to publish ten messages to each topic in the <code>topics</code> array. In each run through the for-loop, the application attempts to publish ten messages to a topic as a single transaction with the <code>commit()</code> function. If something goes wrong during the code execution, the transaction is rolled back and none of the messages will be published for that iteration of the loop.</p>
                              <pre xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd" xml:space="preserve">
topics = [Topic.of("my/topic/1"), Topic.of("my/topic/2"), Topic.of("my/topic/3")]

for topic in topics:
    try:
        for i in range(10):
            message = messaging_service.message_builder().build(f"Message #{i} for topic {topic.get_name()}")
            transactional_publisher.publish(message, topic)
        # Publish all messages to a topic, or none at all:
        transactional_service.commit()
        # Can't be sure messages were actually published until the commit succeeds.
    except TransactionRollbackError:
        # Commit failed.
        print("Commit failed.")
    except UnknownTransactionStateError:
        # Commit outcome unknown. This should be very rare.
        print("Commit outcome unknown.")
transactional_service.disconnect()
</pre>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">&#xA0;</p>
                              <h2 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><a name="Creating3"/>Receiving Messages in a Local Transaction</h2>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">After a <code>TransactionalMessagingService</code> instance has established a connection to an event broker, use a <code>TransactionalMessageReceiver</code> to receive guaranteed messages. To create a <code>TransactionalMessageReceiver</code> object, do the following:</p>
                              <ol xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                <li value="1">
                                  <p>Call the <code>create_transactional_message_receiver_builder()</code> function on a <code>TransactionalMessagingService</code> object. This returns a <code>TransactionalMessageReceiverBuilder</code> object.</p>
                                </li>
                                <li value="2">
                                  <p>You can now use the functions in the <code>TransactionalMessageReceiverBuilder</code> interface to configure a <code>TransactionalMessageReceiver</code> to use certain features of the API:</p>
                                  <ul>
                                    <li><code>with_message_replay(replay_strategy: ReplayStrategy)</code>&#x2014;Add a message replay message strategy to a persistent receiver.</li>
                                    <li><code>with_message_selector(selector_query_expression: str)</code>&#x2014;Enables support for message selection based on message header parameter and message properties values.</li>
                                    <li><code>with_missing_resources_creation_strategy(strategy: MissingResourcesCreationStrategy)</code>&#x2014;Add the missing queue creation strategy that defines what action the API may take.</li>
                                  </ul>
                                </li>
                                <li value="3">
                                  <p>Call the <code>build(endpoint_to_consume_from: Queue)</code> function on your <code>TransactionalMessageReceiverBuilder</code> to return a <code>TransactionalMessageReceiver</code> object.  The <code>build()</code> function takes an explicit queue to consume from as a parameter. </p>
                                </li>
                                <li value="4">
                                  <p>To enable your <code>TransactionalMessageReceiver</code> to start receiving messages, call the <code>start()</code> function on it.</p>
                                </li>
                              </ol>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">For more information, see the <a href="../../API-Developer-Online-Ref-Documentation/python/index.html" class="link-internal"><span class="mc-variable Product-Names.pubsub_brand_only variable">PubSub+</span> Messaging API for Python reference</a>.</p>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">The following is an example that shows how to use  a transactional message receiver to enable your application to receive messages from the event broker:</p>
                              <pre xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd" xml:space="preserve">
transactional_receiver= transactional_service.create_transactional_message_receiver_builder().build(my_queue).start()
</pre>
                              <h3 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Receiving Messages Synchronously in a Local Transaction</h3>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">After you create a <code>TransactionalMessagingService</code> and a <code>TransactionalMessageReceiver</code>, you can now receive messages in a transaction. The example below will attempt to receive ten messages using the blocking <code>receive_message()</code> function from each queue in the queues array using a for-loop. In each run through the for-loop, the application attempts to receive ten messages from a queue as a single transaction with the <code>commit()</code> function. If something goes wrong during the code execution, the transaction is rolled back and none of the messages will be consumed from the queue and removed from the event broker for that iteration of the loop.</p>
                              <pre xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd" xml:space="preserve">
# Receive a message from each queue in a transaction, 'count' times. Each count is a separate transaction: A message is taken from every queue or none.
count = 10
queues = [queue1, queue2, queue3]
messages = []
receivers = []
# Start a receiver for every queue
for queue in queues:
    transactional_receiver = transactional_service.create_transactional_message_receiver_builder().build(queue).start()
    receivers.append(transactional_receiver)

for _ in range(count):
    # Grab a message from each receiver/queue
    messages_in_this_transaction = []
    for receiver in receivers:
        message = receiver.receive_message()
        if message is None:
            if messages_in_this_transaction:
                # One of the queues ran empty, rolling back the partial transaction:
                transactional_service.rollback()
            break
        messages_in_this_transaction.append(message)
    else:  # no break
        try:
            # Consume a message from all queues, or from none:
            transactional_service.commit()
            messages.extend(messages_in_this_transaction)
        except TransactionRollbackError:
            # Commit failed.
            print("Commit error")
        except UnknownTransactionStateError:
            # Commit outcome unknown. This should be very rare.
            print("Unknown commit error")
transactional_service.disconnect()
</pre>
                              <h3 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Receiving Messages with a Message Handler in a Local Transaction</h3>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">After you create a <code>TransactionalMessagingService</code> and a <code>TransactionalMessageReceiver</code>, you can now use the non blocking <code>receive_async()</code> function to receive messages in a transaction. </p>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd" class="Note">The non-blocking receiver function is called <code>receive_async()</code>, however it is not an asynchronous co-routine or generator,
			and is not <code>asyncio</code> compatible.
<code>	receive_async()</code> returns immediately, and works with native threads under the hood. This function invokes the callback on a new python thread for every message.</p>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">The <code>receive_async()</code> function takes a message handler as a parameter. The <span class="mc-variable Product-Names.pubsub_brand_only variable">PubSub+</span> Python API has a <code>TransactionalMessageHandler</code> designed for local transactions. This interface contains the abstract <code>on_message()</code> function that you implement to handle the processing of inbound messages, such as print, modify, re-publish or commit operations. The example implementation of the <code>on_message()</code> function below is blocking, which is a way to control the flow of incoming messages.</p>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd" class="Note">Do not perform operations on the same transactional service from outside the message handler or from other threads because it is not thread safe.</p>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">The example below will attempt to receive ten messages using the non-blocking <code>receive_async()</code> function from the queue passed to the <code>build()</code> function. Either all messages will be received from the event broker queue when the transaction succeeds and is committed with the <code>commit()</code> function, or if something goes wrong at any point in the code execution the transaction is rolled back and none of the messages will be consumed from any queue.</p>
                              <pre xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd" xml:space="preserve">
import threading
from solace.messaging.receiver.transactional_message_receiver import TransactionalMessageHandler
from solace.messaging.receiver.inbound_message import InboundMessage
from solace.messaging.resources.topic_subscription import TopicSubscription

transactional_service = messaging_service.create_transactional_service_builder().build().connect()
queue = Queue.durable_exclusive_queue("myQueue")
count = 11
messages_processed = 0
finished = threading.Event()

# The message dispatch function is wrapped in a class
class MsgHandler(TransactionalMessageHandler):
    def on_message(self, message: InboundMessage):
        # Process message, for example: print, modify, re-publish, commit.
        # Blocking in this method is a way to control the flow of incoming messages.
        # Do not perform operations on the same transactional service from anywhere else.
        global transactional_service, messages_processed, finished
        print(f'Transactional message callback processing message: {message.get_payload_as_string()}')
		
        transactional_service.commit()
        messages_processed += 1
        if messages_processed &gt;= count:
            # Remember it's not safe to perform operations on the transactional service
            # from other threads, including the main thread.
            finished.set()

msgHandler = MsgHandler()
receiver_builder = transactional_service.create_transactional_message_receiver_builder()
receiver = receiver_builder.build(queue)

# The receiver's mode of operation (blocking vs non-blocking) must be decided before the receiver is started.
receiver.receive_async(msgHandler)
receiver.start()
finished.wait(10)
transactional_service.disconnect()
</pre>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">&#xA0;</p>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                    <div class="no-print">
                      <div>
                        <a href="#" id="docsFeedbackTrigger" class="docs-issue-collector">Provide feedback</a>
                      </div>
                    </div>
                    <footer class="my-4 pt-4 text-center no-print">
                      <div class="footer-txt text-center no-print">
                        <ul class="list-inline ">
                          <li class="list-inline-item text-muted"><a href="../../Resources/Documentation-Set.htm" class="doc-set-footer-link MCXref xref xrefdoc-set-footer-link">Documentation Coverage</a>: <span class="mc-variable Variables.DocumentSetNumber variable">2024.09.16.0001</span></li>
                          <li class="list-inline-item text-muted">Last Updated: <span class="mc-variable Variables.MonthDayYear variable">September 16, 2024</span></li>
                          <li class="list-inline-item text-muted" style="font-size:13px;"> &#xA9;  <span class="mc-variable Variables.CompanyNameLegal variable">Solace Corporation</span></li>
                        </ul>
                      </div>
                      <div class="footer-icons">
                        <ul class="list-inline">
                          <li class="list-inline-item">
                            <a href="https://facebook.com/solacedotcom" target="_blank" class="social-media-icon">
                              <img src="../../Resources/Images/Social-Media/facebook_22x21.png" class="Hyperlinked" alt="Facebook" title="Solace Facebook Page" style="width: 22;height: 21;"/>
                            </a>
                          </li>
                          <li class="list-inline-item">
                            <a href="https://www.linkedin.com/company/20219" target="_blank" class="social-media-icon">
                              <img src="../../Resources/Images/Social-Media/LinkedIn_22x21.png" class="Hyperlinked" alt="LinkedIn" title="Solace LinkedIn Page" style="width: 22;height: 21;"/>
                            </a>
                          </li>
                          <li class="list-inline-item">
                            <a href="https://twitter.com/solacedotcom" target="_blank" class="social-media-icon">
                              <img src="../../Resources/Images/Social-Media/Twitter_22x21.png" class="Hyperlinked" alt="Twitter" title="Solace Twitter Feed" style="width: 22;height: 21;"/>
                            </a>
                          </li>
                          <li class="list-inline-item">
                            <a href="https://www.youtube.com/user/SolaceSystems" target="_blank" class="social-media-icon">
                              <img src="../../Resources/Images/Social-Media/youtube_22x21.png" class="Hyperlinked" alt="YouTube" title="Solace YouTube Channel" style="width: 22;height: 21;"/>
                            </a>
                          </li>
                          <li class="list-inline-item">
                            <a href="https://www.instagram.com/solacedotcom/" target="_blank" class="social-media-icon">
                              <img src="../../Resources/Images/Social-Media/instagram_22x21.png" class="Hyperlinked" alt="Instagram" title="Solace Instagram Feed" style="width: 22;height: 21;"/>
                            </a>
                          </li>
                          <li class="list-inline-item">
                            <a href="https://medium.com/solacedotcom" target="_blank" class="social-media-icon">
                              <img src="../../Resources/Images/Social-Media/medium_22x21.png" class="Hyperlinked" alt="Medium" title="Solace Medium Blog" style="width: 22;height: 21;"/>
                            </a>
                          </li>
                        </ul>
                      </div>
                      <div class="footer_link_menu">
                        <ul class="link_list">
                          <li class="link_list_item">
                            <a href="https://solace.com/products/" target="_blank" class="footer-link">Products</a>
                          </li>
                          <li class="link_list_item">
                            <a href="https://solace.com/company/" target="_blank" class="footer-link">Company</a>
                          </li>
                          <li class="link_list_item">
                            <a href="https://www.solace.dev/" target="_blank" class="footer-link">Developers</a>
                          </li>
                          <li class="link_list_item">
                            <a href="https://solace.com/support/" target="_blank" class="footer-link">Support</a>
                          </li>
                          <li class="link_list_item">
                            <a href="https://solace.com/contact/" target="_blank" class="footer-link">Contact Us</a>
                          </li>
                        </ul>
                      </div>
                    </footer>
                  </div>
                  <!-- JIRA issue collector -->
                  <script>/*<![CDATA[*/// Requires jQuery!
jQuery.ajax({
    url: "https://sol-jira.atlassian.net/s/d41d8cd98f00b204e9800998ecf8427e-T/o2joag/b/24/e73395c53c3b10fde2303f4bf74ffbf6/_/download/batch/com.atlassian.jira.collector.plugin.jira-issue-collector-plugin:issuecollector-embededjs/com.atlassian.jira.collector.plugin.jira-issue-collector-plugin:issuecollector-embededjs.js?locale=en-US&collectorId=076e0808",
    type: "get",
    cache: true,
    dataType: "script"
});
window.ATL_JQ_PAGE_PROPS = {
"triggerFunction": function(showCollectorDialog) {
//Requires that jQuery is available!
$("#docsFeedbackTrigger").click(function(e) {
e.preventDefault();
showCollectorDialog();
});
},
fieldValues: {
recordWebInfo: '1', // field Name
recordWebInfoConsent: ['1'] // field Id
}
};
/*]]>*/</script>
                  <script src="../../Resources/Scripts/thumbnail.js">
                                    </script>
                  <!-- Script for Launching offsite links in new tab -->
                  <script type="text/javascript">/*<![CDATA[*/$("a[href^='http']").attr("target","_blank");/*]]>*/</script>
                </div>
              </div>
            </div>
          </div>
          <a data-close="true"/>
        </div>
      </div>
    </div>
  </body>
</html>
