<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-us" xml:lang="en-us" class="_Skins_HTML5___Side_Navigation" data-mc-search-type="Stem" data-mc-help-system-file-name="Default.xml" data-mc-path-to-help-system="../" data-mc-has-content-body="True" data-mc-toc-path="Developing Applications" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic;Default" data-mc-preload-images="false" data-mc-in-preview-mode="false">
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
        <meta name="msapplication-config" content="../Skins/Favicons/browserconfig.xml" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="apple-touch-icon" sizes="180x180" href="../Skins/Favicons/apple-touch-icon.png" />
        <link rel="shortcut icon" href="../Skins/Favicons/favicon-32x32.png" />
        <link rel="icon" sizes="96x96" href="../Skins/Favicons/favicon-96x96.png" />
        <link rel="icon" sizes="32x32" href="../Skins/Favicons/favicon-32x32.png" />
        <link rel="icon" sizes="16x16" href="../Skins/Favicons/favicon-16x16.png" />
        <meta charset="utf-8" />
        <meta http-equiv="Cache-control" content="no-cache" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" /><title>Overview: How Apps Interact with PubSub+ Messaging Components</title>
        <!-- <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous" /> -->
        <!--style to display feedback button correctly in IE-->
        <!-- Google Tag Manager -->
        <!-- End Google Tag Manager -->
        <!-- links to get the EDA styling to work -->
        <link href="../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../Skins/Default/Stylesheets/Components/Tablet.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../Skins/Default/Stylesheets/Components/Mobile.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../Skins/Default/Stylesheets/Components/Print.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../Skins/Fluid/Stylesheets/foundation.6.2.3.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../Skins/Fluid/Stylesheets/Styles.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../Skins/Fluid/Stylesheets/Tablet.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../Skins/Fluid/Stylesheets/Mobile.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../Skins/Fluid/Stylesheets/Print.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../Resources/Stylesheets/MainStyles.min.css" rel="stylesheet" type="text/css" />
        <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet" />
        <style>@media screen and (min-width: 0\0)
{
	.feedback-button
	{
		margin-right: -40px;
		top: 50%;
		border-radius: 9px 9px 0px 0px;
	}

	#canvas
	{
		position: relative;
	}
}

@media print
{
	#plugin
	{
		overflow: visible !important;
	}
}

</style>
        <link href="../Resources/Stylesheets/eda_styles.css" rel="stylesheet" type="text/css" />
        <link href="https://fonts.googleapis.com/css?family=Open+Sans:400,600,300" rel="stylesheet" type="text/css" />
        <style>/*&lt;meta /&gt;*/

.button.print-button
{
	-pie-background: linear-gradient(#ffffff, transparent);
}

.button.previous-topic-button
{
	-pie-background: linear-gradient(#ffffff, transparent);
}

.button.next-topic-button
{
	-pie-background: linear-gradient(#ffffff, transparent);
}

.needs-pie
{
	behavior: url('../Resources/Scripts/PIE-no-motw.htc');
}

</style>
        <style>img
{
	mc-thumbnail-max-height: auto;
	mc-thumbnail-max-width: 500px;
	mc-thumbnail: popup;
	padding-top: 10px;
	padding-bottom: 10px;
}

.image-inline
{
	mc-thumbnail-max-height: none;
	mc-thumbnail-max-width: none;
	mc-thumbnail: none;
}

</style>
        <link rel="apple-touch-icon" sizes="180x180" href="../Skins/Favicons/apple-touch-icon.png" />
        <link rel="shortcut icon" href="../Skins/Favicons/favicon-32x32.png" />
        <link rel="icon" sizes="96x96" href="../Skins/Favicons/favicon-96x96.png" />
        <link rel="icon" sizes="32x32" href="../Skins/Favicons/favicon-32x32.png" />
        <link rel="icon" sizes="16x16" href="../Skins/Favicons/favicon-16x16.png" />
        <script src="../Resources/Scripts/jquery.min.js" type="text/javascript">
        </script>
        <script src="../Resources/Scripts/purify.min.js" type="text/javascript" defer="defer">
        </script>
        <script src="../Resources/Scripts/require.min.js" type="text/javascript" defer="defer">
        </script>
        <script src="../Resources/Scripts/require.config.js" type="text/javascript" defer="defer">
        </script>
        <script src="../Resources/Scripts/foundation.6.2.3_custom.js" type="text/javascript" defer="defer">
        </script>
        <script src="../Resources/Scripts/plugins.min.js" type="text/javascript" defer="defer">
        </script>
        <script src="../Resources/Scripts/MadCapAll.js" type="text/javascript" defer="defer">
        </script>
        <script src="https://cmp.osano.com/AzZrhlTmT5f216Foa/84ba7dc4-a4e5-4b02-b120-977eb6f052d4/osano.js">
        </script>
        <script type="text/javascript">/*<![CDATA[*/(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
			new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
			j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
			'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
			})(window,document,'script','dataLayer','GTM-KLSDFH');
		/*]]>*/</script>
        <script type="text/javascript" src="../Skins/Default/Scripts/TopicToolBar.js">
        </script>
    </head>
    <!-- Top Orange and Darkgrey header-->
    <!-- Div for EDA banner -->
    <div class="eda_banner">
        <p>Register Now for EDA Summit 2024 - Virtual Event <a href="https://edasummit.com/" target="_blank">Register for Free</a></p>
    </div>
    <!-- end Div for EDA banner -->
    <div class="top-nav">
        <div class="main_list">
            <ul class="top-navlinks">
                <li><a href="https://solace.com/support/" target="_blank">Support</a>
                </li>
                <li><a href="https://solace.com/contact/" target="_blank">Contact Us</a>
                </li>
            </ul>
        </div>
        <div class="container-fluid">
            <div class="src-li">
                <div id="srchWrapTwo">
                    <form class="search" action="#">
                        <div class="search-bar search-bar-container needs-pie">
                            <input class="search-field needs-pie" type="search" aria-label="Search Field" placeholder="Search the docs" />
                            <div class="search-filter-wrapper"><span class="invisible-label" id="search-filters-label">Filter: </span>
                                <div class="search-filter" aria-haspopup="true" aria-controls="sf-content" aria-expanded="false" aria-label="Search Filter" title="All Files" role="button" tabindex="0">
                                </div>
                                <div class="search-filter-content" id="sf-content">
                                    <ul>
                                        <li>
                                            <button class="mc-dropdown-item" aria-labelledby="search-filters-label filterSelectorLabel-00001"><span id="filterSelectorLabel-00001">All Files</span>
                                            </button>
                                        </li>
                                    </ul>
                                </div>
                            </div>
                            <div class="search-submit-wrapper" dir="ltr">
                                <div class="search-submit" title="Search" role="button" tabindex="0"><span class="invisible-label">Submit Search</span>
                                </div>
                            </div>
                        </div>
                    </form>
                </div>
            </div><span class="tool-tip" tooltip-position="left" tooltip="To search for CLI commands, events, or APIs, navigate to the related sections.">i</span>
            <!-- Sept. 28, 2022 - This is being moved to under div class= top-nav
			<div class="main_list">
				<ul class="top-navlinks">
					<li><a href="https://solace.com/support/" target="_blank">Support</a></li>
					<li><a href="https://solace.com/contact/" target="_blank">Contact Us</a></li>
				</ul>
			</div> -->
        </div>
        <!-- Sept. 27, 2022 - The commented out content below used to provide the products, company, etc., links in the top header, next to the search field. -->
        <!-- <div class="main_list"><ul class="top-navlinks"><li><a href="https://solace.com/products/" target="_blank">Products</a></li><li><a href="https://solace.com/company/" target="_blank">Company</a></li><li><a href="https://www.solace.dev/" target="_blank">Developers</a></li><li><a href="https://solace.com/support/" target="_blank">Support</a></li><li><a href="https://solace.com/contact/" target="_blank">Contact Us</a></li></ul></div> -->
    </div>
    <body>
        <div class="foundation-wrap off-canvas-wrapper">
            <div class="off-canvas-wrapper-inner" data-off-canvas-wrapper="">
                <aside class="off-canvas position-right" role="navigation" id="offCanvas" data-off-canvas="" data-position="right" data-mc-ignore="true">
                    <ul class="off-canvas-accordion vertical menu off-canvas-list" data-accordion-menu="" data-mc-back-link="Back" data-mc-css-tree-node-expanded="is-accordion-submenu-parent" data-mc-css-tree-node-collapsed="is-accordion-submenu-parent" data-mc-css-sub-menu="vertical menu is-accordion-submenu nested" data-mc-include-indicator="False" data-mc-include-icon="False" data-mc-include-parent-link="True" data-mc-include-back="False" data-mc-defer-expand-event="True" data-mc-expand-event="click.zf.accordionMenu" data-mc-toc="True">
                    </ul>
                </aside>
                <div class="off-canvas-content inner-wrap" data-off-canvas-content="">
                    <div data-sticky-container="" class="title-bar-container">
                        <nav class="title-bar tab-bar sticky" role="banner" data-sticky="" data-options="marginTop:0" style="width:100%" data-sticky-on="only screen and (max-width: 1000px)" data-mc-ignore="true"><a class="skip-to-content fluid-skip showOnFocus" href="#">Skip To Main Content</a>
                            <div class="middle title-bar-section outer-row clearfix">
                                <div class="menu-icon-container relative clearfix">
                                    <div class="central-account-wrapper">
                                        <div class="central-dropdown"><a class="central-account-drop"><span class="central-account-image"></span><span class="central-account-text">Account</span></a>
                                            <div class="central-dropdown-content"><a class="MCCentralLink central-dropdown-content-settings">Settings</a>
                                                <hr class="central-separator" /><a class="MCCentralLink central-dropdown-content-logout">Logout</a>
                                            </div>
                                        </div>
                                    </div>
                                    <button class="menu-icon" aria-label="Show Navigation Panel" data-toggle="offCanvas"><span></span>
                                    </button>
                                </div>
                            </div>
                            <div class="title-bar-layout outer-row">
                                <div class="logo-wrapper"><a class="logo" href="../index.html" alt="Logo"></a>
                                </div>
                                <div class="navigation-wrapper nocontent">
                                    <ul class="navigation clearfix" role="navigation" data-mc-css-tree-node-has-children="has-children" data-mc-css-sub-menu="sub-menu" data-mc-expand-event="mouseenter" data-mc-top-nav-menu="True" data-mc-max-depth="3" data-mc-include-icon="False" data-mc-include-indicator="False" data-mc-include-children="True" data-mc-include-siblings="True" data-mc-include-parent="True" data-mc-toc="True">
                                        <li class="placeholder" style="visibility:hidden"><a>placeholder</a>
                                        </li>
                                    </ul>
                                </div>
                                <div class="central-account-wrapper">
                                    <div class="central-dropdown"><a class="central-account-drop"><span class="central-account-image"></span><span class="central-account-text">Account</span></a>
                                        <div class="central-dropdown-content"><a class="MCCentralLink central-dropdown-content-settings">Settings</a>
                                            <hr class="central-separator" /><a class="MCCentralLink central-dropdown-content-logout">Logout</a>
                                        </div>
                                    </div>
                                </div>
                                <div class="nav-search-wrapper">
                                    <div class="nav-search row">
                                        <form class="search" action="#">
                                            <div class="search-bar search-bar-container needs-pie">
                                                <input class="search-field needs-pie" type="search" aria-label="Search Field" placeholder="Search the docs" />
                                                <div class="search-filter-wrapper"><span class="invisible-label" id="search-filters-label">Filter: </span>
                                                    <div class="search-filter" aria-haspopup="true" aria-controls="sf-content" aria-expanded="false" aria-label="Search Filter" title="All Files" role="button" tabindex="0">
                                                    </div>
                                                    <div class="search-filter-content" id="sf-content">
                                                        <ul>
                                                            <li>
                                                                <button class="mc-dropdown-item" aria-labelledby="search-filters-label filterSelectorLabel-00001"><span id="filterSelectorLabel-00001">All Files</span>
                                                                </button>
                                                            </li>
                                                        </ul>
                                                    </div>
                                                </div>
                                                <div class="search-submit-wrapper" dir="ltr">
                                                    <div class="search-submit" title="Search" role="button" tabindex="0"><span class="invisible-label">Submit Search</span>
                                                    </div>
                                                </div>
                                            </div>
                                        </form>
                                    </div>
                                </div>
                            </div>
                        </nav>
                    </div>
                    <div class="main-section">
                        <div class="row outer-row sidenav-layout">
                            <nav class="sidenav-wrapper">
                                <div class="sidenav-container">
                                    <ul class="off-canvas-accordion vertical menu sidenav" data-accordion-menu="" data-mc-css-tree-node-expanded="is-accordion-submenu-parent" data-mc-css-tree-node-collapsed="is-accordion-submenu-parent" data-mc-css-sub-menu="vertical menu accordion-menu is-accordion-submenu nested" data-mc-include-indicator="False" data-mc-include-icon="False" data-mc-include-parent-link="False" data-mc-include-back="False" data-mc-defer-expand-event="True" data-mc-expand-event="click.zf.accordionMenu" data-mc-toc="True" data-mc-side-nav-menu="True">
                                    </ul>
                                </div>
                            </nav>
                            <div class="body-container">
                                <div data-mc-content-body="True">
                                    <div class="buttons popup-container clearfix topicToolbarProxy _Skins_TopicToolBar mc-component nocontent" style="mc-topic-toolbar-items: PreviousTopic Print NextTopic;">
                                        <div class="button-group-container-left">
                                            <button class="button needs-pie print-button" title="Print">
                                                <div>
                                                    <div role="img" class="button-icon-wrapper" aria-label="Print">
                                                        <div class="button-icon"> </div>
                                                    </div>
                                                </div>
                                            </button>
                                            <button class="button needs-pie previous-topic-button" title="Navigate previous topic" disabled="true">
                                                <div>
                                                    <div role="img" class="button-icon-wrapper" aria-label="Navigate previous">
                                                        <div class="button-icon"> </div>
                                                    </div>
                                                </div>
                                            </button>
                                            <button class="button needs-pie next-topic-button" title="Navigate next topic" disabled="true">
                                                <div>
                                                    <div role="img" class="button-icon-wrapper" aria-label="Navigate next">
                                                        <div class="button-icon"> </div>
                                                    </div>
                                                </div>
                                            </button>
                                        </div>
                                    </div>
                                    <!-- Google Tag Manager (noscript) -->
                                    <noscript><iframe src="https://www.googletagmanager.com/ns.html?id=GTM-KLSDFH" height="0" width="0" style="display:none;visibility:hidden"></iframe>
                                    </noscript>
                                    <!-- End Google Tag Manager (noscript) -->
                                    <div id="content">
                                        <div id="contentBody">
                                            <div class="row collapse">
                                                <div class="ContentRow" xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                                    <div>
                                                        <div class="nocontent" xmlns="">
                                                            <div class="MCBreadcrumbsBox_MCBreadcrumbsSelf_0 breadcrumbs" role="navigation" aria-label="Breadcrumbs" data-mc-breadcrumbs-divider=" / " data-mc-breadcrumbs-count="4" data-mc-toc="True"><span class="MCBreadcrumbsPrefix"> </span>
                                                            </div>
                                                        </div>
                                                        <div role="main" id="mc-main-content" xmlns="">
                                                            <h1 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Overview: How Apps Interact with <span class="mc-variable Product-Names.pubsub_brand_only variable">PubSub+</span> Messaging Components</h1>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">In this section we'll take you on a tour of the <span class="mc-variable Product-Names.pubsub_brand_only variable">PubSub+</span> event broker's messaging components, and explain at a high level how they make data move from producers to the event broker, and from the event broker to consumers.  </p>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">The <span class="mc-variable Product-Names.pubsub_brand_only variable">PubSub+</span> event broker provides a foundation for multi-protocol and standards eventing including <span class="mc-variable Variables.CompanyName variable">Solace</span> Message Format (SMF), JMS1.1, MQTT3.11, REST, and AMQP1.0. As events move through the broker, they are translated from an ingress messaging protocol to an egress messaging protocol for each consumer receiving messages. Given the range of protocol support, it's important to keep in mind that each open source protocol your app might make use of adds its own twist on how the broker's messaging components operate. First we'll talk about how the <span class="mc-variable Variables.CompanyName variable">Solace</span> SMF protocol works, and then we'll discuss variations introduced by others.</p>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">On our tour, we'll look at how things operate from the perspective of your application. So, let's get started with <a href="#SMF" class="MCXref xref">SMF</a>.</p>
                                                            <h2 class="with-rule" xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><a name="SMF"></a>SMF</h2>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">We're going to show you how the <span class="mc-variable Product-Names.pubsub_brand_only variable">PubSub+</span> SMF protocol makes use of the <span class="mc-variable Product-Names.pubsub_brand_only variable">PubSub+</span> event broker's messaging components to move data from producers to the broker, and from the broker to consumers, all from the point-of-view of your app. There are a couple of ways we're going to do this:</p>
                                                            <ul xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                                                <li>
                                                                    <p>The <a href="#Message" class="MCXref xref">SMF Process Flow</a> section contains a diagram that illustrates the steps from establishing a connection through to getting data flowing. This diagram begins with your app and moves through the broker's components</p>
                                                                </li>
                                                                <li>
                                                                    <p>The <a href="#Message2" class="MCXref xref">SMF Component Operations</a> section has more details about the steps described in the process flow.</p>
                                                                </li>
                                                            </ul>
                                                            <h3 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><a name="Message"></a>SMF Process Flow</h3>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">In the diagram below, follow the steps from establishing a connection to the event broker through to starting the message flow.</p>
                                                            <div class="responsive-maps" xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><a class="MCPopupThumbnailLink MCPopupThumbnailPopup" href="../Resources/Images/API/Component-Map-SMF.png" data-mc-popup-alt=""><img class="MCPopupThumbnail img imgcenter" data-mc-width="2112" data-mc-height="1920" src="../Resources/Images/API/Component-Map-SMF_thumb_500_0.png" alt="" tabindex="" /></a>
                                                            </div>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">The circled numbers in the diagram correspond to the numbered steps described in detail as follows:</p>
                                                            <h4 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><a name="Steps"></a>Steps 1 - 5</h4>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">These steps deal with the operations the application and event broker undergo to establish a connection and get ready for event messaging.</p>
                                                            <ol xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                                                <li value="1">Application initiates <span class="mc-variable Variables.CompanyName variable">Solace</span> API and <span class="mc-variable Variables.CompanyName variable">Solace</span> Context (Optional, can use default).
            </li>
                                                                <li value="2">Application Create and config session, Username, password, broker DNS:Port, TLS, Compression
                <ol style="list-style-type: lower-alpha;"><li value="1">session = JCSMPFactory.onlyInstance().createSession(properties)</li></ol></li>
                                                                <li value="3">Application connect session:
                <ol style="list-style-type: lower-alpha;"><li value="1">session.connect(); </li><li value="2">Host initiates TCP session </li><li value="3">Session sends CONNECT message</li></ol></li>
                                                                <li value="4">Broker authenticates connection (happens automatically after step 3)
            </li>
                                                                <li value="5">Broker authorizes connection (happens automatically after step 4): an event broker sends CONNECT ACK
            </li>
                                                            </ol>
                                                            <h4 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><a name="Steps2"></a>Steps 6, 7, 9 and 10</h4>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">These steps focus on operations associated with sending and receiving event messages</p>
                                                            <ol start="6" xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                                                <li value="6">Application SDK creates publisher flow:
                <ol style="list-style-type: lower-alpha;"><li value="1"> prod = session.getMessageProducer(..) </li><li value="2"> SDK sends last messageID sent and last messageID ACK received </li><li value="3">Broker sends last MessageID received and last messageID ACK sent </li><li value="4"> Application maintains this state as message flow to allow for correct re-transmissions as required on reconnects.</li></ol></li>
                                                                <li value="7">When a message is published:
                <ol style="list-style-type: lower-alpha;"><li value="1"> prod.send(msg,topic) </li><li value="2">Application sdk sends message and decrements available window by one </li><li value="3">Event broker receives, routes, and persists message </li><li value="4">Event broker sends ACK </li><li value="5">Application SDK receives ACK and increments available window by one.</li></ol></li>
                                                                <li value="9">Application creates consumer flow, endpoint name, windowing sizes:
                <ol style="list-style-type: lower-alpha;"><li value="1"> cons = session.createFlow(listener, flow_prop) </li><li value="2"> Application connect flow </li><li value="3">Application API handshakes flow and binds to Queue/Endpoint </li><li value="4"> Messages are then able to move from broker to subscriber client.</li></ol></li>
                                                                <li value="10">Application starts flow:
                <ol style="list-style-type: lower-alpha;"><li value="1"> cons.start() </li><li value="2">Broker sends message and decrements available window by one </li><li value="3">Client API receives message and passes to application </li><li value="4"> Client SDK sends transport ACK </li><li value="5"> Broker receives ACK and increments available window by one </li><li value="6"> Application sends Application ACK when finished with message </li><li value="7">Broker receives Application ACK and deletes message from queue.</li></ol></li>
                                                            </ol>
                                                            <h4 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><b>Step 8</b>
                                                            </h4>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">This step deals with the establishment of application subscriptions.</p>
                                                            <ol xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                                                <li value="8">(Optional, can be admin or direct subn) Application Subscribes by adding subscription to queue:
                	<ol style="list-style-type: lower-alpha;"><li value="1">session.addSubscription(queue, topic,...)</li><li value="2">Application sends SUBSCRIBE message with topic and endpoint</li><li value="3">API sends message </li><li value="4">Broker adds subscription to connection or backing queue based on subscription endpoint </li><li value="5">Broker can send SUBACK.</li></ol></li>
                                                            </ol>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><u>Find out more about the <span class="mc-variable Product-Names.pubsub_brand_only variable">PubSub+</span> components that are involved</u>
                                                            </p>
                                                            <ul xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                                                <li><a href="Core-Concepts-Solace-API-Concepts.htm" class="link-internal">Solace API</a>: An overview of Solace API fundamentals.</li>
                                                                <li><a href="API-Developer-Guide/Publishing-Guaranteed-Messages.htm" class="link-internal">Producer AD&#160;Flow</a>: A client application can publish Guaranteed messages, that is, messages that the client application assigns a Persistent or Non&#8209;Persistent delivery mode to Queue or Topic destinations.</li>
                                                                <li><a href="API-Developer-Guide/Receiving-Guaranteed-Messages.htm" class="link-internal">Consumer AD&#160;Flow</a>: To receive Guaranteed messages, a client must create a consumer Flow within a Session, and bind that flow to an endpoint on an event broker that messages are published or attracted to.</li>
                                                                <li><a href="../Security/Configuring-Client-Profiles.htm" class="link-internal">Client Profile</a>: Client profiles are associated with client username accounts so that you can easily apply common configurations to groups of clients.</li>
                                                                <li><a href="../Security/ACL-Overview.htm" class="link-internal">ACL Profile</a>: After a client is successfully authenticated, the ACL profile assigned to the client username used by the client, or the LDAP the authorization groups that the client belongs to (when LDAP authorization is used), is checked.</li>
                                                                <li><a href="../Get-Started/message-vpn.htm" class="MCXref xref">Message VPNs</a>: Message Virtual Private Networks (VPNs) are managed objects on <span class="mc-variable Product-Names.pubsub_brand_only variable">PubSub+</span> event brokers that allow for the segregation of topic space and clients.</li>
                                                                <li><a href="../Get-Started/what-are-topics.htm" class="link-internal">Route</a>: Understand the fundamentals of publishing and subscribing to topics.</li>
                                                                <li><a href="../Security/Configuring-Client-Usernames.htm" class="link-internal">Client Username</a>: A client is only authorized to connect to a Message VPN that is associated with a client username that that client has been assigned.</li>
                                                                <li><a href="../Messaging/Guaranteed-Msg/Basic-Guaranteed-Messsaging-Operation.htm" class="link-internal">Queue</a>: Basic operation of guaranteed messaging.</li>
                                                            </ul>
                                                            <h3 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><a name="Message2"></a>SMF Component Operations</h3>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">In this section we're going to elaborate on the steps shown in the process flow diagram. </p>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">As we previously noted, <a href="#Steps" class="MCXref xref">Steps 1 - 5</a> deal with the operations the application and event broker go through to establish a connection and get ready for event messaging. The following sections provide more information on those steps:</p>
                                                            <ul xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                                                <li><a href="#Instanti" class="MCXref xref">Instantiating the Solace API and creating a Solace Session </a>
                                                                </li>
                                                                <li><a href="#TCP" class="MCXref xref">TCP Session properties</a>
                                                                </li>
                                                                <li><a href="#TCP2" class="MCXref xref">TCP Connection</a>
                                                                </li>
                                                                <li><a href="#Broker" class="MCXref xref">Broker authorizes connection</a>
                                                                </li>
                                                            </ul>
                                                            <h4 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><a name="Instanti"></a>Instantiating the <span class="mc-variable Variables.CompanyName variable">Solace</span> API and creating a <span class="mc-variable Variables.CompanyName variable">Solace</span> Session </h4>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Your client applications instantiate the <span class="mc-variable Variables.CompanyName variable">Solace</span> API.  From here they can create <span class="mc-variable Variables.CompanyName variable">Solace</span> Contexts (which create a worker thread for event processing), and, subsequently, a Solace Session to connect to the  broker.  You have the flexibility to control the threading model by deciding how many sessions to add to a context.  You can have multiple sessions per context, but only one context per session.  If you need more threads to handle a single session, you'll need to pass event processing into an application worker thread pool.  Also, a single session can only connect to a single broker instance at a time. </p>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">The Solace Session connection opens a TCP flow-controlled, bi-directional, connection from your application to the broker.  This bi-directional session is the foundation of all communications for producers and consumers to send and receive messages for all Message Exchange Patterns (MEPs).</p>
                                                            <h4 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><a name="TCP"></a>TCP Session properties</h4>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Fundamental properties of the TCP session are controlled via API session properties. This includes properties such as TCP (and possibly application) buffer sizes, and connection and reconnection behaviors.  The session properties dictate the type of connection, be it plain-text, compressed , or encrypted. Finally, session properties can control application keep-alives from the client to the broker, which are used to detect connection failures.</p>
                                                            <h4 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><a name="TCP2"></a>TCP Connection</h4>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Now that we've discussed how an application connects, let's talk about the connection itself and its behavior.  </p>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">As previously mentioned, every connection that sends or receives data is a stateful bi-directional TCP connection.  On top of the TCP connection is a messaging layer session, which begins with a connect message, or a data message that contains credential headers that are used during authentication, which is discussed in <a href="../Security/Client-Authentication.htm" class="MCXref xref">Client Authentication</a>.  Based on destination port and connection header properties in the connection request, the broker will expect Session properties such as compression, encryption, and so on.</p>
                                                            <h4 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><a name="Broker"></a>Broker authorizes connection</h4>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Once a session is connected to the required services and authenticated, we move on to the authorization stage.  Based on the client-username in the connection credentials, two profiles are applied: the Client Profile and the ACL Profile.</p>
                                                            <ul xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                                                <li>The Client Profile sets the broker resources the client can access. This includes configuration options like the ability to send and receive persistent messages, the ability to create queues, and set how many system resource buffers the client’s connection can consume. For more information, refer to <a href="../Security/Configuring-Client-Profiles.htm" class="MCXref xref">Configuring Client Profiles</a>.</li>
                                                                <li>The ACL Profile defines which data events the client can produce and consume. For more information refer to <a href="../Security/Granting-Clients-Access.htm" class="MCXref xref">Controlling Client Access with ACL Profiles</a>.</li>
                                                            </ul>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><a href="#Steps2" class="MCXref xref">Steps 6, 7, 9 and 10</a> focus on operations associated with sending and receiving event messages. You can find background information about those steps discussed below in <a href="#Event" class="MCXref xref">Event processing Detail</a>.</p>
                                                            <h4 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><a name="Event"></a>Event processing Detail</h4>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Now that we have an authenticated and authorized client connection, we're ready to send and receive messages. </p>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">For Direct event messaging this is quite simple, the client API contains a publish method to publish directly over the messaging session to send events and a subscribe directly to the messaging session connection to receive events.  There are no messaging layer acknowledgments, timers, or re-transmissions, there are only TCP layer acknowledgments and retransmissions.  If the TCP connection fails, and the messaging session is lost, then the events are also lost.</p>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">For Persistent event messaging things are a bit different in that there is messaging layer windowing, timers, acknowledgments, and retransmissions. This implies there's another layer of statefulness associated with persistent event publish and consumption. Each consumer state machine encapsulates an endpoint flow in the client API, and a Queue / Endpoint binding on the broker. These flows contain an endpoint, window, available window, last message sent, and last message acknowledged. This information allows the client to reconnect across sessions, and continue publish / consumption where the last session left off. If the Client-Profile allows for publishing persistent messages, there's at least one producer flow to allow publishing clients to send persistent message. If the Client-Profile allows for consuming persistent messages, there's a consumer flow per endpoint.</p>
                                                            <h2 class="with-rule" xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><a name="MQTT"></a>MQTT</h2>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"> Based on our understanding of <a href="#SMF" class="link-internal">SMF's</a> operation, let's now look at how the MQTT service makes use of the PubSub+ event broker's messaging components to move data from an MQTT producer to the broker, and from the broker to MQTT consumers. First, we'll look at the <a href="#Differen2" class="MCXref xref">Differences between MQTT and SMF</a>, and then examine the <a href="#MQTT2" class="MCXref xref">MQTT Process Flow</a>.</p>
                                                            <h3 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><a name="Differen2"></a>Differences between MQTT and SMF</h3>
                                                            <ul xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                                                <li><b>VPN</b>
                                                                </li>
                                                                <p>There is no concept of a message VPN in MQTT, so for each unique message VPN created a new listen port needs to be assigned for each variant of MQTT traffic, MQTT/TCP, MQTT/WS, MQTT/TLS, MQTT/WSS.</p>
                                                                <li><b>QoS</b>
                                                                </li>
                                                                <p>For QoS0 and QoS1 application publication, the system behaves as it does for SMF direct and persistent messaging, where QoS0 is like direct and QoS1 is like persistent.  Qos2 published messages are processed as QoS1 messages by the broker. For QoS1 subscriptions, a unique, dynamically created queue is created for each MQTT session, and subscriptions are added to that queue. This allows the queue to attract events, and the MQTT consumer can retrieve these events once they connect. Also, there's no handshake between the API and broker to learn the last message, nor is there an ACK received on re-connect, which can lead to additional re-transmissions.</p>
                                                            </ul>
                                                            <h3 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><a name="MQTT2"></a>MQTT Process Flow</h3>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">In the diagram below, follow the steps from establishing a connection to the event broker through to starting the data flow.</p>
                                                            <div class="responsive-maps" xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><a class="MCPopupThumbnailLink MCPopupThumbnailPopup" href="../Resources/Images/API/Component-Map-MQTT.png" data-mc-popup-alt=""><img class="MCPopupThumbnail img" data-mc-width="2208" data-mc-height="1968" src="../Resources/Images/API/Component-Map-MQTT_thumb_500_0.png" alt="" tabindex="" /></a>
                                                            </div>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">The circled numbers in the diagram correspond to the numbered steps described in detail as follows:</p>
                                                            <h4 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Steps 1 - 4</h4>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">These steps deal with the operations the application and event broker undergo to establish a connection and get ready for event messaging.</p>
                                                            <ol xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                                                <li value="1">Application initiates MQTT SDK:
                <ol style="list-style-type: lower-alpha;"><li value="1">New MqttClient(host, clientName); </li><li value="2">Application Create and config session, broker DNS:Port, TLS, Compression</li></ol></li>
                                                                <li value="2">Application connect session, Username, password:
                <ol style="list-style-type: lower-alpha;"><li value="1"> mqttClient.connect(connOpts);</li><li value="2"> Host initiates TCP session </li><li value="3">c. Broker receives messaging layer connect.</li></ol></li>
                                                                <li value="3">
                                                                    <p>Broker authenticates connections</p>
                                                                </li>
                                                                <li value="4">
                                                                    <p>Broker authorizes connection</p>
                                                                </li>
                                                            </ol>
                                                            <h4 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Steps 5 and 7</h4>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">These steps focus on operations associated with sending and receiving event messages</p>
                                                            <ol xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                                                <li value="5">
                                                                    <p>When a message is published: </p>
                                                                    <ol style="list-style-type: lower-alpha;">
                                                                        <li value="1">mqttClient.publish(topic, message);</li>
                                                                        <li value="2">Application sends PUBLISH message</li>
                                                                        <li value="3">SDK store message in memory or to disk</li>
                                                                        <li value="4">SDK sends message</li>
                                                                        <li value="5">Broker receives message, routes and persists according to QoS</li>
                                                                        <li value="6"> Broker sends PUBACK</li>
                                                                        <li value="7"> SDK deletes message</li>
                                                                    </ol>
                                                                </li>
                                                                <li value="7">
                                                                    <p>When Broker sends a message:</p>
                                                                    <ol style="list-style-type: lower-alpha;">
                                                                        <li value="1">Broker sends PUBLISH message and decrements available window</li>
                                                                        <li value="2">Client SDK receives message and passes to application</li>
                                                                        <li value="3">Application sends PUBACK when finished with message</li>
                                                                        <li value="4">Broker receives PUBACK and deletes message from queue</li>
                                                                    </ol>
                                                                </li>
                                                            </ol>
                                                            <h4 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Step 6</h4>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">This step deals with the establishment of application subscriptions.</p>
                                                            <ol xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                                                <li value="6">
                                                                    <p>When Applications subscribe:</p>
                                                                    <ol style="list-style-type: lower-alpha;">
                                                                        <li value="1">mqttClient.subscribe(topic, 1);</li>
                                                                        <li value="2">Application sends SUBSCRIBE message</li>
                                                                        <li value="3">SDK sends message</li>
                                                                        <li value="4"> Broker adds subscription to connection or backing queue based on subscription QoS</li>
                                                                        <li value="5">Broker sends SUBACK</li>
                                                                    </ol>
                                                                </li>
                                                            </ol>
                                                            <p style="font-weight: bold;" xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><u style="font-weight: normal;">Find out more about the <span class="mc-variable Product-Names.pubsub_brand_only variable">PubSub+</span> components that are involved</u>
                                                            </p>
                                                            <ul xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                                                <li><a href="../Security/Configuring-Client-Profiles.htm" class="link-internal">Client Profile</a>: Client profiles are associated with client username accounts so that you can easily apply common configurations to groups of clients.</li>
                                                                <li><a href="../Security/ACL-Overview.htm" class="link-internal">ACL Profile</a>: After a client is successfully authenticated, the ACL profile assigned to the client username used by the client, or the LDAP the authorization groups that the client belongs to (when LDAP authorization is used), is checked.</li>
                                                                <li><a href="../Get-Started/message-vpn.htm" class="MCXref xref">Message VPNs</a>: Message Virtual Private Networks (VPNs) are managed objects on <span class="mc-variable Product-Names.pubsub_brand_only variable">PubSub+</span> event brokers that allow for the segregation of topic space and clients.</li>
                                                                <li><a href="../Get-Started/what-are-topics.htm" class="link-internal">Route</a>: Understand the fundamentals of publishing and subscribing to topics.</li>
                                                                <li><a href="../Security/Configuring-Client-Usernames.htm" class="link-internal">Client Username</a>: A client is only authorized to connect to a Message VPN that is associated with a client username that that client has been assigned.</li>
                                                                <li><a href="../Messaging/Guaranteed-Msg/Basic-Guaranteed-Messsaging-Operation.htm" class="link-internal">Queue</a>: Basic operation of guaranteed messaging.</li>
                                                                <li><a href="https://www.eclipse.org/paho/files/javadoc/index.html" target="_blank" class="link-offsite">MQTT&#160;Client</a>: Learn more about MQTT Client at the Eclipse Paho JAVA documentation.</li>
                                                            </ul>
                                                            <h3 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><a name="Next"></a>Next Steps</h3>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">For more information on how to use MQTT with <span class="mc-variable Product-Names.pubsub_brand_only variable">PubSub+</span>, refer to the <a href="MQTT/MQTT-get-started.htm" class="MCXref xref">MQTT</a> pages in the <a href="Open-APIs-Protocols.htm" class="MCXref xref">Open APIs &amp; Protocols</a> section.</p>
                                                            <h2 class="with-rule" xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><a name="AMQP"></a>AMQP</h2>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">The walk-through discussed in this section is a little different than that shown in previous ones. Those were based on Java. This one is based on Node.js. For AMQP Java, the JMS2.0 programing interface seems to be standard and would be the preferred option. First, we'll look at the <a href="#Differen4" class="MCXref xref">Differences between Solace implementation of AMQP and SMF</a>, and then examine the <a href="#AMQP2" class="MCXref xref">AMQP Process Flow</a>.</p>
                                                            <h3 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><a name="Differen4"></a>Differences between Solace implementation of AMQP and SMF</h3>
                                                            <ul xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                                                <li><b>Durability</b>
                                                                </li>
                                                                <p>Currently PubSub+'s AMQP solution processes only  persistent messages.</p>
                                                                <li><b>VPN</b>
                                                                </li>
                                                                <p>There's no concept of a Message VPN in AMQP, so for each unique message VPN created, a new listen port needs to be assigned for AMQP/TCP and AMQP/TLS.</p>
                                                            </ul>
                                                            <h3 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><a name="AMQP2"></a>AMQP Process Flow</h3>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">In the diagram below, follow the steps from establishing a connection to the event broker through to starting the data flow.</p>
                                                            <div class="responsive-maps" xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><a class="MCPopupThumbnailLink MCPopupThumbnailPopup" href="../Resources/Images/API/Component-Map-AMQP.png" data-mc-popup-alt=""><img class="MCPopupThumbnail img" data-mc-width="2112" data-mc-height="1920" src="../Resources/Images/API/Component-Map-AMQP_thumb_500_0.png" alt="" tabindex="" /></a>
                                                            </div>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">The circled numbers in the diagram correspond to the numbered steps described in detail as follows:</p>
                                                            <h4 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Steps 1 - 6</h4>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">These steps deal with the operations the app and broker undergo to establish a connection and get ready for event messaging.</p>
                                                            <ol xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                                                <li value="1">
                Application creates an AMQ10 Client:
                <p> a. new AMQP.Client(AMQP.Policy.merge({defaultSubjects : false}));</p></li>
                                                                <li value="2">Application connects the client:               <ol style="list-style-type: lower-alpha;"><li value="1">amqpClient.connect(pubsub+broker)</li></ol></li>
                                                                <li value="3">Application Node initiates TCP session:
                <ol style="list-style-type: lower-alpha;"><li value="1">Host initiates TCP session                    </li><li value="2">Connect opens incoming and outgoing channels for the client connection                    </li></ol></li>
                                                                <li value="4">Broker authenticates connection, (Automatically from Step 3).
            </li>
                                                                <li value="5">Broker authorizes connection, (Automatic from 4):
                <ol style="list-style-type: lower-alpha;"><li value="1">Broker sends CONNECT ACK</li></ol></li>
                                                                <li value="6">Application creates Sender:
                <ol style="list-style-type: lower-alpha;"><li value="1">amqpClient.createSender(queueName)</li><li value="2">SDK creates a senderSession</li></ol></li>
                                                            </ol>
                                                            <h4 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Steps 8 and 9</h4>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">These steps focus on operations associated with sending and receiving event messages.</p>
                                                            <ol xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                                                <li value="8">Application create Receiver.
                <ol style="list-style-type: lower-alpha;"><li value="1">amqpClient.createReceiver(queueName)</li><li value="2">SDK creates a receiverSession</li></ol></li>
                                                                <li value="9">Application starts callback for messages and errors:
                <ol style="list-style-type: lower-alpha;"><li value="1">amqpReceiver.on('message',...)</li><li value="2">data placed in AMQP frame assigned a transferId</li><li value="3"> data sent then increment its next-outgoing-id, decrement its remote-incoming-window</li><li value="4">SDK will ack frame with disposition frame</li></ol></li>
                                                            </ol>
                                                            <h4 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Step 7</h4>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">This step deals with the establishment of application subscriptions.</p>
                                                            <ol xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                                                <li value="7">When a message is published:
                <ol style="list-style-type: lower-alpha;"><li value="1"> amqpSender.send(message)</li><li value="2"> data placed in AMQP frame assigned a transferId</li><li value="3">data sent then increment its next-outgoing-id, decrement its remote-incoming-window</li><li value="4">Broker will ack frame with disposition frame</li></ol></li>
                                                            </ol>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><u>Find out more about the <span class="mc-variable Product-Names.pubsub_brand_only variable">PubSub+</span> components that are involved</u>
                                                            </p>
                                                            <ul xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                                                <li><a href="../Security/Configuring-Client-Profiles.htm" class="link-internal">Client Profile</a>: Client profiles are associated with client username accounts so that you can easily apply common configurations to groups of clients.</li>
                                                                <li><a href="../Security/ACL-Overview.htm" class="link-internal">ACL Profile</a>: After a client is successfully authenticated, the ACL profile assigned to the client username used by the client, or the LDAP the authorization groups that the client belongs to (when LDAP authorization is used), is checked.</li>
                                                                <li><a href="../Get-Started/message-vpn.htm" class="MCXref xref">Message VPNs</a>: Message Virtual Private Networks (VPNs) are managed objects on <span class="mc-variable Product-Names.pubsub_brand_only variable">PubSub+</span> event brokers that allow for the segregation of topic space and clients.</li>
                                                                <li><a href="../Get-Started/what-are-topics.htm" class="link-internal">Route</a>: Understand the fundamentals of publishing and subscribing to topics.</li>
                                                                <li><a href="../Security/Configuring-Client-Usernames.htm" class="link-internal">Client Username</a>: A client is only authorized to connect to a Message VPN that is associated with a client username that that client has been assigned.</li>
                                                                <li><a href="../Messaging/Guaranteed-Msg/Basic-Guaranteed-Messsaging-Operation.htm" class="link-internal">Queue</a>: Basic operation of guaranteed messaging.</li>
                                                            </ul>
                                                            <h3 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><a name="Next2"></a>Next Steps</h3>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">For more information on how to use AMQP with <span class="mc-variable Product-Names.pubsub_brand_only variable">PubSub+</span>, refer to the <a href="AMQP/AMQP-get-started.htm" class="MCXref xref">AMQP </a> pages in the <a href="Open-APIs-Protocols.htm" class="MCXref xref">Open APIs &amp; Protocols</a> section.</p>
                                                            <h2 class="with-rule" xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><a name="JMS"></a>JMS</h2>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Now that we've had a look at <a href="#SMF" class="link-internal">SMF's</a> operation, we're in a position to use that to understand the twist JMS has on the operation of the broker's components. First, we'll look at the <a href="#Differen" class="MCXref xref">Differences between JMS and SMF</a>, and then examine the <a href="#JMS2" class="MCXref xref">JMS Process Flow</a>.</p>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">One other thing we'll point out is that the differences between JMS over SMF documented in this section are also the differences between JMS over AMQP.</p>
                                                            <h3 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><a name="Differen"></a>Differences between JMS and SMF</h3>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">You should note that the differences shown here, the differences between JMS over SMF, are also the differences between JMS over AMQP.</p>
                                                            <ul xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                                                <li><b>Persistent and Non-Persistent publisher flows</b>
                                                                </li>
                                                                <p>The JMS specification mandates synchronous and asynchronous data movement.  All messages published as persistent are sent on a publisher flow with window of one and are synchronous; non-persistent messages can be sent within a configurable window on a second publisher flow.</p>
                                                                <li><b>JNDI</b>
                                                                </li>
                                                                <p>To use a broker as the JNDI server, the JMS API lazily opens a second session to do JNDI lookups.  Although this session isn't used to send data, it could be required to resolve JNDI names of the endpoints, and so on to complete the data send and receive functions.</p>
                                                                <p>Further Information on JNDI service can found in <a href="Solace-JMS-API/Managing-Solace-JNDI-Objects.htm" class="MCXref xref">Solace JNDI Objects</a>.</p>
                                                                <li><b>Topic Endpoints</b>
                                                                </li>
                                                                <p>Although SMF supports topic endpoints, its topic-to-queue mapping features are much more powerful and are the recommended approach. JMS doesn't have a programmatic interface for topic-to-queue mapping and therefore recommends topic endpoints.</p>
                                                                <p> For more information, refer to <a href="../Messaging/Guaranteed-Msg/Topic-Endpoints.htm" class="MCXref xref">Topic Endpoints</a>.</p>
                                                            </ul>
                                                            <h3 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><a name="JMS2"></a>JMS Process Flow</h3>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">In the diagram below, follow the steps from establishing a connection to the event broker through to starting the data flow.</p>
                                                            <div class="responsive-maps" xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><a class="MCPopupThumbnailLink MCPopupThumbnailPopup" href="../Resources/Images/API/Component-Map-JMS.png" data-mc-popup-alt=""><img class="MCPopupThumbnail img" data-mc-width="2208" data-mc-height="2006" src="../Resources/Images/API/Component-Map-JMS_thumb_500_0.png" alt="" tabindex="" /></a>
                                                            </div>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">The circled numbers in the diagram correspond to the numbered steps described in detail as follows:</p>
                                                            <h4 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Steps 1 - 5 </h4>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">These steps deal with the operations the app and broker go through to establish a connection and get ready for event messaging.</p>
                                                            <ol xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                                                <li value="1">Application initiates JMS SDK which starts a single Solace Context.
                <ol style="list-style-type: lower-alpha;"><li value="1"> Application Creates initialContext , initialContext(env) with username, password, broker URL</li></ol></li>
                                                                <li value="2">(Optional, can be programmatically created) Application does JNDI lookups to find context factory information, initialContext.lookup(CONNECTION_FACTORY_JNDI_NAME):              <ol style="list-style-type: lower-alpha;"><li value="1">This provides information such as messaging credentials and default message QoS, TLS, Compression</li></ol></li>
                                                                <li value="3">Application connect connection to broker, connectionFactory.createConnection():
                <ol style="list-style-type: lower-alpha;"><li value="1">Host initiates TCP session</li><li value="2">Broker receives messaging layer connect</li></ol></li>
                                                                <li value="4">Broker authenticates connection            </li>
                                                                <li value="5">Broker authorizes connection            </li>
                                                            </ol>
                                                            <h4 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Steps 6, 7, 8, 10, and 11</h4>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">These steps focus on operations associated with sending and receiving event messages.</p>
                                                            <ol xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                                                <li value="6">Application does JNDI lookups to find endpoint names, initialContext.lookup(QUEUE_JNDI_NAME).
            </li>
                                                                <li value="7">Application SDK creates producer:
                <ol style="list-style-type: lower-alpha;"><li value="1"> session.createProducer(..); </li><li value="2">SDK sends last messageID sent and last messageID ACK received</li><li value="3">Broker sends last MessageID receives and last messageID ACK sent</li><li value="4">Application maintains this state as message flow to allow for correct re-transmissions as required on reconnects</li></ol></li>
                                                                <li value="8">
                                                                    <p>When producer publishes a message:</p>
                                                                    <ol style="list-style-type: lower-alpha;">
                                                                        <li value="1">producer.send(topic, message, DeliveryMode, Priority, TTL)</li>
                                                                        <li value="2"> Application sdk sends message and decrements available window by one</li>
                                                                        <li value="3">Event broker receives, routes and persists message</li>
                                                                        <li value="4">Event broker sends ACK</li>
                                                                        <li value="5"> Application SDK receives ACK and increments available window by one</li>
                                                                    </ol>
                                                                </li>
                                                                <li value="10">(Optional can poll for message) Application create listener:
                <ol style="list-style-type: lower-alpha;"><li value="1"> consumer.setMessageListener(..)</li></ol></li>
                                                                <li value="11">
                                                                    <p>Application starts connection, which starts all consumers:</p>
                                                                    <ol style="list-style-type: lower-alpha;">
                                                                        <li value="1">connection.start()</li>
                                                                        <li value="2">Broker sends message and decrements available window by one</li>
                                                                        <li value="3">Client SDK receives message and passes to application</li>
                                                                        <li value="4">Client SDK sends transport ACK</li>
                                                                        <li value="5">Broker receives ACK and increments available window by one</li>
                                                                        <li value="6"> Application sends Application ACK when finished with message</li>
                                                                        <li value="7">Broker receives Application ACK and deletes message from queue.</li>
                                                                    </ol>
                                                                </li>
                                                            </ol>
                                                            <h4 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Step 9</h4>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">This step deals with the establishment of application subscriptions.</p>
                                                            <ol xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                                                <li value="9">(Optional for Topic Endpoints only) Application adds subscriptions:
                <ol style="list-style-type: lower-alpha;"><li value="1">session.createConsumer(topic);</li><li value="2">Application sends SUBSCRIBE message with topic and endpoint</li><li value="3">SDK sends message</li><li value="4"> Broker adds subscription to connection or topic endpoint</li><li value="5">Broker can send SUBACK</li></ol></li>
                                                            </ol>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">For AMQP, context and queue names are created programmatically, and an example how to create them is shown <a href="https://tutorials.solace.dev/java-amqp-qpid-jms2/publish-subscribe/" class="link-internal" target="_blank">here</a>.</p>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><u>Find out more about the <span class="mc-variable Product-Names.pubsub_brand_only variable">PubSub+</span> components that are involved</u>
                                                            </p>
                                                            <ul xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                                                <li><a href="../Security/Configuring-Client-Profiles.htm" class="link-internal">Client Profile</a>: Client profiles are associated with client username accounts so that you can easily apply common configurations to groups of clients.</li>
                                                                <li><a href="../Security/ACL-Overview.htm" class="link-internal">ACL Profile</a>: After a client is successfully authenticated, the ACL profile assigned to the client username used by the client, or the LDAP the authorization groups that the client belongs to (when LDAP authorization is used), is checked.</li>
                                                                <li><a href="../Get-Started/message-vpn.htm" class="MCXref xref">Message VPNs</a>: Message Virtual Private Networks (VPNs) are managed objects on <span class="mc-variable Product-Names.pubsub_brand_only variable">PubSub+</span> event brokers that allow for the segregation of topic space and clients.</li>
                                                                <li><a href="../Get-Started/what-are-topics.htm" class="link-internal">Route</a>: Understand the fundamentals of publishing and subscribing to topics.</li>
                                                                <li><a href="../Security/Configuring-Client-Usernames.htm" class="link-internal">Client Username</a>: A client is only authorized to connect to a Message VPN that is associated with a client username that that client has been assigned.</li>
                                                                <li><a href="../Messaging/Guaranteed-Msg/Basic-Guaranteed-Messsaging-Operation.htm" class="link-internal">Queue</a>: Basic operation of guaranteed messaging.</li>
                                                                <li><a href="Solace-JMS-API/Creating-Durable-Topic-S.htm" class="link-internal">Topic Endpoint</a>: Creating durable topic subscribers.</li>
                                                                <li><a href="Solace-JMS-API/Creating-Message-Consume.htm" class="link-internal">Subscription</a>: You can create message consumers to receive messages from a queue or for a specific topic.</li>
                                                                <li><a href="API-Developer-Guide/Publishing-Guaranteed-Messages.htm" class="link-internal">Producer AD&#160;Flow</a>: A client application can publish Guaranteed messages, that is, messages that the client application assigns a Persistent or Non&#8209;Persistent delivery mode to Queue or Topic destinations.</li>
                                                                <li><a href="https://docs.oracle.com/javaee/7/api/javax/jms/JMSContext.html" target="_blank" class="link-offsite">JMS Context</a>: A JMSContext is the main interface in the simplified JMS API introduced for JMS 2.0.</li>
                                                                <li><a href="https://docs.oracle.com/javaee/7/api/javax/jms/Connection.html" target="_blank" class="link-offsite">JMS Connection</a>: A Connection object is a client's active connection to its JMS provider. It typically allocates provider resources outside the Java virtual machine (JVM).</li>
                                                                <li><a href="https://docs.oracle.com/javaee/7/api/javax/jms/Session.html" target="_blank" class="link-offsite">JMS Session</a>: A Session object is a single-threaded context for producing and consuming messages.</li>
                                                            </ul>
                                                            <h3 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><a name="Next3"></a>Next Steps</h3>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">For more information on how to use JMS with <span class="mc-variable Product-Names.pubsub_brand_only variable">PubSub+</span>, refer to the <a href="Solace-JMS-API/jms-get-started-open.htm" class="MCXref xref">JMS API</a> pages in the <a href="Open-APIs-Protocols.htm" class="MCXref xref">Open APIs &amp; Protocols</a> section.</p>
                                                            <h2 class="with-rule" xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><a name="REST"></a>REST</h2>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">In the previous sections, we looked at <a href="#SMF" class="link-internal">SMF's</a> operation along with <a href="#JMS" class="MCXref xref">JMS</a> and <a href="#MQTT" class="MCXref xref">MQTT</a>, all driven by messaging APIs. We'll now take a look at how REST's standards based HTTP exchange patterns work with the event broker's components. First, we'll look at the <a href="#Differen3" class="MCXref xref">Differences between REST and SMF</a>, and then examine the <a href="#REST2" class="MCXref xref">REST Process Flow</a>.</p>
                                                            <h3 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><a name="Differen3"></a>Differences between REST and SMF</h3>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">The REST messaging isn't driven by a messaging API, but instead by standards-based HTTP exchange patterns. However, at its core, the event broker treats REST messages exactly the same with respect to authentication, authorization, routing, and persistence. Here are the significant list of differences between the base SMF and REST:</p>
                                                            <ul xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                                                <li><b>Publish</b>
                                                                </li>
                                                                <p>All API publishes are HTTP POSTs with expected ACKs. The POSTs are not pipelined in that each must carry the required authentication header and are individually authenticated. This is different than a messaging-orientated protocol where the connection is authenticated with a connect messages containing authentication credentials and then the messages are pipelined on the connection.</p>
                                                                <li><b>Subscription</b>
                                                                </li>
                                                                <p>There is no subscription type method in HTTP.  All subscriptions are done by administrative actions.</p>
                                                                <li><b>Event delivery to consuming applications</b>
                                                                </li>
                                                                <p>A REST delivery endpoint is used to manage the connection from the broker to the application and deliver events via standard web-hooks HTTP.</p>
                                                            </ul>
                                                            <h3 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><a name="REST2"></a>REST Process Flow</h3>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">In the diagram below, follow the steps from establishing a connection to the event broker through to starting the data flow.</p>
                                                            <div class="responsive-maps" xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><a class="MCPopupThumbnailLink MCPopupThumbnailPopup" href="../Resources/Images/API/Component-Map-REST.png" data-mc-popup-alt=""><img class="MCPopupThumbnail img" data-mc-width="2198" data-mc-height="1968" src="../Resources/Images/API/Component-Map-REST_thumb_500_0.png" alt="" tabindex="" /></a>
                                                            </div>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">The circled numbers in the diagram correspond to the numbered steps described in detail as follows:</p>
                                                            <h4 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Steps 1 - 6</h4>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">These steps deal with the operations the app and broker undergo to establish a connection and get ready for event messaging.</p>
                                                            <ol xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                                                <li value="1">
                                                                    <p>Application Creates REST message: </p>
                                                                    <ol style="list-style-type: lower-alpha;">
                                                                        <li value="1">Add Authentication Header</li>
                                                                        <li value="2">Add Content-Type Header</li>
                                                                        <li value="3">Add Solace-Reply-Wait-Time-In-ms if reply is required</li>
                                                                        <li value="4">Add Message Body</li>
                                                                    </ol>
                                                                </li>
                                                                <li value="2">
                                                                    <p>Application Sends REST Message:</p>
                                                                    <ol style="list-style-type: lower-alpha;">
                                                                        <li value="1">URI includes Solace broker URI with destination topic or queue</li>
                                                                    </ol>
                                                                </li>
                                                                <li value="3">
                                                                    <p>Broker authenticates (Automatic from 2.):</p>
                                                                    <ol style="list-style-type: lower-alpha;">
                                                                        <li value="1"> URI includes Solace broker URI with destination topic or queue</li>
                                                                    </ol>
                                                                </li>
                                                                <li value="4">
                                                                    <p>Broker authorizes (Automatic from 2.)</p>
                                                                </li>
                                                                <li value="5">
                                                                    <p>Broker routes (Automatic from 2.):</p>
                                                                    <ol style="list-style-type: lower-alpha;">
                                                                        <li value="1">Based on URI</li>
                                                                    </ol>
                                                                </li>
                                                                <li value="6">
                                                                    <p>Broker persists:</p>
                                                                    <ol style="list-style-type: lower-alpha;">
                                                                        <li value="1">Broker ACKS (200 OK) either empty payload or reply body</li>
                                                                    </ol>
                                                                </li>
                                                            </ol>
                                                            <h4 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Steps 8 and 9</h4>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">These steps focus on operations associated with sending and receiving event messages.</p>
                                                            <ol xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                                                <li value="8">
                                                                    <p>Broker opens connection(s) to application via web-hooks:</p>
                                                                    <ol style="list-style-type: lower-alpha;">
                                                                        <li value="1"> Broker opens connection to application. b. Broker send message with HTTP POST</li>
                                                                    </ol>
                                                                </li>
                                                                <li value="9">
                                                                    <p>Application API ACK message:</p>
                                                                    <ol style="list-style-type: lower-alpha;">
                                                                        <li value="1">Broker deletes message</li>
                                                                    </ol>
                                                                </li>
                                                            </ol>
                                                            <h4 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Step 7</h4>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">This step deals with the establishment of application subscriptions.</p>
                                                            <ol xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                                                <li value="7">Application Subscribes:<ol style="list-style-type: lower-alpha;"><li value="1">This is not done programmatically. Administrators bind RDP to Queue containing subscriptions</li></ol></li>
                                                            </ol>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><u>Find out more about the <span class="mc-variable Product-Names.pubsub_brand_only variable">PubSub+</span> components that are involved</u>
                                                            </p>
                                                            <ul xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                                                <li><a href="../Security/Configuring-Client-Profiles.htm" class="link-internal">Client Profile</a>: Client profiles are associated with client username accounts so that you can easily apply common configurations to groups of clients.</li>
                                                                <li><a href="../Security/ACL-Overview.htm" class="link-internal">ACL Profile</a>: After a client is successfully authenticated, the ACL profile assigned to the client username used by the client, or the LDAP the authorization groups that the client belongs to (when LDAP authorization is used), is checked.</li>
                                                                <li><a href="../Get-Started/message-vpn.htm" class="MCXref xref">Message VPNs</a>: Message Virtual Private Networks (VPNs) are managed objects on <span class="mc-variable Product-Names.pubsub_brand_only variable">PubSub+</span> event brokers that allow for the segregation of topic space and clients.</li>
                                                                <li><a href="../Get-Started/what-are-topics.htm" class="link-internal">Route</a>: Understand the fundamentals of publishing and subscribing to topics.</li>
                                                                <li><a href="../Security/Configuring-Client-Usernames.htm" class="link-internal">Client Username</a>: A client is only authorized to connect to a Message VPN that is associated with a client username that that client has been assigned.</li>
                                                                <li><a href="../Messaging/Guaranteed-Msg/Basic-Guaranteed-Messsaging-Operation.htm" class="link-internal">Queue</a>: Basic operation of guaranteed messaging.</li>
                                                            </ul>
                                                            <h3 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><a name="Next4"></a>Next Steps</h3>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">For more information on how to use REST with <span class="mc-variable Product-Names.pubsub_brand_only variable">PubSub+</span>, refer to the <a href="REST/REST-get-start.htm" class="MCXref xref">REST</a> pages in the <a href="Open-APIs-Protocols.htm" class="MCXref xref">Open APIs &amp; Protocols</a> section.</p>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="no-print">
                                            <div><a href="#" id="docsFeedbackTrigger" class="docs-issue-collector">Provide feedback</a>
                                            </div>
                                        </div>
                                        <footer class="my-4 pt-4 text-center no-print">
                                            <div class="footer-txt text-center no-print">
                                                <ul class="list-inline ">
                                                    <li class="list-inline-item text-muted"><a href="../Resources/Documentation-Set.htm" class="doc-set-footer-link MCXref xref xrefdoc-set-footer-link">Documentation Coverage</a>: <span class="mc-variable Variables.DocumentSetNumber variable">2024.09.16.0001</span></li>
                                                    <li class="list-inline-item text-muted">Last Updated: <span class="mc-variable Variables.MonthDayYear variable">September 16, 2024</span></li>
                                                    <li class="list-inline-item text-muted" style="font-size:13px;"> ©  <span class="mc-variable Variables.CompanyNameLegal variable">Solace Corporation</span></li>
                                                </ul>
                                            </div>
                                            <div class="footer-icons">
                                                <ul class="list-inline">
                                                    <li class="list-inline-item"><a href="https://facebook.com/solacedotcom" target="_blank" class="social-media-icon"><img src="../Resources/Images/Social-Media/facebook_22x21.png" class="Hyperlinked" alt="Facebook" title="Solace Facebook Page" style="width: 22;height: 21;" /></a>
                                                    </li>
                                                    <li class="list-inline-item"><a href="https://www.linkedin.com/company/20219" target="_blank" class="social-media-icon"><img src="../Resources/Images/Social-Media/LinkedIn_22x21.png" class="Hyperlinked" alt="LinkedIn" title="Solace LinkedIn Page" style="width: 22;height: 21;" /></a>
                                                    </li>
                                                    <li class="list-inline-item"><a href="https://twitter.com/solacedotcom" target="_blank" class="social-media-icon"><img src="../Resources/Images/Social-Media/Twitter_22x21.png" class="Hyperlinked" alt="Twitter" title="Solace Twitter Feed" style="width: 22;height: 21;" /></a>
                                                    </li>
                                                    <li class="list-inline-item"><a href="https://www.youtube.com/user/SolaceSystems" target="_blank" class="social-media-icon"><img src="../Resources/Images/Social-Media/youtube_22x21.png" class="Hyperlinked" alt="YouTube" title="Solace YouTube Channel" style="width: 22;height: 21;" /></a>
                                                    </li>
                                                    <li class="list-inline-item"><a href="https://www.instagram.com/solacedotcom/" target="_blank" class="social-media-icon"><img src="../Resources/Images/Social-Media/instagram_22x21.png" class="Hyperlinked" alt="Instagram" title="Solace Instagram Feed" style="width: 22;height: 21;" /></a>
                                                    </li>
                                                    <li class="list-inline-item"><a href="https://medium.com/solacedotcom" target="_blank" class="social-media-icon"><img src="../Resources/Images/Social-Media/medium_22x21.png" class="Hyperlinked" alt="Medium" title="Solace Medium Blog" style="width: 22;height: 21;" /></a>
                                                    </li>
                                                </ul>
                                            </div>
                                            <div class="footer_link_menu">
                                                <ul class="link_list">
                                                    <li class="link_list_item"><a href="https://solace.com/products/" target="_blank" class="footer-link">Products</a>
                                                    </li>
                                                    <li class="link_list_item"><a href="https://solace.com/company/" target="_blank" class="footer-link">Company</a>
                                                    </li>
                                                    <li class="link_list_item"><a href="https://www.solace.dev/" target="_blank" class="footer-link">Developers</a>
                                                    </li>
                                                    <li class="link_list_item"><a href="https://solace.com/support/" target="_blank" class="footer-link">Support</a>
                                                    </li>
                                                    <li class="link_list_item"><a href="https://solace.com/contact/" target="_blank" class="footer-link">Contact Us</a>
                                                    </li>
                                                </ul>
                                            </div>
                                        </footer>
                                    </div>
                                    <!-- JIRA issue collector -->
                                    <script>/*<![CDATA[*/// Requires jQuery!
jQuery.ajax({
    url: "https://sol-jira.atlassian.net/s/d41d8cd98f00b204e9800998ecf8427e-T/o2joag/b/24/e73395c53c3b10fde2303f4bf74ffbf6/_/download/batch/com.atlassian.jira.collector.plugin.jira-issue-collector-plugin:issuecollector-embededjs/com.atlassian.jira.collector.plugin.jira-issue-collector-plugin:issuecollector-embededjs.js?locale=en-US&collectorId=076e0808",
    type: "get",
    cache: true,
    dataType: "script"
});
window.ATL_JQ_PAGE_PROPS = {
"triggerFunction": function(showCollectorDialog) {
//Requires that jQuery is available!
$("#docsFeedbackTrigger").click(function(e) {
e.preventDefault();
showCollectorDialog();
});
},
fieldValues: {
recordWebInfo: '1', // field Name
recordWebInfoConsent: ['1'] // field Id
}
};
/*]]>*/</script>
                                    <script src="../Resources/Scripts/thumbnail.js">
                                    </script>
                                    <!-- Script for Launching offsite links in new tab -->
                                    <script type="text/javascript">/*<![CDATA[*/$("a[href^='http']").attr("target","_blank");/*]]>*/</script>
                                </div>
                            </div>
                        </div>
                    </div><a data-close="true"></a>
                </div>
            </div>
        </div>
    </body>
</html>