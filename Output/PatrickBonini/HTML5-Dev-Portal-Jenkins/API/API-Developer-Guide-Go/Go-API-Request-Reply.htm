<?xml version="1.0"?>
<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-us" xml:lang="en-us" class="_Skins_HTML5___Side_Navigation" data-mc-search-type="Stem" data-mc-help-system-file-name="Default.xml" data-mc-path-to-help-system="../../" data-mc-has-content-body="True" data-mc-toc-path="[%=System.LinkedTitle%]|[%=System.LinkedTitle%]|[%=System.LinkedTitle%]" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic;Default" data-mc-preload-images="false" data-mc-in-preview-mode="false">
  <head>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
    <meta name="msapplication-config" content="../../Skins/Favicons/browserconfig.xml"/>
    <meta name="viewport" content="width=device-width, initial-scale=1"/>
    <link rel="apple-touch-icon" sizes="180x180" href="../../Skins/Favicons/apple-touch-icon.png"/>
    <link rel="shortcut icon" href="../../Skins/Favicons/favicon-32x32.png"/>
    <link rel="icon" sizes="96x96" href="../../Skins/Favicons/favicon-96x96.png"/>
    <link rel="icon" sizes="32x32" href="../../Skins/Favicons/favicon-32x32.png"/>
    <link rel="icon" sizes="16x16" href="../../Skins/Favicons/favicon-16x16.png"/>
    <meta charset="utf-8"/>
    <meta http-equiv="Cache-control" content="no-cache"/>
    <meta http-equiv="X-UA-Compatible" content="IE=edge"/>
    <title>Request-Reply Messaging in the Go API</title>
    <!-- <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous" /> -->
    <!--style to display feedback button correctly in IE-->
    <!-- Google Tag Manager -->
    <!-- End Google Tag Manager -->
    <!-- links to get the EDA styling to work -->
    <link href="../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" type="text/css" data-mc-generated="True"/>
    <link href="../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" type="text/css" data-mc-generated="True"/>
    <link href="../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" type="text/css" data-mc-generated="True"/>
    <link href="../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" type="text/css" data-mc-generated="True"/>
    <link href="../../Skins/Default/Stylesheets/Components/Tablet.css" rel="stylesheet" type="text/css" data-mc-generated="True"/>
    <link href="../../Skins/Default/Stylesheets/Components/Mobile.css" rel="stylesheet" type="text/css" data-mc-generated="True"/>
    <link href="../../Skins/Default/Stylesheets/Components/Print.css" rel="stylesheet" type="text/css" data-mc-generated="True"/>
    <link href="../../Skins/Fluid/Stylesheets/foundation.6.2.3.css" rel="stylesheet" type="text/css" data-mc-generated="True"/>
    <link href="../../Skins/Fluid/Stylesheets/Styles.css" rel="stylesheet" type="text/css" data-mc-generated="True"/>
    <link href="../../Skins/Fluid/Stylesheets/Tablet.css" rel="stylesheet" type="text/css" data-mc-generated="True"/>
    <link href="../../Skins/Fluid/Stylesheets/Mobile.css" rel="stylesheet" type="text/css" data-mc-generated="True"/>
    <link href="../../Skins/Fluid/Stylesheets/Print.css" rel="stylesheet" type="text/css" data-mc-generated="True"/>
    <link href="../../Resources/Stylesheets/MainStyles.min.css" rel="stylesheet" type="text/css"/>
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet"/>
    <style>@media screen and (min-width: 0\0)
{
	.feedback-button
	{
		margin-right: -40px;
		top: 50%;
		border-radius: 9px 9px 0px 0px;
	}

	#canvas
	{
		position: relative;
	}
}

@media print
{
	#plugin
	{
		overflow: visible !important;
	}
}

</style>
    <link href="../../Resources/Stylesheets/eda_styles.css" rel="stylesheet" type="text/css"/>
    <link href="https://fonts.googleapis.com/css?family=Open+Sans:400,600,300" rel="stylesheet" type="text/css"/>
    <style>/*&lt;meta /&gt;*/

.button.print-button
{
	-pie-background: linear-gradient(#ffffff, transparent);
}

.button.previous-topic-button
{
	-pie-background: linear-gradient(#ffffff, transparent);
}

.button.next-topic-button
{
	-pie-background: linear-gradient(#ffffff, transparent);
}

.needs-pie
{
	behavior: url('../../Resources/Scripts/PIE-no-motw.htc');
}

</style>
    <link rel="apple-touch-icon" sizes="180x180" href="../../Skins/Favicons/apple-touch-icon.png"/>
    <link rel="shortcut icon" href="../../Skins/Favicons/favicon-32x32.png"/>
    <link rel="icon" sizes="96x96" href="../../Skins/Favicons/favicon-96x96.png"/>
    <link rel="icon" sizes="32x32" href="../../Skins/Favicons/favicon-32x32.png"/>
    <link rel="icon" sizes="16x16" href="../../Skins/Favicons/favicon-16x16.png"/>
    <script src="../../Resources/Scripts/jquery.min.js" type="text/javascript">
        </script>
    <script src="../../Resources/Scripts/purify.min.js" type="text/javascript" defer="defer">
        </script>
    <script src="../../Resources/Scripts/require.min.js" type="text/javascript" defer="defer">
        </script>
    <script src="../../Resources/Scripts/require.config.js" type="text/javascript" defer="defer">
        </script>
    <script src="../../Resources/Scripts/foundation.6.2.3_custom.js" type="text/javascript" defer="defer">
        </script>
    <script src="../../Resources/Scripts/plugins.min.js" type="text/javascript" defer="defer">
        </script>
    <script src="../../Resources/Scripts/MadCapAll.js" type="text/javascript" defer="defer">
        </script>
    <script src="https://cmp.osano.com/AzZrhlTmT5f216Foa/84ba7dc4-a4e5-4b02-b120-977eb6f052d4/osano.js">
        </script>
    <script type="text/javascript">/*<![CDATA[*/(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
			new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
			j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
			'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
			})(window,document,'script','dataLayer','GTM-KLSDFH');
		/*]]>*/</script>
    <script type="text/javascript" src="../../Skins/Default/Scripts/TopicToolBar.js">
        </script>
  </head>
  <!-- Top Orange and Darkgrey header-->
  <!-- Div for EDA banner -->
  <div class="eda_banner">
    <p>Register Now for EDA Summit 2024 - Virtual Event <a href="https://edasummit.com/" target="_blank">Register for Free</a></p>
  </div>
  <!-- end Div for EDA banner -->
  <div class="top-nav">
    <div class="main_list">
      <ul class="top-navlinks">
        <li>
          <a href="https://solace.com/support/" target="_blank">Support</a>
        </li>
        <li>
          <a href="https://solace.com/contact/" target="_blank">Contact Us</a>
        </li>
      </ul>
    </div>
    <div class="container-fluid">
      <div class="src-li">
        <div id="srchWrapTwo">
          <form class="search" action="#">
            <div class="search-bar search-bar-container needs-pie">
              <input class="search-field needs-pie" type="search" aria-label="Search Field" placeholder="Search the docs"/>
              <div class="search-filter-wrapper">
                <span class="invisible-label" id="search-filters-label">Filter: </span>
                <div class="search-filter" aria-haspopup="true" aria-controls="sf-content" aria-expanded="false" aria-label="Search Filter" title="All Files" role="button" tabindex="0">
                                </div>
                <div class="search-filter-content" id="sf-content">
                  <ul>
                    <li>
                      <button class="mc-dropdown-item" aria-labelledby="search-filters-label filterSelectorLabel-00001">
                        <span id="filterSelectorLabel-00001">All Files</span>
                      </button>
                    </li>
                  </ul>
                </div>
              </div>
              <div class="search-submit-wrapper" dir="ltr">
                <div class="search-submit" title="Search" role="button" tabindex="0">
                  <span class="invisible-label">Submit Search</span>
                </div>
              </div>
            </div>
          </form>
        </div>
      </div>
      <span class="tool-tip" tooltip-position="left" tooltip="To search for CLI commands, events, or APIs, navigate to the related sections.">i</span>
      <!-- Sept. 28, 2022 - This is being moved to under div class= top-nav
			<div class="main_list">
				<ul class="top-navlinks">
					<li><a href="https://solace.com/support/" target="_blank">Support</a></li>
					<li><a href="https://solace.com/contact/" target="_blank">Contact Us</a></li>
				</ul>
			</div> -->
    </div>
    <!-- Sept. 27, 2022 - The commented out content below used to provide the products, company, etc., links in the top header, next to the search field. -->
    <!-- <div class="main_list"><ul class="top-navlinks"><li><a href="https://solace.com/products/" target="_blank">Products</a></li><li><a href="https://solace.com/company/" target="_blank">Company</a></li><li><a href="https://www.solace.dev/" target="_blank">Developers</a></li><li><a href="https://solace.com/support/" target="_blank">Support</a></li><li><a href="https://solace.com/contact/" target="_blank">Contact Us</a></li></ul></div> -->
  </div>
  <body>
    <div class="foundation-wrap off-canvas-wrapper">
      <div class="off-canvas-wrapper-inner" data-off-canvas-wrapper="">
        <aside class="off-canvas position-right" role="navigation" id="offCanvas" data-off-canvas="" data-position="right" data-mc-ignore="true">
          <ul class="off-canvas-accordion vertical menu off-canvas-list" data-accordion-menu="" data-mc-back-link="Back" data-mc-css-tree-node-expanded="is-accordion-submenu-parent" data-mc-css-tree-node-collapsed="is-accordion-submenu-parent" data-mc-css-sub-menu="vertical menu is-accordion-submenu nested" data-mc-include-indicator="False" data-mc-include-icon="False" data-mc-include-parent-link="True" data-mc-include-back="False" data-mc-defer-expand-event="True" data-mc-expand-event="click.zf.accordionMenu" data-mc-toc="True">
                    </ul>
        </aside>
        <div class="off-canvas-content inner-wrap" data-off-canvas-content="">
          <div data-sticky-container="" class="title-bar-container">
            <nav class="title-bar tab-bar sticky" role="banner" data-sticky="" data-options="marginTop:0" style="width:100%" data-sticky-on="only screen and (max-width: 1000px)" data-mc-ignore="true">
              <a class="skip-to-content fluid-skip showOnFocus" href="#">Skip To Main Content</a>
              <div class="middle title-bar-section outer-row clearfix">
                <div class="menu-icon-container relative clearfix">
                  <div class="central-account-wrapper">
                    <div class="central-dropdown">
                      <a class="central-account-drop">
                        <span class="central-account-image"/>
                        <span class="central-account-text">Account</span>
                      </a>
                      <div class="central-dropdown-content">
                        <a class="MCCentralLink central-dropdown-content-settings">Settings</a>
                        <hr class="central-separator"/>
                        <a class="MCCentralLink central-dropdown-content-logout">Logout</a>
                      </div>
                    </div>
                  </div>
                  <button class="menu-icon" aria-label="Show Navigation Panel" data-toggle="offCanvas">
                    <span/>
                  </button>
                </div>
              </div>
              <div class="title-bar-layout outer-row">
                <div class="logo-wrapper">
                  <a class="logo" href="../../index.html" alt="Logo"/>
                </div>
                <div class="navigation-wrapper nocontent">
                  <ul class="navigation clearfix" role="navigation" data-mc-css-tree-node-has-children="has-children" data-mc-css-sub-menu="sub-menu" data-mc-expand-event="mouseenter" data-mc-top-nav-menu="True" data-mc-max-depth="3" data-mc-include-icon="False" data-mc-include-indicator="False" data-mc-include-children="True" data-mc-include-siblings="True" data-mc-include-parent="True" data-mc-toc="True">
                    <li class="placeholder" style="visibility:hidden">
                      <a>placeholder</a>
                    </li>
                  </ul>
                </div>
                <div class="central-account-wrapper">
                  <div class="central-dropdown">
                    <a class="central-account-drop">
                      <span class="central-account-image"/>
                      <span class="central-account-text">Account</span>
                    </a>
                    <div class="central-dropdown-content">
                      <a class="MCCentralLink central-dropdown-content-settings">Settings</a>
                      <hr class="central-separator"/>
                      <a class="MCCentralLink central-dropdown-content-logout">Logout</a>
                    </div>
                  </div>
                </div>
                <div class="nav-search-wrapper">
                  <div class="nav-search row">
                    <form class="search" action="#">
                      <div class="search-bar search-bar-container needs-pie">
                        <input class="search-field needs-pie" type="search" aria-label="Search Field" placeholder="Search the docs"/>
                        <div class="search-filter-wrapper">
                          <span class="invisible-label" id="search-filters-label">Filter: </span>
                          <div class="search-filter" aria-haspopup="true" aria-controls="sf-content" aria-expanded="false" aria-label="Search Filter" title="All Files" role="button" tabindex="0">
                                                    </div>
                          <div class="search-filter-content" id="sf-content">
                            <ul>
                              <li>
                                <button class="mc-dropdown-item" aria-labelledby="search-filters-label filterSelectorLabel-00001">
                                  <span id="filterSelectorLabel-00001">All Files</span>
                                </button>
                              </li>
                            </ul>
                          </div>
                        </div>
                        <div class="search-submit-wrapper" dir="ltr">
                          <div class="search-submit" title="Search" role="button" tabindex="0">
                            <span class="invisible-label">Submit Search</span>
                          </div>
                        </div>
                      </div>
                    </form>
                  </div>
                </div>
              </div>
            </nav>
          </div>
          <div class="main-section">
            <div class="row outer-row sidenav-layout">
              <nav class="sidenav-wrapper">
                <div class="sidenav-container">
                  <ul class="off-canvas-accordion vertical menu sidenav" data-accordion-menu="" data-mc-css-tree-node-expanded="is-accordion-submenu-parent" data-mc-css-tree-node-collapsed="is-accordion-submenu-parent" data-mc-css-sub-menu="vertical menu accordion-menu is-accordion-submenu nested" data-mc-include-indicator="False" data-mc-include-icon="False" data-mc-include-parent-link="False" data-mc-include-back="False" data-mc-defer-expand-event="True" data-mc-expand-event="click.zf.accordionMenu" data-mc-toc="True" data-mc-side-nav-menu="True">
                                    </ul>
                </div>
              </nav>
              <div class="body-container">
                <div data-mc-content-body="True">
                  <div class="buttons popup-container clearfix topicToolbarProxy _Skins_TopicToolBar mc-component nocontent" style="mc-topic-toolbar-items: PreviousTopic Print NextTopic;">
                    <div class="button-group-container-left">
                      <button class="button needs-pie print-button" title="Print">
                        <div>
                          <div role="img" class="button-icon-wrapper" aria-label="Print">
                            <div class="button-icon"> </div>
                          </div>
                        </div>
                      </button>
                      <button class="button needs-pie previous-topic-button" title="Navigate previous topic" disabled="true">
                        <div>
                          <div role="img" class="button-icon-wrapper" aria-label="Navigate previous">
                            <div class="button-icon"> </div>
                          </div>
                        </div>
                      </button>
                      <button class="button needs-pie next-topic-button" title="Navigate next topic" disabled="true">
                        <div>
                          <div role="img" class="button-icon-wrapper" aria-label="Navigate next">
                            <div class="button-icon"> </div>
                          </div>
                        </div>
                      </button>
                    </div>
                  </div>
                  <!-- Google Tag Manager (noscript) -->
                  <noscript>
                    <iframe src="https://www.googletagmanager.com/ns.html?id=GTM-KLSDFH" height="0" width="0" style="display:none;visibility:hidden"/>
                  </noscript>
                  <!-- End Google Tag Manager (noscript) -->
                  <div id="content">
                    <div id="contentBody">
                      <div class="row collapse">
                        <div xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd" class="ContentRow">
                          <div>
                            <div xmlns="" class="nocontent">
                              <div class="MCBreadcrumbsBox_MCBreadcrumbsSelf_0 breadcrumbs" role="navigation" aria-label="Breadcrumbs" data-mc-breadcrumbs-divider=" / " data-mc-breadcrumbs-count="4" data-mc-toc="True">
                                <span class="MCBreadcrumbsPrefix"> </span>
                              </div>
                            </div>
                            <div xmlns="" role="main" id="mc-main-content">
                              <h1 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><a name="top"/>Request-Reply Messaging in the Go API</h1>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Request-reply messaging is a method of data transmission where applications simulate separate point-to-point channels: one for requests, and another for replies. In request-reply messaging, each request sent from a <i>message requestor</i> requires a reply from a <i>message replier</i>. When a message replier consumes a request message, it sends a reply back to the requestor. This messaging pattern is useful when each message sent between components in your applications requires a reply, for example when performing authentication or financial transactions. </p>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                <img src="../API-Developer-Guide/Images/request-reply-2.png" alt=""/>
                              </p>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">The  <span class="mc-variable Manifest-Products-APIs.PubSub-GenericAll-Messaging-API variable">PubSub+&#xA0;Messaging API</span>s publish request messages with a unique, automatically generated ReplyTo destination topic in the message header field. This ReplyTo topic serves as the return address that the reply should be sent to. Because the ReplyTo topic destination is handled by the <span class="mc-variable Manifest-Products-APIs.PubSub-GenericAll-Messaging-API variable">PubSub+&#xA0;Messaging API</span>s, it allows users to perform request-reply operations without worrying about registering appropriate topic subscriptions to receive replies.</p>
                              <div xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd" class="Note">
                                <p>Request-reply messaging can only be used with direct messages in the <span class="mc-variable Product-Names.pubsub_brand_only variable">PubSub+</span> Go API.</p>
                              </div>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">To use the request-reply messaging pattern with the Go API, follow these steps:</p>
                              <ol xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                <li value="1">
                                  <a href="#Creating-A-RequestReplyMessagePublisher" class="MCXref xref">Create a RequestReplyMessagePublisher</a>
                                </li>
                                <li value="2">
                                  <a href="#Sending" class="MCXref xref">Sending a Request</a>
                                </li>
                                <li value="3">
                                  <a href="#Creating-A-RequestReplyMessageReceiver" class="MCXref xref">Create a RequestReplyMessageReceiver</a>
                                </li>
                                <li value="4">
                                  <a href="#Receivin3" class="MCXref xref">Receiving Requests and Sending Replies</a>
                                </li>
                              </ol>
                              <h2 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><a name="Creating-A-RequestReplyMessagePublisher"/>Create a RequestReplyMessagePublisher</h2>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">To send message requests, create a <code>MessagingService</code> instance (see <a href="Go-API-Messaging-Service.htm#Messaging-Service" class="MCXref xref">Messaging Service</a> for instructions). After you create a <code>MessagingService</code> instance and connect it to the event broker, use the <code>RequestReply()</code> function to build a <code>RequestReplyMessagePublisher</code> instance:</p>
                              <pre xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd" xml:space="preserve">requestReplyPublisher, builderErr := messagingService.RequestReply().CreateRequestReplyMessagePublisherBuilder().Build()
if builderErr != nil {
    panic(builderErr)
}
			
startErr := requestReplyPublisher.Start()
if startErr != nil {
    panic(startErr)
}
</pre>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Next create an <code>OutboundMessage</code> instance. This is the request that your publisher sends to the receiver instance. For information on creating an <code>OutboundMessage</code> instance see <a href="Go-DM-Publish.htm#Configuring-Messages" class="MCXref xref">Configuring and Creating Outbound Messages</a>. </p>
                              <h2 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><a name="Sending"/>Sending a Request</h2>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">When you send a request, it can be either synchronous or asynchronous. A synchronous request blocks your application until a reply is received. An asynchronous request allows your application to send multiple requests before any replies are received.</p>
                              <ul xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                <li>
                                  <p>
                                    <a href="#Sending2" class="MCXref xref">Sending a Synchronous Request</a>
                                  </p>
                                </li>
                                <li>
                                  <p>
                                    <a href="#Sending3" class="MCXref xref">Sending an Asynchronous Request</a>
                                  </p>
                                </li>
                              </ul>
                              <h3 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><a name="Sending2"/>Sending a Synchronous Request</h3>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">The <span class="mc-variable Product-Names.pubsub_brand_only variable">PubSub+</span> Go API provides synchronous request-reply messaging, which blocks each request until a reply is received. This is useful for synchronous, point to point communication where the order of events is important, for example when processing financial transactions. To send a synchronous request, use your <code>RequestReplyMessagePublisher</code> to call the <code>PublishAwaitResponse()</code> function. The <code>PublishAwaitResponse()</code> function takes the following parameters:</p>
                              <ul xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                <li style="font-size: 11pt;"><code>requestMessage</code>&#x2014;the <code>OutboundMessage</code> request to send</li>
                                <li style="font-size: 11pt;"><code>requestDestination</code>&#x2014;The <code>Topic</code> destination for request messages</li>
                                <li style="font-size: 11pt;"><code>replyTimeout</code>&#x2014;a <code>time.Duration</code> value representing the maximum time to wait for a response message</li>
                                <li style="font-size: 11pt;"><code>properties</code>&#x2014;(Optional) A <code>MessagePropertyMap</code> that contains additional message properties (see <a href="Go-DM-Publish.htm#Configuring-Messages" class="MCXref xref">Configuring and Creating Outbound Messages</a>). Set this parameter to <code>nil</code> if you do not have additional message properties to set.</li>
                              </ul>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">For more information, see the <a href="../../API-Developer-Online-Ref-Documentation/go/index.html" class="link-internal"><a href="../../API-Developer-Online-Ref-Documentation/go/index.html" class="link-internal"><span class="mc-variable Product-Names.pubsub_brand_only variable">PubSub+</span> Messaging API for Go reference</a></a>.</p>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd" style="font-size: 11pt;">The following example shows how to send a message request synchronously and assign the reply to an <code>InboundMessage</code> instance:</p>
                              <pre xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd" xml:space="preserve">
replyMsg, publishErr := requestReplyPublisher.PublishAwaitResponse(message, topic, 5*time.Second, nil)

if publishErr == nil { 
    fmt.Printf("The reply inbound payload: %s\n", replyMsg.GetPayloadAsString())
} else if terr, ok := publishErr.(*solace.TimeoutError); ok { 
    // No reply received, can implement resiliency or retry mechanisms here
    fmt.Printf("The reply timed out with %s with msg number : %d\n", terr, msgSeqNum)
} else { 
    panic(publishErr)
}		</pre>
                              <h3 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><a name="Sending3"/>Sending an Asynchronous Request</h3>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">The <span class="mc-variable Product-Names.pubsub_brand_only variable">PubSub+</span> Go API provides asynchronous request-reply messaging, which allows your application to send multiple requests before a reply is received. This is useful for asynchronous communication where the order of events is not important. To send an asynchronous request, use your <code>RequestReplyMessagePublisher</code> to call the <code>Publish()</code> function. The <code>Publish()</code> function takes the following parameters:</p>
                              <ul xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                <li style="font-size: 11pt;"><code>requestMessage</code>&#x2014;the <code>OutboundMessage</code> request to send</li>
                                <li style="font-size: 11pt;"><code>replyMessageHandler</code>&#x2014;an instance of <code>RequestReplyMessagePublisher.ReplyMessageHandler</code>, a callback handler to process the reply message when it arrives or when a timeout occurs.</li>
                                <li style="font-size: 11pt;"><code>requestDestination</code>&#x2014;the <code>Topic</code> destination for request messages</li>
                                <li style="font-size: 11pt;"><code>replyTimeout</code>&#x2014;a <code>time.Duration</code> value representing the maximum time to wait for a response message</li>
                                <li style="font-size: 11pt;"><code>properties</code>&#x2014;(Optional) A <code>MessagePropertyMap</code> that contains additional message properties (see <a href="Go-DM-Publish.htm#Configuring-Messages" class="MCXref xref">Configuring and Creating Outbound Messages</a>). Set this parameter to <code>nil</code> if you do not have additional message properties to set.</li>
                                <li style="font-size: 11pt;"><code>userContext</code>&#x2014;(Optional) A <code>userContext</code> interface to be made available during response message processing (see <a href="Go-PM-Publish.htm#user-contexts" class="MCXref xref">User Contexts</a>). Set this parameter to <code>nil</code> if you do not have context to set.</li>
                              </ul>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">For more information, see the <a href="../../API-Developer-Online-Ref-Documentation/go/index.html" class="link-internal"><a href="../../API-Developer-Online-Ref-Documentation/go/index.html" class="link-internal"><span class="mc-variable Product-Names.pubsub_brand_only variable">PubSub+</span> Messaging API for Go reference</a></a>.</p>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd" style="font-size: 11pt;">The following shows an example implementation of a <code>ReplyMessageHandler</code>, which sends a message request asynchronously and assigns the reply to an <code>InboundMessage</code> instance:</p>
                              <pre xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd" xml:space="preserve">
func ReplyHandler(message message.InboundMessage, userContext interface{}, err error) {
	if err == nil { 
		fmt.Printf("The reply inbound payload: %s\n", message.GetPayloadAsString())
	} else if terr, ok := err.(*solace.TimeoutError); ok { 
		// No reply received, can implement resiliency or retry mechanisms here
		fmt.Printf("The reply timed out with %s with user context : %s\n", terr, userContext)
	} else { 
		panic(err)
	}
}			

// ...

publishErr := requestReplyPublisher.Publish(message, ReplyHandler, topic, 5*time.Second, nil, nil)
if publishErr != nil {
    panic(publishErr)
}</pre>
                              <h2 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><a name="Creating-A-RequestReplyMessageReceiver"/>Create a RequestReplyMessageReceiver</h2>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">To send message replies, create a <code>MessagingService</code> instance (see <a href="Go-API-Messaging-Service.htm#Messaging-Service" class="MCXref xref">Messaging Service</a> for instructions). After you create a <code>MessagingService</code> instance and connect it to the event broker, use the <code>RequestReply()</code> function to build a <code>RequestReplyMessageReceiver</code> instance:</p>
                              <pre xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd" xml:space="preserve">requestReplyReceiver, builderErr := messagingService.RequestReply().CreateRequestReplyMessageReceiverBuilder().Build(topicSubscription)
if builderErr != nil {
    panic(builderErr)
}

startErr := requestReplyReceiver.Start()
if startErr != nil {
    panic(startErr)
}
</pre>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Next create an <code>OutboundMessage</code> instance. This is the reply that your receiver sends to the requestor instance. For information on creating an <code>OutboundMessage</code> instance see <a href="Go-DM-Publish.htm#Configuring-Messages" class="MCXref xref">Configuring and Creating Outbound Messages</a>. </p>
                              <h2 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><a name="Receivin3"/>Receiving Requests and Sending Replies</h2>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Your <code>RequestReplyMessageReceiver</code> can receive a request synchronously or asynchronously as an <code>InboundMessage</code> instance.</p>
                              <ul xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                <li>
                                  <p>
                                    <a href="#Receivin" class="MCXref xref">Receiving a Request Synchronously and Sending a Reply</a>
                                  </p>
                                </li>
                                <li>
                                  <p>
                                    <a href="#Receivin2" class="MCXref xref">Receiving a Request Asynchronously and Sending a Reply</a>
                                  </p>
                                </li>
                              </ul>
                              <h3 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><a name="Receivin"/>Receiving a Request Synchronously and Sending a Reply</h3>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">The <span class="mc-variable Product-Names.pubsub_brand_only variable">PubSub+</span> Go API provides synchronous request-reply messaging, which blocks your application until the <code>ReceiveMessage()</code> function returns. This is useful for synchronous, point to point communication where the order of events is important, for example when processing financial transactions. To receive a synchronous request, use your <code>RequestReplyMessageReceiver</code> instance to call the <code>ReceiveMessage()</code> function. The <code>ReceiveMessage()</code> function receives the request message <i>and</i> the replier instance from the <code>RequestReplyMessageReceiver</code>. The function takes the following parameter:</p>
                              <ul xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                <li style="font-size: 11pt;"><code>Timeout</code>&#x2014;a <code>time.Duration</code> value representing the time the function waits for a request message. The function waits forever if this value is negative.</li>
                              </ul>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">For more information, see the <a href="../../API-Developer-Online-Ref-Documentation/go/index.html" class="link-internal"><a href="../../API-Developer-Online-Ref-Documentation/go/index.html" class="link-internal"><span class="mc-variable Product-Names.pubsub_brand_only variable">PubSub+</span> Messaging API for Go reference</a></a>.</p>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd" style="font-size: 11pt;">The following shows an example implementation of a <code>RequestMessageHandler</code>, which receives a request message synchronously, assigns the reply to an <code>OutboundMessage</code> instance and sends it with the <code>Reply()</code> function:</p>
                              <pre xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd" xml:space="preserve">
message, replier, receiveErr := requestReplyReceiver.ReceiveMessage(5 * time.Second)
if receiveErr != nil { receive pull was not successful
    if terr, ok := receiveErr.(*solace.TimeoutError); ok { // A timeout occurred and no request message was received
        // good location for implementing resiliency or retry mechanisms.
        fmt.Printf("request message pull from the receiver timed out with %s with last msg number : %d\n", terr, msgSeqNum)
        continue
    } else { 
        fmt.Println("Receiver error while trying to pull request message. Error: ", receiveErr)
    }
}

if replier != nil { // the replier is only set when received message is request message that can be replied to
    // build reply message
    replyMsg, replyMsgBuildErr := messageBuilder.BuildWithStringPayload(messageBody + "\nReply from: " + message.GetPayloadAsString())
    if replyMsgBuildErr != nil {
        panic(replyMsgBuildErr)
    }
    // send reply msg
    replyErr := replier.Reply(replyMsg)
    if replyErr != nil {
        fmt.Println("error on send reply. Error: ", replyErr)
    }
} else {
    // messages received on the topic subscription without a repliable destination will return a nil replier
    fmt.Printf("Received message: %d on topic %s that was not a request message\n", msgSeqNum, topicSubscription.GetName())
}
</pre>
                              <h3 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><a name="Receivin2"/>Receiving a Request Asynchronously and Sending a Reply</h3>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">The <span class="mc-variable Product-Names.pubsub_brand_only variable">PubSub+</span> Go API provides asynchronous request-reply messaging, which allows your application to receive multiple message requests asynchronously with the <code>ReceiveAsync()</code> function. This is useful for point to point communication where the order of events is not important. To receive asynchronous requests, use a <code>RequestReplyMessageReceiver</code> instance to call the <code>ReceiveAsync()</code> function. The <code>ReceiveAsync()</code> function takes the following parameter:</p>
                              <ul xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                <li style="font-size: 11pt;"><code>requestMessageHandler</code>&#x2014;an instance of <code>RequestReplyMessageReceiver.RequestMessageHandler</code>, a callback handler to process incoming request messages and the replier instances. This callback allows the <code>ReceiveAsync()</code> function to receive both an <code>inboundMessage</code> (the request) <i>and</i> an instance of <code>RequestReplyMessageReceiver.Replier</code>. The replier instance allows your <code>RequestReplyMessageReceiver</code> to send a reply back to the requestor.</li>
                              </ul>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">For more information, see the <a href="../../API-Developer-Online-Ref-Documentation/go/index.html" class="link-internal"><a href="../../API-Developer-Online-Ref-Documentation/go/index.html" class="link-internal"><span class="mc-variable Product-Names.pubsub_brand_only variable">PubSub+</span> Messaging API for Go reference</a></a>.</p>
                              <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd" style="font-size: 11pt;">The following shows an example implementation of a <code>RequestMessageHandler</code>, which receives a request message asynchronously, assigns the reply to an <code>OutboundMessage</code> instance and sends it with the <code>Reply()</code> function:</p>
                              <pre xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd" xml:space="preserve">
requestMessageHandler := func(message message.InboundMessage, replier solace.Replier) {

    if replier == nil { // the replier is only set when received message is a request message that can be replied to
        // messages received on the topic subscription without a reply destination will return a nil replier
        fmt.Printf("Received message: %d on topic %s that was not a request message\n", msgSeqNum, topicSubscription.GetName())
        return
    }
    replyMsg, replyMsgBuildErr := messageBuilder.BuildWithStringPayload(messageBody + "\nReply from: " + message.GetPayloadAsString())
    if replyMsgBuildErr != nil {
        panic(replyMsgBuildErr)
    }
    replyErr := replier.Reply(replyMsg)
    if replyErr != nil {
        fmt.Println("Error on send reply: ", replyErr)
    }
}

requestReplyReceiver.ReceiveAsync(requestMessageHandler)	</pre>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                    <div class="no-print">
                      <div>
                        <a href="#" id="docsFeedbackTrigger" class="docs-issue-collector">Provide feedback</a>
                      </div>
                    </div>
                    <footer class="my-4 pt-4 text-center no-print">
                      <div class="footer-txt text-center no-print">
                        <ul class="list-inline ">
                          <li class="list-inline-item text-muted"><a href="../../Resources/Documentation-Set.htm" class="doc-set-footer-link MCXref xref xrefdoc-set-footer-link">Documentation Coverage</a>: <span class="mc-variable Variables.DocumentSetNumber variable">2024.09.16.0001</span></li>
                          <li class="list-inline-item text-muted">Last Updated: <span class="mc-variable Variables.MonthDayYear variable">September 16, 2024</span></li>
                          <li class="list-inline-item text-muted" style="font-size:13px;"> &#xA9;  <span class="mc-variable Variables.CompanyNameLegal variable">Solace Corporation</span></li>
                        </ul>
                      </div>
                      <div class="footer-icons">
                        <ul class="list-inline">
                          <li class="list-inline-item">
                            <a href="https://facebook.com/solacedotcom" target="_blank" class="social-media-icon">
                              <img src="../../Resources/Images/Social-Media/facebook_22x21.png" class="Hyperlinked" alt="Facebook" title="Solace Facebook Page" style="width: 22;height: 21;"/>
                            </a>
                          </li>
                          <li class="list-inline-item">
                            <a href="https://www.linkedin.com/company/20219" target="_blank" class="social-media-icon">
                              <img src="../../Resources/Images/Social-Media/LinkedIn_22x21.png" class="Hyperlinked" alt="LinkedIn" title="Solace LinkedIn Page" style="width: 22;height: 21;"/>
                            </a>
                          </li>
                          <li class="list-inline-item">
                            <a href="https://twitter.com/solacedotcom" target="_blank" class="social-media-icon">
                              <img src="../../Resources/Images/Social-Media/Twitter_22x21.png" class="Hyperlinked" alt="Twitter" title="Solace Twitter Feed" style="width: 22;height: 21;"/>
                            </a>
                          </li>
                          <li class="list-inline-item">
                            <a href="https://www.youtube.com/user/SolaceSystems" target="_blank" class="social-media-icon">
                              <img src="../../Resources/Images/Social-Media/youtube_22x21.png" class="Hyperlinked" alt="YouTube" title="Solace YouTube Channel" style="width: 22;height: 21;"/>
                            </a>
                          </li>
                          <li class="list-inline-item">
                            <a href="https://www.instagram.com/solacedotcom/" target="_blank" class="social-media-icon">
                              <img src="../../Resources/Images/Social-Media/instagram_22x21.png" class="Hyperlinked" alt="Instagram" title="Solace Instagram Feed" style="width: 22;height: 21;"/>
                            </a>
                          </li>
                          <li class="list-inline-item">
                            <a href="https://medium.com/solacedotcom" target="_blank" class="social-media-icon">
                              <img src="../../Resources/Images/Social-Media/medium_22x21.png" class="Hyperlinked" alt="Medium" title="Solace Medium Blog" style="width: 22;height: 21;"/>
                            </a>
                          </li>
                        </ul>
                      </div>
                      <div class="footer_link_menu">
                        <ul class="link_list">
                          <li class="link_list_item">
                            <a href="https://solace.com/products/" target="_blank" class="footer-link">Products</a>
                          </li>
                          <li class="link_list_item">
                            <a href="https://solace.com/company/" target="_blank" class="footer-link">Company</a>
                          </li>
                          <li class="link_list_item">
                            <a href="https://www.solace.dev/" target="_blank" class="footer-link">Developers</a>
                          </li>
                          <li class="link_list_item">
                            <a href="https://solace.com/support/" target="_blank" class="footer-link">Support</a>
                          </li>
                          <li class="link_list_item">
                            <a href="https://solace.com/contact/" target="_blank" class="footer-link">Contact Us</a>
                          </li>
                        </ul>
                      </div>
                    </footer>
                  </div>
                  <!-- JIRA issue collector -->
                  <script>/*<![CDATA[*/// Requires jQuery!
jQuery.ajax({
    url: "https://sol-jira.atlassian.net/s/d41d8cd98f00b204e9800998ecf8427e-T/o2joag/b/24/e73395c53c3b10fde2303f4bf74ffbf6/_/download/batch/com.atlassian.jira.collector.plugin.jira-issue-collector-plugin:issuecollector-embededjs/com.atlassian.jira.collector.plugin.jira-issue-collector-plugin:issuecollector-embededjs.js?locale=en-US&collectorId=076e0808",
    type: "get",
    cache: true,
    dataType: "script"
});
window.ATL_JQ_PAGE_PROPS = {
"triggerFunction": function(showCollectorDialog) {
//Requires that jQuery is available!
$("#docsFeedbackTrigger").click(function(e) {
e.preventDefault();
showCollectorDialog();
});
},
fieldValues: {
recordWebInfo: '1', // field Name
recordWebInfoConsent: ['1'] // field Id
}
};
/*]]>*/</script>
                  <script src="../../Resources/Scripts/thumbnail.js">
                                    </script>
                  <!-- Script for Launching offsite links in new tab -->
                  <script type="text/javascript">/*<![CDATA[*/$("a[href^='http']").attr("target","_blank");/*]]>*/</script>
                </div>
              </div>
            </div>
          </div>
          <a data-close="true"/>
        </div>
      </div>
    </div>
  </body>
</html>
