<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-us" xml:lang="en-us" class="_Skins_HTML5___Side_Navigation" data-mc-search-type="Stem" data-mc-help-system-file-name="Default.xml" data-mc-path-to-help-system="../../" data-mc-has-content-body="True" data-mc-toc-path="[%=System.LinkedTitle%]|[%=System.LinkedTitle%]|[%=System.LinkedTitle%]|[%=System.LinkedTitle%]" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic;Default" data-mc-preload-images="false" data-mc-in-preview-mode="false">
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
        <meta name="msapplication-config" content="../../Skins/Favicons/browserconfig.xml" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="apple-touch-icon" sizes="180x180" href="../../Skins/Favicons/apple-touch-icon.png" />
        <link rel="shortcut icon" href="../../Skins/Favicons/favicon-32x32.png" />
        <link rel="icon" sizes="96x96" href="../../Skins/Favicons/favicon-96x96.png" />
        <link rel="icon" sizes="32x32" href="../../Skins/Favicons/favicon-32x32.png" />
        <link rel="icon" sizes="16x16" href="../../Skins/Favicons/favicon-16x16.png" />
        <meta charset="utf-8" />
        <meta http-equiv="Cache-control" content="no-cache" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" /><title>Publishing Persistent Messages Using the Java API</title>
        <!-- <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous" /> -->
        <!--style to display feedback button correctly in IE-->
        <!-- Google Tag Manager -->
        <!-- End Google Tag Manager -->
        <!-- links to get the EDA styling to work -->
        <link href="../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../Skins/Default/Stylesheets/Components/Tablet.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../Skins/Default/Stylesheets/Components/Mobile.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../Skins/Default/Stylesheets/Components/Print.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../Skins/Fluid/Stylesheets/foundation.6.2.3.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../Skins/Fluid/Stylesheets/Styles.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../Skins/Fluid/Stylesheets/Tablet.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../Skins/Fluid/Stylesheets/Mobile.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../Skins/Fluid/Stylesheets/Print.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../Resources/Stylesheets/MainStyles.min.css" rel="stylesheet" type="text/css" />
        <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet" />
        <style>@media screen and (min-width: 0\0)
{
	.feedback-button
	{
		margin-right: -40px;
		top: 50%;
		border-radius: 9px 9px 0px 0px;
	}

	#canvas
	{
		position: relative;
	}
}

@media print
{
	#plugin
	{
		overflow: visible !important;
	}
}

</style>
        <link href="../../Resources/Stylesheets/eda_styles.css" rel="stylesheet" type="text/css" />
        <link href="https://fonts.googleapis.com/css?family=Open+Sans:400,600,300" rel="stylesheet" type="text/css" />
        <style>/*&lt;meta /&gt;*/

.button.print-button
{
	-pie-background: linear-gradient(#ffffff, transparent);
}

.button.previous-topic-button
{
	-pie-background: linear-gradient(#ffffff, transparent);
}

.button.next-topic-button
{
	-pie-background: linear-gradient(#ffffff, transparent);
}

.needs-pie
{
	behavior: url('../../Resources/Scripts/PIE-no-motw.htc');
}

</style>
        <link rel="apple-touch-icon" sizes="180x180" href="../../Skins/Favicons/apple-touch-icon.png" />
        <link rel="shortcut icon" href="../../Skins/Favicons/favicon-32x32.png" />
        <link rel="icon" sizes="96x96" href="../../Skins/Favicons/favicon-96x96.png" />
        <link rel="icon" sizes="32x32" href="../../Skins/Favicons/favicon-32x32.png" />
        <link rel="icon" sizes="16x16" href="../../Skins/Favicons/favicon-16x16.png" />
        <script src="../../Resources/Scripts/jquery.min.js" type="text/javascript">
        </script>
        <script src="../../Resources/Scripts/purify.min.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../Resources/Scripts/require.min.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../Resources/Scripts/require.config.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../Resources/Scripts/foundation.6.2.3_custom.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../Resources/Scripts/plugins.min.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../Resources/Scripts/MadCapAll.js" type="text/javascript" defer="defer">
        </script>
        <script src="https://cmp.osano.com/AzZrhlTmT5f216Foa/84ba7dc4-a4e5-4b02-b120-977eb6f052d4/osano.js">
        </script>
        <script type="text/javascript">/*<![CDATA[*/(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
			new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
			j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
			'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
			})(window,document,'script','dataLayer','GTM-KLSDFH');
		/*]]>*/</script>
        <script type="text/javascript" src="../../Skins/Default/Scripts/TopicToolBar.js">
        </script>
    </head>
    <!-- Top Orange and Darkgrey header-->
    <!-- Div for EDA banner -->
    <div class="eda_banner">
        <p>Register Now for EDA Summit 2024 - Virtual Event <a href="https://edasummit.com/" target="_blank">Register for Free</a></p>
    </div>
    <!-- end Div for EDA banner -->
    <div class="top-nav">
        <div class="main_list">
            <ul class="top-navlinks">
                <li><a href="https://solace.com/support/" target="_blank">Support</a>
                </li>
                <li><a href="https://solace.com/contact/" target="_blank">Contact Us</a>
                </li>
            </ul>
        </div>
        <div class="container-fluid">
            <div class="src-li">
                <div id="srchWrapTwo">
                    <form class="search" action="#">
                        <div class="search-bar search-bar-container needs-pie">
                            <input class="search-field needs-pie" type="search" aria-label="Search Field" placeholder="Search the docs" />
                            <div class="search-filter-wrapper"><span class="invisible-label" id="search-filters-label">Filter: </span>
                                <div class="search-filter" aria-haspopup="true" aria-controls="sf-content" aria-expanded="false" aria-label="Search Filter" title="All Files" role="button" tabindex="0">
                                </div>
                                <div class="search-filter-content" id="sf-content">
                                    <ul>
                                        <li>
                                            <button class="mc-dropdown-item" aria-labelledby="search-filters-label filterSelectorLabel-00001"><span id="filterSelectorLabel-00001">All Files</span>
                                            </button>
                                        </li>
                                    </ul>
                                </div>
                            </div>
                            <div class="search-submit-wrapper" dir="ltr">
                                <div class="search-submit" title="Search" role="button" tabindex="0"><span class="invisible-label">Submit Search</span>
                                </div>
                            </div>
                        </div>
                    </form>
                </div>
            </div><span class="tool-tip" tooltip-position="left" tooltip="To search for CLI commands, events, or APIs, navigate to the related sections.">i</span>
            <!-- Sept. 28, 2022 - This is being moved to under div class= top-nav
			<div class="main_list">
				<ul class="top-navlinks">
					<li><a href="https://solace.com/support/" target="_blank">Support</a></li>
					<li><a href="https://solace.com/contact/" target="_blank">Contact Us</a></li>
				</ul>
			</div> -->
        </div>
        <!-- Sept. 27, 2022 - The commented out content below used to provide the products, company, etc., links in the top header, next to the search field. -->
        <!-- <div class="main_list"><ul class="top-navlinks"><li><a href="https://solace.com/products/" target="_blank">Products</a></li><li><a href="https://solace.com/company/" target="_blank">Company</a></li><li><a href="https://www.solace.dev/" target="_blank">Developers</a></li><li><a href="https://solace.com/support/" target="_blank">Support</a></li><li><a href="https://solace.com/contact/" target="_blank">Contact Us</a></li></ul></div> -->
    </div>
    <body>
        <div class="foundation-wrap off-canvas-wrapper">
            <div class="off-canvas-wrapper-inner" data-off-canvas-wrapper="">
                <aside class="off-canvas position-right" role="navigation" id="offCanvas" data-off-canvas="" data-position="right" data-mc-ignore="true">
                    <ul class="off-canvas-accordion vertical menu off-canvas-list" data-accordion-menu="" data-mc-back-link="Back" data-mc-css-tree-node-expanded="is-accordion-submenu-parent" data-mc-css-tree-node-collapsed="is-accordion-submenu-parent" data-mc-css-sub-menu="vertical menu is-accordion-submenu nested" data-mc-include-indicator="False" data-mc-include-icon="False" data-mc-include-parent-link="True" data-mc-include-back="False" data-mc-defer-expand-event="True" data-mc-expand-event="click.zf.accordionMenu" data-mc-toc="True">
                    </ul>
                </aside>
                <div class="off-canvas-content inner-wrap" data-off-canvas-content="">
                    <div data-sticky-container="" class="title-bar-container">
                        <nav class="title-bar tab-bar sticky" role="banner" data-sticky="" data-options="marginTop:0" style="width:100%" data-sticky-on="only screen and (max-width: 1000px)" data-mc-ignore="true"><a class="skip-to-content fluid-skip showOnFocus" href="#">Skip To Main Content</a>
                            <div class="middle title-bar-section outer-row clearfix">
                                <div class="menu-icon-container relative clearfix">
                                    <div class="central-account-wrapper">
                                        <div class="central-dropdown"><a class="central-account-drop"><span class="central-account-image"></span><span class="central-account-text">Account</span></a>
                                            <div class="central-dropdown-content"><a class="MCCentralLink central-dropdown-content-settings">Settings</a>
                                                <hr class="central-separator" /><a class="MCCentralLink central-dropdown-content-logout">Logout</a>
                                            </div>
                                        </div>
                                    </div>
                                    <button class="menu-icon" aria-label="Show Navigation Panel" data-toggle="offCanvas"><span></span>
                                    </button>
                                </div>
                            </div>
                            <div class="title-bar-layout outer-row">
                                <div class="logo-wrapper"><a class="logo" href="../../index.html" alt="Logo"></a>
                                </div>
                                <div class="navigation-wrapper nocontent">
                                    <ul class="navigation clearfix" role="navigation" data-mc-css-tree-node-has-children="has-children" data-mc-css-sub-menu="sub-menu" data-mc-expand-event="mouseenter" data-mc-top-nav-menu="True" data-mc-max-depth="3" data-mc-include-icon="False" data-mc-include-indicator="False" data-mc-include-children="True" data-mc-include-siblings="True" data-mc-include-parent="True" data-mc-toc="True">
                                        <li class="placeholder" style="visibility:hidden"><a>placeholder</a>
                                        </li>
                                    </ul>
                                </div>
                                <div class="central-account-wrapper">
                                    <div class="central-dropdown"><a class="central-account-drop"><span class="central-account-image"></span><span class="central-account-text">Account</span></a>
                                        <div class="central-dropdown-content"><a class="MCCentralLink central-dropdown-content-settings">Settings</a>
                                            <hr class="central-separator" /><a class="MCCentralLink central-dropdown-content-logout">Logout</a>
                                        </div>
                                    </div>
                                </div>
                                <div class="nav-search-wrapper">
                                    <div class="nav-search row">
                                        <form class="search" action="#">
                                            <div class="search-bar search-bar-container needs-pie">
                                                <input class="search-field needs-pie" type="search" aria-label="Search Field" placeholder="Search the docs" />
                                                <div class="search-filter-wrapper"><span class="invisible-label" id="search-filters-label">Filter: </span>
                                                    <div class="search-filter" aria-haspopup="true" aria-controls="sf-content" aria-expanded="false" aria-label="Search Filter" title="All Files" role="button" tabindex="0">
                                                    </div>
                                                    <div class="search-filter-content" id="sf-content">
                                                        <ul>
                                                            <li>
                                                                <button class="mc-dropdown-item" aria-labelledby="search-filters-label filterSelectorLabel-00001"><span id="filterSelectorLabel-00001">All Files</span>
                                                                </button>
                                                            </li>
                                                        </ul>
                                                    </div>
                                                </div>
                                                <div class="search-submit-wrapper" dir="ltr">
                                                    <div class="search-submit" title="Search" role="button" tabindex="0"><span class="invisible-label">Submit Search</span>
                                                    </div>
                                                </div>
                                            </div>
                                        </form>
                                    </div>
                                </div>
                            </div>
                        </nav>
                    </div>
                    <div class="main-section">
                        <div class="row outer-row sidenav-layout">
                            <nav class="sidenav-wrapper">
                                <div class="sidenav-container">
                                    <ul class="off-canvas-accordion vertical menu sidenav" data-accordion-menu="" data-mc-css-tree-node-expanded="is-accordion-submenu-parent" data-mc-css-tree-node-collapsed="is-accordion-submenu-parent" data-mc-css-sub-menu="vertical menu accordion-menu is-accordion-submenu nested" data-mc-include-indicator="False" data-mc-include-icon="False" data-mc-include-parent-link="False" data-mc-include-back="False" data-mc-defer-expand-event="True" data-mc-expand-event="click.zf.accordionMenu" data-mc-toc="True" data-mc-side-nav-menu="True">
                                    </ul>
                                </div>
                            </nav>
                            <div class="body-container">
                                <div data-mc-content-body="True">
                                    <div class="buttons popup-container clearfix topicToolbarProxy _Skins_TopicToolBar mc-component nocontent" style="mc-topic-toolbar-items: PreviousTopic Print NextTopic;">
                                        <div class="button-group-container-left">
                                            <button class="button needs-pie print-button" title="Print">
                                                <div>
                                                    <div role="img" class="button-icon-wrapper" aria-label="Print">
                                                        <div class="button-icon"> </div>
                                                    </div>
                                                </div>
                                            </button>
                                            <button class="button needs-pie previous-topic-button" title="Navigate previous topic" disabled="true">
                                                <div>
                                                    <div role="img" class="button-icon-wrapper" aria-label="Navigate previous">
                                                        <div class="button-icon"> </div>
                                                    </div>
                                                </div>
                                            </button>
                                            <button class="button needs-pie next-topic-button" title="Navigate next topic" disabled="true">
                                                <div>
                                                    <div role="img" class="button-icon-wrapper" aria-label="Navigate next">
                                                        <div class="button-icon"> </div>
                                                    </div>
                                                </div>
                                            </button>
                                        </div>
                                    </div>
                                    <!-- Google Tag Manager (noscript) -->
                                    <noscript><iframe src="https://www.googletagmanager.com/ns.html?id=GTM-KLSDFH" height="0" width="0" style="display:none;visibility:hidden"></iframe>
                                    </noscript>
                                    <!-- End Google Tag Manager (noscript) -->
                                    <div id="content">
                                        <div id="contentBody">
                                            <div class="row collapse">
                                                <div class="ContentRow" xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                                    <div>
                                                        <div class="nocontent" xmlns="">
                                                            <div class="MCBreadcrumbsBox_MCBreadcrumbsSelf_0 breadcrumbs" role="navigation" aria-label="Breadcrumbs" data-mc-breadcrumbs-divider=" / " data-mc-breadcrumbs-count="4" data-mc-toc="True"><span class="MCBreadcrumbsPrefix"> </span>
                                                            </div>
                                                        </div>
                                                        <div role="main" id="mc-main-content" xmlns="">
                                                            <h1 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><a name="Publishing-Persistent-Messages-Java-API"></a>Publishing Persistent Messages Using the Java API</h1>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">When your applications require confirmation handling and <i>exactly once</i> delivery, we recommend that you use persistent messages instead of  direct messages. To publish persistent messages in the <span class="mc-variable Product-Names.pubsub_brand_only variable">PubSub+</span> Java API,  you first set up a message queue on the <span class="mc-variable Product-Names.pubsub_brand_only variable">PubSub+</span> event broker. </p>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"> For information about creating and configuring queues on an event broker, see <a href="../../Messaging/Guaranteed-Msg/Configuring-Queues.htm" class="MCXref xref">Configuring Queues</a>. </p>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">To  handle persistent messages using the <span class="mc-variable Product-Names.pubsub_brand_only variable">PubSub+</span> Java API, use the following steps:</p>
                                                            <ol xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                                                <li value="1"><a href="#Creating-A-PersistentMessagePublisher-Object" class="link-internal">Create a PersistentMessagePublisher Object</a>.</li>
                                                                <li value="2"><a href="#Configuring-Messages" class="link-internal">Configure and Create an OutboundMessage</a>.</li>
                                                                <li value="3"><a href="#Publishing-A-Persistent-Message" class="link-internal">Publish a Persistent Message</a>.</li>
                                                                <li value="4"><a href="#Message-Receipts-and-Error-Handling" class="link-internal">Acknowledging Messages and Handling Errors</a>.</li>
                                                            </ol>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">In some use cases, it's possible for your application to send messages faster than the messages can be transported. This may cause messages to accumulate in the API internal buffers causing back-pressure. If this scenario is possible, consider changing the back-pressure settings to meet the requirements of your application. For more information, see <a href="#Configuring-Back-Pressure" class="MCXref xref">Handling Back-Pressure When Publishing Persistent Messages</a>.</p>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">For examples of applications  that publish persistent messages, see  the <a href="https://tutorials.solace.dev/java" target="_blank" class="link-offsite"><span class="mc-variable Variables.CompanyName variable">Solace</span> Developer Hub</a>.</p>
                                                            <h2 class="with-rule" xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><a name="Creating-A-PersistentMessagePublisher-Object"></a>Creating a PersistentMessagePublisher Object </h2>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">After a <code>MessagingService</code> object has established a connection to an event broker, you  use a <code>PersistentMessagePublisher</code> object  to publish persistent messages. As with the <code>MessagingService</code> object, the <code>PersistentMessagePublisher</code> object allows you to configure what features to use in the API. You can use the following methods to  set how to handle back-pressure for the  <code>PersistentMessagePublisherBuilder</code> object. These methods include the <code>build()</code> method , which returns a <code>PersistentMessagePublisher</code> object. To enable your <code>PersistentMessagePublisher</code> to start publishing messages, call <code>start()</code> on it.</p>
                                                            <ul xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                                                <li style="font-size: 11pt;"><code>PersistentMessagePublisherBuilder</code>
                                                                </li>
                                                                <ul>
                                                                    <li><code>createPersistentMessagePublisherBuilder()</code>
                                                                    </li>
                                                                    <li><code>onBackPressureReject()</code>
                                                                    </li>
                                                                    <li><code>onBackPressureWait()</code>
                                                                    </li>
                                                                    <li><code>onBackPressureElastic()</code>
                                                                    </li>
                                                                </ul>
                                                                <ul>
                                                                    <li><code>build()</code>
                                                                    </li>
                                                                </ul>
                                                                <li><code>PersistentMessagePublisher</code>
                                                                </li>
                                                                <ul>
                                                                    <li><code>start()</code>
                                                                    </li>
                                                                </ul>
                                                            </ul>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">The following shows an example of how to use <code>PersistentMessagePublisher</code> object to connect to the event broker using a <code>MessagingService</code> object:</p><pre xml:space="preserve" xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">/* Creates an instance of PersistentMessagePublisherBuilder, which is used to create PersistentMessagePublisher objects. */
final PersistentMessagePublisher publisher = messagingService.createPersistentMessagePublisherBuilder()
    .build()             // Builds a PersistentMessagePublisher object based on the provided configuration.
    .start();            // Causes the service to resume regular duties. Before this method is called, the service is considered off-duty.            
</pre>
                                                            <h3 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Asynchronous Receivers </h3>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">It is also possible to start a persistent message publisher using a callback listener to allow for asynchronous notifications after the start operation is complete.</p>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">The following example shows you how to invoke <code>CompletionListener</code>, which is a callback method for listening for the results of a future computation. This handler also notifies the application when the start operation is complete. </p><pre xml:space="preserve" xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">final CompletionListener&lt;PersistentMessagePublisher&gt; receiverStartupListener = (receiver, throwable) -&gt; {
    if (throwable == null) {
    // Started successfully, can receive messages.
    } else {
    // Deal with an exception during start.
    }
};
receiverToBeStarted.startAsync(receiverStartupListener);    </pre>
                                                            <p class="Note" xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"> Your publisher application is not operational until you call <code>start()</code> or <code>startAsync()</code> on it</p>
                                                            <h2 class="with-rule" xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><a name="Configuring-Messages"></a>Configuring and Creating Outbound Messages</h2>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Your client applications explicitly create the outbound messages to publish. In the <span class="mc-variable Product-Names.pubsub_brand_only variable">PubSub+</span> Java API, when you publish messages you use <code>OutboundMessage</code> objects. To configure and create <code>OutboundMessage</code> objects, follow these steps: </p>
                                                            <ol xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                                                <li value="1">
                                                                    <p>Call  <code>messagingService.messageBuilder()</code> to return an <code>OutboundMessageBuilder</code> object. For better performance, we recommend you use a single <code>OutboundMessageBuilder</code> to create multiple <code>OutboundMessage</code> objects. </p><pre xml:space="preserve">final OutboundMessageBuilder messageBuilder = messagingService.messageBuilder()</pre>
                                                                </li>
                                                                <li value="2">Configure your message with an <code>OutboundMessageBuilder</code> and then call the <code>build()</code> method to return a message object. You can configure message properties using either method below.
			
				<ul><li>Use the <code>Properties</code> interface and the <code>setProperty(name,value)</code> method. The following example shows how to set a custom name-value property on a <code>Properties</code> object, and then configure a message using the <code>fromProperties()</code> method:		<pre xml:space="preserve">
final Properties messageProperties = new Properties();
messageProperties.setProperty("PropertyName", "PropertyValue");
final OutboundMessage message = messageBuilder
	.fromProperties(messageProperties)
	.build(messagePayload);	</pre></li><li>Use the <code>OutboundMessageBuilder</code> interface and the <code>with*()</code> methods. The following example shows how to set Time to Live, Sender ID, and a custom key-value property on a message:<pre xml:space="preserve">
final OutboundMessage myCustomMessage = messageBuilder
	.withTimeToLive(1000)
	.withSenderId("mySenderId")   
	// For a complete list of with*() methods see the <a href="../../API-Developer-Online-Ref-Documentation/pubsubplus-java/index.html" class="link-internal"><span class="mc-variable Product-Names.pubsub_brand_only variable">PubSub+</span> Messaging API Java reference</a>
	.withProperty("PropertyKey", "PropertyValue") 
	.build(messagePayload);</pre></li></ul></li>
                                                            </ol>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">The following code example shows how to create a message builder, set message properties and create a message:</p><pre xml:space="preserve" xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
/* Builder for creation of similarly configured messages */
final OutboundMessageBuilder messageBuilder = messagingService.messageBuilder();
final OutboundMessage message = messageBuilder
    .fromProperties(messageProperties)       // For example TTL, Sender ID, Sequence Number etc.  
    .withExpiration(Instant.now()            // Sets expiration time using the current system time as starting point.
    .toEpochMilli() + 10000L)                // Expire the message in 10 seconds.
    .build("My_Message");                    // Builds the message.</pre>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">For more information about the methods, see the <a href="../../API-Developer-Online-Ref-Documentation/pubsubplus-java/index.html" class="link-internal"><span class="mc-variable Product-Names.pubsub_brand_only variable">PubSub+</span> Messaging API Java reference</a>.</p>
                                                            <h3 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><a name="Setting"></a>Setting a Partition Key</h3>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">You can set a partition key to use partitioned queues. Partitioned Queues is a feature configured on the <span class="mc-variable Product-Names.pubsub_brand_only variable">PubSub+</span> Event Broker that allows you to easily scale the number of consumer applications bound to a queue. A partition key can be set on each message in the publishing application to ensure that all messages with the same partition key are delivered to the same consumer without additional logic in the consumer application. For more information see <a href="../../Messaging/Guaranteed-Msg/Queues.htm#partitioned-queues" class="MCXref xref">Partitioned Queues</a>.</p>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">You can use <code>setProperty(name,value)</code> or  <code>withProperty(key,value)</code> to set a key-value pair on a message using an <code>OutboundMessageBuilder</code>. </p>
                                                            <ul xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                                                <li>
                                                                    <p><code>name/key</code>—The constant <code>MessageUserPropertyConstants.QUEUE_PARTITION_KEY</code> or the string value "JMSXGroupID".</p>
                                                                </li>
                                                                <li>
                                                                    <p><code>value</code>—A string representing the value of your partition key. Client applications set the value at publish time. </p>
                                                                </li>
                                                            </ul>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">The following example sets the partition key <code>value</code> to "Group-0":</p><pre xml:space="preserve" xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
// Using fromProperties() method
final Properties additionalProperties = new Properties();
additionalProperties.setProperty(MessageUserPropertyConstants.QUEUE_PARTITION_KEY, "Group-0");
final OutboundMessage message = messageBuilder
	.fromProperties(additionalProperties)
	.build(payload);

// Using withProperty() method
final OutboundMessage myCustomMessage = messagingService.messageBuilder()
       .withProperty(MessageUserPropertyConstants.QUEUE_PARTITION_KEY, "Group-0")  
       .build(payload);</pre>
                                                            <h2 class="with-rule" xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><a name="Configuring-Back-Pressure"></a>Handling Back-Pressure When Publishing Persistent Messages</h2>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">When you use persistent messaging, the messages are sent to the <span class="mc-variable Product-Names.pubsub_brand_only variable">PubSub+</span> event broker with a topic and may be enqueued on any queue with a matching topic subscription. The event broker then delivers the messages asynchronously to any consumers subscribed to that queue. At the time the client application publishes the persistent message,  the API  queues the message in an internal buffer before it is  sent to the event broker. In ideal conditions, as soon the application publishes a message, the API sends that message to the network, and that message is eventually received by  event broker. It is possible for the client application to publish messages more quickly than the API can send them to the broker due to network  congestion or connectivity issues. This delay can cause the internal buffer to accumulate messages until it reaches its capacity,  preventing the API from storing any more messages. This scenario is referred to as <i>back-pressure</i>. It is important to configure your application to handle situations where back-pressure occurs.</p>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">In the <span class="mc-variable Product-Names.pubsub_brand_only variable">PubSub+</span> Java API, the <code>PersistentMessagePublisherBuilder</code> has three primary  mechanisms to handle back-pressure which you can use:</p>
                                                            <ul xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                                                <li><a href="#reject" class="link-internal">reject messages when a specified limit is reached</a>
                                                                </li>
                                                                <li><a href="#throttle" class="link-internal">throttle the publisher  when a specified limit is reached</a>
                                                                </li>
                                                                <li><a href="#no-limit" class="link-internal">use an unlimited internal buffer (default) </a>
                                                                </li>
                                                            </ul>
                                                            <h3 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"> <a name="reject"></a>Rejecting Messages When a Specified Limit is Reached </h3>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">When back-pressure occurs, you can choose to reject the messages from the client application when a specified limit is reached in the internal buffer. You can use  <code>onBackPressureReject(int bufferCapacity)</code> method to specify a defined buffer capacity for a set number of messages to accumulate. After the specified capacity is reached, it is no longer possible to publish new messages and exceptions are thrown until the buffer has capacity again. On calls to publish,  <code>bufferCapacity</code> must be greater than zero. </p><pre xml:space="preserve" xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">/* Creates an instance of PersistentMessagePublisherBuilder, which is used to create PersistentMessagePublisher objects. */
final PersistentMessagePublisher publisher = messagingService.createPersistentMessagePublisherBuilder()
    .onBackPressureReject(1000)     // Creates a message buffer with space to accommodate 1000 messages, at which point messages are rejected until there is room.
    .build()             // Builds a PersistentMessagePublisher object based on the provided configuration.    
    .start();            // Causes the service to resume regular duties. Before this method is called, the service is considered off-duty.    </pre>
                                                            <h4 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><a name="publisher-readiness-listener"></a>Using a Publisher Readiness Listener</h4>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">We recommend that you use the <code>PublisherReadinessListener</code> interface when you use the <code>onBackPressureReject()</code> method because it lets your application know when there is capacity available in the buffer and it can resume publishing messages. </p>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">The following is an example of registering an event handler using the <code>PublisherReadinessListener</code> interface: </p><pre xml:space="preserve" xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">/* Object that is used with synchronization to ensure that 'ready' event is issued after exception handling once 'publish' is processed */
final Object[] lock = new Object[0];
final PersistentMessagePublisher publisher = messagingService.createPersistentMessagePublisherBuilder()
    .onBackPressureReject(1000)     // Creates a message buffer with space to accommodate 1000 messages, at which point messages are rejected until there is room.
    .build()             // Builds a PersistentMessagePublisher object based on the provided configuration.    
    .start();            // Causes the service to resume regular duties. Before this method is called, the service is considered off-duty.

final PublisherReadinessListener canPublishListener = () -&gt; {
<b>// This code is executed when the publisher is ready to publish again.</b> 
};
publisher.setPublisherReadinessListener(canPublishListener);    // Register listener, usually set once.        
</pre>
                                                            <h3 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"> <a name="throttle"></a>Throttling Publisher When a Specified Limit is Reached</h3>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">You can choose to throttle the publishing application if a specified limit is reached in the internal buffer. The use of throttling is useful&#160;to free capacity to its internal buffers. You can use the  <code>onBackPressureWait(int bufferCapacity)</code> method to set the maximum number of messages that can accumulate in the buffer. When this maximum capacity (<code>bufferCapacity</code>) is reached, the publisher thread pauses and waits for  available capacity in the internal buffer before letting the application publish any more messages.</p>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"> This method should be used when you want the application's publishing requests to take longer if the buffer's capacity has been reached. Using this mechanism gives time for the application to empty the internal buffer. An additional benefit for persistent messaging with this configuration is that the API&#160;does not discard any messages. </p>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">The following shows an example of how to configure the internal buffer to accommodate up to one thousand messages:</p><pre xml:space="preserve" xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">/* Creates an instance of PersistentMessagePublisherBuilder, which is used to create PersistentMessagePublisher objects. */
final PersistentMessagePublisher publisher = messagingService.createPersistentMessagePublisherBuilder()
    .onBackPressureWait(1000)  // Creates a message buffer with space to accommodate 1000 messages, at which point the thread pauses until there is room.
    .build()             // Builds a PersistentMessagePublisher object based on the provided configuration.    
    .start();            // Causes the service to resume regular duties. Before this method is called, the service is considered off-duty.    </pre>
                                                            <h3 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><a name="no-limit"></a>Configuring an Unlimited Internal Buffer </h3>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">The default configuration for the API is  to use an unlimited sized internal buffer for messages. This configuration is not suitable for memory restrictive environments because the buffer is allowed to grow indefinitely, and it can cause out-of-memory errors (or potentially  undefined errors).  This configuration is useful when your infrastructure is made up of several microservices which are short-lived, and can provide publishing redundancy for the unlikely event of an internal queue encountering an out-of-memory scenario. Use of this configuration is also useful because you don't have to write code to handle back-pressure scenarios. </p>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">When you use an unlimited buffer, the Java API&#160;continuously  puts messages on the internal buffer published by the client application. The following example shows an explicit call to the  <code>onBackPressureElastic()</code> method, which is not required because it is the default behavior:</p><pre xml:space="preserve" xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">/* Creates an instance of PersistentMessagePublisherBuilder, which is used to create PersistentMessagePublisher objects. */
final PersistentMessagePublisher publisher = messagingService.createPersistentMessagePublisherBuilder()
    .onBackPressureElastic()  // Creates an unlimited capacity message buffer. 
    .build()             // Builds a PersistentMessagePublisher object based on the provided configuration.    
    .start();            // Causes the service to resume regular duties. Before this method is called, the service is considered off-duty.                    </pre>
                                                            <h2 class="with-rule" xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><a name="Publishing-A-Persistent-Message"></a>Publishing a Persistent Message</h2>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">After you have established a connection to the event broker using a <code>MessagingService</code> object, you can use a <code>PersistentMessagePublisher</code> object to publish persistent messages.</p>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"> A persistent message has the following components: </p>
                                                            <ul xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                                                <li>A topic to publish to (required) </li>
                                                                <li>A message payload (optional) </li>
                                                            </ul>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Persistent message publishing involves the receipt of acknowledgments or <i>publish receipts</i>. Depending on your requirements, your client application can publish as:</p>
                                                            <ul xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                                                <li>   non-blocking, allows your application to perform other functions while the <code>PublishReceiptListener</code> waits for the acknowledgment</li>
                                                                <li>blocking,  waits until an acknowledgment has been received; an acknowledge indicates that the message has been received and persisted by the broker</li>
                                                            </ul>
                                                            <h3 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><a name="non-block-methods"></a>Non-Blocking Methods </h3>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">The following are non-blocking methods:</p>
                                                            <ul xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                                                <li><code>publish(byte[] message, Topic destination)</code>
                                                                </li>
                                                                <li><code>publish(byte[] message, Topic destination, Object userContext)</code>
                                                                </li>
                                                                <li><code>publish(OutboundMessage message, Topic destination)</code>
                                                                </li>
                                                                <li><code>publish(OutboundMessage message, Topic destination, Object userContext)</code>
                                                                </li>
                                                                <li><code>publish(OutboundMessage message, Topic destination, Object userContext, Properties additionalMessageProperties)</code>
                                                                </li>
                                                                <li><code>publish(String message, Topic destination)</code>
                                                                </li>
                                                                <li><code>publish(String message, Topic destination, Object userContext)</code>
                                                                </li>
                                                            </ul>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">For more information about the methods, see the <a href="../../API-Developer-Online-Ref-Documentation/pubsubplus-java/index.html" class="link-internal"><span class="mc-variable Product-Names.pubsub_brand_only variable">PubSub+</span> Messaging API Java reference</a>.</p>
                                                            <h3 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><a name="block-methods"></a>Blocking Methods</h3>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">If you want your publisher to await for an acknowledgment from the broker before returning from the <code>publish()</code> call, you can use the following blocking methods:</p>
                                                            <ul xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                                                <li><code>publishAwaitAcknowledgement(OutboundMessage message, Topic destination, long timeout)</code>
                                                                </li>
                                                                <li><code>publishAwaitAcknowledgement(OutboundMessage message, Topic destination, long timeout, Properties additionalMessageProperties)</code>
                                                                </li>
                                                            </ul>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Either of the preceding methods can be used with a <code>PersistentMessagePublisher</code> object to publish an <code>OutboundMessage</code> to the broker using a topic. This method blocks the main thread until either:</p>
                                                            <ul xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                                                <li>the publisher API receives an acknowledgment from the broker </li>
                                                                <li> the timeout period elapses</li>
                                                            </ul><pre xml:space="preserve" xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">/* A simple example of a blocking publish event for a persistent message. */
final long deliveryConfirmationTimeOutInMilliseconds = 20000L;  // wait at most for 20 seconds before considering that message is not delivered to the broker    
OutboundMessage message = messageBuilder.build("Hello World!");
                    
try {
    publisher.publishAwaitAcknowledgement(messageBuilder.build("Hello World!"),          // Publishing a message, blocking.
    toDestination, deliveryConfirmationTimeOutInMilliseconds);                           // Publish to Topic "toDestination" with timeout value.
        } catch (PubSubPlusClientException.TimeoutException e) {  
        logger.warn(String.format("Timeout for Message %s - %s", message, e)); // Time-out has occurred.
        } catch (PubSubPlusClientException e) { 
        logger.warn(String.format("NACK for Message %s - %s", message, e));    // Message was not spooled on broker queue, a nack is sent.
        } catch (InterruptedException e) {    
        logger.info("Got interrupted, probably shutting down",e);              // Interrupted while waiting for publish confirmation.
        }                </pre>
                                                            <h3 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><a name="user-contexts"></a>User Contexts</h3>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Optionally, you can use <i>user contexts</i> to correlate information for persistent messages to publish receipts in your application. This information is user-specific and is meaningful only to your publishing application and is not sent to the broker. A user context permits you to attach data to the <code>publish()</code> call that can later be retrieved from the publish receipt listener.</p>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">When&#160;you use a user context, it allows you to handle multiple scenarios.   It also allows your application to decide what action to take or how to process the publish receipt based on the context. </p>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">For example, if a non-blocking application has multiple threads to publish persistent messages, each thread can include its identifier as the user context when it publishes a persistent message. The Java API&#160;tracks the user context when specified for each message&#160;and returns the user context as part of the publish receipt when the message is acknowledged or rejected by the event broker. The publishing application can then send the publish receipt to the correct thread that sent the message based on the user context.</p>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">You can set the user context when you publish the message. For example, you use the <code>publish(OutboundMessage message,Topic destination, Object userContext)</code> method, where the user context is specified as type <code>Object</code>.</p>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">The following example shows how to get the user context from a publish receipt:</p><pre xml:space="preserve" xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">/* A simple example of a persistent message publishReceipt */
final OutboundMessage acknowledgedMessage = publishReceipt.getMessage(); // Retrieves message associated with a Receipt.    
final Object processingContext = publishReceipt.getUserContext();        // Corresponding context can be retrieved this way from a publish receipt when provided during message publishing.
</pre>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">If your application is non-blocking, you can also use a persistent message publisher with publish receipt in your callback to log information. For example, you can use non-blocking message publishing and then  send alerts to notify the application&#160;of the status of published messages, such as:</p>
                                                            <ul xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                                                <li> the event broker successfully receives and processes a message</li>
                                                                <li>access control violations (ACL)</li>
                                                                <li> a queue being over quota</li>
                                                                <li> invalid topics / topics with no subscribers</li>
                                                            </ul>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"> The following example shows how the publish receipts are logged using Log4j2 with commands such as <code>logger.warn()</code> and <code>logger.debug()</code>. </p><pre xml:space="preserve" xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">/* listener that processes all delivery confirmations/timeouts for all messages */
final MessagePublishReceiptListener deliveryConfirmationListener = (publishReceipt) -&gt; {
final PubSubPlusClientException e = publishReceipt.getException();
    if (e == null) {                                          // No exception, broker has confirmed a successful publish receipt.
    OutboundMessage outboundMessage = publishReceipt.getMessage();
    logger.debug(String.format("ACK for Message %s", outboundMessage));         // The broker has the message logs an "ack". 
    } else {                                                                    // Negative acknowledgment, broker has not received the message. 
    OutboundMessage outboundMessage = publishReceipt.getMessage();              // Which message was not received. 
    logger.warn(String.format("NACK for Message %s - %s", outboundMessage, e)); // Logs a "nack" or negative acknowledgment. 
    }                                                                      
    };
publisher.setMessagePublishReceiptListener(deliveryConfirmationListener);     // Listen to all delivery confirmations for all messages being sent.
publisher.publish("Hello world!", topicDestination);                          // Publish a message with a String payload.</pre>
                                                            <h2 class="with-rule" xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><a name="Message-Receipts-and-Error-Handling"></a>Acknowledging Messages and Handling Errors</h2>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">A publish receipt is a delivery confirmation that indicates whether or not the event broker has successfully spooled a message on a queue. These publish receipts can indicate success or failure, and are handled by the <code>MessagePublisReceiptListener</code> object. You create a <code>MessagePublishReceiptListener</code> object by calling the <code>setMessagePublishReceiptListener()</code> method. </p>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">The following example shows how to use the  <code>MessagePublishReceiptListener</code> to listen for publish receipts:</p><pre xml:space="preserve" xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
/* listener that processes delivery confirmations / timeouts for all messages */
final MessagePublishReceiptListener deliveryConfirmationListener = (publishReceipt) -&gt; {
final PubSubPlusClientException e = publishReceipt.getException();
    if (e == null) {  // No exception, broker has confirmed receipt.
      <b>// Code to log, handle a successful publishReceipt.</b>     
    } else {         // Negative acknowledgment, broker has not received the message. 
      <b>// Code to log, handle a failed publishReceipt.</b>
            }                                                                      
    };
publisher.setMessagePublishReceiptListener(deliveryConfirmationListener);          // Listen to delivery confirmations for all messages being sent.
publisher.publish("Hello world!", topicDestination);                               // Publish a message with a String payload.        </pre>
                                                            <h3 xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><a name="strategies"></a>Strategies for Handling Publish Receipt Errors</h3>
                                                            <p xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">The following are application-specific strategies you can use to handle receipt errors when publishing. </p>
                                                            <dl xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
                                                                <dt>Wait and Retry</dt>
                                                                <dd>Wait a number of seconds before trying to send the message again. For example, using <code>Thread.sleep(1000)</code> to wait for 1 second before attempting to publish again.</dd>
                                                                <dt>Retry a&#160;Predefined number of Times</dt>
                                                                <dd>      Try to re-publish the message a predefined number of times before dropping it.</dd>
                                                                <dt>Discard the Message</dt>
                                                                <dd>Simply discard messages with failed publish receipts. We don't recommend this strategy if your application cannot tolerate message loss. </dd>
                                                            </dl>
                                                            <p class="Note" xmlns="http://www.madcapsoftware.com/Schemas/MadCap.xsd"> To receive a failed publish receipt when there is no matching subscription, this option must be set for the event broker or <span class="mc-variable Product-Names.broker_cloud_short variable">event broker service</span>. For more information, see <a href="../../Security/Configuring-Client-Profiles.htm#Configur" class="MCXref xref">Handling Guaranteed Messages with No Matches</a> (for <span class="mc-variable Product-Names.broker_appliance_short variable">appliance</span>s and <span class="mc-variable Product-Names.broker_sw_short variable">software event broker</span>s)&#160;or the <b><a href="../../Cloud/client-profiles.htm#configuring-client-profile-settings" class="link-internal">Reject Messages to Sender On No Subscription Match Discard</a></b> (for <span class="mc-variable Product-Names.cloud_product_short variable">PubSub+ Cloud</span>).</p>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="no-print">
                                            <div><a href="#" id="docsFeedbackTrigger" class="docs-issue-collector">Provide feedback</a>
                                            </div>
                                        </div>
                                        <footer class="my-4 pt-4 text-center no-print">
                                            <div class="footer-txt text-center no-print">
                                                <ul class="list-inline ">
                                                    <li class="list-inline-item text-muted"><a href="../../Resources/Documentation-Set.htm" class="doc-set-footer-link MCXref xref xrefdoc-set-footer-link">Documentation Coverage</a>: <span class="mc-variable Variables.DocumentSetNumber variable">2024.09.16.0001</span></li>
                                                    <li class="list-inline-item text-muted">Last Updated: <span class="mc-variable Variables.MonthDayYear variable">September 16, 2024</span></li>
                                                    <li class="list-inline-item text-muted" style="font-size:13px;"> ©  <span class="mc-variable Variables.CompanyNameLegal variable">Solace Corporation</span></li>
                                                </ul>
                                            </div>
                                            <div class="footer-icons">
                                                <ul class="list-inline">
                                                    <li class="list-inline-item"><a href="https://facebook.com/solacedotcom" target="_blank" class="social-media-icon"><img src="../../Resources/Images/Social-Media/facebook_22x21.png" class="Hyperlinked" alt="Facebook" title="Solace Facebook Page" style="width: 22;height: 21;" /></a>
                                                    </li>
                                                    <li class="list-inline-item"><a href="https://www.linkedin.com/company/20219" target="_blank" class="social-media-icon"><img src="../../Resources/Images/Social-Media/LinkedIn_22x21.png" class="Hyperlinked" alt="LinkedIn" title="Solace LinkedIn Page" style="width: 22;height: 21;" /></a>
                                                    </li>
                                                    <li class="list-inline-item"><a href="https://twitter.com/solacedotcom" target="_blank" class="social-media-icon"><img src="../../Resources/Images/Social-Media/Twitter_22x21.png" class="Hyperlinked" alt="Twitter" title="Solace Twitter Feed" style="width: 22;height: 21;" /></a>
                                                    </li>
                                                    <li class="list-inline-item"><a href="https://www.youtube.com/user/SolaceSystems" target="_blank" class="social-media-icon"><img src="../../Resources/Images/Social-Media/youtube_22x21.png" class="Hyperlinked" alt="YouTube" title="Solace YouTube Channel" style="width: 22;height: 21;" /></a>
                                                    </li>
                                                    <li class="list-inline-item"><a href="https://www.instagram.com/solacedotcom/" target="_blank" class="social-media-icon"><img src="../../Resources/Images/Social-Media/instagram_22x21.png" class="Hyperlinked" alt="Instagram" title="Solace Instagram Feed" style="width: 22;height: 21;" /></a>
                                                    </li>
                                                    <li class="list-inline-item"><a href="https://medium.com/solacedotcom" target="_blank" class="social-media-icon"><img src="../../Resources/Images/Social-Media/medium_22x21.png" class="Hyperlinked" alt="Medium" title="Solace Medium Blog" style="width: 22;height: 21;" /></a>
                                                    </li>
                                                </ul>
                                            </div>
                                            <div class="footer_link_menu">
                                                <ul class="link_list">
                                                    <li class="link_list_item"><a href="https://solace.com/products/" target="_blank" class="footer-link">Products</a>
                                                    </li>
                                                    <li class="link_list_item"><a href="https://solace.com/company/" target="_blank" class="footer-link">Company</a>
                                                    </li>
                                                    <li class="link_list_item"><a href="https://www.solace.dev/" target="_blank" class="footer-link">Developers</a>
                                                    </li>
                                                    <li class="link_list_item"><a href="https://solace.com/support/" target="_blank" class="footer-link">Support</a>
                                                    </li>
                                                    <li class="link_list_item"><a href="https://solace.com/contact/" target="_blank" class="footer-link">Contact Us</a>
                                                    </li>
                                                </ul>
                                            </div>
                                        </footer>
                                    </div>
                                    <!-- JIRA issue collector -->
                                    <script>/*<![CDATA[*/// Requires jQuery!
jQuery.ajax({
    url: "https://sol-jira.atlassian.net/s/d41d8cd98f00b204e9800998ecf8427e-T/o2joag/b/24/e73395c53c3b10fde2303f4bf74ffbf6/_/download/batch/com.atlassian.jira.collector.plugin.jira-issue-collector-plugin:issuecollector-embededjs/com.atlassian.jira.collector.plugin.jira-issue-collector-plugin:issuecollector-embededjs.js?locale=en-US&collectorId=076e0808",
    type: "get",
    cache: true,
    dataType: "script"
});
window.ATL_JQ_PAGE_PROPS = {
"triggerFunction": function(showCollectorDialog) {
//Requires that jQuery is available!
$("#docsFeedbackTrigger").click(function(e) {
e.preventDefault();
showCollectorDialog();
});
},
fieldValues: {
recordWebInfo: '1', // field Name
recordWebInfoConsent: ['1'] // field Id
}
};
/*]]>*/</script>
                                    <script src="../../Resources/Scripts/thumbnail.js">
                                    </script>
                                    <!-- Script for Launching offsite links in new tab -->
                                    <script type="text/javascript">/*<![CDATA[*/$("a[href^='http']").attr("target","_blank");/*]]>*/</script>
                                </div>
                            </div>
                        </div>
                    </div><a data-close="true"></a>
                </div>
            </div>
        </div>
    </body>
</html>